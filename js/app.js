/******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ "./node_modules/@firebase/database/dist/index.esm2017.js":
      /*!***************************************************************!*\
  !*** ./node_modules/@firebase/database/dist/index.esm2017.js ***!
  \***************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ DataSnapshot: () => /* binding */ DataSnapshot,
          /* harmony export */ Database: () => /* binding */ Database,
          /* harmony export */ OnDisconnect: () => /* binding */ OnDisconnect,
          /* harmony export */ QueryConstraint: () =>
            /* binding */ QueryConstraint,
          /* harmony export */ TransactionResult: () =>
            /* binding */ TransactionResult,
          /* harmony export */ _QueryImpl: () => /* binding */ QueryImpl,
          /* harmony export */ _QueryParams: () => /* binding */ QueryParams,
          /* harmony export */ _ReferenceImpl: () =>
            /* binding */ ReferenceImpl,
          /* harmony export */ _TEST_ACCESS_forceRestClient: () =>
            /* binding */ forceRestClient,
          /* harmony export */ _TEST_ACCESS_hijackHash: () =>
            /* binding */ hijackHash,
          /* harmony export */ _repoManagerDatabaseFromApp: () =>
            /* binding */ repoManagerDatabaseFromApp,
          /* harmony export */ _setSDKVersion: () =>
            /* binding */ setSDKVersion,
          /* harmony export */ _validatePathString: () =>
            /* binding */ validatePathString,
          /* harmony export */ _validateWritablePath: () =>
            /* binding */ validateWritablePath,
          /* harmony export */ child: () => /* binding */ child,
          /* harmony export */ connectDatabaseEmulator: () =>
            /* binding */ connectDatabaseEmulator,
          /* harmony export */ enableLogging: () => /* binding */ enableLogging,
          /* harmony export */ endAt: () => /* binding */ endAt,
          /* harmony export */ endBefore: () => /* binding */ endBefore,
          /* harmony export */ equalTo: () => /* binding */ equalTo,
          /* harmony export */ forceLongPolling: () =>
            /* binding */ forceLongPolling,
          /* harmony export */ forceWebSockets: () =>
            /* binding */ forceWebSockets,
          /* harmony export */ get: () => /* binding */ get,
          /* harmony export */ getDatabase: () => /* binding */ getDatabase,
          /* harmony export */ goOffline: () => /* binding */ goOffline,
          /* harmony export */ goOnline: () => /* binding */ goOnline,
          /* harmony export */ increment: () => /* binding */ increment,
          /* harmony export */ limitToFirst: () => /* binding */ limitToFirst,
          /* harmony export */ limitToLast: () => /* binding */ limitToLast,
          /* harmony export */ off: () => /* binding */ off,
          /* harmony export */ onChildAdded: () => /* binding */ onChildAdded,
          /* harmony export */ onChildChanged: () =>
            /* binding */ onChildChanged,
          /* harmony export */ onChildMoved: () => /* binding */ onChildMoved,
          /* harmony export */ onChildRemoved: () =>
            /* binding */ onChildRemoved,
          /* harmony export */ onDisconnect: () => /* binding */ onDisconnect,
          /* harmony export */ onValue: () => /* binding */ onValue,
          /* harmony export */ orderByChild: () => /* binding */ orderByChild,
          /* harmony export */ orderByKey: () => /* binding */ orderByKey,
          /* harmony export */ orderByPriority: () =>
            /* binding */ orderByPriority,
          /* harmony export */ orderByValue: () => /* binding */ orderByValue,
          /* harmony export */ push: () => /* binding */ push,
          /* harmony export */ query: () => /* binding */ query,
          /* harmony export */ ref: () => /* binding */ ref,
          /* harmony export */ refFromURL: () => /* binding */ refFromURL,
          /* harmony export */ remove: () => /* binding */ remove,
          /* harmony export */ runTransaction: () =>
            /* binding */ runTransaction,
          /* harmony export */ serverTimestamp: () =>
            /* binding */ serverTimestamp,
          /* harmony export */ set: () => /* binding */ set,
          /* harmony export */ setPriority: () => /* binding */ setPriority,
          /* harmony export */ setWithPriority: () =>
            /* binding */ setWithPriority,
          /* harmony export */ startAfter: () => /* binding */ startAfter,
          /* harmony export */ startAt: () => /* binding */ startAt,
          /* harmony export */ update: () => /* binding */ update,
          /* harmony export */
        });
        /* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );
        /* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! @firebase/logger */ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js"
          );
        /* provided dependency */ var process = __webpack_require__(
          /*! process/browser.js */ "./node_modules/process/browser.js"
          );

        const name = "@firebase/database";
        const version = "0.13.10";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /** The semver (www.semver.org) version of the SDK. */
        let SDK_VERSION = "";
        /**
         * SDK_VERSION should be set before any database instance is created
         * @internal
         */
        function setSDKVersion(version) {
          SDK_VERSION = version;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Wraps a DOM Storage object and:
         * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
         * - prefixes names with "firebase:" to avoid collisions with app data.
         *
         * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
         * and one for localStorage.
         *
         */
        class DOMStorageWrapper {
          /**
           * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
           */
          constructor(domStorage_) {
            this.domStorage_ = domStorage_;
            // Use a prefix to avoid collisions with other stuff saved by the app.
            this.prefix_ = "firebase:";
          }
          /**
           * @param key - The key to save the value under
           * @param value - The value being stored, or null to remove the key.
           */
          set(key, value) {
            if (value == null) {
              this.domStorage_.removeItem(this.prefixedName_(key));
            } else {
              this.domStorage_.setItem(
                this.prefixedName_(key),
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  value
                )
              );
            }
          }
          /**
           * @returns The value that was stored under this key, or null
           */
          get(key) {
            const storedVal = this.domStorage_.getItem(this.prefixedName_(key));
            if (storedVal == null) {
              return null;
            } else {
              return (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.jsonEval)(
                storedVal
              );
            }
          }
          remove(key) {
            this.domStorage_.removeItem(this.prefixedName_(key));
          }
          prefixedName_(name) {
            return this.prefix_ + name;
          }
          toString() {
            return this.domStorage_.toString();
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An in-memory storage implementation that matches the API of DOMStorageWrapper
         * (TODO: create interface for both to implement).
         */
        class MemoryStorage {
          constructor() {
            this.cache_ = {};
            this.isInMemoryStorage = true;
          }
          set(key, value) {
            if (value == null) {
              delete this.cache_[key];
            } else {
              this.cache_[key] = value;
            }
          }
          get(key) {
            if (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                this.cache_,
                key
              )
            ) {
              return this.cache_[key];
            }
            return null;
          }
          remove(key) {
            delete this.cache_[key];
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
         * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
         * to reflect this type
         *
         * @param domStorageName - Name of the underlying storage object
         *   (e.g. 'localStorage' or 'sessionStorage').
         * @returns Turning off type information until a common interface is defined.
         */
        const createStoragefor = function (domStorageName) {
          try {
            // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
            // so it must be inside the try/catch.
            if (
              typeof window !== "undefined" &&
              typeof window[domStorageName] !== "undefined"
            ) {
              // Need to test cache. Just because it's here doesn't mean it works
              const domStorage = window[domStorageName];
              domStorage.setItem("firebase:sentinel", "cache");
              domStorage.removeItem("firebase:sentinel");
              return new DOMStorageWrapper(domStorage);
            }
          } catch (e) { }
          // Failed to create wrapper.  Just return in-memory storage.
          // TODO: log?
          return new MemoryStorage();
        };
        /** A storage object that lasts across sessions */
        const PersistentStorage = createStoragefor("localStorage");
        /** A storage object that only lasts one session */
        const SessionStorage = createStoragefor("sessionStorage");

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const logClient =
          new _firebase_logger__WEBPACK_IMPORTED_MODULE_3__.Logger(
            "@firebase/database"
          );
        /**
         * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
         */
        const LUIDGenerator = (function () {
          let id = 1;
          return function () {
            return id++;
          };
        })();
        /**
         * Sha1 hash of the input string
         * @param str - The string to hash
         * @returns {!string} The resulting hash
         */
        const sha1 = function (str) {
          const utf8Bytes = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringToByteArray)(str);
          const sha1 = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Sha1();
          sha1.update(utf8Bytes);
          const sha1Bytes = sha1.digest();
          return _firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64.encodeByteArray(
            sha1Bytes
          );
        };
        const buildLogMessage_ = function (...varArgs) {
          let message = "";
          for (let i = 0; i < varArgs.length; i++) {
            const arg = varArgs[i];
            if (
              Array.isArray(arg) ||
              (arg &&
                typeof arg === "object" &&
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                typeof arg.length === "number")
            ) {
              message += buildLogMessage_.apply(null, arg);
            } else if (typeof arg === "object") {
              message += (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(arg);
            } else {
              message += arg;
            }
            message += " ";
          }
          return message;
        };
        /**
         * Use this for all debug messages in Firebase.
         */
        let logger = null;
        /**
         * Flag to check for log availability on first log message
         */
        let firstLog_ = true;
        /**
         * The implementation of Firebase.enableLogging (defined here to break dependencies)
         * @param logger_ - A flag to turn on logging, or a custom logger
         * @param persistent - Whether or not to persist logging settings across refreshes
         */
        const enableLogging$1 = function (logger_, persistent) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            !persistent || logger_ === true || logger_ === false,
            "Can't turn on custom loggers persistently."
          );
          if (logger_ === true) {
            logClient.logLevel =
              _firebase_logger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.VERBOSE;
            logger = logClient.log.bind(logClient);
            if (persistent) {
              SessionStorage.set("logging_enabled", true);
            }
          } else if (typeof logger_ === "function") {
            logger = logger_;
          } else {
            logger = null;
            SessionStorage.remove("logging_enabled");
          }
        };
        const log = function (...varArgs) {
          if (firstLog_ === true) {
            firstLog_ = false;
            if (
              logger === null &&
              SessionStorage.get("logging_enabled") === true
            ) {
              enableLogging$1(true);
            }
          }
          if (logger) {
            const message = buildLogMessage_.apply(null, varArgs);
            logger(message);
          }
        };
        const logWrapper = function (prefix) {
          return function (...varArgs) {
            log(prefix, ...varArgs);
          };
        };
        const error = function (...varArgs) {
          const message =
            "FIREBASE INTERNAL ERROR: " + buildLogMessage_(...varArgs);
          logClient.error(message);
        };
        const fatal = function (...varArgs) {
          const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(
            ...varArgs
          )}`;
          logClient.error(message);
          throw new Error(message);
        };
        const warn = function (...varArgs) {
          const message = "FIREBASE WARNING: " + buildLogMessage_(...varArgs);
          logClient.warn(message);
        };
        /**
         * Logs a warning if the containing page uses https. Called when a call to new Firebase
         * does not use https.
         */
        const warnIfPageIsSecure = function () {
          // Be very careful accessing browser globals. Who knows what may or may not exist.
          if (
            typeof window !== "undefined" &&
            window.location &&
            window.location.protocol &&
            window.location.protocol.indexOf("https:") !== -1
          ) {
            warn(
              "Insecure Firebase access from a secure page. " +
              "Please use https in calls to new Firebase()."
            );
          }
        };
        /**
         * Returns true if data is NaN, or +/- Infinity.
         */
        const isInvalidJSONNumber = function (data) {
          return (
            typeof data === "number" &&
            (data !== data || // NaN
              data === Number.POSITIVE_INFINITY ||
              data === Number.NEGATIVE_INFINITY)
          );
        };
        const executeWhenDOMReady = function (fn) {
          if (
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)() ||
            document.readyState === "complete"
          ) {
            fn();
          } else {
            // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
            // fire before onload), but fall back to onload.
            let called = false;
            const wrappedFn = function () {
              if (!document.body) {
                setTimeout(wrappedFn, Math.floor(10));
                return;
              }
              if (!called) {
                called = true;
                fn();
              }
            };
            if (document.addEventListener) {
              document.addEventListener("DOMContentLoaded", wrappedFn, false);
              // fallback to onload.
              window.addEventListener("load", wrappedFn, false);
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            } else if (document.attachEvent) {
              // IE.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              document.attachEvent("onreadystatechange", () => {
                if (document.readyState === "complete") {
                  wrappedFn();
                }
              });
              // fallback to onload.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              window.attachEvent("onload", wrappedFn);
              // jQuery has an extra hack for IE that we could employ (based on
              // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
              // I'm hoping we don't need it.
            }
          }
        };
        /**
         * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
         */
        const MIN_NAME = "[MIN_NAME]";
        /**
         * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
         */
        const MAX_NAME = "[MAX_NAME]";
        /**
         * Compares valid Firebase key names, plus min and max name
         */
        const nameCompare = function (a, b) {
          if (a === b) {
            return 0;
          } else if (a === MIN_NAME || b === MAX_NAME) {
            return -1;
          } else if (b === MIN_NAME || a === MAX_NAME) {
            return 1;
          } else {
            const aAsInt = tryParseInt(a),
              bAsInt = tryParseInt(b);
            if (aAsInt !== null) {
              if (bAsInt !== null) {
                return aAsInt - bAsInt === 0
                  ? a.length - b.length
                  : aAsInt - bAsInt;
              } else {
                return -1;
              }
            } else if (bAsInt !== null) {
              return 1;
            } else {
              return a < b ? -1 : 1;
            }
          }
        };
        /**
         * @returns {!number} comparison result.
         */
        const stringCompare = function (a, b) {
          if (a === b) {
            return 0;
          } else if (a < b) {
            return -1;
          } else {
            return 1;
          }
        };
        const requireKey = function (key, obj) {
          if (obj && key in obj) {
            return obj[key];
          } else {
            throw new Error(
              "Missing required key (" +
              key +
              ") in object: " +
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(obj)
            );
          }
        };
        const ObjectToUniqueKey = function (obj) {
          if (typeof obj !== "object" || obj === null) {
            return (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
              obj
            );
          }
          const keys = [];
          // eslint-disable-next-line guard-for-in
          for (const k in obj) {
            keys.push(k);
          }
          // Export as json, but with the keys sorted.
          keys.sort();
          let key = "{";
          for (let i = 0; i < keys.length; i++) {
            if (i !== 0) {
              key += ",";
            }
            key += (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
              keys[i]
            );
            key += ":";
            key += ObjectToUniqueKey(obj[keys[i]]);
          }
          key += "}";
          return key;
        };
        /**
         * Splits a string into a number of smaller segments of maximum size
         * @param str - The string
         * @param segsize - The maximum number of chars in the string.
         * @returns The string, split into appropriately-sized chunks
         */
        const splitStringBySize = function (str, segsize) {
          const len = str.length;
          if (len <= segsize) {
            return [str];
          }
          const dataSegs = [];
          for (let c = 0; c < len; c += segsize) {
            if (c + segsize > len) {
              dataSegs.push(str.substring(c, len));
            } else {
              dataSegs.push(str.substring(c, c + segsize));
            }
          }
          return dataSegs;
        };
        /**
         * Apply a function to each (key, value) pair in an object or
         * apply a function to each (index, value) pair in an array
         * @param obj - The object or array to iterate over
         * @param fn - The function to apply
         */
        function each(obj, fn) {
          for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
              fn(key, obj[key]);
            }
          }
        }
        /**
         * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
         * I made one modification at the end and removed the NaN / Infinity
         * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
         * @param v - A double
         *
         */
        const doubleToIEEE754String = function (v) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            !isInvalidJSONNumber(v),
            "Invalid JSON number"
          ); // MJL
          const ebits = 11,
            fbits = 52;
          const bias = (1 << (ebits - 1)) - 1;
          let s, e, f, ln, i;
          // Compute sign, exponent, fraction
          // Skip NaN / Infinity handling --MJL.
          if (v === 0) {
            e = 0;
            f = 0;
            s = 1 / v === -Infinity ? 1 : 0;
          } else {
            s = v < 0;
            v = Math.abs(v);
            if (v >= Math.pow(2, 1 - bias)) {
              // Normalized
              ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
              e = ln + bias;
              f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
            } else {
              // Denormalized
              e = 0;
              f = Math.round(v / Math.pow(2, 1 - bias - fbits));
            }
          }
          // Pack sign, exponent, fraction
          const bits = [];
          for (i = fbits; i; i -= 1) {
            bits.push(f % 2 ? 1 : 0);
            f = Math.floor(f / 2);
          }
          for (i = ebits; i; i -= 1) {
            bits.push(e % 2 ? 1 : 0);
            e = Math.floor(e / 2);
          }
          bits.push(s ? 1 : 0);
          bits.reverse();
          const str = bits.join("");
          // Return the data as a hex string. --MJL
          let hexByteString = "";
          for (i = 0; i < 64; i += 8) {
            let hexByte = parseInt(str.substr(i, 8), 2).toString(16);
            if (hexByte.length === 1) {
              hexByte = "0" + hexByte;
            }
            hexByteString = hexByteString + hexByte;
          }
          return hexByteString.toLowerCase();
        };
        /**
         * Used to detect if we're in a Chrome content script (which executes in an
         * isolated environment where long-polling doesn't work).
         */
        const isChromeExtensionContentScript = function () {
          return !!(
            typeof window === "object" &&
            window["chrome"] &&
            window["chrome"]["extension"] &&
            !/^chrome/.test(window.location.href)
          );
        };
        /**
         * Used to detect if we're in a Windows 8 Store app.
         */
        const isWindowsStoreApp = function () {
          // Check for the presence of a couple WinRT globals
          return typeof Windows === "object" && typeof Windows.UI === "object";
        };
        /**
         * Converts a server error code to a Javascript Error
         */
        function errorForServerCode(code, query) {
          let reason = "Unknown Error";
          if (code === "too_big") {
            reason =
              "The data requested exceeds the maximum size " +
              "that can be accessed with a single request.";
          } else if (code === "permission_denied") {
            reason =
              "Client doesn't have permission to access the desired data.";
          } else if (code === "unavailable") {
            reason = "The service is unavailable";
          }
          const error = new Error(
            code + " at " + query._path.toString() + ": " + reason
          );
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          error.code = code.toUpperCase();
          return error;
        }
        /**
         * Used to test for integer-looking strings
         */
        const INTEGER_REGEXP_ = new RegExp("^-?(0*)\\d{1,10}$");
        /**
         * For use in keys, the minimum possible 32-bit integer.
         */
        const INTEGER_32_MIN = -2147483648;
        /**
         * For use in kyes, the maximum possible 32-bit integer.
         */
        const INTEGER_32_MAX = 2147483647;
        /**
         * If the string contains a 32-bit integer, return it.  Else return null.
         */
        const tryParseInt = function (str) {
          if (INTEGER_REGEXP_.test(str)) {
            const intVal = Number(str);
            if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
              return intVal;
            }
          }
          return null;
        };
        /**
         * Helper to run some code but catch any exceptions and re-throw them later.
         * Useful for preventing user callbacks from breaking internal code.
         *
         * Re-throwing the exception from a setTimeout is a little evil, but it's very
         * convenient (we don't have to try to figure out when is a safe point to
         * re-throw it), and the behavior seems reasonable:
         *
         * * If you aren't pausing on exceptions, you get an error in the console with
         *   the correct stack trace.
         * * If you're pausing on all exceptions, the debugger will pause on your
         *   exception and then again when we rethrow it.
         * * If you're only pausing on uncaught exceptions, the debugger will only pause
         *   on us re-throwing it.
         *
         * @param fn - The code to guard.
         */
        const exceptionGuard = function (fn) {
          try {
            fn();
          } catch (e) {
            // Re-throw exception when it's safe.
            setTimeout(() => {
              // It used to be that "throw e" would result in a good console error with
              // relevant context, but as of Chrome 39, you just get the firebase.js
              // file/line number where we re-throw it, which is useless. So we log
              // e.stack explicitly.
              const stack = e.stack || "";
              warn("Exception was thrown by user callback.", stack);
              throw e;
            }, Math.floor(0));
          }
        };
        /**
         * @returns {boolean} true if we think we're currently being crawled.
         */
        const beingCrawled = function () {
          const userAgent =
            (typeof window === "object" &&
              window["navigator"] &&
              window["navigator"]["userAgent"]) ||
            "";
          // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
          // believe to support JavaScript/AJAX rendering.
          // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
          // would have seen the page" is flaky if we don't treat it as a crawler.
          return (
            userAgent.search(
              /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i
            ) >= 0
          );
        };
        /**
         * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
         *
         * It is removed with clearTimeout() as normal.
         *
         * @param fn - Function to run.
         * @param time - Milliseconds to wait before running.
         * @returns The setTimeout() return value.
         */
        const setTimeoutNonBlocking = function (fn, time) {
          const timeout = setTimeout(fn, time);
          // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.
          if (
            typeof timeout === "number" &&
            // @ts-ignore Is only defined in Deno environments.
            typeof Deno !== "undefined" &&
            // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
            Deno["unrefTimer"]
          ) {
            // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
            Deno.unrefTimer(timeout);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
          } else if (typeof timeout === "object" && timeout["unref"]) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            timeout["unref"]();
          }
          return timeout;
        };

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Abstraction around AppCheck's token fetching capabilities.
         */
        class AppCheckTokenProvider {
          constructor(appName_, appCheckProvider) {
            this.appName_ = appName_;
            this.appCheckProvider = appCheckProvider;
            this.appCheck =
              appCheckProvider === null || appCheckProvider === void 0
                ? void 0
                : appCheckProvider.getImmediate({ optional: true });
            if (!this.appCheck) {
              appCheckProvider === null || appCheckProvider === void 0
                ? void 0
                : appCheckProvider
                  .get()
                  .then((appCheck) => (this.appCheck = appCheck));
            }
          }
          getToken(forceRefresh) {
            if (!this.appCheck) {
              return new Promise((resolve, reject) => {
                // Support delayed initialization of FirebaseAppCheck. This allows our
                // customers to initialize the RTDB SDK before initializing Firebase
                // AppCheck and ensures that all requests are authenticated if a token
                // becomes available before the timoeout below expires.
                setTimeout(() => {
                  if (this.appCheck) {
                    this.getToken(forceRefresh).then(resolve, reject);
                  } else {
                    resolve(null);
                  }
                }, 0);
              });
            }
            return this.appCheck.getToken(forceRefresh);
          }
          addTokenChangeListener(listener) {
            var _a;
            (_a = this.appCheckProvider) === null || _a === void 0
              ? void 0
              : _a
                .get()
                .then((appCheck) => appCheck.addTokenListener(listener));
          }
          notifyForInvalidToken() {
            warn(
              `Provided AppCheck credentials for the app named "${this.appName_}" ` +
              "are invalid. This usually indicates your app was not initialized correctly."
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Abstraction around FirebaseApp's token fetching capabilities.
         */
        class FirebaseAuthTokenProvider {
          constructor(appName_, firebaseOptions_, authProvider_) {
            this.appName_ = appName_;
            this.firebaseOptions_ = firebaseOptions_;
            this.authProvider_ = authProvider_;
            this.auth_ = null;
            this.auth_ = authProvider_.getImmediate({ optional: true });
            if (!this.auth_) {
              authProvider_.onInit((auth) => (this.auth_ = auth));
            }
          }
          getToken(forceRefresh) {
            if (!this.auth_) {
              return new Promise((resolve, reject) => {
                // Support delayed initialization of FirebaseAuth. This allows our
                // customers to initialize the RTDB SDK before initializing Firebase
                // Auth and ensures that all requests are authenticated if a token
                // becomes available before the timoeout below expires.
                setTimeout(() => {
                  if (this.auth_) {
                    this.getToken(forceRefresh).then(resolve, reject);
                  } else {
                    resolve(null);
                  }
                }, 0);
              });
            }
            return this.auth_.getToken(forceRefresh).catch((error) => {
              // TODO: Need to figure out all the cases this is raised and whether
              // this makes sense.
              if (error && error.code === "auth/token-not-initialized") {
                log(
                  "Got auth/token-not-initialized error.  Treating as null token."
                );
                return null;
              } else {
                return Promise.reject(error);
              }
            });
          }
          addTokenChangeListener(listener) {
            // TODO: We might want to wrap the listener and call it with no args to
            // avoid a leaky abstraction, but that makes removing the listener harder.
            if (this.auth_) {
              this.auth_.addAuthTokenListener(listener);
            } else {
              this.authProvider_
                .get()
                .then((auth) => auth.addAuthTokenListener(listener));
            }
          }
          removeTokenChangeListener(listener) {
            this.authProvider_
              .get()
              .then((auth) => auth.removeAuthTokenListener(listener));
          }
          notifyForInvalidToken() {
            let errorMessage =
              'Provided authentication credentials for the app named "' +
              this.appName_ +
              '" are invalid. This usually indicates your app was not ' +
              "initialized correctly. ";
            if ("credential" in this.firebaseOptions_) {
              errorMessage +=
                'Make sure the "credential" property provided to initializeApp() ' +
                'is authorized to access the specified "databaseURL" and is from the correct ' +
                "project.";
            } else if ("serviceAccount" in this.firebaseOptions_) {
              errorMessage +=
                'Make sure the "serviceAccount" property provided to initializeApp() ' +
                'is authorized to access the specified "databaseURL" and is from the correct ' +
                "project.";
            } else {
              errorMessage +=
                'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                "initializeApp() match the values provided for your app at " +
                "https://console.firebase.google.com/.";
            }
            warn(errorMessage);
          }
        }
        /* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */
        class EmulatorTokenProvider {
          constructor(accessToken) {
            this.accessToken = accessToken;
          }
          getToken(forceRefresh) {
            return Promise.resolve({
              accessToken: this.accessToken,
            });
          }
          addTokenChangeListener(listener) {
            // Invoke the listener immediately to match the behavior in Firebase Auth
            // (see packages/auth/src/auth.js#L1807)
            listener(this.accessToken);
          }
          removeTokenChangeListener(listener) { }
          notifyForInvalidToken() { }
        }
        /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */
        EmulatorTokenProvider.OWNER = "owner";

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const PROTOCOL_VERSION = "5";
        const VERSION_PARAM = "v";
        const TRANSPORT_SESSION_PARAM = "s";
        const REFERER_PARAM = "r";
        const FORGE_REF = "f";
        // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
        // firebase.corp.google.com
        const FORGE_DOMAIN_RE =
          /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
        const LAST_SESSION_PARAM = "ls";
        const APPLICATION_ID_PARAM = "p";
        const APP_CHECK_TOKEN_PARAM = "ac";
        const WEBSOCKET = "websocket";
        const LONG_POLLING = "long_polling";

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A class that holds metadata about a Repo object
         */
        class RepoInfo {
          /**
           * @param host - Hostname portion of the url for the repo
           * @param secure - Whether or not this repo is accessed over ssl
           * @param namespace - The namespace represented by the repo
           * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
           * @param nodeAdmin - Whether this instance uses Admin SDK credentials
           * @param persistenceKey - Override the default session persistence storage key
           */
          constructor(
            host,
            secure,
            namespace,
            webSocketOnly,
            nodeAdmin = false,
            persistenceKey = "",
            includeNamespaceInQueryParams = false
          ) {
            this.secure = secure;
            this.namespace = namespace;
            this.webSocketOnly = webSocketOnly;
            this.nodeAdmin = nodeAdmin;
            this.persistenceKey = persistenceKey;
            this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
            this._host = host.toLowerCase();
            this._domain = this._host.substr(this._host.indexOf(".") + 1);
            this.internalHost =
              PersistentStorage.get("host:" + host) || this._host;
          }
          isCacheableHost() {
            return this.internalHost.substr(0, 2) === "s-";
          }
          isCustomHost() {
            return (
              this._domain !== "firebaseio.com" &&
              this._domain !== "firebaseio-demo.com"
            );
          }
          get host() {
            return this._host;
          }
          set host(newHost) {
            if (newHost !== this.internalHost) {
              this.internalHost = newHost;
              if (this.isCacheableHost()) {
                PersistentStorage.set("host:" + this._host, this.internalHost);
              }
            }
          }
          toString() {
            let str = this.toURLString();
            if (this.persistenceKey) {
              str += "<" + this.persistenceKey + ">";
            }
            return str;
          }
          toURLString() {
            const protocol = this.secure ? "https://" : "http://";
            const query = this.includeNamespaceInQueryParams
              ? `?ns=${this.namespace}`
              : "";
            return `${protocol}${this.host}/${query}`;
          }
        }
        function repoInfoNeedsQueryParam(repoInfo) {
          return (
            repoInfo.host !== repoInfo.internalHost ||
            repoInfo.isCustomHost() ||
            repoInfo.includeNamespaceInQueryParams
          );
        }
        /**
         * Returns the websocket URL for this repo
         * @param repoInfo - RepoInfo object
         * @param type - of connection
         * @param params - list
         * @returns The URL for this repo
         */
        function repoInfoConnectionURL(repoInfo, type, params) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            typeof type === "string",
            "typeof type must == string"
          );
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            typeof params === "object",
            "typeof params must == object"
          );
          let connURL;
          if (type === WEBSOCKET) {
            connURL =
              (repoInfo.secure ? "wss://" : "ws://") +
              repoInfo.internalHost +
              "/.ws?";
          } else if (type === LONG_POLLING) {
            connURL =
              (repoInfo.secure ? "https://" : "http://") +
              repoInfo.internalHost +
              "/.lp?";
          } else {
            throw new Error("Unknown connection type: " + type);
          }
          if (repoInfoNeedsQueryParam(repoInfo)) {
            params["ns"] = repoInfo.namespace;
          }
          const pairs = [];
          each(params, (key, value) => {
            pairs.push(key + "=" + value);
          });
          return connURL + pairs.join("&");
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Tracks a collection of stats.
         */
        class StatsCollection {
          constructor() {
            this.counters_ = {};
          }
          incrementCounter(name, amount = 1) {
            if (
              !(0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                this.counters_,
                name
              )
            ) {
              this.counters_[name] = 0;
            }
            this.counters_[name] += amount;
          }
          get() {
            return (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepCopy)(
              this.counters_
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const collections = {};
        const reporters = {};
        function statsManagerGetCollection(repoInfo) {
          const hashString = repoInfo.toString();
          if (!collections[hashString]) {
            collections[hashString] = new StatsCollection();
          }
          return collections[hashString];
        }
        function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
          const hashString = repoInfo.toString();
          if (!reporters[hashString]) {
            reporters[hashString] = creatorFunction();
          }
          return reporters[hashString];
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * This class ensures the packets from the server arrive in order
         * This class takes data from the server and ensures it gets passed into the callbacks in order.
         */
        class PacketReceiver {
          /**
           * @param onMessage_
           */
          constructor(onMessage_) {
            this.onMessage_ = onMessage_;
            this.pendingResponses = [];
            this.currentResponseNum = 0;
            this.closeAfterResponse = -1;
            this.onClose = null;
          }
          closeAfter(responseNum, callback) {
            this.closeAfterResponse = responseNum;
            this.onClose = callback;
            if (this.closeAfterResponse < this.currentResponseNum) {
              this.onClose();
              this.onClose = null;
            }
          }
          /**
           * Each message from the server comes with a response number, and an array of data. The responseNumber
           * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
           * browsers will respond in the same order as the requests we sent
           */
          handleResponse(requestNum, data) {
            this.pendingResponses[requestNum] = data;
            while (this.pendingResponses[this.currentResponseNum]) {
              const toProcess = this.pendingResponses[this.currentResponseNum];
              delete this.pendingResponses[this.currentResponseNum];
              for (let i = 0; i < toProcess.length; ++i) {
                if (toProcess[i]) {
                  exceptionGuard(() => {
                    this.onMessage_(toProcess[i]);
                  });
                }
              }
              if (this.currentResponseNum === this.closeAfterResponse) {
                if (this.onClose) {
                  this.onClose();
                  this.onClose = null;
                }
                break;
              }
              this.currentResponseNum++;
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // URL query parameters associated with longpolling
        const FIREBASE_LONGPOLL_START_PARAM = "start";
        const FIREBASE_LONGPOLL_CLOSE_COMMAND = "close";
        const FIREBASE_LONGPOLL_COMMAND_CB_NAME = "pLPCommand";
        const FIREBASE_LONGPOLL_DATA_CB_NAME = "pRTLPCB";
        const FIREBASE_LONGPOLL_ID_PARAM = "id";
        const FIREBASE_LONGPOLL_PW_PARAM = "pw";
        const FIREBASE_LONGPOLL_SERIAL_PARAM = "ser";
        const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = "cb";
        const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = "seg";
        const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = "ts";
        const FIREBASE_LONGPOLL_DATA_PARAM = "d";
        const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = "dframe";
        //Data size constants.
        //TODO: Perf: the maximum length actually differs from browser to browser.
        // We should check what browser we're on and set accordingly.
        const MAX_URL_DATA_SIZE = 1870;
        const SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
        const MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
        /**
         * Keepalive period
         * send a fresh request at minimum every 25 seconds. Opera has a maximum request
         * length of 30 seconds that we can't exceed.
         */
        const KEEPALIVE_REQUEST_INTERVAL = 25000;
        /**
         * How long to wait before aborting a long-polling connection attempt.
         */
        const LP_CONNECT_TIMEOUT = 30000;
        /**
         * This class manages a single long-polling connection.
         */
        class BrowserPollConnection {
          /**
           * @param connId An identifier for this connection, used for logging
           * @param repoInfo The info for the endpoint to send data to.
           * @param applicationId The Firebase App ID for this project.
           * @param appCheckToken The AppCheck token for this client.
           * @param authToken The AuthToken to use for this connection.
           * @param transportSessionId Optional transportSessionid if we are
           * reconnecting for an existing transport session
           * @param lastSessionId Optional lastSessionId if the PersistentConnection has
           * already created a connection previously
           */
          constructor(
            connId,
            repoInfo,
            applicationId,
            appCheckToken,
            authToken,
            transportSessionId,
            lastSessionId
          ) {
            this.connId = connId;
            this.repoInfo = repoInfo;
            this.applicationId = applicationId;
            this.appCheckToken = appCheckToken;
            this.authToken = authToken;
            this.transportSessionId = transportSessionId;
            this.lastSessionId = lastSessionId;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.everConnected_ = false;
            this.log_ = logWrapper(connId);
            this.stats_ = statsManagerGetCollection(repoInfo);
            this.urlFn = (params) => {
              // Always add the token if we have one.
              if (this.appCheckToken) {
                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
              }
              return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
            };
          }
          /**
           * @param onMessage - Callback when messages arrive
           * @param onDisconnect - Callback with connection lost.
           */
          open(onMessage, onDisconnect) {
            this.curSegmentNum = 0;
            this.onDisconnect_ = onDisconnect;
            this.myPacketOrderer = new PacketReceiver(onMessage);
            this.isClosed_ = false;
            this.connectTimeoutTimer_ = setTimeout(() => {
              this.log_("Timed out trying to connect.");
              // Make sure we clear the host cache
              this.onClosed_();
              this.connectTimeoutTimer_ = null;
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(LP_CONNECT_TIMEOUT));
            // Ensure we delay the creation of the iframe until the DOM is loaded.
            executeWhenDOMReady(() => {
              if (this.isClosed_) {
                return;
              }
              //Set up a callback that gets triggered once a connection is set up.
              this.scriptTagHolder = new FirebaseIFrameScriptHolder(
                (...args) => {
                  const [command, arg1, arg2, arg3, arg4] = args;
                  this.incrementIncomingBytes_(args);
                  if (!this.scriptTagHolder) {
                    return; // we closed the connection.
                  }
                  if (this.connectTimeoutTimer_) {
                    clearTimeout(this.connectTimeoutTimer_);
                    this.connectTimeoutTimer_ = null;
                  }
                  this.everConnected_ = true;
                  if (command === FIREBASE_LONGPOLL_START_PARAM) {
                    this.id = arg1;
                    this.password = arg2;
                  } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
                    if (arg1) {
                      // We aren't expecting any more data (other than what the server's already in the process of sending us
                      // through our already open polls), so don't send any more.
                      this.scriptTagHolder.sendNewPolls = false;
                      // arg1 in this case is the last response number sent by the server. We should try to receive
                      // all of the responses up to this one before closing
                      this.myPacketOrderer.closeAfter(arg1, () => {
                        this.onClosed_();
                      });
                    } else {
                      this.onClosed_();
                    }
                  } else {
                    throw new Error(
                      "Unrecognized command received: " + command
                    );
                  }
                },
                (...args) => {
                  const [pN, data] = args;
                  this.incrementIncomingBytes_(args);
                  this.myPacketOrderer.handleResponse(pN, data);
                },
                () => {
                  this.onClosed_();
                },
                this.urlFn
              );
              //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
              //from cache.
              const urlParams = {};
              urlParams[FIREBASE_LONGPOLL_START_PARAM] = "t";
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(
                Math.random() * 100000000
              );
              if (this.scriptTagHolder.uniqueCallbackIdentifier) {
                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =
                  this.scriptTagHolder.uniqueCallbackIdentifier;
              }
              urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
              if (this.transportSessionId) {
                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;
              }
              if (this.lastSessionId) {
                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;
              }
              if (this.applicationId) {
                urlParams[APPLICATION_ID_PARAM] = this.applicationId;
              }
              if (this.appCheckToken) {
                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
              }
              if (
                typeof location !== "undefined" &&
                location.hostname &&
                FORGE_DOMAIN_RE.test(location.hostname)
              ) {
                urlParams[REFERER_PARAM] = FORGE_REF;
              }
              const connectURL = this.urlFn(urlParams);
              this.log_("Connecting via long-poll to " + connectURL);
              this.scriptTagHolder.addTag(connectURL, () => {
                /* do nothing */
              });
            });
          }
          /**
           * Call this when a handshake has completed successfully and we want to consider the connection established
           */
          start() {
            this.scriptTagHolder.startLongPoll(this.id, this.password);
            this.addDisconnectPingFrame(this.id, this.password);
          }
          /**
           * Forces long polling to be considered as a potential transport
           */
          static forceAllow() {
            BrowserPollConnection.forceAllow_ = true;
          }
          /**
           * Forces longpolling to not be considered as a potential transport
           */
          static forceDisallow() {
            BrowserPollConnection.forceDisallow_ = true;
          }
          // Static method, use string literal so it can be accessed in a generic way
          static isAvailable() {
            if ((0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {
              return false;
            } else if (BrowserPollConnection.forceAllow_) {
              return true;
            } else {
              // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
              // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
              return (
                !BrowserPollConnection.forceDisallow_ &&
                typeof document !== "undefined" &&
                document.createElement != null &&
                !isChromeExtensionContentScript() &&
                !isWindowsStoreApp()
              );
            }
          }
          /**
           * No-op for polling
           */
          markConnectionHealthy() { }
          /**
           * Stops polling and cleans up the iframe
           */
          shutdown_() {
            this.isClosed_ = true;
            if (this.scriptTagHolder) {
              this.scriptTagHolder.close();
              this.scriptTagHolder = null;
            }
            //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
            if (this.myDisconnFrame) {
              document.body.removeChild(this.myDisconnFrame);
              this.myDisconnFrame = null;
            }
            if (this.connectTimeoutTimer_) {
              clearTimeout(this.connectTimeoutTimer_);
              this.connectTimeoutTimer_ = null;
            }
          }
          /**
           * Triggered when this transport is closed
           */
          onClosed_() {
            if (!this.isClosed_) {
              this.log_("Longpoll is closing itself");
              this.shutdown_();
              if (this.onDisconnect_) {
                this.onDisconnect_(this.everConnected_);
                this.onDisconnect_ = null;
              }
            }
          }
          /**
           * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
           * that we've left.
           */
          close() {
            if (!this.isClosed_) {
              this.log_("Longpoll is being closed.");
              this.shutdown_();
            }
          }
          /**
           * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
           * broken into chunks (since URLs have a small maximum length).
           * @param data - The JSON data to transmit.
           */
          send(data) {
            const dataStr = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter("bytes_sent", dataStr.length);
            //first, lets get the base64-encoded data
            const base64data = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64Encode)(dataStr);
            //We can only fit a certain amount in each URL, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
            //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
            //of segments so that we can reassemble the packet on the server.
            for (let i = 0; i < dataSegs.length; i++) {
              this.scriptTagHolder.enqueueSegment(
                this.curSegmentNum,
                dataSegs.length,
                dataSegs[i]
              );
              this.curSegmentNum++;
            }
          }
          /**
           * This is how we notify the server that we're leaving.
           * We aren't able to send requests with DHTML on a window close event, but we can
           * trigger XHR requests in some browsers (everything but Opera basically).
           */
          addDisconnectPingFrame(id, pw) {
            if ((0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {
              return;
            }
            this.myDisconnFrame = document.createElement("iframe");
            const urlParams = {};
            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = "t";
            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
            this.myDisconnFrame.src = this.urlFn(urlParams);
            this.myDisconnFrame.style.display = "none";
            document.body.appendChild(this.myDisconnFrame);
          }
          /**
           * Used to track the bytes received by this client
           */
          incrementIncomingBytes_(args) {
            // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
            const bytesReceived = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(args).length;
            this.bytesReceived += bytesReceived;
            this.stats_.incrementCounter("bytes_received", bytesReceived);
          }
        }
        /*********************************************************************************************
         * A wrapper around an iframe that is used as a long-polling script holder.
         *********************************************************************************************/
        class FirebaseIFrameScriptHolder {
          /**
           * @param commandCB - The callback to be called when control commands are recevied from the server.
           * @param onMessageCB - The callback to be triggered when responses arrive from the server.
           * @param onDisconnect - The callback to be triggered when this tag holder is closed
           * @param urlFn - A function that provides the URL of the endpoint to send data to.
           */
          constructor(commandCB, onMessageCB, onDisconnect, urlFn) {
            this.onDisconnect = onDisconnect;
            this.urlFn = urlFn;
            //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
            //problems in some browsers.
            this.outstandingRequests = new Set();
            //A queue of the pending segments waiting for transmission to the server.
            this.pendingSegs = [];
            //A serial number. We use this for two things:
            // 1) A way to ensure the browser doesn't cache responses to polls
            // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
            //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
            //    JSONP code in the order it was added to the iframe.
            this.currentSerial = Math.floor(Math.random() * 100000000);
            // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
            // incoming data from the server that we're waiting for).
            this.sendNewPolls = true;
            if (!(0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {
              //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
              //iframes where we put the long-polling script tags. We have two callbacks:
              //   1) Command Callback - Triggered for control issues, like starting a connection.
              //   2) Message Callback - Triggered when new data arrives.
              this.uniqueCallbackIdentifier = LUIDGenerator();
              window[
                FIREBASE_LONGPOLL_COMMAND_CB_NAME +
                this.uniqueCallbackIdentifier
              ] = commandCB;
              window[
                FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier
              ] = onMessageCB;
              //Create an iframe for us to add script tags to.
              this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
              // Set the iframe's contents.
              let script = "";
              // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
              // for ie9, but ie8 needs to do it again in the document itself.
              if (
                this.myIFrame.src &&
                this.myIFrame.src.substr(0, "javascript:".length) ===
                "javascript:"
              ) {
                const currentDomain = document.domain;
                script =
                  '<script>document.domain="' + currentDomain + '";</script>';
              }
              const iframeContents = "<html><body>" + script + "</body></html>";
              try {
                this.myIFrame.doc.open();
                this.myIFrame.doc.write(iframeContents);
                this.myIFrame.doc.close();
              } catch (e) {
                log("frame writing exception");
                if (e.stack) {
                  log(e.stack);
                }
                log(e);
              }
            } else {
              this.commandCB = commandCB;
              this.onMessageCB = onMessageCB;
            }
          }
          /**
           * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
           * actually use.
           */
          static createIFrame_() {
            const iframe = document.createElement("iframe");
            iframe.style.display = "none";
            // This is necessary in order to initialize the document inside the iframe
            if (document.body) {
              document.body.appendChild(iframe);
              try {
                // If document.domain has been modified in IE, this will throw an error, and we need to set the
                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                const a = iframe.contentWindow.document;
                if (!a) {
                  // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                  log("No IE domain setting required");
                }
              } catch (e) {
                const domain = document.domain;
                iframe.src =
                  "javascript:void((function(){document.open();document.domain='" +
                  domain +
                  "';document.close();})())";
              }
            } else {
              // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
              // never gets hit.
              throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
            }
            // Get the document of the iframe in a browser-specific way.
            if (iframe.contentDocument) {
              iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
            } else if (iframe.contentWindow) {
              iframe.doc = iframe.contentWindow.document; // Internet Explorer
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            } else if (iframe.document) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              iframe.doc = iframe.document; //others?
            }
            return iframe;
          }
          /**
           * Cancel all outstanding queries and remove the frame.
           */
          close() {
            //Mark this iframe as dead, so no new requests are sent.
            this.alive = false;
            if (this.myIFrame) {
              //We have to actually remove all of the html inside this iframe before removing it from the
              //window, or IE will continue loading and executing the script tags we've already added, which
              //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
              this.myIFrame.doc.body.innerHTML = "";
              setTimeout(() => {
                if (this.myIFrame !== null) {
                  document.body.removeChild(this.myIFrame);
                  this.myIFrame = null;
                }
              }, Math.floor(0));
            }
            // Protect from being called recursively.
            const onDisconnect = this.onDisconnect;
            if (onDisconnect) {
              this.onDisconnect = null;
              onDisconnect();
            }
          }
          /**
           * Actually start the long-polling session by adding the first script tag(s) to the iframe.
           * @param id - The ID of this connection
           * @param pw - The password for this connection
           */
          startLongPoll(id, pw) {
            this.myID = id;
            this.myPW = pw;
            this.alive = true;
            //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
            while (this.newRequest_()) { }
          }
          /**
           * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
           * too many outstanding requests and we are still alive.
           *
           * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
           * needed.
           */
          newRequest_() {
            // We keep one outstanding request open all the time to receive data, but if we need to send data
            // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
            // close the old request.
            if (
              this.alive &&
              this.sendNewPolls &&
              this.outstandingRequests.size <
              (this.pendingSegs.length > 0 ? 2 : 1)
            ) {
              //construct our url
              this.currentSerial++;
              const urlParams = {};
              urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
              urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
              let theURL = this.urlFn(urlParams);
              //Now add as much data as we can.
              let curDataString = "";
              let i = 0;
              while (this.pendingSegs.length > 0) {
                //first, lets see if the next segment will fit.
                const nextSeg = this.pendingSegs[0];
                if (
                  nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=
                  MAX_URL_DATA_SIZE
                ) {
                  //great, the segment will fit. Lets append it.
                  const theSeg = this.pendingSegs.shift();
                  curDataString =
                    curDataString +
                    "&" +
                    FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                    i +
                    "=" +
                    theSeg.seg +
                    "&" +
                    FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                    i +
                    "=" +
                    theSeg.ts +
                    "&" +
                    FIREBASE_LONGPOLL_DATA_PARAM +
                    i +
                    "=" +
                    theSeg.d;
                  i++;
                } else {
                  break;
                }
              }
              theURL = theURL + curDataString;
              this.addLongPollTag_(theURL, this.currentSerial);
              return true;
            } else {
              return false;
            }
          }
          /**
           * Queue a packet for transmission to the server.
           * @param segnum - A sequential id for this packet segment used for reassembly
           * @param totalsegs - The total number of segments in this packet
           * @param data - The data for this segment.
           */
          enqueueSegment(segnum, totalsegs, data) {
            //add this to the queue of segments to send.
            this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
            //send the data immediately if there isn't already data being transmitted, unless
            //startLongPoll hasn't been called yet.
            if (this.alive) {
              this.newRequest_();
            }
          }
          /**
           * Add a script tag for a regular long-poll request.
           * @param url - The URL of the script tag.
           * @param serial - The serial number of the request.
           */
          addLongPollTag_(url, serial) {
            //remember that we sent this request.
            this.outstandingRequests.add(serial);
            const doNewRequest = () => {
              this.outstandingRequests.delete(serial);
              this.newRequest_();
            };
            // If this request doesn't return on its own accord (by the server sending us some data), we'll
            // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
            const keepaliveTimeout = setTimeout(
              doNewRequest,
              Math.floor(KEEPALIVE_REQUEST_INTERVAL)
            );
            const readyStateCB = () => {
              // Request completed.  Cancel the keepalive.
              clearTimeout(keepaliveTimeout);
              // Trigger a new request so we can continue receiving data.
              doNewRequest();
            };
            this.addTag(url, readyStateCB);
          }
          /**
           * Add an arbitrary script tag to the iframe.
           * @param url - The URL for the script tag source.
           * @param loadCB - A callback to be triggered once the script has loaded.
           */
          addTag(url, loadCB) {
            if ((0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              this.doNodeLongPoll(url, loadCB);
            } else {
              setTimeout(() => {
                try {
                  // if we're already closed, don't add this poll
                  if (!this.sendNewPolls) {
                    return;
                  }
                  const newScript = this.myIFrame.doc.createElement("script");
                  newScript.type = "text/javascript";
                  newScript.async = true;
                  newScript.src = url;
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  newScript.onload = newScript.onreadystatechange =
                    function () {
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      const rstate = newScript.readyState;
                      if (
                        !rstate ||
                        rstate === "loaded" ||
                        rstate === "complete"
                      ) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript.onload = newScript.onreadystatechange = null;
                        if (newScript.parentNode) {
                          newScript.parentNode.removeChild(newScript);
                        }
                        loadCB();
                      }
                    };
                  newScript.onerror = () => {
                    log("Long-poll script failed to load: " + url);
                    this.sendNewPolls = false;
                    this.close();
                  };
                  this.myIFrame.doc.body.appendChild(newScript);
                } catch (e) {
                  // TODO: we should make this error visible somehow
                }
              }, Math.floor(1));
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const WEBSOCKET_MAX_FRAME_SIZE = 16384;
        const WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
        let WebSocketImpl = null;
        if (typeof MozWebSocket !== "undefined") {
          WebSocketImpl = MozWebSocket;
        } else if (typeof WebSocket !== "undefined") {
          WebSocketImpl = WebSocket;
        }
        /**
         * Create a new websocket connection with the given callbacks.
         */
        class WebSocketConnection {
          /**
           * @param connId identifier for this transport
           * @param repoInfo The info for the websocket endpoint.
           * @param applicationId The Firebase App ID for this project.
           * @param appCheckToken The App Check Token for this client.
           * @param authToken The Auth Token for this client.
           * @param transportSessionId Optional transportSessionId if this is connecting
           * to an existing transport session
           * @param lastSessionId Optional lastSessionId if there was a previous
           * connection
           */
          constructor(
            connId,
            repoInfo,
            applicationId,
            appCheckToken,
            authToken,
            transportSessionId,
            lastSessionId
          ) {
            this.connId = connId;
            this.applicationId = applicationId;
            this.appCheckToken = appCheckToken;
            this.authToken = authToken;
            this.keepaliveTimer = null;
            this.frames = null;
            this.totalFrames = 0;
            this.bytesSent = 0;
            this.bytesReceived = 0;
            this.log_ = logWrapper(this.connId);
            this.stats_ = statsManagerGetCollection(repoInfo);
            this.connURL = WebSocketConnection.connectionURL_(
              repoInfo,
              transportSessionId,
              lastSessionId,
              appCheckToken,
              applicationId
            );
            this.nodeAdmin = repoInfo.nodeAdmin;
          }
          /**
           * @param repoInfo - The info for the websocket endpoint.
           * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
           *                                         session
           * @param lastSessionId - Optional lastSessionId if there was a previous connection
           * @returns connection url
           */
          static connectionURL_(
            repoInfo,
            transportSessionId,
            lastSessionId,
            appCheckToken,
            applicationId
          ) {
            const urlParams = {};
            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
            if (
              !(0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)() &&
              typeof location !== "undefined" &&
              location.hostname &&
              FORGE_DOMAIN_RE.test(location.hostname)
            ) {
              urlParams[REFERER_PARAM] = FORGE_REF;
            }
            if (transportSessionId) {
              urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
            }
            if (lastSessionId) {
              urlParams[LAST_SESSION_PARAM] = lastSessionId;
            }
            if (appCheckToken) {
              urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
            }
            if (applicationId) {
              urlParams[APPLICATION_ID_PARAM] = applicationId;
            }
            return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
          }
          /**
           * @param onMessage - Callback when messages arrive
           * @param onDisconnect - Callback with connection lost.
           */
          open(onMessage, onDisconnect) {
            this.onDisconnect = onDisconnect;
            this.onMessage = onMessage;
            this.log_("Websocket connecting to " + this.connURL);
            this.everConnected_ = false;
            // Assume failure until proven otherwise.
            PersistentStorage.set("previous_websocket_failure", true);
            try {
              let options;
              if (
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()
              ) {
                const device = this.nodeAdmin ? "AdminNode" : "Node";
                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                options = {
                  headers: {
                    "User-Agent": `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,
                    "X-Firebase-GMPID": this.applicationId || "",
                  },
                };
                // If using Node with admin creds, AppCheck-related checks are unnecessary.
                // Note that we send the credentials here even if they aren't admin credentials, which is
                // not a problem.
                // Note that this header is just used to bypass appcheck, and the token should still be sent
                // through the websocket connection once it is established.
                if (this.authToken) {
                  options.headers["Authorization"] = `Bearer ${this.authToken}`;
                }
                if (this.appCheckToken) {
                  options.headers["X-Firebase-AppCheck"] = this.appCheckToken;
                }
                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                const env = process["env"];
                const proxy =
                  this.connURL.indexOf("wss://") === 0
                    ? env["HTTPS_PROXY"] || env["https_proxy"]
                    : env["HTTP_PROXY"] || env["http_proxy"];
                if (proxy) {
                  options["proxy"] = { origin: proxy };
                }
              }
              this.mySock = new WebSocketImpl(this.connURL, [], options);
            } catch (e) {
              this.log_("Error instantiating WebSocket.");
              const error = e.message || e.data;
              if (error) {
                this.log_(error);
              }
              this.onClosed_();
              return;
            }
            this.mySock.onopen = () => {
              this.log_("Websocket connected.");
              this.everConnected_ = true;
            };
            this.mySock.onclose = () => {
              this.log_("Websocket connection was disconnected.");
              this.mySock = null;
              this.onClosed_();
            };
            this.mySock.onmessage = (m) => {
              this.handleIncomingFrame(m);
            };
            this.mySock.onerror = (e) => {
              this.log_("WebSocket error.  Closing connection.");
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const error = e.message || e.data;
              if (error) {
                this.log_(error);
              }
              this.onClosed_();
            };
          }
          /**
           * No-op for websockets, we don't need to do anything once the connection is confirmed as open
           */
          start() { }
          static forceDisallow() {
            WebSocketConnection.forceDisallow_ = true;
          }
          static isAvailable() {
            let isOldAndroid = false;
            if (typeof navigator !== "undefined" && navigator.userAgent) {
              const oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
              const oldAndroidMatch =
                navigator.userAgent.match(oldAndroidRegex);
              if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                  isOldAndroid = true;
                }
              }
            }
            return (
              !isOldAndroid &&
              WebSocketImpl !== null &&
              !WebSocketConnection.forceDisallow_
            );
          }
          /**
           * Returns true if we previously failed to connect with this transport.
           */
          static previouslyFailed() {
            // If our persistent storage is actually only in-memory storage,
            // we default to assuming that it previously failed to be safe.
            return (
              PersistentStorage.isInMemoryStorage ||
              PersistentStorage.get("previous_websocket_failure") === true
            );
          }
          markConnectionHealthy() {
            PersistentStorage.remove("previous_websocket_failure");
          }
          appendFrame_(data) {
            this.frames.push(data);
            if (this.frames.length === this.totalFrames) {
              const fullMess = this.frames.join("");
              this.frames = null;
              const jsonMess = (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.jsonEval)(fullMess);
              //handle the message
              this.onMessage(jsonMess);
            }
          }
          /**
           * @param frameCount - The number of frames we are expecting from the server
           */
          handleNewFrameCount_(frameCount) {
            this.totalFrames = frameCount;
            this.frames = [];
          }
          /**
           * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
           * @returns Any remaining data to be process, or null if there is none
           */
          extractFrameCount_(data) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.frames === null,
              "We already have a frame buffer"
            );
            // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
            // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
            if (data.length <= 6) {
              const frameCount = Number(data);
              if (!isNaN(frameCount)) {
                this.handleNewFrameCount_(frameCount);
                return null;
              }
            }
            this.handleNewFrameCount_(1);
            return data;
          }
          /**
           * Process a websocket frame that has arrived from the server.
           * @param mess - The frame data
           */
          handleIncomingFrame(mess) {
            if (this.mySock === null) {
              return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
            }
            const data = mess["data"];
            this.bytesReceived += data.length;
            this.stats_.incrementCounter("bytes_received", data.length);
            this.resetKeepAlive();
            if (this.frames !== null) {
              // we're buffering
              this.appendFrame_(data);
            } else {
              // try to parse out a frame count, otherwise, assume 1 and process it
              const remainingData = this.extractFrameCount_(data);
              if (remainingData !== null) {
                this.appendFrame_(remainingData);
              }
            }
          }
          /**
           * Send a message to the server
           * @param data - The JSON object to transmit
           */
          send(data) {
            this.resetKeepAlive();
            const dataStr = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(data);
            this.bytesSent += dataStr.length;
            this.stats_.incrementCounter("bytes_sent", dataStr.length);
            //We can only fit a certain amount in each websocket frame, so we need to split this request
            //up into multiple pieces if it doesn't fit in one request.
            const dataSegs = splitStringBySize(
              dataStr,
              WEBSOCKET_MAX_FRAME_SIZE
            );
            //Send the length header
            if (dataSegs.length > 1) {
              this.sendString_(String(dataSegs.length));
            }
            //Send the actual data in segments.
            for (let i = 0; i < dataSegs.length; i++) {
              this.sendString_(dataSegs[i]);
            }
          }
          shutdown_() {
            this.isClosed_ = true;
            if (this.keepaliveTimer) {
              clearInterval(this.keepaliveTimer);
              this.keepaliveTimer = null;
            }
            if (this.mySock) {
              this.mySock.close();
              this.mySock = null;
            }
          }
          onClosed_() {
            if (!this.isClosed_) {
              this.log_("WebSocket is closing itself");
              this.shutdown_();
              // since this is an internal close, trigger the close listener
              if (this.onDisconnect) {
                this.onDisconnect(this.everConnected_);
                this.onDisconnect = null;
              }
            }
          }
          /**
           * External-facing close handler.
           * Close the websocket and kill the connection.
           */
          close() {
            if (!this.isClosed_) {
              this.log_("WebSocket is being closed");
              this.shutdown_();
            }
          }
          /**
           * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
           * the last activity.
           */
          resetKeepAlive() {
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = setInterval(() => {
              //If there has been no websocket activity for a while, send a no-op
              if (this.mySock) {
                this.sendString_("0");
              }
              this.resetKeepAlive();
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
          }
          /**
           * Send a string over the websocket.
           *
           * @param str - String to send.
           */
          sendString_(str) {
            // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
            // calls for some unknown reason.  We treat these as an error and disconnect.
            // See https://app.asana.com/0/58926111402292/68021340250410
            try {
              this.mySock.send(str);
            } catch (e) {
              this.log_(
                "Exception thrown from WebSocket.send():",
                e.message || e.data,
                "Closing connection."
              );
              setTimeout(this.onClosed_.bind(this), 0);
            }
          }
        }
        /**
         * Number of response before we consider the connection "healthy."
         */
        WebSocketConnection.responsesRequiredToBeHealthy = 2;
        /**
         * Time to wait for the connection te become healthy before giving up.
         */
        WebSocketConnection.healthyTimeout = 30000;

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Currently simplistic, this class manages what transport a Connection should use at various stages of its
         * lifecycle.
         *
         * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
         * they are available.
         */
        class TransportManager {
          /**
           * @param repoInfo - Metadata around the namespace we're connecting to
           */
          constructor(repoInfo) {
            this.initTransports_(repoInfo);
          }
          static get ALL_TRANSPORTS() {
            return [BrowserPollConnection, WebSocketConnection];
          }
          /**
           * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after
           * TransportManager has already set up transports_
           */
          static get IS_TRANSPORT_INITIALIZED() {
            return this.globalTransportInitialized_;
          }
          initTransports_(repoInfo) {
            const isWebSocketsAvailable =
              WebSocketConnection && WebSocketConnection["isAvailable"]();
            let isSkipPollConnection =
              isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
            if (repoInfo.webSocketOnly) {
              if (!isWebSocketsAvailable) {
                warn(
                  "wss:// URL used, but browser isn't known to support websockets.  Trying anyway."
                );
              }
              isSkipPollConnection = true;
            }
            if (isSkipPollConnection) {
              this.transports_ = [WebSocketConnection];
            } else {
              const transports = (this.transports_ = []);
              for (const transport of TransportManager.ALL_TRANSPORTS) {
                if (transport && transport["isAvailable"]()) {
                  transports.push(transport);
                }
              }
              TransportManager.globalTransportInitialized_ = true;
            }
          }
          /**
           * @returns The constructor for the initial transport to use
           */
          initialTransport() {
            if (this.transports_.length > 0) {
              return this.transports_[0];
            } else {
              throw new Error("No transports available");
            }
          }
          /**
           * @returns The constructor for the next transport, or null
           */
          upgradeTransport() {
            if (this.transports_.length > 1) {
              return this.transports_[1];
            } else {
              return null;
            }
          }
        }
        // Keeps track of whether the TransportManager has already chosen a transport to use
        TransportManager.globalTransportInitialized_ = false;

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // Abort upgrade attempt if it takes longer than 60s.
        const UPGRADE_TIMEOUT = 60000;
        // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
        // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
        const DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
        // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
        // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
        // but we've sent/received enough bytes, we don't cancel the connection.
        const BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
        const BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
        const MESSAGE_TYPE = "t";
        const MESSAGE_DATA = "d";
        const CONTROL_SHUTDOWN = "s";
        const CONTROL_RESET = "r";
        const CONTROL_ERROR = "e";
        const CONTROL_PONG = "o";
        const SWITCH_ACK = "a";
        const END_TRANSMISSION = "n";
        const PING = "p";
        const SERVER_HELLO = "h";
        /**
         * Creates a new real-time connection to the server using whichever method works
         * best in the current browser.
         */
        class Connection {
          /**
           * @param id - an id for this connection
           * @param repoInfo_ - the info for the endpoint to connect to
           * @param applicationId_ - the Firebase App ID for this project
           * @param appCheckToken_ - The App Check Token for this device.
           * @param authToken_ - The auth token for this session.
           * @param onMessage_ - the callback to be triggered when a server-push message arrives
           * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
           * @param onDisconnect_ - the callback to be triggered when a connection was lost
           * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
           * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
           */
          constructor(
            id,
            repoInfo_,
            applicationId_,
            appCheckToken_,
            authToken_,
            onMessage_,
            onReady_,
            onDisconnect_,
            onKill_,
            lastSessionId
          ) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.applicationId_ = applicationId_;
            this.appCheckToken_ = appCheckToken_;
            this.authToken_ = authToken_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0 /* CONNECTING */;
            this.log_ = logWrapper("c:" + this.id + ":");
            this.transportManager_ = new TransportManager(repoInfo_);
            this.log_("Connection created");
            this.start_();
          }
          /**
           * Starts a connection attempt
           */
          start_() {
            const conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(
              this.nextTransportId_(),
              this.repoInfo_,
              this.applicationId_,
              this.appCheckToken_,
              this.authToken_,
              null,
              this.lastSessionId
            );
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.primaryResponsesRequired_ =
              conn["responsesRequiredToBeHealthy"] || 0;
            const onMessageReceived = this.connReceiver_(this.conn_);
            const onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            /*
             * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
             * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
             * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
             * still have the context of your originating frame.
             */
            setTimeout(() => {
              // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
              this.conn_ &&
                this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            const healthyTimeoutMS = conn["healthyTimeout"] || 0;
            if (healthyTimeoutMS > 0) {
              this.healthyTimeout_ = setTimeoutNonBlocking(() => {
                this.healthyTimeout_ = null;
                if (!this.isHealthy_) {
                  if (
                    this.conn_ &&
                    this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE
                  ) {
                    this.log_(
                      "Connection exceeded healthy timeout but has received " +
                      this.conn_.bytesReceived +
                      " bytes.  Marking connection healthy."
                    );
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                  } else if (
                    this.conn_ &&
                    this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE
                  ) {
                    this.log_(
                      "Connection exceeded healthy timeout but has sent " +
                      this.conn_.bytesSent +
                      " bytes.  Leaving connection alive."
                    );
                    // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                    // the server.
                  } else {
                    this.log_("Closing unhealthy connection after timeout.");
                    this.close();
                  }
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
              }, Math.floor(healthyTimeoutMS));
            }
          }
          nextTransportId_() {
            return "c:" + this.id + ":" + this.connectionCount++;
          }
          disconnReceiver_(conn) {
            return (everConnected) => {
              if (conn === this.conn_) {
                this.onConnectionLost_(everConnected);
              } else if (conn === this.secondaryConn_) {
                this.log_("Secondary connection lost.");
                this.onSecondaryConnectionLost_();
              } else {
                this.log_("closing an old connection");
              }
            };
          }
          connReceiver_(conn) {
            return (message) => {
              if (this.state_ !== 2 /* DISCONNECTED */) {
                if (conn === this.rx_) {
                  this.onPrimaryMessageReceived_(message);
                } else if (conn === this.secondaryConn_) {
                  this.onSecondaryMessageReceived_(message);
                } else {
                  this.log_("message on old connection");
                }
              }
            };
          }
          /**
           * @param dataMsg - An arbitrary data message to be sent to the server
           */
          sendRequest(dataMsg) {
            // wrap in a data message envelope and send it on
            const msg = { t: "d", d: dataMsg };
            this.sendData_(msg);
          }
          tryCleanupConnection() {
            if (
              this.tx_ === this.secondaryConn_ &&
              this.rx_ === this.secondaryConn_
            ) {
              this.log_(
                "cleaning up and promoting a connection: " +
                this.secondaryConn_.connId
              );
              this.conn_ = this.secondaryConn_;
              this.secondaryConn_ = null;
              // the server will shutdown the old connection
            }
          }
          onSecondaryControl_(controlData) {
            if (MESSAGE_TYPE in controlData) {
              const cmd = controlData[MESSAGE_TYPE];
              if (cmd === SWITCH_ACK) {
                this.upgradeIfSecondaryHealthy_();
              } else if (cmd === CONTROL_RESET) {
                // Most likely the session wasn't valid. Abandon the switch attempt
                this.log_("Got a reset on secondary, closing it");
                this.secondaryConn_.close();
                // If we were already using this connection for something, than we need to fully close
                if (
                  this.tx_ === this.secondaryConn_ ||
                  this.rx_ === this.secondaryConn_
                ) {
                  this.close();
                }
              } else if (cmd === CONTROL_PONG) {
                this.log_("got pong on secondary.");
                this.secondaryResponsesRequired_--;
                this.upgradeIfSecondaryHealthy_();
              }
            }
          }
          onSecondaryMessageReceived_(parsedData) {
            const layer = requireKey("t", parsedData);
            const data = requireKey("d", parsedData);
            if (layer === "c") {
              this.onSecondaryControl_(data);
            } else if (layer === "d") {
              // got a data message, but we're still second connection. Need to buffer it up
              this.pendingDataMessages.push(data);
            } else {
              throw new Error("Unknown protocol layer: " + layer);
            }
          }
          upgradeIfSecondaryHealthy_() {
            if (this.secondaryResponsesRequired_ <= 0) {
              this.log_("Secondary connection is healthy.");
              this.isHealthy_ = true;
              this.secondaryConn_.markConnectionHealthy();
              this.proceedWithUpgrade_();
            } else {
              // Send a ping to make sure the connection is healthy.
              this.log_("sending ping on secondary.");
              this.secondaryConn_.send({ t: "c", d: { t: PING, d: {} } });
            }
          }
          proceedWithUpgrade_() {
            // tell this connection to consider itself open
            this.secondaryConn_.start();
            // send ack
            this.log_("sending client ack on secondary");
            this.secondaryConn_.send({ t: "c", d: { t: SWITCH_ACK, d: {} } });
            // send end packet on primary transport, switch to sending on this one
            // can receive on this one, buffer responses until end received on primary transport
            this.log_("Ending transmission on primary");
            this.conn_.send({ t: "c", d: { t: END_TRANSMISSION, d: {} } });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
          }
          onPrimaryMessageReceived_(parsedData) {
            // Must refer to parsedData properties in quotes, so closure doesn't touch them.
            const layer = requireKey("t", parsedData);
            const data = requireKey("d", parsedData);
            if (layer === "c") {
              this.onControl_(data);
            } else if (layer === "d") {
              this.onDataMessage_(data);
            }
          }
          onDataMessage_(message) {
            this.onPrimaryResponse_();
            // We don't do anything with data messages, just kick them up a level
            this.onMessage_(message);
          }
          onPrimaryResponse_() {
            if (!this.isHealthy_) {
              this.primaryResponsesRequired_--;
              if (this.primaryResponsesRequired_ <= 0) {
                this.log_("Primary connection is healthy.");
                this.isHealthy_ = true;
                this.conn_.markConnectionHealthy();
              }
            }
          }
          onControl_(controlData) {
            const cmd = requireKey(MESSAGE_TYPE, controlData);
            if (MESSAGE_DATA in controlData) {
              const payload = controlData[MESSAGE_DATA];
              if (cmd === SERVER_HELLO) {
                this.onHandshake_(payload);
              } else if (cmd === END_TRANSMISSION) {
                this.log_("recvd end transmission on primary");
                this.rx_ = this.secondaryConn_;
                for (let i = 0; i < this.pendingDataMessages.length; ++i) {
                  this.onDataMessage_(this.pendingDataMessages[i]);
                }
                this.pendingDataMessages = [];
                this.tryCleanupConnection();
              } else if (cmd === CONTROL_SHUTDOWN) {
                // This was previously the 'onKill' callback passed to the lower-level connection
                // payload in this case is the reason for the shutdown. Generally a human-readable error
                this.onConnectionShutdown_(payload);
              } else if (cmd === CONTROL_RESET) {
                // payload in this case is the host we should contact
                this.onReset_(payload);
              } else if (cmd === CONTROL_ERROR) {
                error("Server Error: " + payload);
              } else if (cmd === CONTROL_PONG) {
                this.log_("got pong on primary.");
                this.onPrimaryResponse_();
                this.sendPingOnPrimaryIfNecessary_();
              } else {
                error("Unknown control packet command: " + cmd);
              }
            }
          }
          /**
           * @param handshake - The handshake data returned from the server
           */
          onHandshake_(handshake) {
            const timestamp = handshake.ts;
            const version = handshake.v;
            const host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.host = host;
            // if we've already closed the connection, then don't bother trying to progress further
            if (this.state_ === 0 /* CONNECTING */) {
              this.conn_.start();
              this.onConnectionEstablished_(this.conn_, timestamp);
              if (PROTOCOL_VERSION !== version) {
                warn("Protocol version mismatch detected");
              }
              // TODO: do we want to upgrade? when? maybe a delay?
              this.tryStartUpgrade_();
            }
          }
          tryStartUpgrade_() {
            const conn = this.transportManager_.upgradeTransport();
            if (conn) {
              this.startUpgrade_(conn);
            }
          }
          startUpgrade_(conn) {
            this.secondaryConn_ = new conn(
              this.nextTransportId_(),
              this.repoInfo_,
              this.applicationId_,
              this.appCheckToken_,
              this.authToken_,
              this.sessionId
            );
            // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
            // can consider the transport healthy.
            this.secondaryResponsesRequired_ =
              conn["responsesRequiredToBeHealthy"] || 0;
            const onMessage = this.connReceiver_(this.secondaryConn_);
            const onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
            setTimeoutNonBlocking(() => {
              if (this.secondaryConn_) {
                this.log_("Timed out trying to upgrade.");
                this.secondaryConn_.close();
              }
            }, Math.floor(UPGRADE_TIMEOUT));
          }
          onReset_(host) {
            this.log_("Reset packet received.  New host: " + host);
            this.repoInfo_.host = host;
            // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
            // We don't currently support resets after the connection has already been established
            if (this.state_ === 1 /* CONNECTED */) {
              this.close();
            } else {
              // Close whatever connections we have open and start again.
              this.closeConnections_();
              this.start_();
            }
          }
          onConnectionEstablished_(conn, timestamp) {
            this.log_("Realtime connection established.");
            this.conn_ = conn;
            this.state_ = 1 /* CONNECTED */;
            if (this.onReady_) {
              this.onReady_(timestamp, this.sessionId);
              this.onReady_ = null;
            }
            // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
            // send some pings.
            if (this.primaryResponsesRequired_ === 0) {
              this.log_("Primary connection is healthy.");
              this.isHealthy_ = true;
            } else {
              setTimeoutNonBlocking(() => {
                this.sendPingOnPrimaryIfNecessary_();
              }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
          }
          sendPingOnPrimaryIfNecessary_() {
            // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
            if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
              this.log_("sending ping on primary.");
              this.sendData_({ t: "c", d: { t: PING, d: {} } });
            }
          }
          onSecondaryConnectionLost_() {
            const conn = this.secondaryConn_;
            this.secondaryConn_ = null;
            if (this.tx_ === conn || this.rx_ === conn) {
              // we are relying on this connection already in some capacity. Therefore, a failure is real
              this.close();
            }
          }
          /**
           * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
           * we should flush the host cache
           */
          onConnectionLost_(everConnected) {
            this.conn_ = null;
            // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
            // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
            if (!everConnected && this.state_ === 0 /* CONNECTING */) {
              this.log_("Realtime connection failed.");
              // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
              if (this.repoInfo_.isCacheableHost()) {
                PersistentStorage.remove("host:" + this.repoInfo_.host);
                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                this.repoInfo_.internalHost = this.repoInfo_.host;
              }
            } else if (this.state_ === 1 /* CONNECTED */) {
              this.log_("Realtime connection lost.");
            }
            this.close();
          }
          onConnectionShutdown_(reason) {
            this.log_("Connection shutdown command received. Shutting down...");
            if (this.onKill_) {
              this.onKill_(reason);
              this.onKill_ = null;
            }
            // We intentionally don't want to fire onDisconnect (kill is a different case),
            // so clear the callback.
            this.onDisconnect_ = null;
            this.close();
          }
          sendData_(data) {
            if (this.state_ !== 1 /* CONNECTED */) {
              throw "Connection is not connected";
            } else {
              this.tx_.send(data);
            }
          }
          /**
           * Cleans up this connection, calling the appropriate callbacks
           */
          close() {
            if (this.state_ !== 2 /* DISCONNECTED */) {
              this.log_("Closing realtime connection.");
              this.state_ = 2 /* DISCONNECTED */;
              this.closeConnections_();
              if (this.onDisconnect_) {
                this.onDisconnect_();
                this.onDisconnect_ = null;
              }
            }
          }
          closeConnections_() {
            this.log_("Shutting down all connections");
            if (this.conn_) {
              this.conn_.close();
              this.conn_ = null;
            }
            if (this.secondaryConn_) {
              this.secondaryConn_.close();
              this.secondaryConn_ = null;
            }
            if (this.healthyTimeout_) {
              clearTimeout(this.healthyTimeout_);
              this.healthyTimeout_ = null;
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Interface defining the set of actions that can be performed against the Firebase server
         * (basically corresponds to our wire protocol).
         *
         * @interface
         */
        class ServerActions {
          put(pathString, data, onComplete, hash) { }
          merge(pathString, data, onComplete, hash) { }
          /**
           * Refreshes the auth token for the current connection.
           * @param token - The authentication token
           */
          refreshAuthToken(token) { }
          /**
           * Refreshes the app check token for the current connection.
           * @param token The app check token
           */
          refreshAppCheckToken(token) { }
          onDisconnectPut(pathString, data, onComplete) { }
          onDisconnectMerge(pathString, data, onComplete) { }
          onDisconnectCancel(pathString, onComplete) { }
          reportStats(stats) { }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Base class to be used if you want to emit events. Call the constructor with
         * the set of allowed event names.
         */
        class EventEmitter {
          constructor(allowedEvents_) {
            this.allowedEvents_ = allowedEvents_;
            this.listeners_ = {};
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              Array.isArray(allowedEvents_) && allowedEvents_.length > 0,
              "Requires a non-empty array"
            );
          }
          /**
           * To be called by derived classes to trigger events.
           */
          trigger(eventType, ...varArgs) {
            if (Array.isArray(this.listeners_[eventType])) {
              // Clone the list, since callbacks could add/remove listeners.
              const listeners = [...this.listeners_[eventType]];
              for (let i = 0; i < listeners.length; i++) {
                listeners[i].callback.apply(listeners[i].context, varArgs);
              }
            }
          }
          on(eventType, callback, context) {
            this.validateEventType_(eventType);
            this.listeners_[eventType] = this.listeners_[eventType] || [];
            this.listeners_[eventType].push({ callback, context });
            const eventData = this.getInitialEvent(eventType);
            if (eventData) {
              callback.apply(context, eventData);
            }
          }
          off(eventType, callback, context) {
            this.validateEventType_(eventType);
            const listeners = this.listeners_[eventType] || [];
            for (let i = 0; i < listeners.length; i++) {
              if (
                listeners[i].callback === callback &&
                (!context || context === listeners[i].context)
              ) {
                listeners.splice(i, 1);
                return;
              }
            }
          }
          validateEventType_(eventType) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.allowedEvents_.find((et) => {
                return et === eventType;
              }),
              "Unknown event: " + eventType
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Monitors online state (as reported by window.online/offline events).
         *
         * The expectation is that this could have many false positives (thinks we are online
         * when we're not), but no false negatives.  So we can safely use it to determine when
         * we definitely cannot reach the internet.
         */
        class OnlineMonitor extends EventEmitter {
          constructor() {
            super(["online"]);
            this.online_ = true;
            // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
            // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
            // It would seem that the 'online' event does not always fire consistently. So we disable it
            // for Cordova.
            if (
              typeof window !== "undefined" &&
              typeof window.addEventListener !== "undefined" &&
              !(0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isMobileCordova)()
            ) {
              window.addEventListener(
                "online",
                () => {
                  if (!this.online_) {
                    this.online_ = true;
                    this.trigger("online", true);
                  }
                },
                false
              );
              window.addEventListener(
                "offline",
                () => {
                  if (this.online_) {
                    this.online_ = false;
                    this.trigger("online", false);
                  }
                },
                false
              );
            }
          }
          static getInstance() {
            return new OnlineMonitor();
          }
          getInitialEvent(eventType) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              eventType === "online",
              "Unknown event type: " + eventType
            );
            return [this.online_];
          }
          currentlyOnline() {
            return this.online_;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /** Maximum key depth. */
        const MAX_PATH_DEPTH = 32;
        /** Maximum number of (UTF8) bytes in a Firebase path. */
        const MAX_PATH_LENGTH_BYTES = 768;
        /**
         * An immutable object representing a parsed path.  It's immutable so that you
         * can pass them around to other functions without worrying about them changing
         * it.
         */
        class Path {
          /**
           * @param pathOrString - Path string to parse, or another path, or the raw
           * tokens array
           */
          constructor(pathOrString, pieceNum) {
            if (pieceNum === void 0) {
              this.pieces_ = pathOrString.split("/");
              // Remove empty pieces.
              let copyTo = 0;
              for (let i = 0; i < this.pieces_.length; i++) {
                if (this.pieces_[i].length > 0) {
                  this.pieces_[copyTo] = this.pieces_[i];
                  copyTo++;
                }
              }
              this.pieces_.length = copyTo;
              this.pieceNum_ = 0;
            } else {
              this.pieces_ = pathOrString;
              this.pieceNum_ = pieceNum;
            }
          }
          toString() {
            let pathString = "";
            for (let i = this.pieceNum_; i < this.pieces_.length; i++) {
              if (this.pieces_[i] !== "") {
                pathString += "/" + this.pieces_[i];
              }
            }
            return pathString || "/";
          }
        }
        function newEmptyPath() {
          return new Path("");
        }
        function pathGetFront(path) {
          if (path.pieceNum_ >= path.pieces_.length) {
            return null;
          }
          return path.pieces_[path.pieceNum_];
        }
        /**
         * @returns The number of segments in this path
         */
        function pathGetLength(path) {
          return path.pieces_.length - path.pieceNum_;
        }
        function pathPopFront(path) {
          let pieceNum = path.pieceNum_;
          if (pieceNum < path.pieces_.length) {
            pieceNum++;
          }
          return new Path(path.pieces_, pieceNum);
        }
        function pathGetBack(path) {
          if (path.pieceNum_ < path.pieces_.length) {
            return path.pieces_[path.pieces_.length - 1];
          }
          return null;
        }
        function pathToUrlEncodedString(path) {
          let pathString = "";
          for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
            if (path.pieces_[i] !== "") {
              pathString += "/" + encodeURIComponent(String(path.pieces_[i]));
            }
          }
          return pathString || "/";
        }
        /**
         * Shallow copy of the parts of the path.
         *
         */
        function pathSlice(path, begin = 0) {
          return path.pieces_.slice(path.pieceNum_ + begin);
        }
        function pathParent(path) {
          if (path.pieceNum_ >= path.pieces_.length) {
            return null;
          }
          const pieces = [];
          for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
            pieces.push(path.pieces_[i]);
          }
          return new Path(pieces, 0);
        }
        function pathChild(path, childPathObj) {
          const pieces = [];
          for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
            pieces.push(path.pieces_[i]);
          }
          if (childPathObj instanceof Path) {
            for (
              let i = childPathObj.pieceNum_;
              i < childPathObj.pieces_.length;
              i++
            ) {
              pieces.push(childPathObj.pieces_[i]);
            }
          } else {
            const childPieces = childPathObj.split("/");
            for (let i = 0; i < childPieces.length; i++) {
              if (childPieces[i].length > 0) {
                pieces.push(childPieces[i]);
              }
            }
          }
          return new Path(pieces, 0);
        }
        /**
         * @returns True if there are no segments in this path
         */
        function pathIsEmpty(path) {
          return path.pieceNum_ >= path.pieces_.length;
        }
        /**
         * @returns The path from outerPath to innerPath
         */
        function newRelativePath(outerPath, innerPath) {
          const outer = pathGetFront(outerPath),
            inner = pathGetFront(innerPath);
          if (outer === null) {
            return innerPath;
          } else if (outer === inner) {
            return newRelativePath(
              pathPopFront(outerPath),
              pathPopFront(innerPath)
            );
          } else {
            throw new Error(
              "INTERNAL ERROR: innerPath (" +
              innerPath +
              ") is not within " +
              "outerPath (" +
              outerPath +
              ")"
            );
          }
        }
        /**
         * @returns -1, 0, 1 if left is less, equal, or greater than the right.
         */
        function pathCompare(left, right) {
          const leftKeys = pathSlice(left, 0);
          const rightKeys = pathSlice(right, 0);
          for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
            const cmp = nameCompare(leftKeys[i], rightKeys[i]);
            if (cmp !== 0) {
              return cmp;
            }
          }
          if (leftKeys.length === rightKeys.length) {
            return 0;
          }
          return leftKeys.length < rightKeys.length ? -1 : 1;
        }
        /**
         * @returns true if paths are the same.
         */
        function pathEquals(path, other) {
          if (pathGetLength(path) !== pathGetLength(other)) {
            return false;
          }
          for (
            let i = path.pieceNum_, j = other.pieceNum_;
            i <= path.pieces_.length;
            i++, j++
          ) {
            if (path.pieces_[i] !== other.pieces_[j]) {
              return false;
            }
          }
          return true;
        }
        /**
         * @returns True if this path is a parent of (or the same as) other
         */
        function pathContains(path, other) {
          let i = path.pieceNum_;
          let j = other.pieceNum_;
          if (pathGetLength(path) > pathGetLength(other)) {
            return false;
          }
          while (i < path.pieces_.length) {
            if (path.pieces_[i] !== other.pieces_[j]) {
              return false;
            }
            ++i;
            ++j;
          }
          return true;
        }
        /**
         * Dynamic (mutable) path used to count path lengths.
         *
         * This class is used to efficiently check paths for valid
         * length (in UTF8 bytes) and depth (used in path validation).
         *
         * Throws Error exception if path is ever invalid.
         *
         * The definition of a path always begins with '/'.
         */
        class ValidationPath {
          /**
           * @param path - Initial Path.
           * @param errorPrefix_ - Prefix for any error messages.
           */
          constructor(path, errorPrefix_) {
            this.errorPrefix_ = errorPrefix_;
            this.parts_ = pathSlice(path, 0);
            /** Initialize to number of '/' chars needed in path. */
            this.byteLength_ = Math.max(1, this.parts_.length);
            for (let i = 0; i < this.parts_.length; i++) {
              this.byteLength_ += (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(
                  this.parts_[i]
                );
            }
            validationPathCheckValid(this);
          }
        }
        function validationPathPush(validationPath, child) {
          // Count the needed '/'
          if (validationPath.parts_.length > 0) {
            validationPath.byteLength_ += 1;
          }
          validationPath.parts_.push(child);
          validationPath.byteLength_ += (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(child);
          validationPathCheckValid(validationPath);
        }
        function validationPathPop(validationPath) {
          const last = validationPath.parts_.pop();
          validationPath.byteLength_ -= (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(last);
          // Un-count the previous '/'
          if (validationPath.parts_.length > 0) {
            validationPath.byteLength_ -= 1;
          }
        }
        function validationPathCheckValid(validationPath) {
          if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
            throw new Error(
              validationPath.errorPrefix_ +
              "has a key path longer than " +
              MAX_PATH_LENGTH_BYTES +
              " bytes (" +
              validationPath.byteLength_ +
              ")."
            );
          }
          if (validationPath.parts_.length > MAX_PATH_DEPTH) {
            throw new Error(
              validationPath.errorPrefix_ +
              "path specified exceeds the maximum depth that can be written (" +
              MAX_PATH_DEPTH +
              ") or object contains a cycle " +
              validationPathToErrorString(validationPath)
            );
          }
        }
        /**
         * String for use in error messages - uses '.' notation for path.
         */
        function validationPathToErrorString(validationPath) {
          if (validationPath.parts_.length === 0) {
            return "";
          }
          return "in property '" + validationPath.parts_.join(".") + "'";
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class VisibilityMonitor extends EventEmitter {
          constructor() {
            super(["visible"]);
            let hidden;
            let visibilityChange;
            if (
              typeof document !== "undefined" &&
              typeof document.addEventListener !== "undefined"
            ) {
              if (typeof document["hidden"] !== "undefined") {
                // Opera 12.10 and Firefox 18 and later support
                visibilityChange = "visibilitychange";
                hidden = "hidden";
              } else if (typeof document["mozHidden"] !== "undefined") {
                visibilityChange = "mozvisibilitychange";
                hidden = "mozHidden";
              } else if (typeof document["msHidden"] !== "undefined") {
                visibilityChange = "msvisibilitychange";
                hidden = "msHidden";
              } else if (typeof document["webkitHidden"] !== "undefined") {
                visibilityChange = "webkitvisibilitychange";
                hidden = "webkitHidden";
              }
            }
            // Initially, we always assume we are visible. This ensures that in browsers
            // without page visibility support or in cases where we are never visible
            // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
            // reconnects
            this.visible_ = true;
            if (visibilityChange) {
              document.addEventListener(
                visibilityChange,
                () => {
                  const visible = !document[hidden];
                  if (visible !== this.visible_) {
                    this.visible_ = visible;
                    this.trigger("visible", visible);
                  }
                },
                false
              );
            }
          }
          static getInstance() {
            return new VisibilityMonitor();
          }
          getInitialEvent(eventType) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              eventType === "visible",
              "Unknown event type: " + eventType
            );
            return [this.visible_];
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const RECONNECT_MIN_DELAY = 1000;
        const RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
        const RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
        const RECONNECT_DELAY_MULTIPLIER = 1.3;
        const RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
        const SERVER_KILL_INTERRUPT_REASON = "server_kill";
        // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
        const INVALID_TOKEN_THRESHOLD = 3;
        /**
         * Firebase connection.  Abstracts wire protocol and handles reconnecting.
         *
         * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
         * in quotes to make sure the closure compiler does not minify them.
         */
        class PersistentConnection extends ServerActions {
          /**
           * @param repoInfo_ - Data about the namespace we are connecting to
           * @param applicationId_ - The Firebase App ID for this project
           * @param onDataUpdate_ - A callback for new data from the server
           */
          constructor(
            repoInfo_,
            applicationId_,
            onDataUpdate_,
            onConnectStatus_,
            onServerInfoUpdate_,
            authTokenProvider_,
            appCheckTokenProvider_,
            authOverride_
          ) {
            super();
            this.repoInfo_ = repoInfo_;
            this.applicationId_ = applicationId_;
            this.onDataUpdate_ = onDataUpdate_;
            this.onConnectStatus_ = onConnectStatus_;
            this.onServerInfoUpdate_ = onServerInfoUpdate_;
            this.authTokenProvider_ = authTokenProvider_;
            this.appCheckTokenProvider_ = appCheckTokenProvider_;
            this.authOverride_ = authOverride_;
            // Used for diagnostic logging.
            this.id = PersistentConnection.nextPersistentConnectionId_++;
            this.log_ = logWrapper("p:" + this.id + ":");
            this.interruptReasons_ = {};
            this.listens = new Map();
            this.outstandingPuts_ = [];
            this.outstandingGets_ = [];
            this.outstandingPutCount_ = 0;
            this.outstandingGetCount_ = 0;
            this.onDisconnectRequestQueue_ = [];
            this.connected_ = false;
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            this.securityDebugCallback_ = null;
            this.lastSessionId = null;
            this.establishConnectionTimer_ = null;
            this.visible_ = false;
            // Before we get connected, we keep a queue of pending messages to send.
            this.requestCBHash_ = {};
            this.requestNumber_ = 0;
            this.realtime_ = null;
            this.authToken_ = null;
            this.appCheckToken_ = null;
            this.forceTokenRefresh_ = false;
            this.invalidAuthTokenCount_ = 0;
            this.invalidAppCheckTokenCount_ = 0;
            this.firstConnection_ = true;
            this.lastConnectionAttemptTime_ = null;
            this.lastConnectionEstablishedTime_ = null;
            if (
              authOverride_ &&
              !(0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()
            ) {
              throw new Error(
                "Auth override specified in options, but not supported on non Node.js platforms"
              );
            }
            VisibilityMonitor.getInstance().on(
              "visible",
              this.onVisible_,
              this
            );
            if (repoInfo_.host.indexOf("fblocal") === -1) {
              OnlineMonitor.getInstance().on("online", this.onOnline_, this);
            }
          }
          sendRequest(action, body, onResponse) {
            const curReqNum = ++this.requestNumber_;
            const msg = { r: curReqNum, a: action, b: body };
            this.log_(
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(msg)
            );
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.connected_,
              "sendRequest call when we're not connected not allowed."
            );
            this.realtime_.sendRequest(msg);
            if (onResponse) {
              this.requestCBHash_[curReqNum] = onResponse;
            }
          }
          get(query) {
            this.initConnection_();
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            const request = {
              p: query._path.toString(),
              q: query._queryObject,
            };
            const outstandingGet = {
              action: "g",
              request,
              onComplete: (message) => {
                const payload = message["d"];
                if (message["s"] === "ok") {
                  deferred.resolve(payload);
                } else {
                  deferred.reject(payload);
                }
              },
            };
            this.outstandingGets_.push(outstandingGet);
            this.outstandingGetCount_++;
            const index = this.outstandingGets_.length - 1;
            if (this.connected_) {
              this.sendGet_(index);
            }
            return deferred.promise;
          }
          listen(query, currentHashFn, tag, onComplete) {
            this.initConnection_();
            const queryId = query._queryIdentifier;
            const pathString = query._path.toString();
            this.log_("Listen called for " + pathString + " " + queryId);
            if (!this.listens.has(pathString)) {
              this.listens.set(pathString, new Map());
            }
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              query._queryParams.isDefault() ||
              !query._queryParams.loadsAllData(),
              "listen() called for non-default but complete query"
            );
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              !this.listens.get(pathString).has(queryId),
              `listen() called twice for same path/queryId.`
            );
            const listenSpec = {
              onComplete,
              hashFn: currentHashFn,
              query,
              tag,
            };
            this.listens.get(pathString).set(queryId, listenSpec);
            if (this.connected_) {
              this.sendListen_(listenSpec);
            }
          }
          sendGet_(index) {
            const get = this.outstandingGets_[index];
            this.sendRequest("g", get.request, (message) => {
              delete this.outstandingGets_[index];
              this.outstandingGetCount_--;
              if (this.outstandingGetCount_ === 0) {
                this.outstandingGets_ = [];
              }
              if (get.onComplete) {
                get.onComplete(message);
              }
            });
          }
          sendListen_(listenSpec) {
            const query = listenSpec.query;
            const pathString = query._path.toString();
            const queryId = query._queryIdentifier;
            this.log_("Listen on " + pathString + " for " + queryId);
            const req = { /*path*/ p: pathString };
            const action = "q";
            // Only bother to send query if it's non-default.
            if (listenSpec.tag) {
              req["q"] = query._queryObject;
              req["t"] = listenSpec.tag;
            }
            req[/*hash*/ "h"] = listenSpec.hashFn();
            this.sendRequest(action, req, (message) => {
              const payload = message[/*data*/ "d"];
              const status = message[/*status*/ "s"];
              // print warnings in any case...
              PersistentConnection.warnOnListenWarnings_(payload, query);
              const currentListenSpec =
                this.listens.get(pathString) &&
                this.listens.get(pathString).get(queryId);
              // only trigger actions if the listen hasn't been removed and readded
              if (currentListenSpec === listenSpec) {
                this.log_("listen response", message);
                if (status !== "ok") {
                  this.removeListen_(pathString, queryId);
                }
                if (listenSpec.onComplete) {
                  listenSpec.onComplete(status, payload);
                }
              }
            });
          }
          static warnOnListenWarnings_(payload, query) {
            if (
              payload &&
              typeof payload === "object" &&
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                payload,
                "w"
              )
            ) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const warnings = (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                  payload,
                  "w"
                );
              if (Array.isArray(warnings) && ~warnings.indexOf("no_index")) {
                const indexSpec =
                  '".indexOn": "' +
                  query._queryParams.getIndex().toString() +
                  '"';
                const indexPath = query._path.toString();
                warn(
                  `Using an unspecified index. Your data will be downloaded and ` +
                  `filtered on the client. Consider adding ${indexSpec} at ` +
                  `${indexPath} to your security rules for better performance.`
                );
              }
            }
          }
          refreshAuthToken(token) {
            this.authToken_ = token;
            this.log_("Auth token refreshed");
            if (this.authToken_) {
              this.tryAuth();
            } else {
              //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
              //the credential so we dont become authenticated next time we connect.
              if (this.connected_) {
                this.sendRequest("unauth", {}, () => { });
              }
            }
            this.reduceReconnectDelayIfAdminCredential_(token);
          }
          reduceReconnectDelayIfAdminCredential_(credential) {
            // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
            // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
            const isFirebaseSecret = credential && credential.length === 40;
            if (
              isFirebaseSecret ||
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isAdmin)(
                credential
              )
            ) {
              this.log_(
                "Admin auth credential detected.  Reducing max reconnect time."
              );
              this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
          }
          refreshAppCheckToken(token) {
            this.appCheckToken_ = token;
            this.log_("App check token refreshed");
            if (this.appCheckToken_) {
              this.tryAppCheck();
            } else {
              //If we're connected we want to let the server know to unauthenticate us.
              //If we're not connected, simply delete the credential so we dont become
              // authenticated next time we connect.
              if (this.connected_) {
                this.sendRequest("unappeck", {}, () => { });
              }
            }
          }
          /**
           * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
           * a auth revoked (the connection is closed).
           */
          tryAuth() {
            if (this.connected_ && this.authToken_) {
              const token = this.authToken_;
              const authMethod = (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isValidFormat)(token)
                ? "auth"
                : "gauth";
              const requestData = { cred: token };
              if (this.authOverride_ === null) {
                requestData["noauth"] = true;
              } else if (typeof this.authOverride_ === "object") {
                requestData["authvar"] = this.authOverride_;
              }
              this.sendRequest(authMethod, requestData, (res) => {
                const status = res[/*status*/ "s"];
                const data = res[/*data*/ "d"] || "error";
                if (this.authToken_ === token) {
                  if (status === "ok") {
                    this.invalidAuthTokenCount_ = 0;
                  } else {
                    // Triggers reconnect and force refresh for auth token
                    this.onAuthRevoked_(status, data);
                  }
                }
              });
            }
          }
          /**
           * Attempts to authenticate with the given token. If the authentication
           * attempt fails, it's triggered like the token was revoked (the connection is
           * closed).
           */
          tryAppCheck() {
            if (this.connected_ && this.appCheckToken_) {
              this.sendRequest(
                "appcheck",
                { token: this.appCheckToken_ },
                (res) => {
                  const status = res[/*status*/ "s"];
                  const data = res[/*data*/ "d"] || "error";
                  if (status === "ok") {
                    this.invalidAppCheckTokenCount_ = 0;
                  } else {
                    this.onAppCheckRevoked_(status, data);
                  }
                }
              );
            }
          }
          /**
           * @inheritDoc
           */
          unlisten(query, tag) {
            const pathString = query._path.toString();
            const queryId = query._queryIdentifier;
            this.log_("Unlisten called for " + pathString + " " + queryId);
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              query._queryParams.isDefault() ||
              !query._queryParams.loadsAllData(),
              "unlisten() called for non-default but complete query"
            );
            const listen = this.removeListen_(pathString, queryId);
            if (listen && this.connected_) {
              this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
            }
          }
          sendUnlisten_(pathString, queryId, queryObj, tag) {
            this.log_("Unlisten on " + pathString + " for " + queryId);
            const req = { /*path*/ p: pathString };
            const action = "n";
            // Only bother sending queryId if it's non-default.
            if (tag) {
              req["q"] = queryObj;
              req["t"] = tag;
            }
            this.sendRequest(action, req);
          }
          onDisconnectPut(pathString, data, onComplete) {
            this.initConnection_();
            if (this.connected_) {
              this.sendOnDisconnect_("o", pathString, data, onComplete);
            } else {
              this.onDisconnectRequestQueue_.push({
                pathString,
                action: "o",
                data,
                onComplete,
              });
            }
          }
          onDisconnectMerge(pathString, data, onComplete) {
            this.initConnection_();
            if (this.connected_) {
              this.sendOnDisconnect_("om", pathString, data, onComplete);
            } else {
              this.onDisconnectRequestQueue_.push({
                pathString,
                action: "om",
                data,
                onComplete,
              });
            }
          }
          onDisconnectCancel(pathString, onComplete) {
            this.initConnection_();
            if (this.connected_) {
              this.sendOnDisconnect_("oc", pathString, null, onComplete);
            } else {
              this.onDisconnectRequestQueue_.push({
                pathString,
                action: "oc",
                data: null,
                onComplete,
              });
            }
          }
          sendOnDisconnect_(action, pathString, data, onComplete) {
            const request = { /*path*/ p: pathString, /*data*/ d: data };
            this.log_("onDisconnect " + action, request);
            this.sendRequest(action, request, (response) => {
              if (onComplete) {
                setTimeout(() => {
                  onComplete(
                    response[/*status*/ "s"],
                    response[/* data */ "d"]
                  );
                }, Math.floor(0));
              }
            });
          }
          put(pathString, data, onComplete, hash) {
            this.putInternal("p", pathString, data, onComplete, hash);
          }
          merge(pathString, data, onComplete, hash) {
            this.putInternal("m", pathString, data, onComplete, hash);
          }
          putInternal(action, pathString, data, onComplete, hash) {
            this.initConnection_();
            const request = {
              /*path*/ p: pathString,
              /*data*/ d: data,
            };
            if (hash !== undefined) {
              request[/*hash*/ "h"] = hash;
            }
            // TODO: Only keep track of the most recent put for a given path?
            this.outstandingPuts_.push({
              action,
              request,
              onComplete,
            });
            this.outstandingPutCount_++;
            const index = this.outstandingPuts_.length - 1;
            if (this.connected_) {
              this.sendPut_(index);
            } else {
              this.log_("Buffering put: " + pathString);
            }
          }
          sendPut_(index) {
            const action = this.outstandingPuts_[index].action;
            const request = this.outstandingPuts_[index].request;
            const onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, (message) => {
              this.log_(action + " response", message);
              delete this.outstandingPuts_[index];
              this.outstandingPutCount_--;
              // Clean up array occasionally.
              if (this.outstandingPutCount_ === 0) {
                this.outstandingPuts_ = [];
              }
              if (onComplete) {
                onComplete(message[/*status*/ "s"], message[/* data */ "d"]);
              }
            });
          }
          reportStats(stats) {
            // If we're not connected, we just drop the stats.
            if (this.connected_) {
              const request = { /*counters*/ c: stats };
              this.log_("reportStats", request);
              this.sendRequest(/*stats*/ "s", request, (result) => {
                const status = result[/*status*/ "s"];
                if (status !== "ok") {
                  const errorReason = result[/* data */ "d"];
                  this.log_(
                    "reportStats",
                    "Error sending stats: " + errorReason
                  );
                }
              });
            }
          }
          onDataMessage_(message) {
            if ("r" in message) {
              // this is a response
              this.log_(
                "from server: " +
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  message
                )
              );
              const reqNum = message["r"];
              const onResponse = this.requestCBHash_[reqNum];
              if (onResponse) {
                delete this.requestCBHash_[reqNum];
                onResponse(message[/*body*/ "b"]);
              }
            } else if ("error" in message) {
              throw "A server-side error has occurred: " + message["error"];
            } else if ("a" in message) {
              // a and b are action and body, respectively
              this.onDataPush_(message["a"], message["b"]);
            }
          }
          onDataPush_(action, body) {
            this.log_("handleServerMessage", action, body);
            if (action === "d") {
              this.onDataUpdate_(
                body[/*path*/ "p"],
                body[/*data*/ "d"],
                /*isMerge*/ false,
                body["t"]
              );
            } else if (action === "m") {
              this.onDataUpdate_(
                body[/*path*/ "p"],
                body[/*data*/ "d"],
                /*isMerge=*/ true,
                body["t"]
              );
            } else if (action === "c") {
              this.onListenRevoked_(body[/*path*/ "p"], body[/*query*/ "q"]);
            } else if (action === "ac") {
              this.onAuthRevoked_(
                body[/*status code*/ "s"],
                body[/* explanation */ "d"]
              );
            } else if (action === "apc") {
              this.onAppCheckRevoked_(
                body[/*status code*/ "s"],
                body[/* explanation */ "d"]
              );
            } else if (action === "sd") {
              this.onSecurityDebugPacket_(body);
            } else {
              error(
                "Unrecognized action received from server: " +
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  action
                ) +
                "\nAre you using the latest client?"
              );
            }
          }
          onReady_(timestamp, sessionId) {
            this.log_("connection ready");
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;
            if (this.firstConnection_) {
              this.sendConnectStats_();
            }
            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
          }
          scheduleConnect_(timeout) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              !this.realtime_,
              "Scheduling a connect when we're already connected/ing?"
            );
            if (this.establishConnectionTimer_) {
              clearTimeout(this.establishConnectionTimer_);
            }
            // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
            // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
            this.establishConnectionTimer_ = setTimeout(() => {
              this.establishConnectionTimer_ = null;
              this.establishConnection_();
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }, Math.floor(timeout));
          }
          initConnection_() {
            if (!this.realtime_ && this.firstConnection_) {
              this.scheduleConnect_(0);
            }
          }
          onVisible_(visible) {
            // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
            if (
              visible &&
              !this.visible_ &&
              this.reconnectDelay_ === this.maxReconnectDelay_
            ) {
              this.log_("Window became visible.  Reducing delay.");
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                this.scheduleConnect_(0);
              }
            }
            this.visible_ = visible;
          }
          onOnline_(online) {
            if (online) {
              this.log_("Browser went online.");
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                this.scheduleConnect_(0);
              }
            } else {
              this.log_("Browser went offline.  Killing connection.");
              if (this.realtime_) {
                this.realtime_.close();
              }
            }
          }
          onRealtimeDisconnect_() {
            this.log_("data client disconnected");
            this.connected_ = false;
            this.realtime_ = null;
            // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
            this.cancelSentTransactions_();
            // Clear out the pending requests.
            this.requestCBHash_ = {};
            if (this.shouldReconnect_()) {
              if (!this.visible_) {
                this.log_("Window isn't visible.  Delaying reconnect.");
                this.reconnectDelay_ = this.maxReconnectDelay_;
                this.lastConnectionAttemptTime_ = new Date().getTime();
              } else if (this.lastConnectionEstablishedTime_) {
                // If we've been connected long enough, reset reconnect delay to minimum.
                const timeSinceLastConnectSucceeded =
                  new Date().getTime() - this.lastConnectionEstablishedTime_;
                if (
                  timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT
                ) {
                  this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                }
                this.lastConnectionEstablishedTime_ = null;
              }
              const timeSinceLastConnectAttempt =
                new Date().getTime() - this.lastConnectionAttemptTime_;
              let reconnectDelay = Math.max(
                0,
                this.reconnectDelay_ - timeSinceLastConnectAttempt
              );
              reconnectDelay = Math.random() * reconnectDelay;
              this.log_("Trying to reconnect in " + reconnectDelay + "ms");
              this.scheduleConnect_(reconnectDelay);
              // Adjust reconnect delay for next time.
              this.reconnectDelay_ = Math.min(
                this.maxReconnectDelay_,
                this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER
              );
            }
            this.onConnectStatus_(false);
          }
          async establishConnection_() {
            if (this.shouldReconnect_()) {
              this.log_("Making a connection attempt");
              this.lastConnectionAttemptTime_ = new Date().getTime();
              this.lastConnectionEstablishedTime_ = null;
              const onDataMessage = this.onDataMessage_.bind(this);
              const onReady = this.onReady_.bind(this);
              const onDisconnect = this.onRealtimeDisconnect_.bind(this);
              const connId =
                this.id + ":" + PersistentConnection.nextConnectionId_++;
              const lastSessionId = this.lastSessionId;
              let canceled = false;
              let connection = null;
              const closeFn = function () {
                if (connection) {
                  connection.close();
                } else {
                  canceled = true;
                  onDisconnect();
                }
              };
              const sendRequestFn = function (msg) {
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                  connection,
                  "sendRequest call when we're not connected not allowed."
                );
                connection.sendRequest(msg);
              };
              this.realtime_ = {
                close: closeFn,
                sendRequest: sendRequestFn,
              };
              const forceRefresh = this.forceTokenRefresh_;
              this.forceTokenRefresh_ = false;
              try {
                // First fetch auth and app check token, and establish connection after
                // fetching the token was successful
                const [authToken, appCheckToken] = await Promise.all([
                  this.authTokenProvider_.getToken(forceRefresh),
                  this.appCheckTokenProvider_.getToken(forceRefresh),
                ]);
                if (!canceled) {
                  log("getToken() completed. Creating connection.");
                  this.authToken_ = authToken && authToken.accessToken;
                  this.appCheckToken_ = appCheckToken && appCheckToken.token;
                  connection = new Connection(
                    connId,
                    this.repoInfo_,
                    this.applicationId_,
                    this.appCheckToken_,
                    this.authToken_,
                    onDataMessage,
                    onReady,
                    onDisconnect,
                    /* onKill= */(reason) => {
                      warn(reason + " (" + this.repoInfo_.toString() + ")");
                      this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                    },
                    lastSessionId
                  );
                } else {
                  log("getToken() completed but was canceled");
                }
              } catch (error) {
                this.log_("Failed to get token: " + error);
                if (!canceled) {
                  if (this.repoInfo_.nodeAdmin) {
                    // This may be a critical error for the Admin Node.js SDK, so log a warning.
                    // But getToken() may also just have temporarily failed, so we still want to
                    // continue retrying.
                    warn(error);
                  }
                  closeFn();
                }
              }
            }
          }
          interrupt(reason) {
            log("Interrupting connection for reason: " + reason);
            this.interruptReasons_[reason] = true;
            if (this.realtime_) {
              this.realtime_.close();
            } else {
              if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
                this.establishConnectionTimer_ = null;
              }
              if (this.connected_) {
                this.onRealtimeDisconnect_();
              }
            }
          }
          resume(reason) {
            log("Resuming connection for reason: " + reason);
            delete this.interruptReasons_[reason];
            if (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(
                this.interruptReasons_
              )
            ) {
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                this.scheduleConnect_(0);
              }
            }
          }
          handleTimestamp_(timestamp) {
            const delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({ serverTimeOffset: delta });
          }
          cancelSentTransactions_() {
            for (let i = 0; i < this.outstandingPuts_.length; i++) {
              const put = this.outstandingPuts_[i];
              if (put && /*hash*/ "h" in put.request && put.queued) {
                if (put.onComplete) {
                  put.onComplete("disconnect");
                }
                delete this.outstandingPuts_[i];
                this.outstandingPutCount_--;
              }
            }
            // Clean up array occasionally.
            if (this.outstandingPutCount_ === 0) {
              this.outstandingPuts_ = [];
            }
          }
          onListenRevoked_(pathString, query) {
            // Remove the listen and manufacture a "permission_denied" error for the failed listen.
            let queryId;
            if (!query) {
              queryId = "default";
            } else {
              queryId = query.map((q) => ObjectToUniqueKey(q)).join("$");
            }
            const listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) {
              listen.onComplete("permission_denied");
            }
          }
          removeListen_(pathString, queryId) {
            const normalizedPathString = new Path(pathString).toString(); // normalize path.
            let listen;
            if (this.listens.has(normalizedPathString)) {
              const map = this.listens.get(normalizedPathString);
              listen = map.get(queryId);
              map.delete(queryId);
              if (map.size === 0) {
                this.listens.delete(normalizedPathString);
              }
            } else {
              // all listens for this path has already been removed
              listen = undefined;
            }
            return listen;
          }
          onAuthRevoked_(statusCode, explanation) {
            log("Auth token revoked: " + statusCode + "/" + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();
            if (
              statusCode === "invalid_token" ||
              statusCode === "permission_denied"
            ) {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAuthTokenCount_++;
              if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                // Set a long reconnect delay because recovery is unlikely
                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                // Notify the auth token provider that the token is invalid, which will log
                // a warning
                this.authTokenProvider_.notifyForInvalidToken();
              }
            }
          }
          onAppCheckRevoked_(statusCode, explanation) {
            log("App check token revoked: " + statusCode + "/" + explanation);
            this.appCheckToken_ = null;
            this.forceTokenRefresh_ = true;
            // Note: We don't close the connection as the developer may not have
            // enforcement enabled. The backend closes connections with enforcements.
            if (
              statusCode === "invalid_token" ||
              statusCode === "permission_denied"
            ) {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAppCheckTokenCount_++;
              if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                this.appCheckTokenProvider_.notifyForInvalidToken();
              }
            }
          }
          onSecurityDebugPacket_(body) {
            if (this.securityDebugCallback_) {
              this.securityDebugCallback_(body);
            } else {
              if ("msg" in body) {
                console.log(
                  "FIREBASE: " + body["msg"].replace("\n", "\nFIREBASE: ")
                );
              }
            }
          }
          restoreState_() {
            //Re-authenticate ourselves if we have a credential stored.
            this.tryAuth();
            this.tryAppCheck();
            // Puts depend on having received the corresponding data update from the server before they complete, so we must
            // make sure to send listens before puts.
            for (const queries of this.listens.values()) {
              for (const listenSpec of queries.values()) {
                this.sendListen_(listenSpec);
              }
            }
            for (let i = 0; i < this.outstandingPuts_.length; i++) {
              if (this.outstandingPuts_[i]) {
                this.sendPut_(i);
              }
            }
            while (this.onDisconnectRequestQueue_.length) {
              const request = this.onDisconnectRequestQueue_.shift();
              this.sendOnDisconnect_(
                request.action,
                request.pathString,
                request.data,
                request.onComplete
              );
            }
            for (let i = 0; i < this.outstandingGets_.length; i++) {
              if (this.outstandingGets_[i]) {
                this.sendGet_(i);
              }
            }
          }
          /**
           * Sends client stats for first connection
           */
          sendConnectStats_() {
            const stats = {};
            let clientName = "js";
            if ((0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {
              if (this.repoInfo_.nodeAdmin) {
                clientName = "admin_node";
              } else {
                clientName = "node";
              }
            }
            stats[
              "sdk." + clientName + "." + SDK_VERSION.replace(/\./g, "-")
            ] = 1;
            if (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isMobileCordova)()
            ) {
              stats["framework.cordova"] = 1;
            } else if (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isReactNative)()
            ) {
              stats["framework.reactnative"] = 1;
            }
            this.reportStats(stats);
          }
          shouldReconnect_() {
            const online = OnlineMonitor.getInstance().currentlyOnline();
            return (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(
                this.interruptReasons_
              ) && online
            );
          }
        }
        PersistentConnection.nextPersistentConnectionId_ = 0;
        /**
         * Counter for number of connections created. Mainly used for tagging in the logs
         */
        PersistentConnection.nextConnectionId_ = 0;

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class NamedNode {
          constructor(name, node) {
            this.name = name;
            this.node = node;
          }
          static Wrap(name, node) {
            return new NamedNode(name, node);
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class Index {
          /**
           * @returns A standalone comparison function for
           * this index
           */
          getCompare() {
            return this.compare.bind(this);
          }
          /**
           * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
           * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
           *
           *
           * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
           */
          indexedValueChanged(oldNode, newNode) {
            const oldWrapped = new NamedNode(MIN_NAME, oldNode);
            const newWrapped = new NamedNode(MIN_NAME, newNode);
            return this.compare(oldWrapped, newWrapped) !== 0;
          }
          /**
           * @returns a node wrapper that will sort equal to or less than
           * any other node wrapper, using this index
           */
          minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let __EMPTY_NODE;
        class KeyIndex extends Index {
          static get __EMPTY_NODE() {
            return __EMPTY_NODE;
          }
          static set __EMPTY_NODE(val) {
            __EMPTY_NODE = val;
          }
          compare(a, b) {
            return nameCompare(a.name, b.name);
          }
          isDefinedOn(node) {
            // We could probably return true here (since every node has a key), but it's never called
            // so just leaving unimplemented for now.
            throw (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)(
                "KeyIndex.isDefinedOn not expected to be called."
              );
          }
          indexedValueChanged(oldNode, newNode) {
            return false; // The key for a node never changes.
          }
          minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
          }
          maxPost() {
            // TODO: This should really be created once and cached in a static property, but
            // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
            return new NamedNode(MAX_NAME, __EMPTY_NODE);
          }
          makePost(indexValue, name) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              typeof indexValue === "string",
              "KeyIndex indexValue must always be a string."
            );
            // We just use empty node, but it'll never be compared, since our comparator only looks at name.
            return new NamedNode(indexValue, __EMPTY_NODE);
          }
          /**
           * @returns String representation for inclusion in a query spec
           */
          toString() {
            return ".key";
          }
        }
        const KEY_INDEX = new KeyIndex();

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An iterator over an LLRBNode.
         */
        class SortedMapIterator {
          /**
           * @param node - Node to iterate.
           * @param isReverse_ - Whether or not to iterate in reverse
           */
          constructor(
            node,
            startKey,
            comparator,
            isReverse_,
            resultGenerator_ = null
          ) {
            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            this.nodeStack_ = [];
            let cmp = 1;
            while (!node.isEmpty()) {
              node = node;
              cmp = startKey ? comparator(node.key, startKey) : 1;
              // flip the comparison if we're going in reverse
              if (isReverse_) {
                cmp *= -1;
              }
              if (cmp < 0) {
                // This node is less than our start key. ignore it
                if (this.isReverse_) {
                  node = node.left;
                } else {
                  node = node.right;
                }
              } else if (cmp === 0) {
                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                this.nodeStack_.push(node);
                break;
              } else {
                // This node is greater than our start key, add it to the stack and move to the next one
                this.nodeStack_.push(node);
                if (this.isReverse_) {
                  node = node.right;
                } else {
                  node = node.left;
                }
              }
            }
          }
          getNext() {
            if (this.nodeStack_.length === 0) {
              return null;
            }
            let node = this.nodeStack_.pop();
            let result;
            if (this.resultGenerator_) {
              result = this.resultGenerator_(node.key, node.value);
            } else {
              result = { key: node.key, value: node.value };
            }
            if (this.isReverse_) {
              node = node.left;
              while (!node.isEmpty()) {
                this.nodeStack_.push(node);
                node = node.right;
              }
            } else {
              node = node.right;
              while (!node.isEmpty()) {
                this.nodeStack_.push(node);
                node = node.left;
              }
            }
            return result;
          }
          hasNext() {
            return this.nodeStack_.length > 0;
          }
          peek() {
            if (this.nodeStack_.length === 0) {
              return null;
            }
            const node = this.nodeStack_[this.nodeStack_.length - 1];
            if (this.resultGenerator_) {
              return this.resultGenerator_(node.key, node.value);
            } else {
              return { key: node.key, value: node.value };
            }
          }
        }
        /**
         * Represents a node in a Left-leaning Red-Black tree.
         */
        class LLRBNode {
          /**
           * @param key - Key associated with this node.
           * @param value - Value associated with this node.
           * @param color - Whether this node is red.
           * @param left - Left child.
           * @param right - Right child.
           */
          constructor(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left = left != null ? left : SortedMap.EMPTY_NODE;
            this.right = right != null ? right : SortedMap.EMPTY_NODE;
          }
          /**
           * Returns a copy of the current node, optionally replacing pieces of it.
           *
           * @param key - New key for the node, or null.
           * @param value - New value for the node, or null.
           * @param color - New color for the node, or null.
           * @param left - New left child for the node, or null.
           * @param right - New right child for the node, or null.
           * @returns The node copy.
           */
          copy(key, value, color, left, right) {
            return new LLRBNode(
              key != null ? key : this.key,
              value != null ? value : this.value,
              color != null ? color : this.color,
              left != null ? left : this.left,
              right != null ? right : this.right
            );
          }
          /**
           * @returns The total number of nodes in the tree.
           */
          count() {
            return this.left.count() + 1 + this.right.count();
          }
          /**
           * @returns True if the tree is empty.
           */
          isEmpty() {
            return false;
          }
          /**
           * Traverses the tree in key order and calls the specified action function
           * for each node.
           *
           * @param action - Callback function to be called for each
           *   node.  If it returns true, traversal is aborted.
           * @returns The first truthy value returned by action, or the last falsey
           *   value returned by action
           */
          inorderTraversal(action) {
            return (
              this.left.inorderTraversal(action) ||
              !!action(this.key, this.value) ||
              this.right.inorderTraversal(action)
            );
          }
          /**
           * Traverses the tree in reverse key order and calls the specified action function
           * for each node.
           *
           * @param action - Callback function to be called for each
           * node.  If it returns true, traversal is aborted.
           * @returns True if traversal was aborted.
           */
          reverseTraversal(action) {
            return (
              this.right.reverseTraversal(action) ||
              action(this.key, this.value) ||
              this.left.reverseTraversal(action)
            );
          }
          /**
           * @returns The minimum node in the tree.
           */
          min_() {
            if (this.left.isEmpty()) {
              return this;
            } else {
              return this.left.min_();
            }
          }
          /**
           * @returns The maximum key in the tree.
           */
          minKey() {
            return this.min_().key;
          }
          /**
           * @returns The maximum key in the tree.
           */
          maxKey() {
            if (this.right.isEmpty()) {
              return this.key;
            } else {
              return this.right.maxKey();
            }
          }
          /**
           * @param key - Key to insert.
           * @param value - Value to insert.
           * @param comparator - Comparator.
           * @returns New tree, with the key/value added.
           */
          insert(key, value, comparator) {
            let n = this;
            const cmp = comparator(key, n.key);
            if (cmp < 0) {
              n = n.copy(
                null,
                null,
                null,
                n.left.insert(key, value, comparator),
                null
              );
            } else if (cmp === 0) {
              n = n.copy(null, value, null, null, null);
            } else {
              n = n.copy(
                null,
                null,
                null,
                null,
                n.right.insert(key, value, comparator)
              );
            }
            return n.fixUp_();
          }
          /**
           * @returns New tree, with the minimum key removed.
           */
          removeMin_() {
            if (this.left.isEmpty()) {
              return SortedMap.EMPTY_NODE;
            }
            let n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) {
              n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
          }
          /**
           * @param key - The key of the item to remove.
           * @param comparator - Comparator.
           * @returns New tree, with the specified item removed.
           */
          remove(key, comparator) {
            let n, smallest;
            n = this;
            if (comparator(key, n.key) < 0) {
              if (
                !n.left.isEmpty() &&
                !n.left.isRed_() &&
                !n.left.left.isRed_()
              ) {
                n = n.moveRedLeft_();
              }
              n = n.copy(
                null,
                null,
                null,
                n.left.remove(key, comparator),
                null
              );
            } else {
              if (n.left.isRed_()) {
                n = n.rotateRight_();
              }
              if (
                !n.right.isEmpty() &&
                !n.right.isRed_() &&
                !n.right.left.isRed_()
              ) {
                n = n.moveRedRight_();
              }
              if (comparator(key, n.key) === 0) {
                if (n.right.isEmpty()) {
                  return SortedMap.EMPTY_NODE;
                } else {
                  smallest = n.right.min_();
                  n = n.copy(
                    smallest.key,
                    smallest.value,
                    null,
                    null,
                    n.right.removeMin_()
                  );
                }
              }
              n = n.copy(
                null,
                null,
                null,
                null,
                n.right.remove(key, comparator)
              );
            }
            return n.fixUp_();
          }
          /**
           * @returns Whether this is a RED node.
           */
          isRed_() {
            return this.color;
          }
          /**
           * @returns New tree after performing any needed rotations.
           */
          fixUp_() {
            let n = this;
            if (n.right.isRed_() && !n.left.isRed_()) {
              n = n.rotateLeft_();
            }
            if (n.left.isRed_() && n.left.left.isRed_()) {
              n = n.rotateRight_();
            }
            if (n.left.isRed_() && n.right.isRed_()) {
              n = n.colorFlip_();
            }
            return n;
          }
          /**
           * @returns New tree, after moveRedLeft.
           */
          moveRedLeft_() {
            let n = this.colorFlip_();
            if (n.right.left.isRed_()) {
              n = n.copy(null, null, null, null, n.right.rotateRight_());
              n = n.rotateLeft_();
              n = n.colorFlip_();
            }
            return n;
          }
          /**
           * @returns New tree, after moveRedRight.
           */
          moveRedRight_() {
            let n = this.colorFlip_();
            if (n.left.left.isRed_()) {
              n = n.rotateRight_();
              n = n.colorFlip_();
            }
            return n;
          }
          /**
           * @returns New tree, after rotateLeft.
           */
          rotateLeft_() {
            const nl = this.copy(
              null,
              null,
              LLRBNode.RED,
              null,
              this.right.left
            );
            return this.right.copy(null, null, this.color, nl, null);
          }
          /**
           * @returns New tree, after rotateRight.
           */
          rotateRight_() {
            const nr = this.copy(
              null,
              null,
              LLRBNode.RED,
              this.left.right,
              null
            );
            return this.left.copy(null, null, this.color, null, nr);
          }
          /**
           * @returns Newt ree, after colorFlip.
           */
          colorFlip_() {
            const left = this.left.copy(
              null,
              null,
              !this.left.color,
              null,
              null
            );
            const right = this.right.copy(
              null,
              null,
              !this.right.color,
              null,
              null
            );
            return this.copy(null, null, !this.color, left, right);
          }
          /**
           * For testing.
           *
           * @returns True if all is well.
           */
          checkMaxDepth_() {
            const blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
          }
          check_() {
            if (this.isRed_() && this.left.isRed_()) {
              throw new Error(
                "Red node has red child(" + this.key + "," + this.value + ")"
              );
            }
            if (this.right.isRed_()) {
              throw new Error(
                "Right child of (" + this.key + "," + this.value + ") is red"
              );
            }
            const blackDepth = this.left.check_();
            if (blackDepth !== this.right.check_()) {
              throw new Error("Black depths differ");
            } else {
              return blackDepth + (this.isRed_() ? 0 : 1);
            }
          }
        }
        LLRBNode.RED = true;
        LLRBNode.BLACK = false;
        /**
         * Represents an empty node (a leaf node in the Red-Black Tree).
         */
        class LLRBEmptyNode {
          /**
           * Returns a copy of the current node.
           *
           * @returns The node copy.
           */
          copy(key, value, color, left, right) {
            return this;
          }
          /**
           * Returns a copy of the tree, with the specified key/value added.
           *
           * @param key - Key to be added.
           * @param value - Value to be added.
           * @param comparator - Comparator.
           * @returns New tree, with item added.
           */
          insert(key, value, comparator) {
            return new LLRBNode(key, value, null);
          }
          /**
           * Returns a copy of the tree, with the specified key removed.
           *
           * @param key - The key to remove.
           * @param comparator - Comparator.
           * @returns New tree, with item removed.
           */
          remove(key, comparator) {
            return this;
          }
          /**
           * @returns The total number of nodes in the tree.
           */
          count() {
            return 0;
          }
          /**
           * @returns True if the tree is empty.
           */
          isEmpty() {
            return true;
          }
          /**
           * Traverses the tree in key order and calls the specified action function
           * for each node.
           *
           * @param action - Callback function to be called for each
           * node.  If it returns true, traversal is aborted.
           * @returns True if traversal was aborted.
           */
          inorderTraversal(action) {
            return false;
          }
          /**
           * Traverses the tree in reverse key order and calls the specified action function
           * for each node.
           *
           * @param action - Callback function to be called for each
           * node.  If it returns true, traversal is aborted.
           * @returns True if traversal was aborted.
           */
          reverseTraversal(action) {
            return false;
          }
          minKey() {
            return null;
          }
          maxKey() {
            return null;
          }
          check_() {
            return 0;
          }
          /**
           * @returns Whether this node is red.
           */
          isRed_() {
            return false;
          }
        }
        /**
         * An immutable sorted map implementation, based on a Left-leaning Red-Black
         * tree.
         */
        class SortedMap {
          /**
           * @param comparator_ - Key comparator.
           * @param root_ - Optional root node for the map.
           */
          constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {
            this.comparator_ = comparator_;
            this.root_ = root_;
          }
          /**
           * Returns a copy of the map, with the specified key/value added or replaced.
           * (TODO: We should perhaps rename this method to 'put')
           *
           * @param key - Key to be added.
           * @param value - Value to be added.
           * @returns New map, with item added.
           */
          insert(key, value) {
            return new SortedMap(
              this.comparator_,
              this.root_
                .insert(key, value, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null)
            );
          }
          /**
           * Returns a copy of the map, with the specified key removed.
           *
           * @param key - The key to remove.
           * @returns New map, with item removed.
           */
          remove(key) {
            return new SortedMap(
              this.comparator_,
              this.root_
                .remove(key, this.comparator_)
                .copy(null, null, LLRBNode.BLACK, null, null)
            );
          }
          /**
           * Returns the value of the node with the given key, or null.
           *
           * @param key - The key to look up.
           * @returns The value of the node with the given key, or null if the
           * key doesn't exist.
           */
          get(key) {
            let cmp;
            let node = this.root_;
            while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                return node.value;
              } else if (cmp < 0) {
                node = node.left;
              } else if (cmp > 0) {
                node = node.right;
              }
            }
            return null;
          }
          /**
           * Returns the key of the item *before* the specified key, or null if key is the first item.
           * @param key - The key to find the predecessor of
           * @returns The predecessor key.
           */
          getPredecessorKey(key) {
            let cmp,
              node = this.root_,
              rightParent = null;
            while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                if (!node.left.isEmpty()) {
                  node = node.left;
                  while (!node.right.isEmpty()) {
                    node = node.right;
                  }
                  return node.key;
                } else if (rightParent) {
                  return rightParent.key;
                } else {
                  return null; // first item.
                }
              } else if (cmp < 0) {
                node = node.left;
              } else if (cmp > 0) {
                rightParent = node;
                node = node.right;
              }
            }
            throw new Error(
              "Attempted to find predecessor key for a nonexistent key.  What gives?"
            );
          }
          /**
           * @returns True if the map is empty.
           */
          isEmpty() {
            return this.root_.isEmpty();
          }
          /**
           * @returns The total number of nodes in the map.
           */
          count() {
            return this.root_.count();
          }
          /**
           * @returns The minimum key in the map.
           */
          minKey() {
            return this.root_.minKey();
          }
          /**
           * @returns The maximum key in the map.
           */
          maxKey() {
            return this.root_.maxKey();
          }
          /**
           * Traverses the map in key order and calls the specified action function
           * for each key/value pair.
           *
           * @param action - Callback function to be called
           * for each key/value pair.  If action returns true, traversal is aborted.
           * @returns The first truthy value returned by action, or the last falsey
           *   value returned by action
           */
          inorderTraversal(action) {
            return this.root_.inorderTraversal(action);
          }
          /**
           * Traverses the map in reverse key order and calls the specified action function
           * for each key/value pair.
           *
           * @param action - Callback function to be called
           * for each key/value pair.  If action returns true, traversal is aborted.
           * @returns True if the traversal was aborted.
           */
          reverseTraversal(action) {
            return this.root_.reverseTraversal(action);
          }
          /**
           * Returns an iterator over the SortedMap.
           * @returns The iterator.
           */
          getIterator(resultGenerator) {
            return new SortedMapIterator(
              this.root_,
              null,
              this.comparator_,
              false,
              resultGenerator
            );
          }
          getIteratorFrom(key, resultGenerator) {
            return new SortedMapIterator(
              this.root_,
              key,
              this.comparator_,
              false,
              resultGenerator
            );
          }
          getReverseIteratorFrom(key, resultGenerator) {
            return new SortedMapIterator(
              this.root_,
              key,
              this.comparator_,
              true,
              resultGenerator
            );
          }
          getReverseIterator(resultGenerator) {
            return new SortedMapIterator(
              this.root_,
              null,
              this.comparator_,
              true,
              resultGenerator
            );
          }
        }
        /**
         * Always use the same empty node, to reduce memory.
         */
        SortedMap.EMPTY_NODE = new LLRBEmptyNode();

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function NAME_ONLY_COMPARATOR(left, right) {
          return nameCompare(left.name, right.name);
        }
        function NAME_COMPARATOR(left, right) {
          return nameCompare(left, right);
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let MAX_NODE$2;
        function setMaxNode$1(val) {
          MAX_NODE$2 = val;
        }
        const priorityHashText = function (priority) {
          if (typeof priority === "number") {
            return "number:" + doubleToIEEE754String(priority);
          } else {
            return "string:" + priority;
          }
        };
        /**
         * Validates that a priority snapshot Node is valid.
         */
        const validatePriorityNode = function (priorityNode) {
          if (priorityNode.isLeafNode()) {
            const val = priorityNode.val();
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              typeof val === "string" ||
              typeof val === "number" ||
              (typeof val === "object" &&
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                  val,
                  ".sv"
                )),
              "Priority must be a string or number."
            );
          } else {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              priorityNode === MAX_NODE$2 || priorityNode.isEmpty(),
              "priority of unexpected type."
            );
          }
          // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(),
            "Priority nodes can't have a priority of their own."
          );
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let __childrenNodeConstructor;
        /**
         * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
         * implements Node and stores the value of the node (a string,
         * number, or boolean) accessible via getValue().
         */
        class LeafNode {
          /**
           * @param value_ - The value to store in this leaf node. The object type is
           * possible in the event of a deferred value
           * @param priorityNode_ - The priority of this node.
           */
          constructor(
            value_,
            priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE
          ) {
            this.value_ = value_;
            this.priorityNode_ = priorityNode_;
            this.lazyHash_ = null;
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.value_ !== undefined && this.value_ !== null,
              "LeafNode shouldn't be created with null/undefined value."
            );
            validatePriorityNode(this.priorityNode_);
          }
          static set __childrenNodeConstructor(val) {
            __childrenNodeConstructor = val;
          }
          static get __childrenNodeConstructor() {
            return __childrenNodeConstructor;
          }
          /** @inheritDoc */
          isLeafNode() {
            return true;
          }
          /** @inheritDoc */
          getPriority() {
            return this.priorityNode_;
          }
          /** @inheritDoc */
          updatePriority(newPriorityNode) {
            return new LeafNode(this.value_, newPriorityNode);
          }
          /** @inheritDoc */
          getImmediateChild(childName) {
            // Hack to treat priority as a regular child
            if (childName === ".priority") {
              return this.priorityNode_;
            } else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
          }
          /** @inheritDoc */
          getChild(path) {
            if (pathIsEmpty(path)) {
              return this;
            } else if (pathGetFront(path) === ".priority") {
              return this.priorityNode_;
            } else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
            }
          }
          hasChild() {
            return false;
          }
          /** @inheritDoc */
          getPredecessorChildName(childName, childNode) {
            return null;
          }
          /** @inheritDoc */
          updateImmediateChild(childName, newChildNode) {
            if (childName === ".priority") {
              return this.updatePriority(newChildNode);
            } else if (newChildNode.isEmpty() && childName !== ".priority") {
              return this;
            } else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(
                childName,
                newChildNode
              ).updatePriority(this.priorityNode_);
            }
          }
          /** @inheritDoc */
          updateChild(path, newChildNode) {
            const front = pathGetFront(path);
            if (front === null) {
              return newChildNode;
            } else if (newChildNode.isEmpty() && front !== ".priority") {
              return this;
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                front !== ".priority" || pathGetLength(path) === 1,
                ".priority must be the last token in a path"
              );
              return this.updateImmediateChild(
                front,
                LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(
                  pathPopFront(path),
                  newChildNode
                )
              );
            }
          }
          /** @inheritDoc */
          isEmpty() {
            return false;
          }
          /** @inheritDoc */
          numChildren() {
            return 0;
          }
          /** @inheritDoc */
          forEachChild(index, action) {
            return false;
          }
          val(exportFormat) {
            if (exportFormat && !this.getPriority().isEmpty()) {
              return {
                ".value": this.getValue(),
                ".priority": this.getPriority().val(),
              };
            } else {
              return this.getValue();
            }
          }
          /** @inheritDoc */
          hash() {
            if (this.lazyHash_ === null) {
              let toHash = "";
              if (!this.priorityNode_.isEmpty()) {
                toHash +=
                  "priority:" +
                  priorityHashText(this.priorityNode_.val()) +
                  ":";
              }
              const type = typeof this.value_;
              toHash += type + ":";
              if (type === "number") {
                toHash += doubleToIEEE754String(this.value_);
              } else {
                toHash += this.value_;
              }
              this.lazyHash_ = sha1(toHash);
            }
            return this.lazyHash_;
          }
          /**
           * Returns the value of the leaf node.
           * @returns The value of the node.
           */
          getValue() {
            return this.value_;
          }
          compareTo(other) {
            if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
              return 1;
            } else if (other instanceof LeafNode.__childrenNodeConstructor) {
              return -1;
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                other.isLeafNode(),
                "Unknown node type"
              );
              return this.compareToLeafNode_(other);
            }
          }
          /**
           * Comparison specifically for two leaf nodes
           */
          compareToLeafNode_(otherLeaf) {
            const otherLeafType = typeof otherLeaf.value_;
            const thisLeafType = typeof this.value_;
            const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
            const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              otherIndex >= 0,
              "Unknown leaf type: " + otherLeafType
            );
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              thisIndex >= 0,
              "Unknown leaf type: " + thisLeafType
            );
            if (otherIndex === thisIndex) {
              // Same type, compare values
              if (thisLeafType === "object") {
                // Deferred value nodes are all equal, but we should also never get to this point...
                return 0;
              } else {
                // Note that this works because true > false, all others are number or string comparisons
                if (this.value_ < otherLeaf.value_) {
                  return -1;
                } else if (this.value_ === otherLeaf.value_) {
                  return 0;
                } else {
                  return 1;
                }
              }
            } else {
              return thisIndex - otherIndex;
            }
          }
          withIndex() {
            return this;
          }
          isIndexed() {
            return true;
          }
          equals(other) {
            if (other === this) {
              return true;
            } else if (other.isLeafNode()) {
              const otherLeaf = other;
              return (
                this.value_ === otherLeaf.value_ &&
                this.priorityNode_.equals(otherLeaf.priorityNode_)
              );
            } else {
              return false;
            }
          }
        }
        /**
         * The sort order for comparing leaf nodes of different types. If two leaf nodes have
         * the same type, the comparison falls back to their value
         */
        LeafNode.VALUE_TYPE_ORDER = ["object", "boolean", "number", "string"];

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let nodeFromJSON$1;
        let MAX_NODE$1;
        function setNodeFromJSON(val) {
          nodeFromJSON$1 = val;
        }
        function setMaxNode(val) {
          MAX_NODE$1 = val;
        }
        class PriorityIndex extends Index {
          compare(a, b) {
            const aPriority = a.node.getPriority();
            const bPriority = b.node.getPriority();
            const indexCmp = aPriority.compareTo(bPriority);
            if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
            } else {
              return indexCmp;
            }
          }
          isDefinedOn(node) {
            return !node.getPriority().isEmpty();
          }
          indexedValueChanged(oldNode, newNode) {
            return !oldNode.getPriority().equals(newNode.getPriority());
          }
          minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
          }
          maxPost() {
            return new NamedNode(
              MAX_NAME,
              new LeafNode("[PRIORITY-POST]", MAX_NODE$1)
            );
          }
          makePost(indexValue, name) {
            const priorityNode = nodeFromJSON$1(indexValue);
            return new NamedNode(
              name,
              new LeafNode("[PRIORITY-POST]", priorityNode)
            );
          }
          /**
           * @returns String representation for inclusion in a query spec
           */
          toString() {
            return ".priority";
          }
        }
        const PRIORITY_INDEX = new PriorityIndex();

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const LOG_2 = Math.log(2);
        class Base12Num {
          constructor(length) {
            const logBase2 = (num) =>
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              parseInt(Math.log(num) / LOG_2, 10);
            const bitMask = (bits) => parseInt(Array(bits + 1).join("1"), 2);
            this.count = logBase2(length + 1);
            this.current_ = this.count - 1;
            const mask = bitMask(this.count);
            this.bits_ = (length + 1) & mask;
          }
          nextBitIsOne() {
            //noinspection JSBitwiseOperatorUsage
            const result = !(this.bits_ & (0x1 << this.current_));
            this.current_--;
            return result;
          }
        }
        /**
         * Takes a list of child nodes and constructs a SortedSet using the given comparison
         * function
         *
         * Uses the algorithm described in the paper linked here:
         * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
         *
         * @param childList - Unsorted list of children
         * @param cmp - The comparison method to be used
         * @param keyFn - An optional function to extract K from a node wrapper, if K's
         * type is not NamedNode
         * @param mapSortFn - An optional override for comparator used by the generated sorted map
         */
        const buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
          childList.sort(cmp);
          const buildBalancedTree = function (low, high) {
            const length = high - low;
            let namedNode;
            let key;
            if (length === 0) {
              return null;
            } else if (length === 1) {
              namedNode = childList[low];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(
                key,
                namedNode.node,
                LLRBNode.BLACK,
                null,
                null
              );
            } else {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const middle = parseInt(length / 2, 10) + low;
              const left = buildBalancedTree(low, middle);
              const right = buildBalancedTree(middle + 1, high);
              namedNode = childList[middle];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(
                key,
                namedNode.node,
                LLRBNode.BLACK,
                left,
                right
              );
            }
          };
          const buildFrom12Array = function (base12) {
            let node = null;
            let root = null;
            let index = childList.length;
            const buildPennant = function (chunkSize, color) {
              const low = index - chunkSize;
              const high = index;
              index -= chunkSize;
              const childTree = buildBalancedTree(low + 1, high);
              const namedNode = childList[low];
              const key = keyFn ? keyFn(namedNode) : namedNode;
              attachPennant(
                new LLRBNode(key, namedNode.node, color, null, childTree)
              );
            };
            const attachPennant = function (pennant) {
              if (node) {
                node.left = pennant;
                node = pennant;
              } else {
                root = pennant;
                node = pennant;
              }
            };
            for (let i = 0; i < base12.count; ++i) {
              const isOne = base12.nextBitIsOne();
              // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
              const chunkSize = Math.pow(2, base12.count - (i + 1));
              if (isOne) {
                buildPennant(chunkSize, LLRBNode.BLACK);
              } else {
                // current == 2
                buildPennant(chunkSize, LLRBNode.BLACK);
                buildPennant(chunkSize, LLRBNode.RED);
              }
            }
            return root;
          };
          const base12 = new Base12Num(childList.length);
          const root = buildFrom12Array(base12);
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return new SortedMap(mapSortFn || cmp, root);
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let _defaultIndexMap;
        const fallbackObject = {};
        class IndexMap {
          constructor(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
          }
          /**
           * The default IndexMap for nodes without a priority
           */
          static get Default() {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              fallbackObject && PRIORITY_INDEX,
              "ChildrenNode.ts has not been loaded"
            );
            _defaultIndexMap =
              _defaultIndexMap ||
              new IndexMap(
                { ".priority": fallbackObject },
                { ".priority": PRIORITY_INDEX }
              );
            return _defaultIndexMap;
          }
          get(indexKey) {
            const sortedMap = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                this.indexes_,
                indexKey
              );
            if (!sortedMap) {
              throw new Error("No index defined for " + indexKey);
            }
            if (sortedMap instanceof SortedMap) {
              return sortedMap;
            } else {
              // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
              // regular child map
              return null;
            }
          }
          hasIndex(indexDefinition) {
            return (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
              this.indexSet_,
              indexDefinition.toString()
            );
          }
          addIndex(indexDefinition, existingChildren) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              indexDefinition !== KEY_INDEX,
              "KeyIndex always exists and isn't meant to be added to the IndexMap."
            );
            const childList = [];
            let sawIndexedValue = false;
            const iter = existingChildren.getIterator(NamedNode.Wrap);
            let next = iter.getNext();
            while (next) {
              sawIndexedValue =
                sawIndexedValue || indexDefinition.isDefinedOn(next.node);
              childList.push(next);
              next = iter.getNext();
            }
            let newIndex;
            if (sawIndexedValue) {
              newIndex = buildChildSet(childList, indexDefinition.getCompare());
            } else {
              newIndex = fallbackObject;
            }
            const indexName = indexDefinition.toString();
            const newIndexSet = Object.assign({}, this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            const newIndexes = Object.assign({}, this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
          }
          /**
           * Ensure that this node is properly tracked in any indexes that we're maintaining
           */
          addToIndexes(namedNode, existingChildren) {
            const newIndexes = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(
                this.indexes_,
                (indexedChildren, indexName) => {
                  const index = (0,
                    _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                      this.indexSet_,
                      indexName
                    );
                  (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                    index,
                    "Missing index implementation for " + indexName
                  );
                  if (indexedChildren === fallbackObject) {
                    // Check to see if we need to index everything
                    if (index.isDefinedOn(namedNode.node)) {
                      // We need to build this index
                      const childList = [];
                      const iter = existingChildren.getIterator(NamedNode.Wrap);
                      let next = iter.getNext();
                      while (next) {
                        if (next.name !== namedNode.name) {
                          childList.push(next);
                        }
                        next = iter.getNext();
                      }
                      childList.push(namedNode);
                      return buildChildSet(childList, index.getCompare());
                    } else {
                      // No change, this remains a fallback
                      return fallbackObject;
                    }
                  } else {
                    const existingSnap = existingChildren.get(namedNode.name);
                    let newChildren = indexedChildren;
                    if (existingSnap) {
                      newChildren = newChildren.remove(
                        new NamedNode(namedNode.name, existingSnap)
                      );
                    }
                    return newChildren.insert(namedNode, namedNode.node);
                  }
                }
              );
            return new IndexMap(newIndexes, this.indexSet_);
          }
          /**
           * Create a new IndexMap instance with the given value removed
           */
          removeFromIndexes(namedNode, existingChildren) {
            const newIndexes = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(
                this.indexes_,
                (indexedChildren) => {
                  if (indexedChildren === fallbackObject) {
                    // This is the fallback. Just return it, nothing to do in this case
                    return indexedChildren;
                  } else {
                    const existingSnap = existingChildren.get(namedNode.name);
                    if (existingSnap) {
                      return indexedChildren.remove(
                        new NamedNode(namedNode.name, existingSnap)
                      );
                    } else {
                      // No record of this child
                      return indexedChildren;
                    }
                  }
                }
              );
            return new IndexMap(newIndexes, this.indexSet_);
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // TODO: For memory savings, don't store priorityNode_ if it's empty.
        let EMPTY_NODE;
        /**
         * ChildrenNode is a class for storing internal nodes in a DataSnapshot
         * (i.e. nodes with children).  It implements Node and stores the
         * list of children in the children property, sorted by child name.
         */
        class ChildrenNode {
          /**
           * @param children_ - List of children of this node..
           * @param priorityNode_ - The priority of this node (as a snapshot node).
           */
          constructor(children_, priorityNode_, indexMap_) {
            this.children_ = children_;
            this.priorityNode_ = priorityNode_;
            this.indexMap_ = indexMap_;
            this.lazyHash_ = null;
            /**
             * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
             * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
             * class instead of an empty ChildrenNode.
             */
            if (this.priorityNode_) {
              validatePriorityNode(this.priorityNode_);
            }
            if (this.children_.isEmpty()) {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                !this.priorityNode_ || this.priorityNode_.isEmpty(),
                "An empty node cannot have a priority"
              );
            }
          }
          static get EMPTY_NODE() {
            return (
              EMPTY_NODE ||
              (EMPTY_NODE = new ChildrenNode(
                new SortedMap(NAME_COMPARATOR),
                null,
                IndexMap.Default
              ))
            );
          }
          /** @inheritDoc */
          isLeafNode() {
            return false;
          }
          /** @inheritDoc */
          getPriority() {
            return this.priorityNode_ || EMPTY_NODE;
          }
          /** @inheritDoc */
          updatePriority(newPriorityNode) {
            if (this.children_.isEmpty()) {
              // Don't allow priorities on empty nodes
              return this;
            } else {
              return new ChildrenNode(
                this.children_,
                newPriorityNode,
                this.indexMap_
              );
            }
          }
          /** @inheritDoc */
          getImmediateChild(childName) {
            // Hack to treat priority as a regular child
            if (childName === ".priority") {
              return this.getPriority();
            } else {
              const child = this.children_.get(childName);
              return child === null ? EMPTY_NODE : child;
            }
          }
          /** @inheritDoc */
          getChild(path) {
            const front = pathGetFront(path);
            if (front === null) {
              return this;
            }
            return this.getImmediateChild(front).getChild(pathPopFront(path));
          }
          /** @inheritDoc */
          hasChild(childName) {
            return this.children_.get(childName) !== null;
          }
          /** @inheritDoc */
          updateImmediateChild(childName, newChildNode) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              newChildNode,
              "We should always be passing snapshot nodes"
            );
            if (childName === ".priority") {
              return this.updatePriority(newChildNode);
            } else {
              const namedNode = new NamedNode(childName, newChildNode);
              let newChildren, newIndexMap;
              if (newChildNode.isEmpty()) {
                newChildren = this.children_.remove(childName);
                newIndexMap = this.indexMap_.removeFromIndexes(
                  namedNode,
                  this.children_
                );
              } else {
                newChildren = this.children_.insert(childName, newChildNode);
                newIndexMap = this.indexMap_.addToIndexes(
                  namedNode,
                  this.children_
                );
              }
              const newPriority = newChildren.isEmpty()
                ? EMPTY_NODE
                : this.priorityNode_;
              return new ChildrenNode(newChildren, newPriority, newIndexMap);
            }
          }
          /** @inheritDoc */
          updateChild(path, newChildNode) {
            const front = pathGetFront(path);
            if (front === null) {
              return newChildNode;
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                pathGetFront(path) !== ".priority" || pathGetLength(path) === 1,
                ".priority must be the last token in a path"
              );
              const newImmediateChild = this.getImmediateChild(
                front
              ).updateChild(pathPopFront(path), newChildNode);
              return this.updateImmediateChild(front, newImmediateChild);
            }
          }
          /** @inheritDoc */
          isEmpty() {
            return this.children_.isEmpty();
          }
          /** @inheritDoc */
          numChildren() {
            return this.children_.count();
          }
          /** @inheritDoc */
          val(exportFormat) {
            if (this.isEmpty()) {
              return null;
            }
            const obj = {};
            let numKeys = 0,
              maxKey = 0,
              allIntegerKeys = true;
            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
              obj[key] = childNode.val(exportFormat);
              numKeys++;
              if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                maxKey = Math.max(maxKey, Number(key));
              } else {
                allIntegerKeys = false;
              }
            });
            if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
              // convert to array.
              const array = [];
              // eslint-disable-next-line guard-for-in
              for (const key in obj) {
                array[key] = obj[key];
              }
              return array;
            } else {
              if (exportFormat && !this.getPriority().isEmpty()) {
                obj[".priority"] = this.getPriority().val();
              }
              return obj;
            }
          }
          /** @inheritDoc */
          hash() {
            if (this.lazyHash_ === null) {
              let toHash = "";
              if (!this.getPriority().isEmpty()) {
                toHash +=
                  "priority:" +
                  priorityHashText(this.getPriority().val()) +
                  ":";
              }
              this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                const childHash = childNode.hash();
                if (childHash !== "") {
                  toHash += ":" + key + ":" + childHash;
                }
              });
              this.lazyHash_ = toHash === "" ? "" : sha1(toHash);
            }
            return this.lazyHash_;
          }
          /** @inheritDoc */
          getPredecessorChildName(childName, childNode, index) {
            const idx = this.resolveIndex_(index);
            if (idx) {
              const predecessor = idx.getPredecessorKey(
                new NamedNode(childName, childNode)
              );
              return predecessor ? predecessor.name : null;
            } else {
              return this.children_.getPredecessorKey(childName);
            }
          }
          getFirstChildName(indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
              const minKey = idx.minKey();
              return minKey && minKey.name;
            } else {
              return this.children_.minKey();
            }
          }
          getFirstChild(indexDefinition) {
            const minKey = this.getFirstChildName(indexDefinition);
            if (minKey) {
              return new NamedNode(minKey, this.children_.get(minKey));
            } else {
              return null;
            }
          }
          /**
           * Given an index, return the key name of the largest value we have, according to that index
           */
          getLastChildName(indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
              const maxKey = idx.maxKey();
              return maxKey && maxKey.name;
            } else {
              return this.children_.maxKey();
            }
          }
          getLastChild(indexDefinition) {
            const maxKey = this.getLastChildName(indexDefinition);
            if (maxKey) {
              return new NamedNode(maxKey, this.children_.get(maxKey));
            } else {
              return null;
            }
          }
          forEachChild(index, action) {
            const idx = this.resolveIndex_(index);
            if (idx) {
              return idx.inorderTraversal((wrappedNode) => {
                return action(wrappedNode.name, wrappedNode.node);
              });
            } else {
              return this.children_.inorderTraversal(action);
            }
          }
          getIterator(indexDefinition) {
            return this.getIteratorFrom(
              indexDefinition.minPost(),
              indexDefinition
            );
          }
          getIteratorFrom(startPost, indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
              return idx.getIteratorFrom(startPost, (key) => key);
            } else {
              const iterator = this.children_.getIteratorFrom(
                startPost.name,
                NamedNode.Wrap
              );
              let next = iterator.peek();
              while (
                next != null &&
                indexDefinition.compare(next, startPost) < 0
              ) {
                iterator.getNext();
                next = iterator.peek();
              }
              return iterator;
            }
          }
          getReverseIterator(indexDefinition) {
            return this.getReverseIteratorFrom(
              indexDefinition.maxPost(),
              indexDefinition
            );
          }
          getReverseIteratorFrom(endPost, indexDefinition) {
            const idx = this.resolveIndex_(indexDefinition);
            if (idx) {
              return idx.getReverseIteratorFrom(endPost, (key) => {
                return key;
              });
            } else {
              const iterator = this.children_.getReverseIteratorFrom(
                endPost.name,
                NamedNode.Wrap
              );
              let next = iterator.peek();
              while (
                next != null &&
                indexDefinition.compare(next, endPost) > 0
              ) {
                iterator.getNext();
                next = iterator.peek();
              }
              return iterator;
            }
          }
          compareTo(other) {
            if (this.isEmpty()) {
              if (other.isEmpty()) {
                return 0;
              } else {
                return -1;
              }
            } else if (other.isLeafNode() || other.isEmpty()) {
              return 1;
            } else if (other === MAX_NODE) {
              return -1;
            } else {
              // Must be another node with children.
              return 0;
            }
          }
          withIndex(indexDefinition) {
            if (
              indexDefinition === KEY_INDEX ||
              this.indexMap_.hasIndex(indexDefinition)
            ) {
              return this;
            } else {
              const newIndexMap = this.indexMap_.addIndex(
                indexDefinition,
                this.children_
              );
              return new ChildrenNode(
                this.children_,
                this.priorityNode_,
                newIndexMap
              );
            }
          }
          isIndexed(index) {
            return index === KEY_INDEX || this.indexMap_.hasIndex(index);
          }
          equals(other) {
            if (other === this) {
              return true;
            } else if (other.isLeafNode()) {
              return false;
            } else {
              const otherChildrenNode = other;
              if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                return false;
              } else if (
                this.children_.count() === otherChildrenNode.children_.count()
              ) {
                const thisIter = this.getIterator(PRIORITY_INDEX);
                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                let thisCurrent = thisIter.getNext();
                let otherCurrent = otherIter.getNext();
                while (thisCurrent && otherCurrent) {
                  if (
                    thisCurrent.name !== otherCurrent.name ||
                    !thisCurrent.node.equals(otherCurrent.node)
                  ) {
                    return false;
                  }
                  thisCurrent = thisIter.getNext();
                  otherCurrent = otherIter.getNext();
                }
                return thisCurrent === null && otherCurrent === null;
              } else {
                return false;
              }
            }
          }
          /**
           * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
           * instead.
           *
           */
          resolveIndex_(indexDefinition) {
            if (indexDefinition === KEY_INDEX) {
              return null;
            } else {
              return this.indexMap_.get(indexDefinition.toString());
            }
          }
        }
        ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
        class MaxNode extends ChildrenNode {
          constructor() {
            super(
              new SortedMap(NAME_COMPARATOR),
              ChildrenNode.EMPTY_NODE,
              IndexMap.Default
            );
          }
          compareTo(other) {
            if (other === this) {
              return 0;
            } else {
              return 1;
            }
          }
          equals(other) {
            // Not that we every compare it, but MAX_NODE is only ever equal to itself
            return other === this;
          }
          getPriority() {
            return this;
          }
          getImmediateChild(childName) {
            return ChildrenNode.EMPTY_NODE;
          }
          isEmpty() {
            return false;
          }
        }
        /**
         * Marker that will sort higher than any other snapshot.
         */
        const MAX_NODE = new MaxNode();
        Object.defineProperties(NamedNode, {
          MIN: {
            value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE),
          },
          MAX: {
            value: new NamedNode(MAX_NAME, MAX_NODE),
          },
        });
        /**
         * Reference Extensions
         */
        KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
        LeafNode.__childrenNodeConstructor = ChildrenNode;
        setMaxNode$1(MAX_NODE);
        setMaxNode(MAX_NODE);

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const USE_HINZE = true;
        /**
         * Constructs a snapshot node representing the passed JSON and returns it.
         * @param json - JSON to create a node for.
         * @param priority - Optional priority to use.  This will be ignored if the
         * passed JSON contains a .priority property.
         */
        function nodeFromJSON(json, priority = null) {
          if (json === null) {
            return ChildrenNode.EMPTY_NODE;
          }
          if (typeof json === "object" && ".priority" in json) {
            priority = json[".priority"];
          }
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            priority === null ||
            typeof priority === "string" ||
            typeof priority === "number" ||
            (typeof priority === "object" && ".sv" in priority),
            "Invalid priority type found: " + typeof priority
          );
          if (
            typeof json === "object" &&
            ".value" in json &&
            json[".value"] !== null
          ) {
            json = json[".value"];
          }
          // Valid leaf nodes include non-objects or server-value wrapper objects
          if (typeof json !== "object" || ".sv" in json) {
            const jsonLeaf = json;
            return new LeafNode(jsonLeaf, nodeFromJSON(priority));
          }
          if (!(json instanceof Array) && USE_HINZE) {
            const children = [];
            let childrenHavePriority = false;
            const hinzeJsonObj = json;
            each(hinzeJsonObj, (key, child) => {
              if (key.substring(0, 1) !== ".") {
                // Ignore metadata nodes
                const childNode = nodeFromJSON(child);
                if (!childNode.isEmpty()) {
                  childrenHavePriority =
                    childrenHavePriority || !childNode.getPriority().isEmpty();
                  children.push(new NamedNode(key, childNode));
                }
              }
            });
            if (children.length === 0) {
              return ChildrenNode.EMPTY_NODE;
            }
            const childSet = buildChildSet(
              children,
              NAME_ONLY_COMPARATOR,
              (namedNode) => namedNode.name,
              NAME_COMPARATOR
            );
            if (childrenHavePriority) {
              const sortedChildSet = buildChildSet(
                children,
                PRIORITY_INDEX.getCompare()
              );
              return new ChildrenNode(
                childSet,
                nodeFromJSON(priority),
                new IndexMap(
                  { ".priority": sortedChildSet },
                  { ".priority": PRIORITY_INDEX }
                )
              );
            } else {
              return new ChildrenNode(
                childSet,
                nodeFromJSON(priority),
                IndexMap.Default
              );
            }
          } else {
            let node = ChildrenNode.EMPTY_NODE;
            each(json, (key, childData) => {
              if (
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                  json,
                  key
                )
              ) {
                if (key.substring(0, 1) !== ".") {
                  // ignore metadata nodes.
                  const childNode = nodeFromJSON(childData);
                  if (childNode.isLeafNode() || !childNode.isEmpty()) {
                    node = node.updateImmediateChild(key, childNode);
                  }
                }
              }
            });
            return node.updatePriority(nodeFromJSON(priority));
          }
        }
        setNodeFromJSON(nodeFromJSON);

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class PathIndex extends Index {
          constructor(indexPath_) {
            super();
            this.indexPath_ = indexPath_;
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              !pathIsEmpty(indexPath_) &&
              pathGetFront(indexPath_) !== ".priority",
              "Can't create PathIndex with empty path or .priority key"
            );
          }
          extractChild(snap) {
            return snap.getChild(this.indexPath_);
          }
          isDefinedOn(node) {
            return !node.getChild(this.indexPath_).isEmpty();
          }
          compare(a, b) {
            const aChild = this.extractChild(a.node);
            const bChild = this.extractChild(b.node);
            const indexCmp = aChild.compareTo(bChild);
            if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
            } else {
              return indexCmp;
            }
          }
          makePost(indexValue, name) {
            const valueNode = nodeFromJSON(indexValue);
            const node = ChildrenNode.EMPTY_NODE.updateChild(
              this.indexPath_,
              valueNode
            );
            return new NamedNode(name, node);
          }
          maxPost() {
            const node = ChildrenNode.EMPTY_NODE.updateChild(
              this.indexPath_,
              MAX_NODE
            );
            return new NamedNode(MAX_NAME, node);
          }
          toString() {
            return pathSlice(this.indexPath_, 0).join("/");
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class ValueIndex extends Index {
          compare(a, b) {
            const indexCmp = a.node.compareTo(b.node);
            if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
            } else {
              return indexCmp;
            }
          }
          isDefinedOn(node) {
            return true;
          }
          indexedValueChanged(oldNode, newNode) {
            return !oldNode.equals(newNode);
          }
          minPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MIN;
          }
          maxPost() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return NamedNode.MAX;
          }
          makePost(indexValue, name) {
            const valueNode = nodeFromJSON(indexValue);
            return new NamedNode(name, valueNode);
          }
          /**
           * @returns String representation for inclusion in a query spec
           */
          toString() {
            return ".value";
          }
        }
        const VALUE_INDEX = new ValueIndex();

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // Modeled after base64 web-safe chars, but ordered by ASCII.
        const PUSH_CHARS =
          "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
        const MIN_PUSH_CHAR = "-";
        const MAX_PUSH_CHAR = "z";
        const MAX_KEY_LEN = 786;
        /**
         * Fancy ID generator that creates 20-character string identifiers with the
         * following properties:
         *
         * 1. They're based on timestamp so that they sort *after* any existing ids.
         * 2. They contain 72-bits of random data after the timestamp so that IDs won't
         *    collide with other clients' IDs.
         * 3. They sort *lexicographically* (so the timestamp is converted to characters
         *    that will sort properly).
         * 4. They're monotonically increasing. Even if you generate more than one in
         *    the same timestamp, the latter ones will sort after the former ones. We do
         *    this by using the previous random bits but "incrementing" them by 1 (only
         *    in the case of a timestamp collision).
         */
        const nextPushId = (function () {
          // Timestamp of last push, used to prevent local collisions if you push twice
          // in one ms.
          let lastPushTime = 0;
          // We generate 72-bits of randomness which get turned into 12 characters and
          // appended to the timestamp to prevent collisions with other clients. We
          // store the last characters we generated because in the event of a collision,
          // we'll use those same characters except "incremented" by one.
          const lastRandChars = [];
          return function (now) {
            const duplicateTime = now === lastPushTime;
            lastPushTime = now;
            let i;
            const timeStampChars = new Array(8);
            for (i = 7; i >= 0; i--) {
              timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
              // NOTE: Can't use << here because javascript will convert to int and lose
              // the upper bits.
              now = Math.floor(now / 64);
            }
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              now === 0,
              "Cannot push at time == 0"
            );
            let id = timeStampChars.join("");
            if (!duplicateTime) {
              for (i = 0; i < 12; i++) {
                lastRandChars[i] = Math.floor(Math.random() * 64);
              }
            } else {
              // If the timestamp hasn't changed since last push, use the same random
              // number, except incremented by 1.
              for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                lastRandChars[i] = 0;
              }
              lastRandChars[i]++;
            }
            for (i = 0; i < 12; i++) {
              id += PUSH_CHARS.charAt(lastRandChars[i]);
            }
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              id.length === 20,
              "nextPushId: Length should be 20."
            );
            return id;
          };
        })();
        const successor = function (key) {
          if (key === "" + INTEGER_32_MAX) {
            // See https://firebase.google.com/docs/database/web/lists-of-data#data-order
            return MIN_PUSH_CHAR;
          }
          const keyAsInt = tryParseInt(key);
          if (keyAsInt != null) {
            return "" + (keyAsInt + 1);
          }
          const next = new Array(key.length);
          for (let i = 0; i < next.length; i++) {
            next[i] = key.charAt(i);
          }
          if (next.length < MAX_KEY_LEN) {
            next.push(MIN_PUSH_CHAR);
            return next.join("");
          }
          let i = next.length - 1;
          while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
            i--;
          }
          // `successor` was called on the largest possible key, so return the
          // MAX_NAME, which sorts larger than all keys.
          if (i === -1) {
            return MAX_NAME;
          }
          const source = next[i];
          const sourcePlusOne = PUSH_CHARS.charAt(
            PUSH_CHARS.indexOf(source) + 1
          );
          next[i] = sourcePlusOne;
          return next.slice(0, i + 1).join("");
        };
        // `key` is assumed to be non-empty.
        const predecessor = function (key) {
          if (key === "" + INTEGER_32_MIN) {
            return MIN_NAME;
          }
          const keyAsInt = tryParseInt(key);
          if (keyAsInt != null) {
            return "" + (keyAsInt - 1);
          }
          const next = new Array(key.length);
          for (let i = 0; i < next.length; i++) {
            next[i] = key.charAt(i);
          }
          // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically
          // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller
          // than that, `predecessor(predecessor(key))`, is
          //
          // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \
          //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }
          //
          // analogous to increment/decrement for base-10 integers.
          //
          // This works because lexigographic comparison works character-by-character,
          // using length as a tie-breaker if one key is a prefix of the other.
          if (next[next.length - 1] === MIN_PUSH_CHAR) {
            if (next.length === 1) {
              // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey
              return "" + INTEGER_32_MAX;
            }
            delete next[next.length - 1];
            return next.join("");
          }
          // Replace the last character with it's immediate predecessor, and
          // fill the suffix of the key with MAX_PUSH_CHAR. This is the
          // lexicographically largest possible key smaller than `key`.
          next[next.length - 1] = PUSH_CHARS.charAt(
            PUSH_CHARS.indexOf(next[next.length - 1]) - 1
          );
          return (
            next.join("") + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length)
          );
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function changeValue(snapshotNode) {
          return { type: "value" /* VALUE */, snapshotNode };
        }
        function changeChildAdded(childName, snapshotNode) {
          return {
            type: "child_added" /* CHILD_ADDED */,
            snapshotNode,
            childName,
          };
        }
        function changeChildRemoved(childName, snapshotNode) {
          return {
            type: "child_removed" /* CHILD_REMOVED */,
            snapshotNode,
            childName,
          };
        }
        function changeChildChanged(childName, snapshotNode, oldSnap) {
          return {
            type: "child_changed" /* CHILD_CHANGED */,
            snapshotNode,
            childName,
            oldSnap,
          };
        }
        function changeChildMoved(childName, snapshotNode) {
          return {
            type: "child_moved" /* CHILD_MOVED */,
            snapshotNode,
            childName,
          };
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
         */
        class IndexedFilter {
          constructor(index_) {
            this.index_ = index_;
          }
          updateChild(
            snap,
            key,
            newChild,
            affectedPath,
            source,
            optChangeAccumulator
          ) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              snap.isIndexed(this.index_),
              "A node must be indexed if only a child is updated"
            );
            const oldChild = snap.getImmediateChild(key);
            // Check if anything actually changed.
            if (
              oldChild
                .getChild(affectedPath)
                .equals(newChild.getChild(affectedPath))
            ) {
              // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
              // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
              // to avoid treating these cases as "nothing changed."
              if (oldChild.isEmpty() === newChild.isEmpty()) {
                // Nothing changed.
                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                return snap;
              }
            }
            if (optChangeAccumulator != null) {
              if (newChild.isEmpty()) {
                if (snap.hasChild(key)) {
                  optChangeAccumulator.trackChildChange(
                    changeChildRemoved(key, oldChild)
                  );
                } else {
                  (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                    snap.isLeafNode(),
                    "A child remove without an old child only makes sense on a leaf node"
                  );
                }
              } else if (oldChild.isEmpty()) {
                optChangeAccumulator.trackChildChange(
                  changeChildAdded(key, newChild)
                );
              } else {
                optChangeAccumulator.trackChildChange(
                  changeChildChanged(key, newChild, oldChild)
                );
              }
            }
            if (snap.isLeafNode() && newChild.isEmpty()) {
              return snap;
            } else {
              // Make sure the node is indexed
              return snap
                .updateImmediateChild(key, newChild)
                .withIndex(this.index_);
            }
          }
          updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
            if (optChangeAccumulator != null) {
              if (!oldSnap.isLeafNode()) {
                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                  if (!newSnap.hasChild(key)) {
                    optChangeAccumulator.trackChildChange(
                      changeChildRemoved(key, childNode)
                    );
                  }
                });
              }
              if (!newSnap.isLeafNode()) {
                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                  if (oldSnap.hasChild(key)) {
                    const oldChild = oldSnap.getImmediateChild(key);
                    if (!oldChild.equals(childNode)) {
                      optChangeAccumulator.trackChildChange(
                        changeChildChanged(key, childNode, oldChild)
                      );
                    }
                  } else {
                    optChangeAccumulator.trackChildChange(
                      changeChildAdded(key, childNode)
                    );
                  }
                });
              }
            }
            return newSnap.withIndex(this.index_);
          }
          updatePriority(oldSnap, newPriority) {
            if (oldSnap.isEmpty()) {
              return ChildrenNode.EMPTY_NODE;
            } else {
              return oldSnap.updatePriority(newPriority);
            }
          }
          filtersNodes() {
            return false;
          }
          getIndexedFilter() {
            return this;
          }
          getIndex() {
            return this.index_;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
         */
        class RangedFilter {
          constructor(params) {
            this.indexedFilter_ = new IndexedFilter(params.getIndex());
            this.index_ = params.getIndex();
            this.startPost_ = RangedFilter.getStartPost_(params);
            this.endPost_ = RangedFilter.getEndPost_(params);
          }
          getStartPost() {
            return this.startPost_;
          }
          getEndPost() {
            return this.endPost_;
          }
          matches(node) {
            return (
              this.index_.compare(this.getStartPost(), node) <= 0 &&
              this.index_.compare(node, this.getEndPost()) <= 0
            );
          }
          updateChild(
            snap,
            key,
            newChild,
            affectedPath,
            source,
            optChangeAccumulator
          ) {
            if (!this.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
            }
            return this.indexedFilter_.updateChild(
              snap,
              key,
              newChild,
              affectedPath,
              source,
              optChangeAccumulator
            );
          }
          updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
            if (newSnap.isLeafNode()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              newSnap = ChildrenNode.EMPTY_NODE;
            }
            let filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
            const self = this;
            newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
              if (!self.matches(new NamedNode(key, childNode))) {
                filtered = filtered.updateImmediateChild(
                  key,
                  ChildrenNode.EMPTY_NODE
                );
              }
            });
            return this.indexedFilter_.updateFullNode(
              oldSnap,
              filtered,
              optChangeAccumulator
            );
          }
          updatePriority(oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
          }
          filtersNodes() {
            return true;
          }
          getIndexedFilter() {
            return this.indexedFilter_;
          }
          getIndex() {
            return this.index_;
          }
          static getStartPost_(params) {
            if (params.hasStart()) {
              const startName = params.getIndexStartName();
              return params
                .getIndex()
                .makePost(params.getIndexStartValue(), startName);
            } else {
              return params.getIndex().minPost();
            }
          }
          static getEndPost_(params) {
            if (params.hasEnd()) {
              const endName = params.getIndexEndName();
              return params
                .getIndex()
                .makePost(params.getIndexEndValue(), endName);
            } else {
              return params.getIndex().maxPost();
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
         */
        class LimitedFilter {
          constructor(params) {
            this.rangedFilter_ = new RangedFilter(params);
            this.index_ = params.getIndex();
            this.limit_ = params.getLimit();
            this.reverse_ = !params.isViewFromLeft();
          }
          updateChild(
            snap,
            key,
            newChild,
            affectedPath,
            source,
            optChangeAccumulator
          ) {
            if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
            }
            if (snap.getImmediateChild(key).equals(newChild)) {
              // No change
              return snap;
            } else if (snap.numChildren() < this.limit_) {
              return this.rangedFilter_
                .getIndexedFilter()
                .updateChild(
                  snap,
                  key,
                  newChild,
                  affectedPath,
                  source,
                  optChangeAccumulator
                );
            } else {
              return this.fullLimitUpdateChild_(
                snap,
                key,
                newChild,
                source,
                optChangeAccumulator
              );
            }
          }
          updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
            let filtered;
            if (newSnap.isLeafNode() || newSnap.isEmpty()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            } else {
              if (
                this.limit_ * 2 < newSnap.numChildren() &&
                newSnap.isIndexed(this.index_)
              ) {
                // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                // anchor to the startPost, endPost, or last element as appropriate
                let iterator;
                if (this.reverse_) {
                  iterator = newSnap.getReverseIteratorFrom(
                    this.rangedFilter_.getEndPost(),
                    this.index_
                  );
                } else {
                  iterator = newSnap.getIteratorFrom(
                    this.rangedFilter_.getStartPost(),
                    this.index_
                  );
                }
                let count = 0;
                while (iterator.hasNext() && count < this.limit_) {
                  const next = iterator.getNext();
                  let inRange;
                  if (this.reverse_) {
                    inRange =
                      this.index_.compare(
                        this.rangedFilter_.getStartPost(),
                        next
                      ) <= 0;
                  } else {
                    inRange =
                      this.index_.compare(
                        next,
                        this.rangedFilter_.getEndPost()
                      ) <= 0;
                  }
                  if (inRange) {
                    filtered = filtered.updateImmediateChild(
                      next.name,
                      next.node
                    );
                    count++;
                  } else {
                    // if we have reached the end post, we cannot keep adding elemments
                    break;
                  }
                }
              } else {
                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                filtered = newSnap.withIndex(this.index_);
                // Don't support priorities on queries
                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                let startPost;
                let endPost;
                let cmp;
                let iterator;
                if (this.reverse_) {
                  iterator = filtered.getReverseIterator(this.index_);
                  startPost = this.rangedFilter_.getEndPost();
                  endPost = this.rangedFilter_.getStartPost();
                  const indexCompare = this.index_.getCompare();
                  cmp = (a, b) => indexCompare(b, a);
                } else {
                  iterator = filtered.getIterator(this.index_);
                  startPost = this.rangedFilter_.getStartPost();
                  endPost = this.rangedFilter_.getEndPost();
                  cmp = this.index_.getCompare();
                }
                let count = 0;
                let foundStartPost = false;
                while (iterator.hasNext()) {
                  const next = iterator.getNext();
                  if (!foundStartPost && cmp(startPost, next) <= 0) {
                    // start adding
                    foundStartPost = true;
                  }
                  const inRange =
                    foundStartPost &&
                    count < this.limit_ &&
                    cmp(next, endPost) <= 0;
                  if (inRange) {
                    count++;
                  } else {
                    filtered = filtered.updateImmediateChild(
                      next.name,
                      ChildrenNode.EMPTY_NODE
                    );
                  }
                }
              }
            }
            return this.rangedFilter_
              .getIndexedFilter()
              .updateFullNode(oldSnap, filtered, optChangeAccumulator);
          }
          updatePriority(oldSnap, newPriority) {
            // Don't support priorities on queries
            return oldSnap;
          }
          filtersNodes() {
            return true;
          }
          getIndexedFilter() {
            return this.rangedFilter_.getIndexedFilter();
          }
          getIndex() {
            return this.index_;
          }
          fullLimitUpdateChild_(
            snap,
            childKey,
            childSnap,
            source,
            changeAccumulator
          ) {
            // TODO: rename all cache stuff etc to general snap terminology
            let cmp;
            if (this.reverse_) {
              const indexCmp = this.index_.getCompare();
              cmp = (a, b) => indexCmp(b, a);
            } else {
              cmp = this.index_.getCompare();
            }
            const oldEventCache = snap;
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              oldEventCache.numChildren() === this.limit_,
              ""
            );
            const newChildNamedNode = new NamedNode(childKey, childSnap);
            const windowBoundary = this.reverse_
              ? oldEventCache.getFirstChild(this.index_)
              : oldEventCache.getLastChild(this.index_);
            const inRange = this.rangedFilter_.matches(newChildNamedNode);
            if (oldEventCache.hasChild(childKey)) {
              const oldChildSnap = oldEventCache.getImmediateChild(childKey);
              let nextChild = source.getChildAfterChild(
                this.index_,
                windowBoundary,
                this.reverse_
              );
              while (
                nextChild != null &&
                (nextChild.name === childKey ||
                  oldEventCache.hasChild(nextChild.name))
              ) {
                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                // been applied to the limited filter yet. Ignore this next child which will be updated later in
                // the limited filter...
                nextChild = source.getChildAfterChild(
                  this.index_,
                  nextChild,
                  this.reverse_
                );
              }
              const compareNext =
                nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
              const remainsInWindow =
                inRange && !childSnap.isEmpty() && compareNext >= 0;
              if (remainsInWindow) {
                if (changeAccumulator != null) {
                  changeAccumulator.trackChildChange(
                    changeChildChanged(childKey, childSnap, oldChildSnap)
                  );
                }
                return oldEventCache.updateImmediateChild(childKey, childSnap);
              } else {
                if (changeAccumulator != null) {
                  changeAccumulator.trackChildChange(
                    changeChildRemoved(childKey, oldChildSnap)
                  );
                }
                const newEventCache = oldEventCache.updateImmediateChild(
                  childKey,
                  ChildrenNode.EMPTY_NODE
                );
                const nextChildInRange =
                  nextChild != null && this.rangedFilter_.matches(nextChild);
                if (nextChildInRange) {
                  if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(
                      changeChildAdded(nextChild.name, nextChild.node)
                    );
                  }
                  return newEventCache.updateImmediateChild(
                    nextChild.name,
                    nextChild.node
                  );
                } else {
                  return newEventCache;
                }
              }
            } else if (childSnap.isEmpty()) {
              // we're deleting a node, but it was not in the window, so ignore it
              return snap;
            } else if (inRange) {
              if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                if (changeAccumulator != null) {
                  changeAccumulator.trackChildChange(
                    changeChildRemoved(windowBoundary.name, windowBoundary.node)
                  );
                  changeAccumulator.trackChildChange(
                    changeChildAdded(childKey, childSnap)
                  );
                }
                return oldEventCache
                  .updateImmediateChild(childKey, childSnap)
                  .updateImmediateChild(
                    windowBoundary.name,
                    ChildrenNode.EMPTY_NODE
                  );
              } else {
                return snap;
              }
            } else {
              return snap;
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
         * range to be returned for a particular location. It is assumed that validation of parameters is done at the
         * user-facing API level, so it is not done here.
         *
         * @internal
         */
        class QueryParams {
          constructor() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.startAfterSet_ = false;
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.endBeforeSet_ = false;
            this.limit_ = 0;
            this.viewFrom_ = "";
            this.indexStartValue_ = null;
            this.indexStartName_ = "";
            this.indexEndValue_ = null;
            this.indexEndName_ = "";
            this.index_ = PRIORITY_INDEX;
          }
          hasStart() {
            return this.startSet_;
          }
          hasStartAfter() {
            return this.startAfterSet_;
          }
          hasEndBefore() {
            return this.endBeforeSet_;
          }
          /**
           * @returns True if it would return from left.
           */
          isViewFromLeft() {
            if (this.viewFrom_ === "") {
              // limit(), rather than limitToFirst or limitToLast was called.
              // This means that only one of startSet_ and endSet_ is true. Use them
              // to calculate which side of the view to anchor to. If neither is set,
              // anchor to the end.
              return this.startSet_;
            } else {
              return this.viewFrom_ === "l" /* VIEW_FROM_LEFT */;
            }
          }
          /**
           * Only valid to call if hasStart() returns true
           */
          getIndexStartValue() {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.startSet_,
              "Only valid if start has been set"
            );
            return this.indexStartValue_;
          }
          /**
           * Only valid to call if hasStart() returns true.
           * Returns the starting key name for the range defined by these query parameters
           */
          getIndexStartName() {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.startSet_,
              "Only valid if start has been set"
            );
            if (this.startNameSet_) {
              return this.indexStartName_;
            } else {
              return MIN_NAME;
            }
          }
          hasEnd() {
            return this.endSet_;
          }
          /**
           * Only valid to call if hasEnd() returns true.
           */
          getIndexEndValue() {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.endSet_,
              "Only valid if end has been set"
            );
            return this.indexEndValue_;
          }
          /**
           * Only valid to call if hasEnd() returns true.
           * Returns the end key name for the range defined by these query parameters
           */
          getIndexEndName() {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.endSet_,
              "Only valid if end has been set"
            );
            if (this.endNameSet_) {
              return this.indexEndName_;
            } else {
              return MAX_NAME;
            }
          }
          hasLimit() {
            return this.limitSet_;
          }
          /**
           * @returns True if a limit has been set and it has been explicitly anchored
           */
          hasAnchoredLimit() {
            return this.limitSet_ && this.viewFrom_ !== "";
          }
          /**
           * Only valid to call if hasLimit() returns true
           */
          getLimit() {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.limitSet_,
              "Only valid if limit has been set"
            );
            return this.limit_;
          }
          getIndex() {
            return this.index_;
          }
          loadsAllData() {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
          }
          isDefault() {
            return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
          }
          copy() {
            const copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
          }
        }
        function queryParamsGetNodeFilter(queryParams) {
          if (queryParams.loadsAllData()) {
            return new IndexedFilter(queryParams.getIndex());
          } else if (queryParams.hasLimit()) {
            return new LimitedFilter(queryParams);
          } else {
            return new RangedFilter(queryParams);
          }
        }
        function queryParamsLimitToFirst(queryParams, newLimit) {
          const newParams = queryParams.copy();
          newParams.limitSet_ = true;
          newParams.limit_ = newLimit;
          newParams.viewFrom_ = "l" /* VIEW_FROM_LEFT */;
          return newParams;
        }
        function queryParamsLimitToLast(queryParams, newLimit) {
          const newParams = queryParams.copy();
          newParams.limitSet_ = true;
          newParams.limit_ = newLimit;
          newParams.viewFrom_ = "r" /* VIEW_FROM_RIGHT */;
          return newParams;
        }
        function queryParamsStartAt(queryParams, indexValue, key) {
          const newParams = queryParams.copy();
          newParams.startSet_ = true;
          if (indexValue === undefined) {
            indexValue = null;
          }
          newParams.indexStartValue_ = indexValue;
          if (key != null) {
            newParams.startNameSet_ = true;
            newParams.indexStartName_ = key;
          } else {
            newParams.startNameSet_ = false;
            newParams.indexStartName_ = "";
          }
          return newParams;
        }
        function queryParamsStartAfter(queryParams, indexValue, key) {
          let params;
          if (queryParams.index_ === KEY_INDEX) {
            if (typeof indexValue === "string") {
              indexValue = successor(indexValue);
            }
            params = queryParamsStartAt(queryParams, indexValue, key);
          } else {
            let childKey;
            if (key == null) {
              childKey = MAX_NAME;
            } else {
              childKey = successor(key);
            }
            params = queryParamsStartAt(queryParams, indexValue, childKey);
          }
          params.startAfterSet_ = true;
          return params;
        }
        function queryParamsEndAt(queryParams, indexValue, key) {
          const newParams = queryParams.copy();
          newParams.endSet_ = true;
          if (indexValue === undefined) {
            indexValue = null;
          }
          newParams.indexEndValue_ = indexValue;
          if (key !== undefined) {
            newParams.endNameSet_ = true;
            newParams.indexEndName_ = key;
          } else {
            newParams.endNameSet_ = false;
            newParams.indexEndName_ = "";
          }
          return newParams;
        }
        function queryParamsEndBefore(queryParams, indexValue, key) {
          let childKey;
          let params;
          if (queryParams.index_ === KEY_INDEX) {
            if (typeof indexValue === "string") {
              indexValue = predecessor(indexValue);
            }
            params = queryParamsEndAt(queryParams, indexValue, key);
          } else {
            if (key == null) {
              childKey = MIN_NAME;
            } else {
              childKey = predecessor(key);
            }
            params = queryParamsEndAt(queryParams, indexValue, childKey);
          }
          params.endBeforeSet_ = true;
          return params;
        }
        function queryParamsOrderBy(queryParams, index) {
          const newParams = queryParams.copy();
          newParams.index_ = index;
          return newParams;
        }
        /**
         * Returns a set of REST query string parameters representing this query.
         *
         * @returns query string parameters
         */
        function queryParamsToRestQueryStringParameters(queryParams) {
          const qs = {};
          if (queryParams.isDefault()) {
            return qs;
          }
          let orderBy;
          if (queryParams.index_ === PRIORITY_INDEX) {
            orderBy = "$priority" /* PRIORITY_INDEX */;
          } else if (queryParams.index_ === VALUE_INDEX) {
            orderBy = "$value" /* VALUE_INDEX */;
          } else if (queryParams.index_ === KEY_INDEX) {
            orderBy = "$key" /* KEY_INDEX */;
          } else {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              queryParams.index_ instanceof PathIndex,
              "Unrecognized index type!"
            );
            orderBy = queryParams.index_.toString();
          }
          qs["orderBy" /* ORDER_BY */] = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(orderBy);
          if (queryParams.startSet_) {
            qs["startAt" /* START_AT */] = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                queryParams.indexStartValue_
              );
            if (queryParams.startNameSet_) {
              qs["startAt" /* START_AT */] +=
                "," +
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  queryParams.indexStartName_
                );
            }
          }
          if (queryParams.endSet_) {
            qs["endAt" /* END_AT */] = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                queryParams.indexEndValue_
              );
            if (queryParams.endNameSet_) {
              qs["endAt" /* END_AT */] +=
                "," +
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  queryParams.indexEndName_
                );
            }
          }
          if (queryParams.limitSet_) {
            if (queryParams.isViewFromLeft()) {
              qs["limitToFirst" /* LIMIT_TO_FIRST */] = queryParams.limit_;
            } else {
              qs["limitToLast" /* LIMIT_TO_LAST */] = queryParams.limit_;
            }
          }
          return qs;
        }
        function queryParamsGetQueryObject(queryParams) {
          const obj = {};
          if (queryParams.startSet_) {
            obj["sp" /* INDEX_START_VALUE */] = queryParams.indexStartValue_;
            if (queryParams.startNameSet_) {
              obj["sn" /* INDEX_START_NAME */] = queryParams.indexStartName_;
            }
          }
          if (queryParams.endSet_) {
            obj["ep" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;
            if (queryParams.endNameSet_) {
              obj["en" /* INDEX_END_NAME */] = queryParams.indexEndName_;
            }
          }
          if (queryParams.limitSet_) {
            obj["l" /* LIMIT */] = queryParams.limit_;
            let viewFrom = queryParams.viewFrom_;
            if (viewFrom === "") {
              if (queryParams.isViewFromLeft()) {
                viewFrom = "l" /* VIEW_FROM_LEFT */;
              } else {
                viewFrom = "r" /* VIEW_FROM_RIGHT */;
              }
            }
            obj["vf" /* VIEW_FROM */] = viewFrom;
          }
          // For now, priority index is the default, so we only specify if it's some other index
          if (queryParams.index_ !== PRIORITY_INDEX) {
            obj["i" /* INDEX */] = queryParams.index_.toString();
          }
          return obj;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An implementation of ServerActions that communicates with the server via REST requests.
         * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
         * persistent connection (using WebSockets or long-polling)
         */
        class ReadonlyRestClient extends ServerActions {
          /**
           * @param repoInfo_ - Data about the namespace we are connecting to
           * @param onDataUpdate_ - A callback for new data from the server
           */
          constructor(
            repoInfo_,
            onDataUpdate_,
            authTokenProvider_,
            appCheckTokenProvider_
          ) {
            super();
            this.repoInfo_ = repoInfo_;
            this.onDataUpdate_ = onDataUpdate_;
            this.authTokenProvider_ = authTokenProvider_;
            this.appCheckTokenProvider_ = appCheckTokenProvider_;
            /** @private {function(...[*])} */
            this.log_ = logWrapper("p:rest:");
            /**
             * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
             * that's been removed. :-/
             */
            this.listens_ = {};
          }
          reportStats(stats) {
            throw new Error("Method not implemented.");
          }
          static getListenId_(query, tag) {
            if (tag !== undefined) {
              return "tag$" + tag;
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                query._queryParams.isDefault(),
                "should have a tag if it's not a default query."
              );
              return query._path.toString();
            }
          }
          /** @inheritDoc */
          listen(query, currentHashFn, tag, onComplete) {
            const pathString = query._path.toString();
            this.log_(
              "Listen called for " + pathString + " " + query._queryIdentifier
            );
            // Mark this listener so we can tell if it's removed.
            const listenId = ReadonlyRestClient.getListenId_(query, tag);
            const thisListen = {};
            this.listens_[listenId] = thisListen;
            const queryStringParameters =
              queryParamsToRestQueryStringParameters(query._queryParams);
            this.restRequest_(
              pathString + ".json",
              queryStringParameters,
              (error, result) => {
                let data = result;
                if (error === 404) {
                  data = null;
                  error = null;
                }
                if (error === null) {
                  this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
                }
                if (
                  (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                    this.listens_,
                    listenId
                  ) === thisListen
                ) {
                  let status;
                  if (!error) {
                    status = "ok";
                  } else if (error === 401) {
                    status = "permission_denied";
                  } else {
                    status = "rest_error:" + error;
                  }
                  onComplete(status, null);
                }
              }
            );
          }
          /** @inheritDoc */
          unlisten(query, tag) {
            const listenId = ReadonlyRestClient.getListenId_(query, tag);
            delete this.listens_[listenId];
          }
          get(query) {
            const queryStringParameters =
              queryParamsToRestQueryStringParameters(query._queryParams);
            const pathString = query._path.toString();
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            this.restRequest_(
              pathString + ".json",
              queryStringParameters,
              (error, result) => {
                let data = result;
                if (error === 404) {
                  data = null;
                  error = null;
                }
                if (error === null) {
                  this.onDataUpdate_(
                    pathString,
                    data,
                    /*isMerge=*/ false,
                    /*tag=*/ null
                  );
                  deferred.resolve(data);
                } else {
                  deferred.reject(new Error(data));
                }
              }
            );
            return deferred.promise;
          }
          /** @inheritDoc */
          refreshAuthToken(token) {
            // no-op since we just always call getToken.
          }
          /**
           * Performs a REST request to the given path, with the provided query string parameters,
           * and any auth credentials we have.
           */
          restRequest_(pathString, queryStringParameters = {}, callback) {
            queryStringParameters["format"] = "export";
            return Promise.all([
              this.authTokenProvider_.getToken(/*forceRefresh=*/ false),
              this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false),
            ]).then(([authToken, appCheckToken]) => {
              if (authToken && authToken.accessToken) {
                queryStringParameters["auth"] = authToken.accessToken;
              }
              if (appCheckToken && appCheckToken.token) {
                queryStringParameters["ac"] = appCheckToken.token;
              }
              const url =
                (this.repoInfo_.secure ? "https://" : "http://") +
                this.repoInfo_.host +
                pathString +
                "?" +
                "ns=" +
                this.repoInfo_.namespace +
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.querystring)(
                  queryStringParameters
                );
              this.log_("Sending REST request for " + url);
              const xhr = new XMLHttpRequest();
              xhr.onreadystatechange = () => {
                if (callback && xhr.readyState === 4) {
                  this.log_(
                    "REST Response for " + url + " received. status:",
                    xhr.status,
                    "response:",
                    xhr.responseText
                  );
                  let res = null;
                  if (xhr.status >= 200 && xhr.status < 300) {
                    try {
                      res = (0,
                        _firebase_util__WEBPACK_IMPORTED_MODULE_2__.jsonEval)(
                          xhr.responseText
                        );
                    } catch (e) {
                      warn(
                        "Failed to parse JSON response for " +
                        url +
                        ": " +
                        xhr.responseText
                      );
                    }
                    callback(null, res);
                  } else {
                    // 401 and 404 are expected.
                    if (xhr.status !== 401 && xhr.status !== 404) {
                      warn(
                        "Got unsuccessful REST response for " +
                        url +
                        " Status: " +
                        xhr.status
                      );
                    }
                    callback(xhr.status);
                  }
                  callback = null;
                }
              };
              xhr.open("GET", url, /*asynchronous=*/ true);
              xhr.send();
            });
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
         */
        class SnapshotHolder {
          constructor() {
            this.rootNode_ = ChildrenNode.EMPTY_NODE;
          }
          getNode(path) {
            return this.rootNode_.getChild(path);
          }
          updateSnapshot(path, newSnapshotNode) {
            this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function newSparseSnapshotTree() {
          return {
            value: null,
            children: new Map(),
          };
        }
        /**
         * Stores the given node at the specified path. If there is already a node
         * at a shallower path, it merges the new data into that snapshot node.
         *
         * @param path - Path to look up snapshot for.
         * @param data - The new data, or null.
         */
        function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
          if (pathIsEmpty(path)) {
            sparseSnapshotTree.value = data;
            sparseSnapshotTree.children.clear();
          } else if (sparseSnapshotTree.value !== null) {
            sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(
              path,
              data
            );
          } else {
            const childKey = pathGetFront(path);
            if (!sparseSnapshotTree.children.has(childKey)) {
              sparseSnapshotTree.children.set(
                childKey,
                newSparseSnapshotTree()
              );
            }
            const child = sparseSnapshotTree.children.get(childKey);
            path = pathPopFront(path);
            sparseSnapshotTreeRemember(child, path, data);
          }
        }
        /**
         * Purge the data at path from the cache.
         *
         * @param path - Path to look up snapshot for.
         * @returns True if this node should now be removed.
         */
        function sparseSnapshotTreeForget(sparseSnapshotTree, path) {
          if (pathIsEmpty(path)) {
            sparseSnapshotTree.value = null;
            sparseSnapshotTree.children.clear();
            return true;
          } else {
            if (sparseSnapshotTree.value !== null) {
              if (sparseSnapshotTree.value.isLeafNode()) {
                // We're trying to forget a node that doesn't exist
                return false;
              } else {
                const value = sparseSnapshotTree.value;
                sparseSnapshotTree.value = null;
                value.forEachChild(PRIORITY_INDEX, (key, tree) => {
                  sparseSnapshotTreeRemember(
                    sparseSnapshotTree,
                    new Path(key),
                    tree
                  );
                });
                return sparseSnapshotTreeForget(sparseSnapshotTree, path);
              }
            } else if (sparseSnapshotTree.children.size > 0) {
              const childKey = pathGetFront(path);
              path = pathPopFront(path);
              if (sparseSnapshotTree.children.has(childKey)) {
                const safeToRemove = sparseSnapshotTreeForget(
                  sparseSnapshotTree.children.get(childKey),
                  path
                );
                if (safeToRemove) {
                  sparseSnapshotTree.children.delete(childKey);
                }
              }
              return sparseSnapshotTree.children.size === 0;
            } else {
              return true;
            }
          }
        }
        /**
         * Recursively iterates through all of the stored tree and calls the
         * callback on each one.
         *
         * @param prefixPath - Path to look up node for.
         * @param func - The function to invoke for each tree.
         */
        function sparseSnapshotTreeForEachTree(
          sparseSnapshotTree,
          prefixPath,
          func
        ) {
          if (sparseSnapshotTree.value !== null) {
            func(prefixPath, sparseSnapshotTree.value);
          } else {
            sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {
              const path = new Path(prefixPath.toString() + "/" + key);
              sparseSnapshotTreeForEachTree(tree, path, func);
            });
          }
        }
        /**
         * Iterates through each immediate child and triggers the callback.
         * Only seems to be used in tests.
         *
         * @param func - The function to invoke for each child.
         */
        function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
          sparseSnapshotTree.children.forEach((tree, key) => {
            func(key, tree);
          });
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns the delta from the previous call to get stats.
         *
         * @param collection_ - The collection to "listen" to.
         */
        class StatsListener {
          constructor(collection_) {
            this.collection_ = collection_;
            this.last_ = null;
          }
          get() {
            const newStats = this.collection_.get();
            const delta = Object.assign({}, newStats);
            if (this.last_) {
              each(this.last_, (stat, value) => {
                delta[stat] = delta[stat] - value;
              });
            }
            this.last_ = newStats;
            return delta;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
        // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
        // seconds to try to ensure the Firebase connection is established / settled.
        const FIRST_STATS_MIN_TIME = 10 * 1000;
        const FIRST_STATS_MAX_TIME = 30 * 1000;
        // We'll continue to report stats on average every 5 minutes.
        const REPORT_STATS_INTERVAL = 5 * 60 * 1000;
        class StatsReporter {
          constructor(collection, server_) {
            this.server_ = server_;
            this.statsToReport_ = {};
            this.statsListener_ = new StatsListener(collection);
            const timeout =
              FIRST_STATS_MIN_TIME +
              (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
            setTimeoutNonBlocking(
              this.reportStats_.bind(this),
              Math.floor(timeout)
            );
          }
          reportStats_() {
            const stats = this.statsListener_.get();
            const reportedStats = {};
            let haveStatsToReport = false;
            each(stats, (stat, value) => {
              if (
                value > 0 &&
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                  this.statsToReport_,
                  stat
                )
              ) {
                reportedStats[stat] = value;
                haveStatsToReport = true;
              }
            });
            if (haveStatsToReport) {
              this.server_.reportStats(reportedStats);
            }
            // queue our next run.
            setTimeoutNonBlocking(
              this.reportStats_.bind(this),
              Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         *
         * @enum
         */
        var OperationType;
        (function (OperationType) {
          OperationType[(OperationType["OVERWRITE"] = 0)] = "OVERWRITE";
          OperationType[(OperationType["MERGE"] = 1)] = "MERGE";
          OperationType[(OperationType["ACK_USER_WRITE"] = 2)] =
            "ACK_USER_WRITE";
          OperationType[(OperationType["LISTEN_COMPLETE"] = 3)] =
            "LISTEN_COMPLETE";
        })(OperationType || (OperationType = {}));
        function newOperationSourceUser() {
          return {
            fromUser: true,
            fromServer: false,
            queryId: null,
            tagged: false,
          };
        }
        function newOperationSourceServer() {
          return {
            fromUser: false,
            fromServer: true,
            queryId: null,
            tagged: false,
          };
        }
        function newOperationSourceServerTaggedQuery(queryId) {
          return {
            fromUser: false,
            fromServer: true,
            queryId,
            tagged: true,
          };
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class AckUserWrite {
          /**
           * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
           */
          constructor(
            /** @inheritDoc */ path,
            /** @inheritDoc */ affectedTree,
            /** @inheritDoc */ revert
          ) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            /** @inheritDoc */
            this.type = OperationType.ACK_USER_WRITE;
            /** @inheritDoc */
            this.source = newOperationSourceUser();
          }
          operationForChild(childName) {
            if (!pathIsEmpty(this.path)) {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                pathGetFront(this.path) === childName,
                "operationForChild called for unrelated child."
              );
              return new AckUserWrite(
                pathPopFront(this.path),
                this.affectedTree,
                this.revert
              );
            } else if (this.affectedTree.value != null) {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                this.affectedTree.children.isEmpty(),
                "affectedTree should not have overlapping affected paths."
              );
              // All child locations are affected as well; just return same operation.
              return this;
            } else {
              const childTree = this.affectedTree.subtree(new Path(childName));
              return new AckUserWrite(newEmptyPath(), childTree, this.revert);
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class ListenComplete {
          constructor(source, path) {
            this.source = source;
            this.path = path;
            /** @inheritDoc */
            this.type = OperationType.LISTEN_COMPLETE;
          }
          operationForChild(childName) {
            if (pathIsEmpty(this.path)) {
              return new ListenComplete(this.source, newEmptyPath());
            } else {
              return new ListenComplete(this.source, pathPopFront(this.path));
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class Overwrite {
          constructor(source, path, snap) {
            this.source = source;
            this.path = path;
            this.snap = snap;
            /** @inheritDoc */
            this.type = OperationType.OVERWRITE;
          }
          operationForChild(childName) {
            if (pathIsEmpty(this.path)) {
              return new Overwrite(
                this.source,
                newEmptyPath(),
                this.snap.getImmediateChild(childName)
              );
            } else {
              return new Overwrite(
                this.source,
                pathPopFront(this.path),
                this.snap
              );
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class Merge {
          constructor(
            /** @inheritDoc */ source,
            /** @inheritDoc */ path,
            /** @inheritDoc */ children
          ) {
            this.source = source;
            this.path = path;
            this.children = children;
            /** @inheritDoc */
            this.type = OperationType.MERGE;
          }
          operationForChild(childName) {
            if (pathIsEmpty(this.path)) {
              const childTree = this.children.subtree(new Path(childName));
              if (childTree.isEmpty()) {
                // This child is unaffected
                return null;
              } else if (childTree.value) {
                // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                return new Overwrite(
                  this.source,
                  newEmptyPath(),
                  childTree.value
                );
              } else {
                // This is a merge at a deeper level
                return new Merge(this.source, newEmptyPath(), childTree);
              }
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                pathGetFront(this.path) === childName,
                "Can't get a merge for a child not on the path of the operation"
              );
              return new Merge(
                this.source,
                pathPopFront(this.path),
                this.children
              );
            }
          }
          toString() {
            return (
              "Operation(" +
              this.path +
              ": " +
              this.source.toString() +
              " merge: " +
              this.children.toString() +
              ")"
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
         * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
         * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
         * whether a node potentially had children removed due to a filter.
         */
        class CacheNode {
          constructor(node_, fullyInitialized_, filtered_) {
            this.node_ = node_;
            this.fullyInitialized_ = fullyInitialized_;
            this.filtered_ = filtered_;
          }
          /**
           * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
           */
          isFullyInitialized() {
            return this.fullyInitialized_;
          }
          /**
           * Returns whether this node is potentially missing children due to a filter applied to the node
           */
          isFiltered() {
            return this.filtered_;
          }
          isCompleteForPath(path) {
            if (pathIsEmpty(path)) {
              return this.isFullyInitialized() && !this.filtered_;
            }
            const childKey = pathGetFront(path);
            return this.isCompleteForChild(childKey);
          }
          isCompleteForChild(key) {
            return (
              (this.isFullyInitialized() && !this.filtered_) ||
              this.node_.hasChild(key)
            );
          }
          getNode() {
            return this.node_;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An EventGenerator is used to convert "raw" changes (Change) as computed by the
         * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
         * for details.
         *
         */
        class EventGenerator {
          constructor(query_) {
            this.query_ = query_;
            this.index_ = this.query_._queryParams.getIndex();
          }
        }
        /**
         * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
         * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
         *
         * Notes:
         *  - child_moved events will be synthesized at this time for any child_changed events that affect
         *    our index.
         *  - prevName will be calculated based on the index ordering.
         */
        function eventGeneratorGenerateEventsForChanges(
          eventGenerator,
          changes,
          eventCache,
          eventRegistrations
        ) {
          const events = [];
          const moves = [];
          changes.forEach((change) => {
            if (
              change.type === "child_changed" /* CHILD_CHANGED */ &&
              eventGenerator.index_.indexedValueChanged(
                change.oldSnap,
                change.snapshotNode
              )
            ) {
              moves.push(
                changeChildMoved(change.childName, change.snapshotNode)
              );
            }
          });
          eventGeneratorGenerateEventsForType(
            eventGenerator,
            events,
            "child_removed" /* CHILD_REMOVED */,
            changes,
            eventRegistrations,
            eventCache
          );
          eventGeneratorGenerateEventsForType(
            eventGenerator,
            events,
            "child_added" /* CHILD_ADDED */,
            changes,
            eventRegistrations,
            eventCache
          );
          eventGeneratorGenerateEventsForType(
            eventGenerator,
            events,
            "child_moved" /* CHILD_MOVED */,
            moves,
            eventRegistrations,
            eventCache
          );
          eventGeneratorGenerateEventsForType(
            eventGenerator,
            events,
            "child_changed" /* CHILD_CHANGED */,
            changes,
            eventRegistrations,
            eventCache
          );
          eventGeneratorGenerateEventsForType(
            eventGenerator,
            events,
            "value" /* VALUE */,
            changes,
            eventRegistrations,
            eventCache
          );
          return events;
        }
        /**
         * Given changes of a single change type, generate the corresponding events.
         */
        function eventGeneratorGenerateEventsForType(
          eventGenerator,
          events,
          eventType,
          changes,
          registrations,
          eventCache
        ) {
          const filteredChanges = changes.filter(
            (change) => change.type === eventType
          );
          filteredChanges.sort((a, b) =>
            eventGeneratorCompareChanges(eventGenerator, a, b)
          );
          filteredChanges.forEach((change) => {
            const materializedChange = eventGeneratorMaterializeSingleChange(
              eventGenerator,
              change,
              eventCache
            );
            registrations.forEach((registration) => {
              if (registration.respondsTo(change.type)) {
                events.push(
                  registration.createEvent(
                    materializedChange,
                    eventGenerator.query_
                  )
                );
              }
            });
          });
        }
        function eventGeneratorMaterializeSingleChange(
          eventGenerator,
          change,
          eventCache
        ) {
          if (change.type === "value" || change.type === "child_removed") {
            return change;
          } else {
            change.prevName = eventCache.getPredecessorChildName(
              change.childName,
              change.snapshotNode,
              eventGenerator.index_
            );
            return change;
          }
        }
        function eventGeneratorCompareChanges(eventGenerator, a, b) {
          if (a.childName == null || b.childName == null) {
            throw (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)(
                "Should only compare child_ events."
              );
          }
          const aWrapped = new NamedNode(a.childName, a.snapshotNode);
          const bWrapped = new NamedNode(b.childName, b.snapshotNode);
          return eventGenerator.index_.compare(aWrapped, bWrapped);
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function newViewCache(eventCache, serverCache) {
          return { eventCache, serverCache };
        }
        function viewCacheUpdateEventSnap(
          viewCache,
          eventSnap,
          complete,
          filtered
        ) {
          return newViewCache(
            new CacheNode(eventSnap, complete, filtered),
            viewCache.serverCache
          );
        }
        function viewCacheUpdateServerSnap(
          viewCache,
          serverSnap,
          complete,
          filtered
        ) {
          return newViewCache(
            viewCache.eventCache,
            new CacheNode(serverSnap, complete, filtered)
          );
        }
        function viewCacheGetCompleteEventSnap(viewCache) {
          return viewCache.eventCache.isFullyInitialized()
            ? viewCache.eventCache.getNode()
            : null;
        }
        function viewCacheGetCompleteServerSnap(viewCache) {
          return viewCache.serverCache.isFullyInitialized()
            ? viewCache.serverCache.getNode()
            : null;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let emptyChildrenSingleton;
        /**
         * Singleton empty children collection.
         *
         */
        const EmptyChildren = () => {
          if (!emptyChildrenSingleton) {
            emptyChildrenSingleton = new SortedMap(stringCompare);
          }
          return emptyChildrenSingleton;
        };
        /**
         * A tree with immutable elements.
         */
        class ImmutableTree {
          constructor(value, children = EmptyChildren()) {
            this.value = value;
            this.children = children;
          }
          static fromObject(obj) {
            let tree = new ImmutableTree(null);
            each(obj, (childPath, childSnap) => {
              tree = tree.set(new Path(childPath), childSnap);
            });
            return tree;
          }
          /**
           * True if the value is empty and there are no children
           */
          isEmpty() {
            return this.value === null && this.children.isEmpty();
          }
          /**
           * Given a path and predicate, return the first node and the path to that node
           * where the predicate returns true.
           *
           * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
           * objects on the way back out, it may be better to pass down a pathSoFar obj.
           *
           * @param relativePath - The remainder of the path
           * @param predicate - The predicate to satisfy to return a node
           */
          findRootMostMatchingPathAndValue(relativePath, predicate) {
            if (this.value != null && predicate(this.value)) {
              return { path: newEmptyPath(), value: this.value };
            } else {
              if (pathIsEmpty(relativePath)) {
                return null;
              } else {
                const front = pathGetFront(relativePath);
                const child = this.children.get(front);
                if (child !== null) {
                  const childExistingPathAndValue =
                    child.findRootMostMatchingPathAndValue(
                      pathPopFront(relativePath),
                      predicate
                    );
                  if (childExistingPathAndValue != null) {
                    const fullPath = pathChild(
                      new Path(front),
                      childExistingPathAndValue.path
                    );
                    return {
                      path: fullPath,
                      value: childExistingPathAndValue.value,
                    };
                  } else {
                    return null;
                  }
                } else {
                  return null;
                }
              }
            }
          }
          /**
           * Find, if it exists, the shortest subpath of the given path that points a defined
           * value in the tree
           */
          findRootMostValueAndPath(relativePath) {
            return this.findRootMostMatchingPathAndValue(
              relativePath,
              () => true
            );
          }
          /**
           * @returns The subtree at the given path
           */
          subtree(relativePath) {
            if (pathIsEmpty(relativePath)) {
              return this;
            } else {
              const front = pathGetFront(relativePath);
              const childTree = this.children.get(front);
              if (childTree !== null) {
                return childTree.subtree(pathPopFront(relativePath));
              } else {
                return new ImmutableTree(null);
              }
            }
          }
          /**
           * Sets a value at the specified path.
           *
           * @param relativePath - Path to set value at.
           * @param toSet - Value to set.
           * @returns Resulting tree.
           */
          set(relativePath, toSet) {
            if (pathIsEmpty(relativePath)) {
              return new ImmutableTree(toSet, this.children);
            } else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front) || new ImmutableTree(null);
              const newChild = child.set(pathPopFront(relativePath), toSet);
              const newChildren = this.children.insert(front, newChild);
              return new ImmutableTree(this.value, newChildren);
            }
          }
          /**
           * Removes the value at the specified path.
           *
           * @param relativePath - Path to value to remove.
           * @returns Resulting tree.
           */
          remove(relativePath) {
            if (pathIsEmpty(relativePath)) {
              if (this.children.isEmpty()) {
                return new ImmutableTree(null);
              } else {
                return new ImmutableTree(null, this.children);
              }
            } else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front);
              if (child) {
                const newChild = child.remove(pathPopFront(relativePath));
                let newChildren;
                if (newChild.isEmpty()) {
                  newChildren = this.children.remove(front);
                } else {
                  newChildren = this.children.insert(front, newChild);
                }
                if (this.value === null && newChildren.isEmpty()) {
                  return new ImmutableTree(null);
                } else {
                  return new ImmutableTree(this.value, newChildren);
                }
              } else {
                return this;
              }
            }
          }
          /**
           * Gets a value from the tree.
           *
           * @param relativePath - Path to get value for.
           * @returns Value at path, or null.
           */
          get(relativePath) {
            if (pathIsEmpty(relativePath)) {
              return this.value;
            } else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front);
              if (child) {
                return child.get(pathPopFront(relativePath));
              } else {
                return null;
              }
            }
          }
          /**
           * Replace the subtree at the specified path with the given new tree.
           *
           * @param relativePath - Path to replace subtree for.
           * @param newTree - New tree.
           * @returns Resulting tree.
           */
          setTree(relativePath, newTree) {
            if (pathIsEmpty(relativePath)) {
              return newTree;
            } else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front) || new ImmutableTree(null);
              const newChild = child.setTree(
                pathPopFront(relativePath),
                newTree
              );
              let newChildren;
              if (newChild.isEmpty()) {
                newChildren = this.children.remove(front);
              } else {
                newChildren = this.children.insert(front, newChild);
              }
              return new ImmutableTree(this.value, newChildren);
            }
          }
          /**
           * Performs a depth first fold on this tree. Transforms a tree into a single
           * value, given a function that operates on the path to a node, an optional
           * current value, and a map of child names to folded subtrees
           */
          fold(fn) {
            return this.fold_(newEmptyPath(), fn);
          }
          /**
           * Recursive helper for public-facing fold() method
           */
          fold_(pathSoFar, fn) {
            const accum = {};
            this.children.inorderTraversal((childKey, childTree) => {
              accum[childKey] = childTree.fold_(
                pathChild(pathSoFar, childKey),
                fn
              );
            });
            return fn(pathSoFar, this.value, accum);
          }
          /**
           * Find the first matching value on the given path. Return the result of applying f to it.
           */
          findOnPath(path, f) {
            return this.findOnPath_(path, newEmptyPath(), f);
          }
          findOnPath_(pathToFollow, pathSoFar, f) {
            const result = this.value ? f(pathSoFar, this.value) : false;
            if (result) {
              return result;
            } else {
              if (pathIsEmpty(pathToFollow)) {
                return null;
              } else {
                const front = pathGetFront(pathToFollow);
                const nextChild = this.children.get(front);
                if (nextChild) {
                  return nextChild.findOnPath_(
                    pathPopFront(pathToFollow),
                    pathChild(pathSoFar, front),
                    f
                  );
                } else {
                  return null;
                }
              }
            }
          }
          foreachOnPath(path, f) {
            return this.foreachOnPath_(path, newEmptyPath(), f);
          }
          foreachOnPath_(pathToFollow, currentRelativePath, f) {
            if (pathIsEmpty(pathToFollow)) {
              return this;
            } else {
              if (this.value) {
                f(currentRelativePath, this.value);
              }
              const front = pathGetFront(pathToFollow);
              const nextChild = this.children.get(front);
              if (nextChild) {
                return nextChild.foreachOnPath_(
                  pathPopFront(pathToFollow),
                  pathChild(currentRelativePath, front),
                  f
                );
              } else {
                return new ImmutableTree(null);
              }
            }
          }
          /**
           * Calls the given function for each node in the tree that has a value.
           *
           * @param f - A function to be called with the path from the root of the tree to
           * a node, and the value at that node. Called in depth-first order.
           */
          foreach(f) {
            this.foreach_(newEmptyPath(), f);
          }
          foreach_(currentRelativePath, f) {
            this.children.inorderTraversal((childName, childTree) => {
              childTree.foreach_(pathChild(currentRelativePath, childName), f);
            });
            if (this.value) {
              f(currentRelativePath, this.value);
            }
          }
          foreachChild(f) {
            this.children.inorderTraversal((childName, childTree) => {
              if (childTree.value) {
                f(childName, childTree.value);
              }
            });
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
         * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
         * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
         * to reflect the write added.
         */
        class CompoundWrite {
          constructor(writeTree_) {
            this.writeTree_ = writeTree_;
          }
          static empty() {
            return new CompoundWrite(new ImmutableTree(null));
          }
        }
        function compoundWriteAddWrite(compoundWrite, path, node) {
          if (pathIsEmpty(path)) {
            return new CompoundWrite(new ImmutableTree(node));
          } else {
            const rootmost =
              compoundWrite.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
              const rootMostPath = rootmost.path;
              let value = rootmost.value;
              const relativePath = newRelativePath(rootMostPath, path);
              value = value.updateChild(relativePath, node);
              return new CompoundWrite(
                compoundWrite.writeTree_.set(rootMostPath, value)
              );
            } else {
              const subtree = new ImmutableTree(node);
              const newWriteTree = compoundWrite.writeTree_.setTree(
                path,
                subtree
              );
              return new CompoundWrite(newWriteTree);
            }
          }
        }
        function compoundWriteAddWrites(compoundWrite, path, updates) {
          let newWrite = compoundWrite;
          each(updates, (childKey, node) => {
            newWrite = compoundWriteAddWrite(
              newWrite,
              pathChild(path, childKey),
              node
            );
          });
          return newWrite;
        }
        /**
         * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
         * location, which must be removed by calling this method with that path.
         *
         * @param compoundWrite - The CompoundWrite to remove.
         * @param path - The path at which a write and all deeper writes should be removed
         * @returns The new CompoundWrite with the removed path
         */
        function compoundWriteRemoveWrite(compoundWrite, path) {
          if (pathIsEmpty(path)) {
            return CompoundWrite.empty();
          } else {
            const newWriteTree = compoundWrite.writeTree_.setTree(
              path,
              new ImmutableTree(null)
            );
            return new CompoundWrite(newWriteTree);
          }
        }
        /**
         * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
         * considered "complete".
         *
         * @param compoundWrite - The CompoundWrite to check.
         * @param path - The path to check for
         * @returns Whether there is a complete write at that path
         */
        function compoundWriteHasCompleteWrite(compoundWrite, path) {
          return compoundWriteGetCompleteNode(compoundWrite, path) != null;
        }
        /**
         * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
         * writes from deeper paths, but will return child nodes from a more shallow path.
         *
         * @param compoundWrite - The CompoundWrite to get the node from.
         * @param path - The path to get a complete write
         * @returns The node if complete at that path, or null otherwise.
         */
        function compoundWriteGetCompleteNode(compoundWrite, path) {
          const rootmost =
            compoundWrite.writeTree_.findRootMostValueAndPath(path);
          if (rootmost != null) {
            return compoundWrite.writeTree_
              .get(rootmost.path)
              .getChild(newRelativePath(rootmost.path, path));
          } else {
            return null;
          }
        }
        /**
         * Returns all children that are guaranteed to be a complete overwrite.
         *
         * @param compoundWrite - The CompoundWrite to get children from.
         * @returns A list of all complete children.
         */
        function compoundWriteGetCompleteChildren(compoundWrite) {
          const children = [];
          const node = compoundWrite.writeTree_.value;
          if (node != null) {
            // If it's a leaf node, it has no children; so nothing to do.
            if (!node.isLeafNode()) {
              node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
                children.push(new NamedNode(childName, childNode));
              });
            }
          } else {
            compoundWrite.writeTree_.children.inorderTraversal(
              (childName, childTree) => {
                if (childTree.value != null) {
                  children.push(new NamedNode(childName, childTree.value));
                }
              }
            );
          }
          return children;
        }
        function compoundWriteChildCompoundWrite(compoundWrite, path) {
          if (pathIsEmpty(path)) {
            return compoundWrite;
          } else {
            const shadowingNode = compoundWriteGetCompleteNode(
              compoundWrite,
              path
            );
            if (shadowingNode != null) {
              return new CompoundWrite(new ImmutableTree(shadowingNode));
            } else {
              return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
            }
          }
        }
        /**
         * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
         * @returns Whether this CompoundWrite is empty
         */
        function compoundWriteIsEmpty(compoundWrite) {
          return compoundWrite.writeTree_.isEmpty();
        }
        /**
         * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
         * node
         * @param node - The node to apply this CompoundWrite to
         * @returns The node with all writes applied
         */
        function compoundWriteApply(compoundWrite, node) {
          return applySubtreeWrite(
            newEmptyPath(),
            compoundWrite.writeTree_,
            node
          );
        }
        function applySubtreeWrite(relativePath, writeTree, node) {
          if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
          } else {
            let priorityWrite = null;
            writeTree.children.inorderTraversal((childKey, childTree) => {
              if (childKey === ".priority") {
                // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                // to apply priorities to empty nodes that are later filled
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                  childTree.value !== null,
                  "Priority writes must always be leaf nodes"
                );
                priorityWrite = childTree.value;
              } else {
                node = applySubtreeWrite(
                  pathChild(relativePath, childKey),
                  childTree,
                  node
                );
              }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (
              !node.getChild(relativePath).isEmpty() &&
              priorityWrite !== null
            ) {
              node = node.updateChild(
                pathChild(relativePath, ".priority"),
                priorityWrite
              );
            }
            return node;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
         *
         */
        function writeTreeChildWrites(writeTree, path) {
          return newWriteTreeRef(path, writeTree);
        }
        /**
         * Record a new overwrite from user code.
         *
         * @param visible - This is set to false by some transactions. It should be excluded from event caches
         */
        function writeTreeAddOverwrite(
          writeTree,
          path,
          snap,
          writeId,
          visible
        ) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            writeId > writeTree.lastWriteId,
            "Stacking an older write on top of newer ones"
          );
          if (visible === undefined) {
            visible = true;
          }
          writeTree.allWrites.push({
            path,
            snap,
            writeId,
            visible,
          });
          if (visible) {
            writeTree.visibleWrites = compoundWriteAddWrite(
              writeTree.visibleWrites,
              path,
              snap
            );
          }
          writeTree.lastWriteId = writeId;
        }
        /**
         * Record a new merge from user code.
         */
        function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            writeId > writeTree.lastWriteId,
            "Stacking an older merge on top of newer ones"
          );
          writeTree.allWrites.push({
            path,
            children: changedChildren,
            writeId,
            visible: true,
          });
          writeTree.visibleWrites = compoundWriteAddWrites(
            writeTree.visibleWrites,
            path,
            changedChildren
          );
          writeTree.lastWriteId = writeId;
        }
        function writeTreeGetWrite(writeTree, writeId) {
          for (let i = 0; i < writeTree.allWrites.length; i++) {
            const record = writeTree.allWrites[i];
            if (record.writeId === writeId) {
              return record;
            }
          }
          return null;
        }
        /**
         * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
         * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
         *
         * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
         * events as a result).
         */
        function writeTreeRemoveWrite(writeTree, writeId) {
          // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
          // out of order.
          //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
          //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
          const idx = writeTree.allWrites.findIndex((s) => {
            return s.writeId === writeId;
          });
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            idx >= 0,
            "removeWrite called with nonexistent writeId."
          );
          const writeToRemove = writeTree.allWrites[idx];
          writeTree.allWrites.splice(idx, 1);
          let removedWriteWasVisible = writeToRemove.visible;
          let removedWriteOverlapsWithOtherWrites = false;
          let i = writeTree.allWrites.length - 1;
          while (removedWriteWasVisible && i >= 0) {
            const currentWrite = writeTree.allWrites[i];
            if (currentWrite.visible) {
              if (
                i >= idx &&
                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)
              ) {
                // The removed write was completely shadowed by a subsequent write.
                removedWriteWasVisible = false;
              } else if (pathContains(writeToRemove.path, currentWrite.path)) {
                // Either we're covering some writes or they're covering part of us (depending on which came first).
                removedWriteOverlapsWithOtherWrites = true;
              }
            }
            i--;
          }
          if (!removedWriteWasVisible) {
            return false;
          } else if (removedWriteOverlapsWithOtherWrites) {
            // There's some shadowing going on. Just rebuild the visible writes from scratch.
            writeTreeResetTree_(writeTree);
            return true;
          } else {
            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
            if (writeToRemove.snap) {
              writeTree.visibleWrites = compoundWriteRemoveWrite(
                writeTree.visibleWrites,
                writeToRemove.path
              );
            } else {
              const children = writeToRemove.children;
              each(children, (childName) => {
                writeTree.visibleWrites = compoundWriteRemoveWrite(
                  writeTree.visibleWrites,
                  pathChild(writeToRemove.path, childName)
                );
              });
            }
            return true;
          }
        }
        function writeTreeRecordContainsPath_(writeRecord, path) {
          if (writeRecord.snap) {
            return pathContains(writeRecord.path, path);
          } else {
            for (const childName in writeRecord.children) {
              if (
                writeRecord.children.hasOwnProperty(childName) &&
                pathContains(pathChild(writeRecord.path, childName), path)
              ) {
                return true;
              }
            }
            return false;
          }
        }
        /**
         * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
         */
        function writeTreeResetTree_(writeTree) {
          writeTree.visibleWrites = writeTreeLayerTree_(
            writeTree.allWrites,
            writeTreeDefaultFilter_,
            newEmptyPath()
          );
          if (writeTree.allWrites.length > 0) {
            writeTree.lastWriteId =
              writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
          } else {
            writeTree.lastWriteId = -1;
          }
        }
        /**
         * The default filter used when constructing the tree. Keep everything that's visible.
         */
        function writeTreeDefaultFilter_(write) {
          return write.visible;
        }
        /**
         * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
         * event data at that path.
         */
        function writeTreeLayerTree_(writes, filter, treeRoot) {
          let compoundWrite = CompoundWrite.empty();
          for (let i = 0; i < writes.length; ++i) {
            const write = writes[i];
            // Theory, a later set will either:
            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
            if (filter(write)) {
              const writePath = write.path;
              let relativePath;
              if (write.snap) {
                if (pathContains(treeRoot, writePath)) {
                  relativePath = newRelativePath(treeRoot, writePath);
                  compoundWrite = compoundWriteAddWrite(
                    compoundWrite,
                    relativePath,
                    write.snap
                  );
                } else if (pathContains(writePath, treeRoot)) {
                  relativePath = newRelativePath(writePath, treeRoot);
                  compoundWrite = compoundWriteAddWrite(
                    compoundWrite,
                    newEmptyPath(),
                    write.snap.getChild(relativePath)
                  );
                } else;
              } else if (write.children) {
                if (pathContains(treeRoot, writePath)) {
                  relativePath = newRelativePath(treeRoot, writePath);
                  compoundWrite = compoundWriteAddWrites(
                    compoundWrite,
                    relativePath,
                    write.children
                  );
                } else if (pathContains(writePath, treeRoot)) {
                  relativePath = newRelativePath(writePath, treeRoot);
                  if (pathIsEmpty(relativePath)) {
                    compoundWrite = compoundWriteAddWrites(
                      compoundWrite,
                      newEmptyPath(),
                      write.children
                    );
                  } else {
                    const child = (0,
                      _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                        write.children,
                        pathGetFront(relativePath)
                      );
                    if (child) {
                      // There exists a child in this node that matches the root path
                      const deepNode = child.getChild(
                        pathPopFront(relativePath)
                      );
                      compoundWrite = compoundWriteAddWrite(
                        compoundWrite,
                        newEmptyPath(),
                        deepNode
                      );
                    }
                  }
                } else;
              } else {
                throw (0,
                  _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)(
                    "WriteRecord should have .snap or .children"
                  );
              }
            }
          }
          return compoundWrite;
        }
        /**
         * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
         * writes), attempt to calculate a complete snapshot for the given path
         *
         * @param writeIdsToExclude - An optional set to be excluded
         * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
         */
        function writeTreeCalcCompleteEventCache(
          writeTree,
          treePath,
          completeServerCache,
          writeIdsToExclude,
          includeHiddenWrites
        ) {
          if (!writeIdsToExclude && !includeHiddenWrites) {
            const shadowingNode = compoundWriteGetCompleteNode(
              writeTree.visibleWrites,
              treePath
            );
            if (shadowingNode != null) {
              return shadowingNode;
            } else {
              const subMerge = compoundWriteChildCompoundWrite(
                writeTree.visibleWrites,
                treePath
              );
              if (compoundWriteIsEmpty(subMerge)) {
                return completeServerCache;
              } else if (
                completeServerCache == null &&
                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())
              ) {
                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                return null;
              } else {
                const layeredCache =
                  completeServerCache || ChildrenNode.EMPTY_NODE;
                return compoundWriteApply(subMerge, layeredCache);
              }
            }
          } else {
            const merge = compoundWriteChildCompoundWrite(
              writeTree.visibleWrites,
              treePath
            );
            if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
              return completeServerCache;
            } else {
              // If the server cache is null, and we don't have a complete cache, we need to return null
              if (
                !includeHiddenWrites &&
                completeServerCache == null &&
                !compoundWriteHasCompleteWrite(merge, newEmptyPath())
              ) {
                return null;
              } else {
                const filter = function (write) {
                  return (
                    (write.visible || includeHiddenWrites) &&
                    (!writeIdsToExclude ||
                      !~writeIdsToExclude.indexOf(write.writeId)) &&
                    (pathContains(write.path, treePath) ||
                      pathContains(treePath, write.path))
                  );
                };
                const mergeAtPath = writeTreeLayerTree_(
                  writeTree.allWrites,
                  filter,
                  treePath
                );
                const layeredCache =
                  completeServerCache || ChildrenNode.EMPTY_NODE;
                return compoundWriteApply(mergeAtPath, layeredCache);
              }
            }
          }
        }
        /**
         * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
         * Used when creating new views, to pre-fill their complete event children snapshot.
         */
        function writeTreeCalcCompleteEventChildren(
          writeTree,
          treePath,
          completeServerChildren
        ) {
          let completeChildren = ChildrenNode.EMPTY_NODE;
          const topLevelSet = compoundWriteGetCompleteNode(
            writeTree.visibleWrites,
            treePath
          );
          if (topLevelSet) {
            if (!topLevelSet.isLeafNode()) {
              // we're shadowing everything. Return the children.
              topLevelSet.forEachChild(
                PRIORITY_INDEX,
                (childName, childSnap) => {
                  completeChildren = completeChildren.updateImmediateChild(
                    childName,
                    childSnap
                  );
                }
              );
            }
            return completeChildren;
          } else if (completeServerChildren) {
            // Layer any children we have on top of this
            // We know we don't have a top-level set, so just enumerate existing children
            const merge = compoundWriteChildCompoundWrite(
              writeTree.visibleWrites,
              treePath
            );
            completeServerChildren.forEachChild(
              PRIORITY_INDEX,
              (childName, childNode) => {
                const node = compoundWriteApply(
                  compoundWriteChildCompoundWrite(merge, new Path(childName)),
                  childNode
                );
                completeChildren = completeChildren.updateImmediateChild(
                  childName,
                  node
                );
              }
            );
            // Add any complete children we have from the set
            compoundWriteGetCompleteChildren(merge).forEach((namedNode) => {
              completeChildren = completeChildren.updateImmediateChild(
                namedNode.name,
                namedNode.node
              );
            });
            return completeChildren;
          } else {
            // We don't have anything to layer on top of. Layer on any children we have
            // Note that we can return an empty snap if we have a defined delete
            const merge = compoundWriteChildCompoundWrite(
              writeTree.visibleWrites,
              treePath
            );
            compoundWriteGetCompleteChildren(merge).forEach((namedNode) => {
              completeChildren = completeChildren.updateImmediateChild(
                namedNode.name,
                namedNode.node
              );
            });
            return completeChildren;
          }
        }
        /**
         * Given that the underlying server data has updated, determine what, if anything, needs to be
         * applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events
         *
         * Either existingEventSnap or existingServerSnap must exist
         */
        function writeTreeCalcEventCacheAfterServerOverwrite(
          writeTree,
          treePath,
          childPath,
          existingEventSnap,
          existingServerSnap
        ) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            existingEventSnap || existingServerSnap,
            "Either existingEventSnap or existingServerSnap must exist"
          );
          const path = pathChild(treePath, childPath);
          if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
            // At this point we can probably guarantee that we're in case 2, meaning no events
            // May need to check visibility while doing the findRootMostValueAndPath call
            return null;
          } else {
            // No complete shadowing. We're either partially shadowing or not shadowing at all.
            const childMerge = compoundWriteChildCompoundWrite(
              writeTree.visibleWrites,
              path
            );
            if (compoundWriteIsEmpty(childMerge)) {
              // We're not shadowing at all. Case 1
              return existingServerSnap.getChild(childPath);
            } else {
              // This could be more efficient if the serverNode + updates doesn't change the eventSnap
              // However this is tricky to find out, since user updates don't necessary change the server
              // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
              // adds nodes, but doesn't change any existing writes. It is therefore not enough to
              // only check if the updates change the serverNode.
              // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
              return compoundWriteApply(
                childMerge,
                existingServerSnap.getChild(childPath)
              );
            }
          }
        }
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         */
        function writeTreeCalcCompleteChild(
          writeTree,
          treePath,
          childKey,
          existingServerSnap
        ) {
          const path = pathChild(treePath, childKey);
          const shadowingNode = compoundWriteGetCompleteNode(
            writeTree.visibleWrites,
            path
          );
          if (shadowingNode != null) {
            return shadowingNode;
          } else {
            if (existingServerSnap.isCompleteForChild(childKey)) {
              const childMerge = compoundWriteChildCompoundWrite(
                writeTree.visibleWrites,
                path
              );
              return compoundWriteApply(
                childMerge,
                existingServerSnap.getNode().getImmediateChild(childKey)
              );
            } else {
              return null;
            }
          }
        }
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         */
        function writeTreeShadowingWrite(writeTree, path) {
          return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
        }
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window.
         */
        function writeTreeCalcIndexedSlice(
          writeTree,
          treePath,
          completeServerData,
          startPost,
          count,
          reverse,
          index
        ) {
          let toIterate;
          const merge = compoundWriteChildCompoundWrite(
            writeTree.visibleWrites,
            treePath
          );
          const shadowingNode = compoundWriteGetCompleteNode(
            merge,
            newEmptyPath()
          );
          if (shadowingNode != null) {
            toIterate = shadowingNode;
          } else if (completeServerData != null) {
            toIterate = compoundWriteApply(merge, completeServerData);
          } else {
            // no children to iterate on
            return [];
          }
          toIterate = toIterate.withIndex(index);
          if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
            const nodes = [];
            const cmp = index.getCompare();
            const iter = reverse
              ? toIterate.getReverseIteratorFrom(startPost, index)
              : toIterate.getIteratorFrom(startPost, index);
            let next = iter.getNext();
            while (next && nodes.length < count) {
              if (cmp(next, startPost) !== 0) {
                nodes.push(next);
              }
              next = iter.getNext();
            }
            return nodes;
          } else {
            return [];
          }
        }
        function newWriteTree() {
          return {
            visibleWrites: CompoundWrite.empty(),
            allWrites: [],
            lastWriteId: -1,
          };
        }
        /**
         * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
         * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
         * can lead to a more expensive calculation.
         *
         * @param writeIdsToExclude - Optional writes to exclude.
         * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
         */
        function writeTreeRefCalcCompleteEventCache(
          writeTreeRef,
          completeServerCache,
          writeIdsToExclude,
          includeHiddenWrites
        ) {
          return writeTreeCalcCompleteEventCache(
            writeTreeRef.writeTree,
            writeTreeRef.treePath,
            completeServerCache,
            writeIdsToExclude,
            includeHiddenWrites
          );
        }
        /**
         * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
         * mix of the given server data and write data.
         *
         */
        function writeTreeRefCalcCompleteEventChildren(
          writeTreeRef,
          completeServerChildren
        ) {
          return writeTreeCalcCompleteEventChildren(
            writeTreeRef.writeTree,
            writeTreeRef.treePath,
            completeServerChildren
          );
        }
        /**
         * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
         * if anything, needs to be applied to the event cache.
         *
         * Possibilities:
         *
         * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
         *
         * 2. Some write is completely shadowing. No events to be raised
         *
         * 3. Is partially shadowed. Events should be raised
         *
         * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
         *
         *
         */
        function writeTreeRefCalcEventCacheAfterServerOverwrite(
          writeTreeRef,
          path,
          existingEventSnap,
          existingServerSnap
        ) {
          return writeTreeCalcEventCacheAfterServerOverwrite(
            writeTreeRef.writeTree,
            writeTreeRef.treePath,
            path,
            existingEventSnap,
            existingServerSnap
          );
        }
        /**
         * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
         * a higher path, this will return the child of that write relative to the write and this path.
         * Returns null if there is no write at this path.
         *
         */
        function writeTreeRefShadowingWrite(writeTreeRef, path) {
          return writeTreeShadowingWrite(
            writeTreeRef.writeTree,
            pathChild(writeTreeRef.treePath, path)
          );
        }
        /**
         * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
         * the window, but may now be in the window
         */
        function writeTreeRefCalcIndexedSlice(
          writeTreeRef,
          completeServerData,
          startPost,
          count,
          reverse,
          index
        ) {
          return writeTreeCalcIndexedSlice(
            writeTreeRef.writeTree,
            writeTreeRef.treePath,
            completeServerData,
            startPost,
            count,
            reverse,
            index
          );
        }
        /**
         * Returns a complete child for a given server snap after applying all user writes or null if there is no
         * complete child for this ChildKey.
         */
        function writeTreeRefCalcCompleteChild(
          writeTreeRef,
          childKey,
          existingServerCache
        ) {
          return writeTreeCalcCompleteChild(
            writeTreeRef.writeTree,
            writeTreeRef.treePath,
            childKey,
            existingServerCache
          );
        }
        /**
         * Return a WriteTreeRef for a child.
         */
        function writeTreeRefChild(writeTreeRef, childName) {
          return newWriteTreeRef(
            pathChild(writeTreeRef.treePath, childName),
            writeTreeRef.writeTree
          );
        }
        function newWriteTreeRef(path, writeTree) {
          return {
            treePath: path,
            writeTree,
          };
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class ChildChangeAccumulator {
          constructor() {
            this.changeMap = new Map();
          }
          trackChildChange(change) {
            const type = change.type;
            const childKey = change.childName;
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              type === "child_added" /* CHILD_ADDED */ ||
              type === "child_changed" /* CHILD_CHANGED */ ||
              type === "child_removed" /* CHILD_REMOVED */,
              "Only child changes supported for tracking"
            );
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              childKey !== ".priority",
              "Only non-priority child changes can be tracked."
            );
            const oldChange = this.changeMap.get(childKey);
            if (oldChange) {
              const oldType = oldChange.type;
              if (
                type === "child_added" /* CHILD_ADDED */ &&
                oldType === "child_removed" /* CHILD_REMOVED */
              ) {
                this.changeMap.set(
                  childKey,
                  changeChildChanged(
                    childKey,
                    change.snapshotNode,
                    oldChange.snapshotNode
                  )
                );
              } else if (
                type === "child_removed" /* CHILD_REMOVED */ &&
                oldType === "child_added" /* CHILD_ADDED */
              ) {
                this.changeMap.delete(childKey);
              } else if (
                type === "child_removed" /* CHILD_REMOVED */ &&
                oldType === "child_changed" /* CHILD_CHANGED */
              ) {
                this.changeMap.set(
                  childKey,
                  changeChildRemoved(childKey, oldChange.oldSnap)
                );
              } else if (
                type === "child_changed" /* CHILD_CHANGED */ &&
                oldType === "child_added" /* CHILD_ADDED */
              ) {
                this.changeMap.set(
                  childKey,
                  changeChildAdded(childKey, change.snapshotNode)
                );
              } else if (
                type === "child_changed" /* CHILD_CHANGED */ &&
                oldType === "child_changed" /* CHILD_CHANGED */
              ) {
                this.changeMap.set(
                  childKey,
                  changeChildChanged(
                    childKey,
                    change.snapshotNode,
                    oldChange.oldSnap
                  )
                );
              } else {
                throw (0,
                  _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)(
                    "Illegal combination of changes: " +
                    change +
                    " occurred after " +
                    oldChange
                  );
              }
            } else {
              this.changeMap.set(childKey, change);
            }
          }
          getChanges() {
            return Array.from(this.changeMap.values());
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An implementation of CompleteChildSource that never returns any additional children
         */
        // eslint-disable-next-line @typescript-eslint/naming-convention
        class NoCompleteChildSource_ {
          getCompleteChild(childKey) {
            return null;
          }
          getChildAfterChild(index, child, reverse) {
            return null;
          }
        }
        /**
         * Singleton instance.
         */
        const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
        /**
         * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
         * old event caches available to calculate complete children.
         */
        class WriteTreeCompleteChildSource {
          constructor(writes_, viewCache_, optCompleteServerCache_ = null) {
            this.writes_ = writes_;
            this.viewCache_ = viewCache_;
            this.optCompleteServerCache_ = optCompleteServerCache_;
          }
          getCompleteChild(childKey) {
            const node = this.viewCache_.eventCache;
            if (node.isCompleteForChild(childKey)) {
              return node.getNode().getImmediateChild(childKey);
            } else {
              const serverNode =
                this.optCompleteServerCache_ != null
                  ? new CacheNode(this.optCompleteServerCache_, true, false)
                  : this.viewCache_.serverCache;
              return writeTreeRefCalcCompleteChild(
                this.writes_,
                childKey,
                serverNode
              );
            }
          }
          getChildAfterChild(index, child, reverse) {
            const completeServerData =
              this.optCompleteServerCache_ != null
                ? this.optCompleteServerCache_
                : viewCacheGetCompleteServerSnap(this.viewCache_);
            const nodes = writeTreeRefCalcIndexedSlice(
              this.writes_,
              completeServerData,
              child,
              1,
              reverse,
              index
            );
            if (nodes.length === 0) {
              return null;
            } else {
              return nodes[0];
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function newViewProcessor(filter) {
          return { filter };
        }
        function viewProcessorAssertIndexed(viewProcessor, viewCache) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            viewCache.eventCache
              .getNode()
              .isIndexed(viewProcessor.filter.getIndex()),
            "Event snap not indexed"
          );
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            viewCache.serverCache
              .getNode()
              .isIndexed(viewProcessor.filter.getIndex()),
            "Server snap not indexed"
          );
        }
        function viewProcessorApplyOperation(
          viewProcessor,
          oldViewCache,
          operation,
          writesCache,
          completeCache
        ) {
          const accumulator = new ChildChangeAccumulator();
          let newViewCache, filterServerNode;
          if (operation.type === OperationType.OVERWRITE) {
            const overwrite = operation;
            if (overwrite.source.fromUser) {
              newViewCache = viewProcessorApplyUserOverwrite(
                viewProcessor,
                oldViewCache,
                overwrite.path,
                overwrite.snap,
                writesCache,
                completeCache,
                accumulator
              );
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                overwrite.source.fromServer,
                "Unknown source."
              );
              // We filter the node if it's a tagged update or the node has been previously filtered  and the
              // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
              // again
              filterServerNode =
                overwrite.source.tagged ||
                (oldViewCache.serverCache.isFiltered() &&
                  !pathIsEmpty(overwrite.path));
              newViewCache = viewProcessorApplyServerOverwrite(
                viewProcessor,
                oldViewCache,
                overwrite.path,
                overwrite.snap,
                writesCache,
                completeCache,
                filterServerNode,
                accumulator
              );
            }
          } else if (operation.type === OperationType.MERGE) {
            const merge = operation;
            if (merge.source.fromUser) {
              newViewCache = viewProcessorApplyUserMerge(
                viewProcessor,
                oldViewCache,
                merge.path,
                merge.children,
                writesCache,
                completeCache,
                accumulator
              );
            } else {
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                merge.source.fromServer,
                "Unknown source."
              );
              // We filter the node if it's a tagged update or the node has been previously filtered
              filterServerNode =
                merge.source.tagged || oldViewCache.serverCache.isFiltered();
              newViewCache = viewProcessorApplyServerMerge(
                viewProcessor,
                oldViewCache,
                merge.path,
                merge.children,
                writesCache,
                completeCache,
                filterServerNode,
                accumulator
              );
            }
          } else if (operation.type === OperationType.ACK_USER_WRITE) {
            const ackUserWrite = operation;
            if (!ackUserWrite.revert) {
              newViewCache = viewProcessorAckUserWrite(
                viewProcessor,
                oldViewCache,
                ackUserWrite.path,
                ackUserWrite.affectedTree,
                writesCache,
                completeCache,
                accumulator
              );
            } else {
              newViewCache = viewProcessorRevertUserWrite(
                viewProcessor,
                oldViewCache,
                ackUserWrite.path,
                writesCache,
                completeCache,
                accumulator
              );
            }
          } else if (operation.type === OperationType.LISTEN_COMPLETE) {
            newViewCache = viewProcessorListenComplete(
              viewProcessor,
              oldViewCache,
              operation.path,
              writesCache,
              accumulator
            );
          } else {
            throw (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)(
                "Unknown operation type: " + operation.type
              );
          }
          const changes = accumulator.getChanges();
          viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);
          return { viewCache: newViewCache, changes };
        }
        function viewProcessorMaybeAddValueEvent(
          oldViewCache,
          newViewCache,
          accumulator
        ) {
          const eventSnap = newViewCache.eventCache;
          if (eventSnap.isFullyInitialized()) {
            const isLeafOrEmpty =
              eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
            const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
            if (
              accumulator.length > 0 ||
              !oldViewCache.eventCache.isFullyInitialized() ||
              (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||
              !eventSnap
                .getNode()
                .getPriority()
                .equals(oldCompleteSnap.getPriority())
            ) {
              accumulator.push(
                changeValue(viewCacheGetCompleteEventSnap(newViewCache))
              );
            }
          }
        }
        function viewProcessorGenerateEventCacheAfterServerEvent(
          viewProcessor,
          viewCache,
          changePath,
          writesCache,
          source,
          accumulator
        ) {
          const oldEventSnap = viewCache.eventCache;
          if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
            // we have a shadowing write, ignore changes
            return viewCache;
          } else {
            let newEventCache, serverNode;
            if (pathIsEmpty(changePath)) {
              // TODO: figure out how this plays with "sliding ack windows"
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                viewCache.serverCache.isFullyInitialized(),
                "If change path is empty, we must have complete server data"
              );
              if (viewCache.serverCache.isFiltered()) {
                // We need to special case this, because we need to only apply writes to complete children, or
                // we might end up raising events for incomplete children. If the server data is filtered deep
                // writes cannot be guaranteed to be complete
                const serverCache = viewCacheGetCompleteServerSnap(viewCache);
                const completeChildren =
                  serverCache instanceof ChildrenNode
                    ? serverCache
                    : ChildrenNode.EMPTY_NODE;
                const completeEventChildren =
                  writeTreeRefCalcCompleteEventChildren(
                    writesCache,
                    completeChildren
                  );
                newEventCache = viewProcessor.filter.updateFullNode(
                  viewCache.eventCache.getNode(),
                  completeEventChildren,
                  accumulator
                );
              } else {
                const completeNode = writeTreeRefCalcCompleteEventCache(
                  writesCache,
                  viewCacheGetCompleteServerSnap(viewCache)
                );
                newEventCache = viewProcessor.filter.updateFullNode(
                  viewCache.eventCache.getNode(),
                  completeNode,
                  accumulator
                );
              }
            } else {
              const childKey = pathGetFront(changePath);
              if (childKey === ".priority") {
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                  pathGetLength(changePath) === 1,
                  "Can't have a priority with additional path components"
                );
                const oldEventNode = oldEventSnap.getNode();
                serverNode = viewCache.serverCache.getNode();
                // we might have overwrites for this priority
                const updatedPriority =
                  writeTreeRefCalcEventCacheAfterServerOverwrite(
                    writesCache,
                    changePath,
                    oldEventNode,
                    serverNode
                  );
                if (updatedPriority != null) {
                  newEventCache = viewProcessor.filter.updatePriority(
                    oldEventNode,
                    updatedPriority
                  );
                } else {
                  // priority didn't change, keep old node
                  newEventCache = oldEventSnap.getNode();
                }
              } else {
                const childChangePath = pathPopFront(changePath);
                // update child
                let newEventChild;
                if (oldEventSnap.isCompleteForChild(childKey)) {
                  serverNode = viewCache.serverCache.getNode();
                  const eventChildUpdate =
                    writeTreeRefCalcEventCacheAfterServerOverwrite(
                      writesCache,
                      changePath,
                      oldEventSnap.getNode(),
                      serverNode
                    );
                  if (eventChildUpdate != null) {
                    newEventChild = oldEventSnap
                      .getNode()
                      .getImmediateChild(childKey)
                      .updateChild(childChangePath, eventChildUpdate);
                  } else {
                    // Nothing changed, just keep the old child
                    newEventChild = oldEventSnap
                      .getNode()
                      .getImmediateChild(childKey);
                  }
                } else {
                  newEventChild = writeTreeRefCalcCompleteChild(
                    writesCache,
                    childKey,
                    viewCache.serverCache
                  );
                }
                if (newEventChild != null) {
                  newEventCache = viewProcessor.filter.updateChild(
                    oldEventSnap.getNode(),
                    childKey,
                    newEventChild,
                    childChangePath,
                    source,
                    accumulator
                  );
                } else {
                  // no complete child available or no change
                  newEventCache = oldEventSnap.getNode();
                }
              }
            }
            return viewCacheUpdateEventSnap(
              viewCache,
              newEventCache,
              oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),
              viewProcessor.filter.filtersNodes()
            );
          }
        }
        function viewProcessorApplyServerOverwrite(
          viewProcessor,
          oldViewCache,
          changePath,
          changedSnap,
          writesCache,
          completeCache,
          filterServerNode,
          accumulator
        ) {
          const oldServerSnap = oldViewCache.serverCache;
          let newServerCache;
          const serverFilter = filterServerNode
            ? viewProcessor.filter
            : viewProcessor.filter.getIndexedFilter();
          if (pathIsEmpty(changePath)) {
            newServerCache = serverFilter.updateFullNode(
              oldServerSnap.getNode(),
              changedSnap,
              null
            );
          } else if (
            serverFilter.filtersNodes() &&
            !oldServerSnap.isFiltered()
          ) {
            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
            const newServerNode = oldServerSnap
              .getNode()
              .updateChild(changePath, changedSnap);
            newServerCache = serverFilter.updateFullNode(
              oldServerSnap.getNode(),
              newServerNode,
              null
            );
          } else {
            const childKey = pathGetFront(changePath);
            if (
              !oldServerSnap.isCompleteForPath(changePath) &&
              pathGetLength(changePath) > 1
            ) {
              // We don't update incomplete nodes with updates intended for other listeners
              return oldViewCache;
            }
            const childChangePath = pathPopFront(changePath);
            const childNode = oldServerSnap
              .getNode()
              .getImmediateChild(childKey);
            const newChildNode = childNode.updateChild(
              childChangePath,
              changedSnap
            );
            if (childKey === ".priority") {
              newServerCache = serverFilter.updatePriority(
                oldServerSnap.getNode(),
                newChildNode
              );
            } else {
              newServerCache = serverFilter.updateChild(
                oldServerSnap.getNode(),
                childKey,
                newChildNode,
                childChangePath,
                NO_COMPLETE_CHILD_SOURCE,
                null
              );
            }
          }
          const newViewCache = viewCacheUpdateServerSnap(
            oldViewCache,
            newServerCache,
            oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),
            serverFilter.filtersNodes()
          );
          const source = new WriteTreeCompleteChildSource(
            writesCache,
            newViewCache,
            completeCache
          );
          return viewProcessorGenerateEventCacheAfterServerEvent(
            viewProcessor,
            newViewCache,
            changePath,
            writesCache,
            source,
            accumulator
          );
        }
        function viewProcessorApplyUserOverwrite(
          viewProcessor,
          oldViewCache,
          changePath,
          changedSnap,
          writesCache,
          completeCache,
          accumulator
        ) {
          const oldEventSnap = oldViewCache.eventCache;
          let newViewCache, newEventCache;
          const source = new WriteTreeCompleteChildSource(
            writesCache,
            oldViewCache,
            completeCache
          );
          if (pathIsEmpty(changePath)) {
            newEventCache = viewProcessor.filter.updateFullNode(
              oldViewCache.eventCache.getNode(),
              changedSnap,
              accumulator
            );
            newViewCache = viewCacheUpdateEventSnap(
              oldViewCache,
              newEventCache,
              true,
              viewProcessor.filter.filtersNodes()
            );
          } else {
            const childKey = pathGetFront(changePath);
            if (childKey === ".priority") {
              newEventCache = viewProcessor.filter.updatePriority(
                oldViewCache.eventCache.getNode(),
                changedSnap
              );
              newViewCache = viewCacheUpdateEventSnap(
                oldViewCache,
                newEventCache,
                oldEventSnap.isFullyInitialized(),
                oldEventSnap.isFiltered()
              );
            } else {
              const childChangePath = pathPopFront(changePath);
              const oldChild = oldEventSnap
                .getNode()
                .getImmediateChild(childKey);
              let newChild;
              if (pathIsEmpty(childChangePath)) {
                // Child overwrite, we can replace the child
                newChild = changedSnap;
              } else {
                const childNode = source.getCompleteChild(childKey);
                if (childNode != null) {
                  if (
                    pathGetBack(childChangePath) === ".priority" &&
                    childNode.getChild(pathParent(childChangePath)).isEmpty()
                  ) {
                    // This is a priority update on an empty node. If this node exists on the server, the
                    // server will send down the priority in the update, so ignore for now
                    newChild = childNode;
                  } else {
                    newChild = childNode.updateChild(
                      childChangePath,
                      changedSnap
                    );
                  }
                } else {
                  // There is no complete child node available
                  newChild = ChildrenNode.EMPTY_NODE;
                }
              }
              if (!oldChild.equals(newChild)) {
                const newEventSnap = viewProcessor.filter.updateChild(
                  oldEventSnap.getNode(),
                  childKey,
                  newChild,
                  childChangePath,
                  source,
                  accumulator
                );
                newViewCache = viewCacheUpdateEventSnap(
                  oldViewCache,
                  newEventSnap,
                  oldEventSnap.isFullyInitialized(),
                  viewProcessor.filter.filtersNodes()
                );
              } else {
                newViewCache = oldViewCache;
              }
            }
          }
          return newViewCache;
        }
        function viewProcessorCacheHasChild(viewCache, childKey) {
          return viewCache.eventCache.isCompleteForChild(childKey);
        }
        function viewProcessorApplyUserMerge(
          viewProcessor,
          viewCache,
          path,
          changedChildren,
          writesCache,
          serverCache,
          accumulator
        ) {
          // HACK: In the case of a limit query, there may be some changes that bump things out of the
          // window leaving room for new items.  It's important we process these changes first, so we
          // iterate the changes twice, first processing any that affect items currently in view.
          // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
          // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
          // not the other.
          let curViewCache = viewCache;
          changedChildren.foreach((relativePath, childNode) => {
            const writePath = pathChild(path, relativePath);
            if (
              viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))
            ) {
              curViewCache = viewProcessorApplyUserOverwrite(
                viewProcessor,
                curViewCache,
                writePath,
                childNode,
                writesCache,
                serverCache,
                accumulator
              );
            }
          });
          changedChildren.foreach((relativePath, childNode) => {
            const writePath = pathChild(path, relativePath);
            if (
              !viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))
            ) {
              curViewCache = viewProcessorApplyUserOverwrite(
                viewProcessor,
                curViewCache,
                writePath,
                childNode,
                writesCache,
                serverCache,
                accumulator
              );
            }
          });
          return curViewCache;
        }
        function viewProcessorApplyMerge(viewProcessor, node, merge) {
          merge.foreach((relativePath, childNode) => {
            node = node.updateChild(relativePath, childNode);
          });
          return node;
        }
        function viewProcessorApplyServerMerge(
          viewProcessor,
          viewCache,
          path,
          changedChildren,
          writesCache,
          serverCache,
          filterServerNode,
          accumulator
        ) {
          // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
          // wait for the complete data update coming soon.
          if (
            viewCache.serverCache.getNode().isEmpty() &&
            !viewCache.serverCache.isFullyInitialized()
          ) {
            return viewCache;
          }
          // HACK: In the case of a limit query, there may be some changes that bump things out of the
          // window leaving room for new items.  It's important we process these changes first, so we
          // iterate the changes twice, first processing any that affect items currently in view.
          // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
          // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
          // not the other.
          let curViewCache = viewCache;
          let viewMergeTree;
          if (pathIsEmpty(path)) {
            viewMergeTree = changedChildren;
          } else {
            viewMergeTree = new ImmutableTree(null).setTree(
              path,
              changedChildren
            );
          }
          const serverNode = viewCache.serverCache.getNode();
          viewMergeTree.children.inorderTraversal((childKey, childTree) => {
            if (serverNode.hasChild(childKey)) {
              const serverChild = viewCache.serverCache
                .getNode()
                .getImmediateChild(childKey);
              const newChild = viewProcessorApplyMerge(
                viewProcessor,
                serverChild,
                childTree
              );
              curViewCache = viewProcessorApplyServerOverwrite(
                viewProcessor,
                curViewCache,
                new Path(childKey),
                newChild,
                writesCache,
                serverCache,
                filterServerNode,
                accumulator
              );
            }
          });
          viewMergeTree.children.inorderTraversal(
            (childKey, childMergeTree) => {
              const isUnknownDeepMerge =
                !viewCache.serverCache.isCompleteForChild(childKey) &&
                childMergeTree.value === null;
              if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                const serverChild = viewCache.serverCache
                  .getNode()
                  .getImmediateChild(childKey);
                const newChild = viewProcessorApplyMerge(
                  viewProcessor,
                  serverChild,
                  childMergeTree
                );
                curViewCache = viewProcessorApplyServerOverwrite(
                  viewProcessor,
                  curViewCache,
                  new Path(childKey),
                  newChild,
                  writesCache,
                  serverCache,
                  filterServerNode,
                  accumulator
                );
              }
            }
          );
          return curViewCache;
        }
        function viewProcessorAckUserWrite(
          viewProcessor,
          viewCache,
          ackPath,
          affectedTree,
          writesCache,
          completeCache,
          accumulator
        ) {
          if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
            return viewCache;
          }
          // Only filter server node if it is currently filtered
          const filterServerNode = viewCache.serverCache.isFiltered();
          // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
          // now that it won't be shadowed.
          const serverCache = viewCache.serverCache;
          if (affectedTree.value != null) {
            // This is an overwrite.
            if (
              (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||
              serverCache.isCompleteForPath(ackPath)
            ) {
              return viewProcessorApplyServerOverwrite(
                viewProcessor,
                viewCache,
                ackPath,
                serverCache.getNode().getChild(ackPath),
                writesCache,
                completeCache,
                filterServerNode,
                accumulator
              );
            } else if (pathIsEmpty(ackPath)) {
              // This is a goofy edge case where we are acking data at this location but don't have full data.  We
              // should just re-apply whatever we have in our cache as a merge.
              let changedChildren = new ImmutableTree(null);
              serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {
                changedChildren = changedChildren.set(new Path(name), node);
              });
              return viewProcessorApplyServerMerge(
                viewProcessor,
                viewCache,
                ackPath,
                changedChildren,
                writesCache,
                completeCache,
                filterServerNode,
                accumulator
              );
            } else {
              return viewCache;
            }
          } else {
            // This is a merge.
            let changedChildren = new ImmutableTree(null);
            affectedTree.foreach((mergePath, value) => {
              const serverCachePath = pathChild(ackPath, mergePath);
              if (serverCache.isCompleteForPath(serverCachePath)) {
                changedChildren = changedChildren.set(
                  mergePath,
                  serverCache.getNode().getChild(serverCachePath)
                );
              }
            });
            return viewProcessorApplyServerMerge(
              viewProcessor,
              viewCache,
              ackPath,
              changedChildren,
              writesCache,
              completeCache,
              filterServerNode,
              accumulator
            );
          }
        }
        function viewProcessorListenComplete(
          viewProcessor,
          viewCache,
          path,
          writesCache,
          accumulator
        ) {
          const oldServerNode = viewCache.serverCache;
          const newViewCache = viewCacheUpdateServerSnap(
            viewCache,
            oldServerNode.getNode(),
            oldServerNode.isFullyInitialized() || pathIsEmpty(path),
            oldServerNode.isFiltered()
          );
          return viewProcessorGenerateEventCacheAfterServerEvent(
            viewProcessor,
            newViewCache,
            path,
            writesCache,
            NO_COMPLETE_CHILD_SOURCE,
            accumulator
          );
        }
        function viewProcessorRevertUserWrite(
          viewProcessor,
          viewCache,
          path,
          writesCache,
          completeServerCache,
          accumulator
        ) {
          let complete;
          if (writeTreeRefShadowingWrite(writesCache, path) != null) {
            return viewCache;
          } else {
            const source = new WriteTreeCompleteChildSource(
              writesCache,
              viewCache,
              completeServerCache
            );
            const oldEventCache = viewCache.eventCache.getNode();
            let newEventCache;
            if (pathIsEmpty(path) || pathGetFront(path) === ".priority") {
              let newNode;
              if (viewCache.serverCache.isFullyInitialized()) {
                newNode = writeTreeRefCalcCompleteEventCache(
                  writesCache,
                  viewCacheGetCompleteServerSnap(viewCache)
                );
              } else {
                const serverChildren = viewCache.serverCache.getNode();
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                  serverChildren instanceof ChildrenNode,
                  "serverChildren would be complete if leaf node"
                );
                newNode = writeTreeRefCalcCompleteEventChildren(
                  writesCache,
                  serverChildren
                );
              }
              newNode = newNode;
              newEventCache = viewProcessor.filter.updateFullNode(
                oldEventCache,
                newNode,
                accumulator
              );
            } else {
              const childKey = pathGetFront(path);
              let newChild = writeTreeRefCalcCompleteChild(
                writesCache,
                childKey,
                viewCache.serverCache
              );
              if (
                newChild == null &&
                viewCache.serverCache.isCompleteForChild(childKey)
              ) {
                newChild = oldEventCache.getImmediateChild(childKey);
              }
              if (newChild != null) {
                newEventCache = viewProcessor.filter.updateChild(
                  oldEventCache,
                  childKey,
                  newChild,
                  pathPopFront(path),
                  source,
                  accumulator
                );
              } else if (viewCache.eventCache.getNode().hasChild(childKey)) {
                // No complete child available, delete the existing one, if any
                newEventCache = viewProcessor.filter.updateChild(
                  oldEventCache,
                  childKey,
                  ChildrenNode.EMPTY_NODE,
                  pathPopFront(path),
                  source,
                  accumulator
                );
              } else {
                newEventCache = oldEventCache;
              }
              if (
                newEventCache.isEmpty() &&
                viewCache.serverCache.isFullyInitialized()
              ) {
                // We might have reverted all child writes. Maybe the old event was a leaf node
                complete = writeTreeRefCalcCompleteEventCache(
                  writesCache,
                  viewCacheGetCompleteServerSnap(viewCache)
                );
                if (complete.isLeafNode()) {
                  newEventCache = viewProcessor.filter.updateFullNode(
                    newEventCache,
                    complete,
                    accumulator
                  );
                }
              }
            }
            complete =
              viewCache.serverCache.isFullyInitialized() ||
              writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
            return viewCacheUpdateEventSnap(
              viewCache,
              newEventCache,
              complete,
              viewProcessor.filter.filtersNodes()
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A view represents a specific location and query that has 1 or more event registrations.
         *
         * It does several things:
         *  - Maintains the list of event registrations for this location/query.
         *  - Maintains a cache of the data visible for this location/query.
         *  - Applies new operations (via applyOperation), updates the cache, and based on the event
         *    registrations returns the set of events to be raised.
         */
        class View {
          constructor(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            const params = this.query_._queryParams;
            const indexFilter = new IndexedFilter(params.getIndex());
            const filter = queryParamsGetNodeFilter(params);
            this.processor_ = newViewProcessor(filter);
            const initialServerCache = initialViewCache.serverCache;
            const initialEventCache = initialViewCache.eventCache;
            // Don't filter server node with other filter than index, wait for tagged listen
            const serverSnap = indexFilter.updateFullNode(
              ChildrenNode.EMPTY_NODE,
              initialServerCache.getNode(),
              null
            );
            const eventSnap = filter.updateFullNode(
              ChildrenNode.EMPTY_NODE,
              initialEventCache.getNode(),
              null
            );
            const newServerCache = new CacheNode(
              serverSnap,
              initialServerCache.isFullyInitialized(),
              indexFilter.filtersNodes()
            );
            const newEventCache = new CacheNode(
              eventSnap,
              initialEventCache.isFullyInitialized(),
              filter.filtersNodes()
            );
            this.viewCache_ = newViewCache(newEventCache, newServerCache);
            this.eventGenerator_ = new EventGenerator(this.query_);
          }
          get query() {
            return this.query_;
          }
        }
        function viewGetServerCache(view) {
          return view.viewCache_.serverCache.getNode();
        }
        function viewGetCompleteNode(view) {
          return viewCacheGetCompleteEventSnap(view.viewCache_);
        }
        function viewGetCompleteServerCache(view, path) {
          const cache = viewCacheGetCompleteServerSnap(view.viewCache_);
          if (cache) {
            // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
            // we need to see if it contains the child we're interested in.
            if (
              view.query._queryParams.loadsAllData() ||
              (!pathIsEmpty(path) &&
                !cache.getImmediateChild(pathGetFront(path)).isEmpty())
            ) {
              return cache.getChild(path);
            }
          }
          return null;
        }
        function viewIsEmpty(view) {
          return view.eventRegistrations_.length === 0;
        }
        function viewAddEventRegistration(view, eventRegistration) {
          view.eventRegistrations_.push(eventRegistration);
        }
        /**
         * @param eventRegistration - If null, remove all callbacks.
         * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
         * @returns Cancel events, if cancelError was provided.
         */
        function viewRemoveEventRegistration(
          view,
          eventRegistration,
          cancelError
        ) {
          const cancelEvents = [];
          if (cancelError) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              eventRegistration == null,
              "A cancel should cancel all event registrations."
            );
            const path = view.query._path;
            view.eventRegistrations_.forEach((registration) => {
              const maybeEvent = registration.createCancelEvent(
                cancelError,
                path
              );
              if (maybeEvent) {
                cancelEvents.push(maybeEvent);
              }
            });
          }
          if (eventRegistration) {
            let remaining = [];
            for (let i = 0; i < view.eventRegistrations_.length; ++i) {
              const existing = view.eventRegistrations_[i];
              if (!existing.matches(eventRegistration)) {
                remaining.push(existing);
              } else if (eventRegistration.hasAnyCallback()) {
                // We're removing just this one
                remaining = remaining.concat(
                  view.eventRegistrations_.slice(i + 1)
                );
                break;
              }
            }
            view.eventRegistrations_ = remaining;
          } else {
            view.eventRegistrations_ = [];
          }
          return cancelEvents;
        }
        /**
         * Applies the given Operation, updates our cache, and returns the appropriate events.
         */
        function viewApplyOperation(
          view,
          operation,
          writesCache,
          completeServerCache
        ) {
          if (
            operation.type === OperationType.MERGE &&
            operation.source.queryId !== null
          ) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              viewCacheGetCompleteServerSnap(view.viewCache_),
              "We should always have a full cache before handling merges"
            );
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              viewCacheGetCompleteEventSnap(view.viewCache_),
              "Missing event cache, even though we have a server cache"
            );
          }
          const oldViewCache = view.viewCache_;
          const result = viewProcessorApplyOperation(
            view.processor_,
            oldViewCache,
            operation,
            writesCache,
            completeServerCache
          );
          viewProcessorAssertIndexed(view.processor_, result.viewCache);
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            result.viewCache.serverCache.isFullyInitialized() ||
            !oldViewCache.serverCache.isFullyInitialized(),
            "Once a server snap is complete, it should never go back"
          );
          view.viewCache_ = result.viewCache;
          return viewGenerateEventsForChanges_(
            view,
            result.changes,
            result.viewCache.eventCache.getNode(),
            null
          );
        }
        function viewGetInitialEvents(view, registration) {
          const eventSnap = view.viewCache_.eventCache;
          const initialChanges = [];
          if (!eventSnap.getNode().isLeafNode()) {
            const eventNode = eventSnap.getNode();
            eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {
              initialChanges.push(changeChildAdded(key, childNode));
            });
          }
          if (eventSnap.isFullyInitialized()) {
            initialChanges.push(changeValue(eventSnap.getNode()));
          }
          return viewGenerateEventsForChanges_(
            view,
            initialChanges,
            eventSnap.getNode(),
            registration
          );
        }
        function viewGenerateEventsForChanges_(
          view,
          changes,
          eventCache,
          eventRegistration
        ) {
          const registrations = eventRegistration
            ? [eventRegistration]
            : view.eventRegistrations_;
          return eventGeneratorGenerateEventsForChanges(
            view.eventGenerator_,
            changes,
            eventCache,
            registrations
          );
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let referenceConstructor$1;
        /**
         * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
         * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
         * and user writes (set, transaction, update).
         *
         * It's responsible for:
         *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
         *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
         *    applyUserOverwrite, etc.)
         */
        class SyncPoint {
          constructor() {
            /**
             * The Views being tracked at this location in the tree, stored as a map where the key is a
             * queryId and the value is the View for that query.
             *
             * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
             */
            this.views = new Map();
          }
        }
        function syncPointSetReferenceConstructor(val) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            !referenceConstructor$1,
            "__referenceConstructor has already been defined"
          );
          referenceConstructor$1 = val;
        }
        function syncPointGetReferenceConstructor() {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            referenceConstructor$1,
            "Reference.ts has not been loaded"
          );
          return referenceConstructor$1;
        }
        function syncPointIsEmpty(syncPoint) {
          return syncPoint.views.size === 0;
        }
        function syncPointApplyOperation(
          syncPoint,
          operation,
          writesCache,
          optCompleteServerCache
        ) {
          const queryId = operation.source.queryId;
          if (queryId !== null) {
            const view = syncPoint.views.get(queryId);
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              view != null,
              "SyncTree gave us an op for an invalid query."
            );
            return viewApplyOperation(
              view,
              operation,
              writesCache,
              optCompleteServerCache
            );
          } else {
            let events = [];
            for (const view of syncPoint.views.values()) {
              events = events.concat(
                viewApplyOperation(
                  view,
                  operation,
                  writesCache,
                  optCompleteServerCache
                )
              );
            }
            return events;
          }
        }
        /**
         * Get a view for the specified query.
         *
         * @param query - The query to return a view for
         * @param writesCache
         * @param serverCache
         * @param serverCacheComplete
         * @returns Events to raise.
         */
        function syncPointGetView(
          syncPoint,
          query,
          writesCache,
          serverCache,
          serverCacheComplete
        ) {
          const queryId = query._queryIdentifier;
          const view = syncPoint.views.get(queryId);
          if (!view) {
            // TODO: make writesCache take flag for complete server node
            let eventCache = writeTreeRefCalcCompleteEventCache(
              writesCache,
              serverCacheComplete ? serverCache : null
            );
            let eventCacheComplete = false;
            if (eventCache) {
              eventCacheComplete = true;
            } else if (serverCache instanceof ChildrenNode) {
              eventCache = writeTreeRefCalcCompleteEventChildren(
                writesCache,
                serverCache
              );
              eventCacheComplete = false;
            } else {
              eventCache = ChildrenNode.EMPTY_NODE;
              eventCacheComplete = false;
            }
            const viewCache = newViewCache(
              new CacheNode(eventCache, eventCacheComplete, false),
              new CacheNode(serverCache, serverCacheComplete, false)
            );
            return new View(query, viewCache);
          }
          return view;
        }
        /**
         * Add an event callback for the specified query.
         *
         * @param query
         * @param eventRegistration
         * @param writesCache
         * @param serverCache - Complete server cache, if we have it.
         * @param serverCacheComplete
         * @returns Events to raise.
         */
        function syncPointAddEventRegistration(
          syncPoint,
          query,
          eventRegistration,
          writesCache,
          serverCache,
          serverCacheComplete
        ) {
          const view = syncPointGetView(
            syncPoint,
            query,
            writesCache,
            serverCache,
            serverCacheComplete
          );
          if (!syncPoint.views.has(query._queryIdentifier)) {
            syncPoint.views.set(query._queryIdentifier, view);
          }
          // This is guaranteed to exist now, we just created anything that was missing
          viewAddEventRegistration(view, eventRegistration);
          return viewGetInitialEvents(view, eventRegistration);
        }
        /**
         * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
         *
         * If query is the default query, we'll check all views for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
         *
         * @param eventRegistration - If null, remove all callbacks.
         * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
         * @returns removed queries and any cancel events
         */
        function syncPointRemoveEventRegistration(
          syncPoint,
          query,
          eventRegistration,
          cancelError
        ) {
          const queryId = query._queryIdentifier;
          const removed = [];
          let cancelEvents = [];
          const hadCompleteView = syncPointHasCompleteView(syncPoint);
          if (queryId === "default") {
            // When you do ref.off(...), we search all views for the registration to remove.
            for (const [viewQueryId, view] of syncPoint.views.entries()) {
              cancelEvents = cancelEvents.concat(
                viewRemoveEventRegistration(
                  view,
                  eventRegistration,
                  cancelError
                )
              );
              if (viewIsEmpty(view)) {
                syncPoint.views.delete(viewQueryId);
                // We'll deal with complete views later.
                if (!view.query._queryParams.loadsAllData()) {
                  removed.push(view.query);
                }
              }
            }
          } else {
            // remove the callback from the specific view.
            const view = syncPoint.views.get(queryId);
            if (view) {
              cancelEvents = cancelEvents.concat(
                viewRemoveEventRegistration(
                  view,
                  eventRegistration,
                  cancelError
                )
              );
              if (viewIsEmpty(view)) {
                syncPoint.views.delete(queryId);
                // We'll deal with complete views later.
                if (!view.query._queryParams.loadsAllData()) {
                  removed.push(view.query);
                }
              }
            }
          }
          if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
            // We removed our last complete view.
            removed.push(
              new (syncPointGetReferenceConstructor())(query._repo, query._path)
            );
          }
          return { removed, events: cancelEvents };
        }
        function syncPointGetQueryViews(syncPoint) {
          const result = [];
          for (const view of syncPoint.views.values()) {
            if (!view.query._queryParams.loadsAllData()) {
              result.push(view);
            }
          }
          return result;
        }
        /**
         * @param path - The path to the desired complete snapshot
         * @returns A complete cache, if it exists
         */
        function syncPointGetCompleteServerCache(syncPoint, path) {
          let serverCache = null;
          for (const view of syncPoint.views.values()) {
            serverCache = serverCache || viewGetCompleteServerCache(view, path);
          }
          return serverCache;
        }
        function syncPointViewForQuery(syncPoint, query) {
          const params = query._queryParams;
          if (params.loadsAllData()) {
            return syncPointGetCompleteView(syncPoint);
          } else {
            const queryId = query._queryIdentifier;
            return syncPoint.views.get(queryId);
          }
        }
        function syncPointViewExistsForQuery(syncPoint, query) {
          return syncPointViewForQuery(syncPoint, query) != null;
        }
        function syncPointHasCompleteView(syncPoint) {
          return syncPointGetCompleteView(syncPoint) != null;
        }
        function syncPointGetCompleteView(syncPoint) {
          for (const view of syncPoint.views.values()) {
            if (view.query._queryParams.loadsAllData()) {
              return view;
            }
          }
          return null;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        let referenceConstructor;
        function syncTreeSetReferenceConstructor(val) {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            !referenceConstructor,
            "__referenceConstructor has already been defined"
          );
          referenceConstructor = val;
        }
        function syncTreeGetReferenceConstructor() {
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            referenceConstructor,
            "Reference.ts has not been loaded"
          );
          return referenceConstructor;
        }
        /**
         * Static tracker for next query tag.
         */
        let syncTreeNextQueryTag_ = 1;
        /**
         * SyncTree is the central class for managing event callback registration, data caching, views
         * (query processing), and event generation.  There are typically two SyncTree instances for
         * each Repo, one for the normal Firebase data, and one for the .info data.
         *
         * It has a number of responsibilities, including:
         *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
         *  - Applying and caching data changes for user set(), transaction(), and update() calls
         *    (applyUserOverwrite(), applyUserMerge()).
         *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
         *    applyServerMerge()).
         *  - Generating user-facing events for server and user changes (all of the apply* methods
         *    return the set of events that need to be raised as a result).
         *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
         *    to the correct set of paths and queries to satisfy the current set of user event
         *    callbacks (listens are started/stopped using the provided listenProvider).
         *
         * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
         * events are returned to the caller rather than raised synchronously.
         *
         */
        class SyncTree {
          /**
           * @param listenProvider_ - Used by SyncTree to start / stop listening
           *   to server data.
           */
          constructor(listenProvider_) {
            this.listenProvider_ = listenProvider_;
            /**
             * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
             */
            this.syncPointTree_ = new ImmutableTree(null);
            /**
             * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
             */
            this.pendingWriteTree_ = newWriteTree();
            this.tagToQueryMap = new Map();
            this.queryToTagMap = new Map();
          }
        }
        /**
         * Apply the data changes for a user-generated set() or transaction() call.
         *
         * @returns Events to raise.
         */
        function syncTreeApplyUserOverwrite(
          syncTree,
          path,
          newData,
          writeId,
          visible
        ) {
          // Record pending write.
          writeTreeAddOverwrite(
            syncTree.pendingWriteTree_,
            path,
            newData,
            writeId,
            visible
          );
          if (!visible) {
            return [];
          } else {
            return syncTreeApplyOperationToSyncPoints_(
              syncTree,
              new Overwrite(newOperationSourceUser(), path, newData)
            );
          }
        }
        /**
         * Apply the data from a user-generated update() call
         *
         * @returns Events to raise.
         */
        function syncTreeApplyUserMerge(
          syncTree,
          path,
          changedChildren,
          writeId
        ) {
          // Record pending merge.
          writeTreeAddMerge(
            syncTree.pendingWriteTree_,
            path,
            changedChildren,
            writeId
          );
          const changeTree = ImmutableTree.fromObject(changedChildren);
          return syncTreeApplyOperationToSyncPoints_(
            syncTree,
            new Merge(newOperationSourceUser(), path, changeTree)
          );
        }
        /**
         * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
         *
         * @param revert - True if the given write failed and needs to be reverted
         * @returns Events to raise.
         */
        function syncTreeAckUserWrite(syncTree, writeId, revert = false) {
          const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
          const needToReevaluate = writeTreeRemoveWrite(
            syncTree.pendingWriteTree_,
            writeId
          );
          if (!needToReevaluate) {
            return [];
          } else {
            let affectedTree = new ImmutableTree(null);
            if (write.snap != null) {
              // overwrite
              affectedTree = affectedTree.set(newEmptyPath(), true);
            } else {
              each(write.children, (pathString) => {
                affectedTree = affectedTree.set(new Path(pathString), true);
              });
            }
            return syncTreeApplyOperationToSyncPoints_(
              syncTree,
              new AckUserWrite(write.path, affectedTree, revert)
            );
          }
        }
        /**
         * Apply new server data for the specified path..
         *
         * @returns Events to raise.
         */
        function syncTreeApplyServerOverwrite(syncTree, path, newData) {
          return syncTreeApplyOperationToSyncPoints_(
            syncTree,
            new Overwrite(newOperationSourceServer(), path, newData)
          );
        }
        /**
         * Apply new server data to be merged in at the specified path.
         *
         * @returns Events to raise.
         */
        function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
          const changeTree = ImmutableTree.fromObject(changedChildren);
          return syncTreeApplyOperationToSyncPoints_(
            syncTree,
            new Merge(newOperationSourceServer(), path, changeTree)
          );
        }
        /**
         * Apply a listen complete for a query
         *
         * @returns Events to raise.
         */
        function syncTreeApplyListenComplete(syncTree, path) {
          return syncTreeApplyOperationToSyncPoints_(
            syncTree,
            new ListenComplete(newOperationSourceServer(), path)
          );
        }
        /**
         * Apply a listen complete for a tagged query
         *
         * @returns Events to raise.
         */
        function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
          const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
          if (queryKey) {
            const r = syncTreeParseQueryKey_(queryKey);
            const queryPath = r.path,
              queryId = r.queryId;
            const relativePath = newRelativePath(queryPath, path);
            const op = new ListenComplete(
              newOperationSourceServerTaggedQuery(queryId),
              relativePath
            );
            return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
          } else {
            // We've already removed the query. No big deal, ignore the update
            return [];
          }
        }
        /**
         * Remove event callback(s).
         *
         * If query is the default query, we'll check all queries for the specified eventRegistration.
         * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
         *
         * @param eventRegistration - If null, all callbacks are removed.
         * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
         * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no
         *  deduping needs to take place. This flag allows toggling of that behavior
         * @returns Cancel events, if cancelError was provided.
         */
        function syncTreeRemoveEventRegistration(
          syncTree,
          query,
          eventRegistration,
          cancelError,
          skipListenerDedup = false
        ) {
          // Find the syncPoint first. Then deal with whether or not it has matching listeners
          const path = query._path;
          const maybeSyncPoint = syncTree.syncPointTree_.get(path);
          let cancelEvents = [];
          // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
          // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
          // not loadsAllData().
          if (
            maybeSyncPoint &&
            (query._queryIdentifier === "default" ||
              syncPointViewExistsForQuery(maybeSyncPoint, query))
          ) {
            const removedAndEvents = syncPointRemoveEventRegistration(
              maybeSyncPoint,
              query,
              eventRegistration,
              cancelError
            );
            if (syncPointIsEmpty(maybeSyncPoint)) {
              syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
            }
            const removed = removedAndEvents.removed;
            cancelEvents = removedAndEvents.events;
            if (!skipListenerDedup) {
              /**
               * We may have just removed one of many listeners and can short-circuit this whole process
               * We may also not have removed a default listener, in which case all of the descendant listeners should already be
               * properly set up.
               */
              // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
              // queryId === 'default'
              const removingDefault =
                -1 !==
                removed.findIndex((query) => {
                  return query._queryParams.loadsAllData();
                });
              const covered = syncTree.syncPointTree_.findOnPath(
                path,
                (relativePath, parentSyncPoint) =>
                  syncPointHasCompleteView(parentSyncPoint)
              );
              if (removingDefault && !covered) {
                const subtree = syncTree.syncPointTree_.subtree(path);
                // There are potentially child listeners. Determine what if any listens we need to send before executing the
                // removal
                if (!subtree.isEmpty()) {
                  // We need to fold over our subtree and collect the listeners to send
                  const newViews =
                    syncTreeCollectDistinctViewsForSubTree_(subtree);
                  // Ok, we've collected all the listens we need. Set them up.
                  for (let i = 0; i < newViews.length; ++i) {
                    const view = newViews[i],
                      newQuery = view.query;
                    const listener = syncTreeCreateListenerForView_(
                      syncTree,
                      view
                    );
                    syncTree.listenProvider_.startListening(
                      syncTreeQueryForListening_(newQuery),
                      syncTreeTagForQuery(syncTree, newQuery),
                      listener.hashFn,
                      listener.onComplete
                    );
                  }
                }
                // Otherwise there's nothing below us, so nothing we need to start listening on
              }
              // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
              // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
              // Also, note that if we have a cancelError, it's already been removed at the provider level.
              if (!covered && removed.length > 0 && !cancelError) {
                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                // default. Otherwise, we need to iterate through and cancel each individual query
                if (removingDefault) {
                  // We don't tag default listeners
                  const defaultTag = null;
                  syncTree.listenProvider_.stopListening(
                    syncTreeQueryForListening_(query),
                    defaultTag
                  );
                } else {
                  removed.forEach((queryToRemove) => {
                    const tagToRemove = syncTree.queryToTagMap.get(
                      syncTreeMakeQueryKey_(queryToRemove)
                    );
                    syncTree.listenProvider_.stopListening(
                      syncTreeQueryForListening_(queryToRemove),
                      tagToRemove
                    );
                  });
                }
              }
            }
            // Now, clear all of the tags we're tracking for the removed listens
            syncTreeRemoveTags_(syncTree, removed);
          }
          return cancelEvents;
        }
        /**
         * Apply new server data for the specified tagged query.
         *
         * @returns Events to raise.
         */
        function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
          const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
          if (queryKey != null) {
            const r = syncTreeParseQueryKey_(queryKey);
            const queryPath = r.path,
              queryId = r.queryId;
            const relativePath = newRelativePath(queryPath, path);
            const op = new Overwrite(
              newOperationSourceServerTaggedQuery(queryId),
              relativePath,
              snap
            );
            return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
          } else {
            // Query must have been removed already
            return [];
          }
        }
        /**
         * Apply server data to be merged in for the specified tagged query.
         *
         * @returns Events to raise.
         */
        function syncTreeApplyTaggedQueryMerge(
          syncTree,
          path,
          changedChildren,
          tag
        ) {
          const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
          if (queryKey) {
            const r = syncTreeParseQueryKey_(queryKey);
            const queryPath = r.path,
              queryId = r.queryId;
            const relativePath = newRelativePath(queryPath, path);
            const changeTree = ImmutableTree.fromObject(changedChildren);
            const op = new Merge(
              newOperationSourceServerTaggedQuery(queryId),
              relativePath,
              changeTree
            );
            return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
          } else {
            // We've already removed the query. No big deal, ignore the update
            return [];
          }
        }
        /**
         * Add an event callback for the specified query.
         *
         * @returns Events to raise.
         */
        function syncTreeAddEventRegistration(
          syncTree,
          query,
          eventRegistration,
          skipSetupListener = false
        ) {
          const path = query._path;
          let serverCache = null;
          let foundAncestorDefaultView = false;
          // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
          // Consider optimizing this once there's a better understanding of what actual behavior will be.
          syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
            const relativePath = newRelativePath(pathToSyncPoint, path);
            serverCache =
              serverCache || syncPointGetCompleteServerCache(sp, relativePath);
            foundAncestorDefaultView =
              foundAncestorDefaultView || syncPointHasCompleteView(sp);
          });
          let syncPoint = syncTree.syncPointTree_.get(path);
          if (!syncPoint) {
            syncPoint = new SyncPoint();
            syncTree.syncPointTree_ = syncTree.syncPointTree_.set(
              path,
              syncPoint
            );
          } else {
            foundAncestorDefaultView =
              foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
            serverCache =
              serverCache ||
              syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
          }
          let serverCacheComplete;
          if (serverCache != null) {
            serverCacheComplete = true;
          } else {
            serverCacheComplete = false;
            serverCache = ChildrenNode.EMPTY_NODE;
            const subtree = syncTree.syncPointTree_.subtree(path);
            subtree.foreachChild((childName, childSyncPoint) => {
              const completeCache = syncPointGetCompleteServerCache(
                childSyncPoint,
                newEmptyPath()
              );
              if (completeCache) {
                serverCache = serverCache.updateImmediateChild(
                  childName,
                  completeCache
                );
              }
            });
          }
          const viewAlreadyExists = syncPointViewExistsForQuery(
            syncPoint,
            query
          );
          if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
            // We need to track a tag for this query
            const queryKey = syncTreeMakeQueryKey_(query);
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              !syncTree.queryToTagMap.has(queryKey),
              "View does not exist, but we have a tag"
            );
            const tag = syncTreeGetNextQueryTag_();
            syncTree.queryToTagMap.set(queryKey, tag);
            syncTree.tagToQueryMap.set(tag, queryKey);
          }
          const writesCache = writeTreeChildWrites(
            syncTree.pendingWriteTree_,
            path
          );
          let events = syncPointAddEventRegistration(
            syncPoint,
            query,
            eventRegistration,
            writesCache,
            serverCache,
            serverCacheComplete
          );
          if (
            !viewAlreadyExists &&
            !foundAncestorDefaultView &&
            !skipSetupListener
          ) {
            const view = syncPointViewForQuery(syncPoint, query);
            events = events.concat(
              syncTreeSetupListener_(syncTree, query, view)
            );
          }
          return events;
        }
        /**
         * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
         * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
         * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
         *     <incremented total> as the write is applied locally and then acknowledged at the server.
         *
         * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
         *
         * @param path - The path to the data we want
         * @param writeIdsToExclude - A specific set to be excluded
         */
        function syncTreeCalcCompleteEventCache(
          syncTree,
          path,
          writeIdsToExclude
        ) {
          const includeHiddenSets = true;
          const writeTree = syncTree.pendingWriteTree_;
          const serverCache = syncTree.syncPointTree_.findOnPath(
            path,
            (pathSoFar, syncPoint) => {
              const relativePath = newRelativePath(pathSoFar, path);
              const serverCache = syncPointGetCompleteServerCache(
                syncPoint,
                relativePath
              );
              if (serverCache) {
                return serverCache;
              }
            }
          );
          return writeTreeCalcCompleteEventCache(
            writeTree,
            path,
            serverCache,
            writeIdsToExclude,
            includeHiddenSets
          );
        }
        function syncTreeGetServerValue(syncTree, query) {
          const path = query._path;
          let serverCache = null;
          // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
          // Consider optimizing this once there's a better understanding of what actual behavior will be.
          syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
            const relativePath = newRelativePath(pathToSyncPoint, path);
            serverCache =
              serverCache || syncPointGetCompleteServerCache(sp, relativePath);
          });
          let syncPoint = syncTree.syncPointTree_.get(path);
          if (!syncPoint) {
            syncPoint = new SyncPoint();
            syncTree.syncPointTree_ = syncTree.syncPointTree_.set(
              path,
              syncPoint
            );
          } else {
            serverCache =
              serverCache ||
              syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
          }
          const serverCacheComplete = serverCache != null;
          const serverCacheNode = serverCacheComplete
            ? new CacheNode(serverCache, true, false)
            : null;
          const writesCache = writeTreeChildWrites(
            syncTree.pendingWriteTree_,
            query._path
          );
          const view = syncPointGetView(
            syncPoint,
            query,
            writesCache,
            serverCacheComplete
              ? serverCacheNode.getNode()
              : ChildrenNode.EMPTY_NODE,
            serverCacheComplete
          );
          return viewGetCompleteNode(view);
        }
        /**
         * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
         *
         * NOTES:
         * - Descendant SyncPoints will be visited first (since we raise events depth-first).
         *
         * - We call applyOperation() on each SyncPoint passing three things:
         *   1. A version of the Operation that has been made relative to the SyncPoint location.
         *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
         *   3. A snapshot Node with cached server data, if we have it.
         *
         * - We concatenate all of the events returned by each SyncPoint and return the result.
         */
        function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
          return syncTreeApplyOperationHelper_(
            operation,
            syncTree.syncPointTree_,
            /*serverCache=*/ null,
            writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())
          );
        }
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        function syncTreeApplyOperationHelper_(
          operation,
          syncPointTree,
          serverCache,
          writesCache
        ) {
          if (pathIsEmpty(operation.path)) {
            return syncTreeApplyOperationDescendantsHelper_(
              operation,
              syncPointTree,
              serverCache,
              writesCache
            );
          } else {
            const syncPoint = syncPointTree.get(newEmptyPath());
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
              serverCache = syncPointGetCompleteServerCache(
                syncPoint,
                newEmptyPath()
              );
            }
            let events = [];
            const childName = pathGetFront(operation.path);
            const childOperation = operation.operationForChild(childName);
            const childTree = syncPointTree.children.get(childName);
            if (childTree && childOperation) {
              const childServerCache = serverCache
                ? serverCache.getImmediateChild(childName)
                : null;
              const childWritesCache = writeTreeRefChild(
                writesCache,
                childName
              );
              events = events.concat(
                syncTreeApplyOperationHelper_(
                  childOperation,
                  childTree,
                  childServerCache,
                  childWritesCache
                )
              );
            }
            if (syncPoint) {
              events = events.concat(
                syncPointApplyOperation(
                  syncPoint,
                  operation,
                  writesCache,
                  serverCache
                )
              );
            }
            return events;
          }
        }
        /**
         * Recursive helper for applyOperationToSyncPoints_
         */
        function syncTreeApplyOperationDescendantsHelper_(
          operation,
          syncPointTree,
          serverCache,
          writesCache
        ) {
          const syncPoint = syncPointTree.get(newEmptyPath());
          // If we don't have cached server data, see if we can get it from this SyncPoint.
          if (serverCache == null && syncPoint != null) {
            serverCache = syncPointGetCompleteServerCache(
              syncPoint,
              newEmptyPath()
            );
          }
          let events = [];
          syncPointTree.children.inorderTraversal((childName, childTree) => {
            const childServerCache = serverCache
              ? serverCache.getImmediateChild(childName)
              : null;
            const childWritesCache = writeTreeRefChild(writesCache, childName);
            const childOperation = operation.operationForChild(childName);
            if (childOperation) {
              events = events.concat(
                syncTreeApplyOperationDescendantsHelper_(
                  childOperation,
                  childTree,
                  childServerCache,
                  childWritesCache
                )
              );
            }
          });
          if (syncPoint) {
            events = events.concat(
              syncPointApplyOperation(
                syncPoint,
                operation,
                writesCache,
                serverCache
              )
            );
          }
          return events;
        }
        function syncTreeCreateListenerForView_(syncTree, view) {
          const query = view.query;
          const tag = syncTreeTagForQuery(syncTree, query);
          return {
            hashFn: () => {
              const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
              return cache.hash();
            },
            onComplete: (status) => {
              if (status === "ok") {
                if (tag) {
                  return syncTreeApplyTaggedListenComplete(
                    syncTree,
                    query._path,
                    tag
                  );
                } else {
                  return syncTreeApplyListenComplete(syncTree, query._path);
                }
              } else {
                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                const error = errorForServerCode(status, query);
                return syncTreeRemoveEventRegistration(
                  syncTree,
                  query,
                  /*eventRegistration*/ null,
                  error
                );
              }
            },
          };
        }
        /**
         * Return the tag associated with the given query.
         */
        function syncTreeTagForQuery(syncTree, query) {
          const queryKey = syncTreeMakeQueryKey_(query);
          return syncTree.queryToTagMap.get(queryKey);
        }
        /**
         * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
         */
        function syncTreeMakeQueryKey_(query) {
          return query._path.toString() + "$" + query._queryIdentifier;
        }
        /**
         * Return the query associated with the given tag, if we have one
         */
        function syncTreeQueryKeyForTag_(syncTree, tag) {
          return syncTree.tagToQueryMap.get(tag);
        }
        /**
         * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
         */
        function syncTreeParseQueryKey_(queryKey) {
          const splitIndex = queryKey.indexOf("$");
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            splitIndex !== -1 && splitIndex < queryKey.length - 1,
            "Bad queryKey."
          );
          return {
            queryId: queryKey.substr(splitIndex + 1),
            path: new Path(queryKey.substr(0, splitIndex)),
          };
        }
        /**
         * A helper method to apply tagged operations
         */
        function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
          const syncPoint = syncTree.syncPointTree_.get(queryPath);
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            syncPoint,
            "Missing sync point for query tag that we're tracking"
          );
          const writesCache = writeTreeChildWrites(
            syncTree.pendingWriteTree_,
            queryPath
          );
          return syncPointApplyOperation(
            syncPoint,
            operation,
            writesCache,
            null
          );
        }
        /**
         * This collapses multiple unfiltered views into a single view, since we only need a single
         * listener for them.
         */
        function syncTreeCollectDistinctViewsForSubTree_(subtree) {
          return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
            if (
              maybeChildSyncPoint &&
              syncPointHasCompleteView(maybeChildSyncPoint)
            ) {
              const completeView =
                syncPointGetCompleteView(maybeChildSyncPoint);
              return [completeView];
            } else {
              // No complete view here, flatten any deeper listens into an array
              let views = [];
              if (maybeChildSyncPoint) {
                views = syncPointGetQueryViews(maybeChildSyncPoint);
              }
              each(childMap, (_key, childViews) => {
                views = views.concat(childViews);
              });
              return views;
            }
          });
        }
        /**
         * Normalizes a query to a query we send the server for listening
         *
         * @returns The normalized query
         */
        function syncTreeQueryForListening_(query) {
          if (
            query._queryParams.loadsAllData() &&
            !query._queryParams.isDefault()
          ) {
            // We treat queries that load all data as default queries
            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
            // from Query
            return new (syncTreeGetReferenceConstructor())(
              query._repo,
              query._path
            );
          } else {
            return query;
          }
        }
        function syncTreeRemoveTags_(syncTree, queries) {
          for (let j = 0; j < queries.length; ++j) {
            const removedQuery = queries[j];
            if (!removedQuery._queryParams.loadsAllData()) {
              // We should have a tag for this
              const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
              const removedQueryTag =
                syncTree.queryToTagMap.get(removedQueryKey);
              syncTree.queryToTagMap.delete(removedQueryKey);
              syncTree.tagToQueryMap.delete(removedQueryTag);
            }
          }
        }
        /**
         * Static accessor for query tags.
         */
        function syncTreeGetNextQueryTag_() {
          return syncTreeNextQueryTag_++;
        }
        /**
         * For a given new listen, manage the de-duplication of outstanding subscriptions.
         *
         * @returns This method can return events to support synchronous data sources
         */
        function syncTreeSetupListener_(syncTree, query, view) {
          const path = query._path;
          const tag = syncTreeTagForQuery(syncTree, query);
          const listener = syncTreeCreateListenerForView_(syncTree, view);
          const events = syncTree.listenProvider_.startListening(
            syncTreeQueryForListening_(query),
            tag,
            listener.hashFn,
            listener.onComplete
          );
          const subtree = syncTree.syncPointTree_.subtree(path);
          // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
          // may need to shadow other listens as well.
          if (tag) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              !syncPointHasCompleteView(subtree.value),
              "If we're adding a query, it shouldn't be shadowed"
            );
          } else {
            // Shadow everything at or below this location, this is a default listener.
            const queriesToStop = subtree.fold(
              (relativePath, maybeChildSyncPoint, childMap) => {
                if (
                  !pathIsEmpty(relativePath) &&
                  maybeChildSyncPoint &&
                  syncPointHasCompleteView(maybeChildSyncPoint)
                ) {
                  return [syncPointGetCompleteView(maybeChildSyncPoint).query];
                } else {
                  // No default listener here, flatten any deeper queries into an array
                  let queries = [];
                  if (maybeChildSyncPoint) {
                    queries = queries.concat(
                      syncPointGetQueryViews(maybeChildSyncPoint).map(
                        (view) => view.query
                      )
                    );
                  }
                  each(childMap, (_key, childQueries) => {
                    queries = queries.concat(childQueries);
                  });
                  return queries;
                }
              }
            );
            for (let i = 0; i < queriesToStop.length; ++i) {
              const queryToStop = queriesToStop[i];
              syncTree.listenProvider_.stopListening(
                syncTreeQueryForListening_(queryToStop),
                syncTreeTagForQuery(syncTree, queryToStop)
              );
            }
          }
          return events;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class ExistingValueProvider {
          constructor(node_) {
            this.node_ = node_;
          }
          getImmediateChild(childName) {
            const child = this.node_.getImmediateChild(childName);
            return new ExistingValueProvider(child);
          }
          node() {
            return this.node_;
          }
        }
        class DeferredValueProvider {
          constructor(syncTree, path) {
            this.syncTree_ = syncTree;
            this.path_ = path;
          }
          getImmediateChild(childName) {
            const childPath = pathChild(this.path_, childName);
            return new DeferredValueProvider(this.syncTree_, childPath);
          }
          node() {
            return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
          }
        }
        /**
         * Generate placeholders for deferred values.
         */
        const generateWithValues = function (values) {
          values = values || {};
          values["timestamp"] = values["timestamp"] || new Date().getTime();
          return values;
        };
        /**
         * Value to use when firing local events. When writing server values, fire
         * local events with an approximate value, otherwise return value as-is.
         */
        const resolveDeferredLeafValue = function (
          value,
          existingVal,
          serverValues
        ) {
          if (!value || typeof value !== "object") {
            return value;
          }
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            ".sv" in value,
            "Unexpected leaf node or priority contents"
          );
          if (typeof value[".sv"] === "string") {
            return resolveScalarDeferredValue(
              value[".sv"],
              existingVal,
              serverValues
            );
          } else if (typeof value[".sv"] === "object") {
            return resolveComplexDeferredValue(value[".sv"], existingVal);
          } else {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              false,
              "Unexpected server value: " + JSON.stringify(value, null, 2)
            );
          }
        };
        const resolveScalarDeferredValue = function (
          op,
          existing,
          serverValues
        ) {
          switch (op) {
            case "timestamp":
              return serverValues["timestamp"];
            default:
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                false,
                "Unexpected server value: " + op
              );
          }
        };
        const resolveComplexDeferredValue = function (op, existing, unused) {
          if (!op.hasOwnProperty("increment")) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              false,
              "Unexpected server value: " + JSON.stringify(op, null, 2)
            );
          }
          const delta = op["increment"];
          if (typeof delta !== "number") {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              false,
              "Unexpected increment value: " + delta
            );
          }
          const existingNode = existing.node();
          (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
            existingNode !== null && typeof existingNode !== "undefined",
            "Expected ChildrenNode.EMPTY_NODE for nulls"
          );
          // Incrementing a non-number sets the value to the incremented amount
          if (!existingNode.isLeafNode()) {
            return delta;
          }
          const leaf = existingNode;
          const existingVal = leaf.getValue();
          if (typeof existingVal !== "number") {
            return delta;
          }
          // No need to do over/underflow arithmetic here because JS only handles floats under the covers
          return existingVal + delta;
        };
        /**
         * Recursively replace all deferred values and priorities in the tree with the
         * specified generated replacement values.
         * @param path - path to which write is relative
         * @param node - new data written at path
         * @param syncTree - current data
         */
        const resolveDeferredValueTree = function (
          path,
          node,
          syncTree,
          serverValues
        ) {
          return resolveDeferredValue(
            node,
            new DeferredValueProvider(syncTree, path),
            serverValues
          );
        };
        /**
         * Recursively replace all deferred values and priorities in the node with the
         * specified generated replacement values.  If there are no server values in the node,
         * it'll be returned as-is.
         */
        const resolveDeferredValueSnapshot = function (
          node,
          existing,
          serverValues
        ) {
          return resolveDeferredValue(
            node,
            new ExistingValueProvider(existing),
            serverValues
          );
        };
        function resolveDeferredValue(node, existingVal, serverValues) {
          const rawPri = node.getPriority().val();
          const priority = resolveDeferredLeafValue(
            rawPri,
            existingVal.getImmediateChild(".priority"),
            serverValues
          );
          let newNode;
          if (node.isLeafNode()) {
            const leafNode = node;
            const value = resolveDeferredLeafValue(
              leafNode.getValue(),
              existingVal,
              serverValues
            );
            if (
              value !== leafNode.getValue() ||
              priority !== leafNode.getPriority().val()
            ) {
              return new LeafNode(value, nodeFromJSON(priority));
            } else {
              return node;
            }
          } else {
            const childrenNode = node;
            newNode = childrenNode;
            if (priority !== childrenNode.getPriority().val()) {
              newNode = newNode.updatePriority(new LeafNode(priority));
            }
            childrenNode.forEachChild(
              PRIORITY_INDEX,
              (childName, childNode) => {
                const newChildNode = resolveDeferredValue(
                  childNode,
                  existingVal.getImmediateChild(childName),
                  serverValues
                );
                if (newChildNode !== childNode) {
                  newNode = newNode.updateImmediateChild(
                    childName,
                    newChildNode
                  );
                }
              }
            );
            return newNode;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A light-weight tree, traversable by path.  Nodes can have both values and children.
         * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
         * children.
         */
        class Tree {
          /**
           * @param name - Optional name of the node.
           * @param parent - Optional parent node.
           * @param node - Optional node to wrap.
           */
          constructor(
            name = "",
            parent = null,
            node = { children: {}, childCount: 0 }
          ) {
            this.name = name;
            this.parent = parent;
            this.node = node;
          }
        }
        /**
         * Returns a sub-Tree for the given path.
         *
         * @param pathObj - Path to look up.
         * @returns Tree for path.
         */
        function treeSubTree(tree, pathObj) {
          // TODO: Require pathObj to be Path?
          let path = pathObj instanceof Path ? pathObj : new Path(pathObj);
          let child = tree,
            next = pathGetFront(path);
          while (next !== null) {
            const childNode = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                child.node.children,
                next
              ) || {
              children: {},
              childCount: 0,
            };
            child = new Tree(next, child, childNode);
            path = pathPopFront(path);
            next = pathGetFront(path);
          }
          return child;
        }
        /**
         * Returns the data associated with this tree node.
         *
         * @returns The data or null if no data exists.
         */
        function treeGetValue(tree) {
          return tree.node.value;
        }
        /**
         * Sets data to this tree node.
         *
         * @param value - Value to set.
         */
        function treeSetValue(tree, value) {
          tree.node.value = value;
          treeUpdateParents(tree);
        }
        /**
         * @returns Whether the tree has any children.
         */
        function treeHasChildren(tree) {
          return tree.node.childCount > 0;
        }
        /**
         * @returns Whethe rthe tree is empty (no value or children).
         */
        function treeIsEmpty(tree) {
          return treeGetValue(tree) === undefined && !treeHasChildren(tree);
        }
        /**
         * Calls action for each child of this tree node.
         *
         * @param action - Action to be called for each child.
         */
        function treeForEachChild(tree, action) {
          each(tree.node.children, (child, childTree) => {
            action(new Tree(child, tree, childTree));
          });
        }
        /**
         * Does a depth-first traversal of this node's descendants, calling action for each one.
         *
         * @param action - Action to be called for each child.
         * @param includeSelf - Whether to call action on this node as well. Defaults to
         *   false.
         * @param childrenFirst - Whether to call action on children before calling it on
         *   parent.
         */
        function treeForEachDescendant(
          tree,
          action,
          includeSelf,
          childrenFirst
        ) {
          if (includeSelf && !childrenFirst) {
            action(tree);
          }
          treeForEachChild(tree, (child) => {
            treeForEachDescendant(child, action, true, childrenFirst);
          });
          if (includeSelf && childrenFirst) {
            action(tree);
          }
        }
        /**
         * Calls action on each ancestor node.
         *
         * @param action - Action to be called on each parent; return
         *   true to abort.
         * @param includeSelf - Whether to call action on this node as well.
         * @returns true if the action callback returned true.
         */
        function treeForEachAncestor(tree, action, includeSelf) {
          let node = includeSelf ? tree : tree.parent;
          while (node !== null) {
            if (action(node)) {
              return true;
            }
            node = node.parent;
          }
          return false;
        }
        /**
         * @returns The path of this tree node, as a Path.
         */
        function treeGetPath(tree) {
          return new Path(
            tree.parent === null
              ? tree.name
              : treeGetPath(tree.parent) + "/" + tree.name
          );
        }
        /**
         * Adds or removes this child from its parent based on whether it's empty or not.
         */
        function treeUpdateParents(tree) {
          if (tree.parent !== null) {
            treeUpdateChild(tree.parent, tree.name, tree);
          }
        }
        /**
         * Adds or removes the passed child to this tree node, depending on whether it's empty.
         *
         * @param childName - The name of the child to update.
         * @param child - The child to update.
         */
        function treeUpdateChild(tree, childName, child) {
          const childEmpty = treeIsEmpty(child);
          const childExists = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
              tree.node.children,
              childName
            );
          if (childEmpty && childExists) {
            delete tree.node.children[childName];
            tree.node.childCount--;
            treeUpdateParents(tree);
          } else if (!childEmpty && !childExists) {
            tree.node.children[childName] = child.node;
            tree.node.childCount++;
            treeUpdateParents(tree);
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * True for invalid Firebase keys
         */
        const INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
        /**
         * True for invalid Firebase paths.
         * Allows '/' in paths.
         */
        const INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
        /**
         * Maximum number of characters to allow in leaf value
         */
        const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
        const isValidKey = function (key) {
          return (
            typeof key === "string" &&
            key.length !== 0 &&
            !INVALID_KEY_REGEX_.test(key)
          );
        };
        const isValidPathString = function (pathString) {
          return (
            typeof pathString === "string" &&
            pathString.length !== 0 &&
            !INVALID_PATH_REGEX_.test(pathString)
          );
        };
        const isValidRootPathString = function (pathString) {
          if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
          }
          return isValidPathString(pathString);
        };
        const isValidPriority = function (priority) {
          return (
            priority === null ||
            typeof priority === "string" ||
            (typeof priority === "number" && !isInvalidJSONNumber(priority)) ||
            (priority &&
              typeof priority === "object" &&
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                priority,
                ".sv"
              ))
          );
        };
        /**
         * Pre-validate a datum passed as an argument to Firebase function.
         */
        const validateFirebaseDataArg = function (
          fnName,
          value,
          path,
          optional
        ) {
          if (optional && value === undefined) {
            return;
          }
          validateFirebaseData(
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
              fnName,
              "value"
            ),
            value,
            path
          );
        };
        /**
         * Validate a data object client-side before sending to server.
         */
        const validateFirebaseData = function (errorPrefix, data, path_) {
          const path =
            path_ instanceof Path
              ? new ValidationPath(path_, errorPrefix)
              : path_;
          if (data === undefined) {
            throw new Error(
              errorPrefix +
              "contains undefined " +
              validationPathToErrorString(path)
            );
          }
          if (typeof data === "function") {
            throw new Error(
              errorPrefix +
              "contains a function " +
              validationPathToErrorString(path) +
              " with contents = " +
              data.toString()
            );
          }
          if (isInvalidJSONNumber(data)) {
            throw new Error(
              errorPrefix +
              "contains " +
              data.toString() +
              " " +
              validationPathToErrorString(path)
            );
          }
          // Check max leaf size, but try to avoid the utf8 conversion if we can.
          if (
            typeof data === "string" &&
            data.length > MAX_LEAF_SIZE_ / 3 &&
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(
              data
            ) > MAX_LEAF_SIZE_
          ) {
            throw new Error(
              errorPrefix +
              "contains a string greater than " +
              MAX_LEAF_SIZE_ +
              " utf8 bytes " +
              validationPathToErrorString(path) +
              " ('" +
              data.substring(0, 50) +
              "...')"
            );
          }
          // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
          // to save extra walking of large objects.
          if (data && typeof data === "object") {
            let hasDotValue = false;
            let hasActualChild = false;
            each(data, (key, value) => {
              if (key === ".value") {
                hasDotValue = true;
              } else if (key !== ".priority" && key !== ".sv") {
                hasActualChild = true;
                if (!isValidKey(key)) {
                  throw new Error(
                    errorPrefix +
                    " contains an invalid key (" +
                    key +
                    ") " +
                    validationPathToErrorString(path) +
                    ".  Keys must be non-empty strings " +
                    'and can\'t contain ".", "#", "$", "/", "[", or "]"'
                  );
                }
              }
              validationPathPush(path, key);
              validateFirebaseData(errorPrefix, value, path);
              validationPathPop(path);
            });
            if (hasDotValue && hasActualChild) {
              throw new Error(
                errorPrefix +
                ' contains ".value" child ' +
                validationPathToErrorString(path) +
                " in addition to actual children."
              );
            }
          }
        };
        /**
         * Pre-validate paths passed in the firebase function.
         */
        const validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
          let i, curPath;
          for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            const keys = pathSlice(curPath);
            for (let j = 0; j < keys.length; j++) {
              if (keys[j] === ".priority" && j === keys.length - 1);
              else if (!isValidKey(keys[j])) {
                throw new Error(
                  errorPrefix +
                  "contains an invalid key (" +
                  keys[j] +
                  ") in path " +
                  curPath.toString() +
                  ". Keys must be non-empty strings " +
                  'and can\'t contain ".", "#", "$", "/", "[", or "]"'
                );
              }
            }
          }
          // Check that update keys are not descendants of each other.
          // We rely on the property that sorting guarantees that ancestors come
          // right before descendants.
          mergePaths.sort(pathCompare);
          let prevPath = null;
          for (i = 0; i < mergePaths.length; i++) {
            curPath = mergePaths[i];
            if (prevPath !== null && pathContains(prevPath, curPath)) {
              throw new Error(
                errorPrefix +
                "contains a path " +
                prevPath.toString() +
                " that is ancestor of another path " +
                curPath.toString()
              );
            }
            prevPath = curPath;
          }
        };
        /**
         * pre-validate an object passed as an argument to firebase function (
         * must be an object - e.g. for firebase.update()).
         */
        const validateFirebaseMergeDataArg = function (
          fnName,
          data,
          path,
          optional
        ) {
          if (optional && data === undefined) {
            return;
          }
          const errorPrefix$1 = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
              fnName,
              "values"
            );
          if (!(data && typeof data === "object") || Array.isArray(data)) {
            throw new Error(
              errorPrefix$1 +
              " must be an object containing the children to replace."
            );
          }
          const mergePaths = [];
          each(data, (key, value) => {
            const curPath = new Path(key);
            validateFirebaseData(
              errorPrefix$1,
              value,
              pathChild(path, curPath)
            );
            if (pathGetBack(curPath) === ".priority") {
              if (!isValidPriority(value)) {
                throw new Error(
                  errorPrefix$1 +
                  "contains an invalid value for '" +
                  curPath.toString() +
                  "', which must be a valid " +
                  "Firebase priority (a string, finite number, server value, or null)."
                );
              }
            }
            mergePaths.push(curPath);
          });
          validateFirebaseMergePaths(errorPrefix$1, mergePaths);
        };
        const validatePriority = function (fnName, priority, optional) {
          if (optional && priority === undefined) {
            return;
          }
          if (isInvalidJSONNumber(priority)) {
            throw new Error(
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
                fnName,
                "priority"
              ) +
              "is " +
              priority.toString() +
              ", but must be a valid Firebase priority (a string, finite number, " +
              "server value, or null)."
            );
          }
          // Special case to allow importing data with a .sv.
          if (!isValidPriority(priority)) {
            throw new Error(
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
                fnName,
                "priority"
              ) +
              "must be a valid Firebase priority " +
              "(a string, finite number, server value, or null)."
            );
          }
        };
        const validateKey = function (fnName, argumentName, key, optional) {
          if (optional && key === undefined) {
            return;
          }
          if (!isValidKey(key)) {
            throw new Error(
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
                fnName,
                argumentName
              ) +
              'was an invalid key = "' +
              key +
              '".  Firebase keys must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "/", "[", or "]").'
            );
          }
        };
        /**
         * @internal
         */
        const validatePathString = function (
          fnName,
          argumentName,
          pathString,
          optional
        ) {
          if (optional && pathString === undefined) {
            return;
          }
          if (!isValidPathString(pathString)) {
            throw new Error(
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
                fnName,
                argumentName
              ) +
              'was an invalid path = "' +
              pathString +
              '". Paths must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "[", or "]"'
            );
          }
        };
        const validateRootPathString = function (
          fnName,
          argumentName,
          pathString,
          optional
        ) {
          if (pathString) {
            // Allow '/.info/' at the beginning.
            pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
          }
          validatePathString(fnName, argumentName, pathString, optional);
        };
        /**
         * @internal
         */
        const validateWritablePath = function (fnName, path) {
          if (pathGetFront(path) === ".info") {
            throw new Error(
              fnName + " failed = Can't modify data under /.info/"
            );
          }
        };
        const validateUrl = function (fnName, parsedUrl) {
          // TODO = Validate server better.
          const pathString = parsedUrl.path.toString();
          if (
            !(typeof parsedUrl.repoInfo.host === "string") ||
            parsedUrl.repoInfo.host.length === 0 ||
            (!isValidKey(parsedUrl.repoInfo.namespace) &&
              parsedUrl.repoInfo.host.split(":")[0] !== "localhost") ||
            (pathString.length !== 0 && !isValidRootPathString(pathString))
          ) {
            throw new Error(
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(
                fnName,
                "url"
              ) +
              "must be a valid firebase URL and " +
              'the path can\'t contain ".", "#", "$", "[", or "]".'
            );
          }
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The event queue serves a few purposes:
         * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
         *    events being queued.
         * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
         *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
         *    left off, ensuring that the events are still raised synchronously and in order.
         * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
         *    events are raised synchronously.
         *
         * NOTE: This can all go away if/when we move to async events.
         *
         */
        class EventQueue {
          constructor() {
            this.eventLists_ = [];
            /**
             * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
             */
            this.recursionDepth_ = 0;
          }
        }
        /**
         * @param eventDataList - The new events to queue.
         */
        function eventQueueQueueEvents(eventQueue, eventDataList) {
          // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
          let currList = null;
          for (let i = 0; i < eventDataList.length; i++) {
            const data = eventDataList[i];
            const path = data.getPath();
            if (currList !== null && !pathEquals(path, currList.path)) {
              eventQueue.eventLists_.push(currList);
              currList = null;
            }
            if (currList === null) {
              currList = { events: [], path };
            }
            currList.events.push(data);
          }
          if (currList) {
            eventQueue.eventLists_.push(currList);
          }
        }
        /**
         * Queues the specified events and synchronously raises all events (including previously queued ones)
         * for the specified path.
         *
         * It is assumed that the new events are all for the specified path.
         *
         * @param path - The path to raise events for.
         * @param eventDataList - The new events to raise.
         */
        function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
          eventQueueQueueEvents(eventQueue, eventDataList);
          eventQueueRaiseQueuedEventsMatchingPredicate(
            eventQueue,
            (eventPath) => pathEquals(eventPath, path)
          );
        }
        /**
         * Queues the specified events and synchronously raises all events (including previously queued ones) for
         * locations related to the specified change path (i.e. all ancestors and descendants).
         *
         * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
         *
         * @param changedPath - The path to raise events for.
         * @param eventDataList - The events to raise
         */
        function eventQueueRaiseEventsForChangedPath(
          eventQueue,
          changedPath,
          eventDataList
        ) {
          eventQueueQueueEvents(eventQueue, eventDataList);
          eventQueueRaiseQueuedEventsMatchingPredicate(
            eventQueue,
            (eventPath) =>
              pathContains(eventPath, changedPath) ||
              pathContains(changedPath, eventPath)
          );
        }
        function eventQueueRaiseQueuedEventsMatchingPredicate(
          eventQueue,
          predicate
        ) {
          eventQueue.recursionDepth_++;
          let sentAll = true;
          for (let i = 0; i < eventQueue.eventLists_.length; i++) {
            const eventList = eventQueue.eventLists_[i];
            if (eventList) {
              const eventPath = eventList.path;
              if (predicate(eventPath)) {
                eventListRaise(eventQueue.eventLists_[i]);
                eventQueue.eventLists_[i] = null;
              } else {
                sentAll = false;
              }
            }
          }
          if (sentAll) {
            eventQueue.eventLists_ = [];
          }
          eventQueue.recursionDepth_--;
        }
        /**
         * Iterates through the list and raises each event
         */
        function eventListRaise(eventList) {
          for (let i = 0; i < eventList.events.length; i++) {
            const eventData = eventList.events[i];
            if (eventData !== null) {
              eventList.events[i] = null;
              const eventFn = eventData.getEventRunner();
              if (logger) {
                log("event: " + eventData.toString());
              }
              exceptionGuard(eventFn);
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const INTERRUPT_REASON = "repo_interrupt";
        /**
         * If a transaction does not succeed after 25 retries, we abort it. Among other
         * things this ensure that if there's ever a bug causing a mismatch between
         * client / server hashes for some data, we won't retry indefinitely.
         */
        const MAX_TRANSACTION_RETRIES = 25;
        /**
         * A connection to a single data repository.
         */
        class Repo {
          constructor(
            repoInfo_,
            forceRestClient_,
            authTokenProvider_,
            appCheckProvider_
          ) {
            this.repoInfo_ = repoInfo_;
            this.forceRestClient_ = forceRestClient_;
            this.authTokenProvider_ = authTokenProvider_;
            this.appCheckProvider_ = appCheckProvider_;
            this.dataUpdateCount = 0;
            this.statsListener_ = null;
            this.eventQueue_ = new EventQueue();
            this.nextWriteId_ = 1;
            this.interceptServerDataCallback_ = null;
            /** A list of data pieces and paths to be set when this client disconnects. */
            this.onDisconnect_ = newSparseSnapshotTree();
            /** Stores queues of outstanding transactions for Firebase locations. */
            this.transactionQueueTree_ = new Tree();
            // TODO: This should be @private but it's used by test_access.js and internal.js
            this.persistentConnection_ = null;
            // This key is intentionally not updated if RepoInfo is later changed or replaced
            this.key = this.repoInfo_.toURLString();
          }
          /**
           * @returns The URL corresponding to the root of this Firebase.
           */
          toString() {
            return (
              (this.repoInfo_.secure ? "https://" : "http://") +
              this.repoInfo_.host
            );
          }
        }
        function repoStart(repo, appId, authOverride) {
          repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
          if (repo.forceRestClient_ || beingCrawled()) {
            repo.server_ = new ReadonlyRestClient(
              repo.repoInfo_,
              (pathString, data, isMerge, tag) => {
                repoOnDataUpdate(repo, pathString, data, isMerge, tag);
              },
              repo.authTokenProvider_,
              repo.appCheckProvider_
            );
            // Minor hack: Fire onConnect immediately, since there's no actual connection.
            setTimeout(
              () => repoOnConnectStatus(repo, /* connectStatus= */ true),
              0
            );
          } else {
            // Validate authOverride
            if (typeof authOverride !== "undefined" && authOverride !== null) {
              if (typeof authOverride !== "object") {
                throw new Error(
                  "Only objects are supported for option databaseAuthVariableOverride"
                );
              }
              try {
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  authOverride
                );
              } catch (e) {
                throw new Error("Invalid authOverride provided: " + e);
              }
            }
            repo.persistentConnection_ = new PersistentConnection(
              repo.repoInfo_,
              appId,
              (pathString, data, isMerge, tag) => {
                repoOnDataUpdate(repo, pathString, data, isMerge, tag);
              },
              (connectStatus) => {
                repoOnConnectStatus(repo, connectStatus);
              },
              (updates) => {
                repoOnServerInfoUpdate(repo, updates);
              },
              repo.authTokenProvider_,
              repo.appCheckProvider_,
              authOverride
            );
            repo.server_ = repo.persistentConnection_;
          }
          repo.authTokenProvider_.addTokenChangeListener((token) => {
            repo.server_.refreshAuthToken(token);
          });
          repo.appCheckProvider_.addTokenChangeListener((result) => {
            repo.server_.refreshAppCheckToken(result.token);
          });
          // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
          // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
          repo.statsReporter_ = statsManagerGetOrCreateReporter(
            repo.repoInfo_,
            () => new StatsReporter(repo.stats_, repo.server_)
          );
          // Used for .info.
          repo.infoData_ = new SnapshotHolder();
          repo.infoSyncTree_ = new SyncTree({
            startListening: (query, tag, currentHashFn, onComplete) => {
              let infoEvents = [];
              const node = repo.infoData_.getNode(query._path);
              // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
              // on initial data...
              if (!node.isEmpty()) {
                infoEvents = syncTreeApplyServerOverwrite(
                  repo.infoSyncTree_,
                  query._path,
                  node
                );
                setTimeout(() => {
                  onComplete("ok");
                }, 0);
              }
              return infoEvents;
            },
            stopListening: () => { },
          });
          repoUpdateInfo(repo, "connected", false);
          repo.serverSyncTree_ = new SyncTree({
            startListening: (query, tag, currentHashFn, onComplete) => {
              repo.server_.listen(query, currentHashFn, tag, (status, data) => {
                const events = onComplete(status, data);
                eventQueueRaiseEventsForChangedPath(
                  repo.eventQueue_,
                  query._path,
                  events
                );
              });
              // No synchronous events for network-backed sync trees
              return [];
            },
            stopListening: (query, tag) => {
              repo.server_.unlisten(query, tag);
            },
          });
        }
        /**
         * @returns The time in milliseconds, taking the server offset into account if we have one.
         */
        function repoServerTime(repo) {
          const offsetNode = repo.infoData_.getNode(
            new Path(".info/serverTimeOffset")
          );
          const offset = offsetNode.val() || 0;
          return new Date().getTime() + offset;
        }
        /**
         * Generate ServerValues using some variables from the repo object.
         */
        function repoGenerateServerValues(repo) {
          return generateWithValues({
            timestamp: repoServerTime(repo),
          });
        }
        /**
         * Called by realtime when we get new messages from the server.
         */
        function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
          // For testing.
          repo.dataUpdateCount++;
          const path = new Path(pathString);
          data = repo.interceptServerDataCallback_
            ? repo.interceptServerDataCallback_(pathString, data)
            : data;
          let events = [];
          if (tag) {
            if (isMerge) {
              const taggedChildren = (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(data, (raw) =>
                  nodeFromJSON(raw)
                );
              events = syncTreeApplyTaggedQueryMerge(
                repo.serverSyncTree_,
                path,
                taggedChildren,
                tag
              );
            } else {
              const taggedSnap = nodeFromJSON(data);
              events = syncTreeApplyTaggedQueryOverwrite(
                repo.serverSyncTree_,
                path,
                taggedSnap,
                tag
              );
            }
          } else if (isMerge) {
            const changedChildren = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(data, (raw) =>
                nodeFromJSON(raw)
              );
            events = syncTreeApplyServerMerge(
              repo.serverSyncTree_,
              path,
              changedChildren
            );
          } else {
            const snap = nodeFromJSON(data);
            events = syncTreeApplyServerOverwrite(
              repo.serverSyncTree_,
              path,
              snap
            );
          }
          let affectedPath = path;
          if (events.length > 0) {
            // Since we have a listener outstanding for each transaction, receiving any events
            // is a proxy for some change having occurred.
            affectedPath = repoRerunTransactions(repo, path);
          }
          eventQueueRaiseEventsForChangedPath(
            repo.eventQueue_,
            affectedPath,
            events
          );
        }
        function repoOnConnectStatus(repo, connectStatus) {
          repoUpdateInfo(repo, "connected", connectStatus);
          if (connectStatus === false) {
            repoRunOnDisconnectEvents(repo);
          }
        }
        function repoOnServerInfoUpdate(repo, updates) {
          each(updates, (key, value) => {
            repoUpdateInfo(repo, key, value);
          });
        }
        function repoUpdateInfo(repo, pathString, value) {
          const path = new Path("/.info/" + pathString);
          const newNode = nodeFromJSON(value);
          repo.infoData_.updateSnapshot(path, newNode);
          const events = syncTreeApplyServerOverwrite(
            repo.infoSyncTree_,
            path,
            newNode
          );
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        }
        function repoGetNextWriteId(repo) {
          return repo.nextWriteId_++;
        }
        /**
         * The purpose of `getValue` is to return the latest known value
         * satisfying `query`.
         *
         * This method will first check for in-memory cached values
         * belonging to active listeners. If they are found, such values
         * are considered to be the most up-to-date.
         *
         * If the client is not connected, this method will wait until the
         *  repo has established a connection and then request the value for `query`.
         * If the client is not able to retrieve the query result for another reason,
         * it reports an error.
         *
         * @param query - The query to surface a value for.
         */
        function repoGetValue(repo, query, eventRegistration) {
          // Only active queries are cached. There is no persisted cache.
          const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);
          if (cached != null) {
            return Promise.resolve(cached);
          }
          return repo.server_.get(query).then(
            (payload) => {
              const node = nodeFromJSON(payload).withIndex(
                query._queryParams.getIndex()
              );
              /**
               * Below we simulate the actions of an `onlyOnce` `onValue()` event where:
               * Add an event registration,
               * Update data at the path,
               * Raise any events,
               * Cleanup the SyncTree
               */
              syncTreeAddEventRegistration(
                repo.serverSyncTree_,
                query,
                eventRegistration,
                true
              );
              let events;
              if (query._queryParams.loadsAllData()) {
                events = syncTreeApplyServerOverwrite(
                  repo.serverSyncTree_,
                  query._path,
                  node
                );
              } else {
                const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);
                events = syncTreeApplyTaggedQueryOverwrite(
                  repo.serverSyncTree_,
                  query._path,
                  node,
                  tag
                );
              }
              /*
               * We need to raise events in the scenario where `get()` is called at a parent path, and
               * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting
               * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree
               * and its corresponding serverCache, including the child location where `onValue` is called. Then,
               * `onValue` will receive the event from the server, but look at the syncTree and see that the data received
               * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.
               * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and
               * ensure the corresponding child events will get fired.
               */
              eventQueueRaiseEventsForChangedPath(
                repo.eventQueue_,
                query._path,
                events
              );
              syncTreeRemoveEventRegistration(
                repo.serverSyncTree_,
                query,
                eventRegistration,
                null,
                true
              );
              return node;
            },
            (err) => {
              repoLog(
                repo,
                "get for query " +
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                  query
                ) +
                " failed: " +
                err
              );
              return Promise.reject(new Error(err));
            }
          );
        }
        function repoSetWithPriority(
          repo,
          path,
          newVal,
          newPriority,
          onComplete
        ) {
          repoLog(repo, "set", {
            path: path.toString(),
            value: newVal,
            priority: newPriority,
          });
          // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
          // (b) store unresolved paths on JSON parse
          const serverValues = repoGenerateServerValues(repo);
          const newNodeUnresolved = nodeFromJSON(newVal, newPriority);
          const existing = syncTreeCalcCompleteEventCache(
            repo.serverSyncTree_,
            path
          );
          const newNode = resolveDeferredValueSnapshot(
            newNodeUnresolved,
            existing,
            serverValues
          );
          const writeId = repoGetNextWriteId(repo);
          const events = syncTreeApplyUserOverwrite(
            repo.serverSyncTree_,
            path,
            newNode,
            writeId,
            true
          );
          eventQueueQueueEvents(repo.eventQueue_, events);
          repo.server_.put(
            path.toString(),
            newNodeUnresolved.val(/*export=*/ true),
            (status, errorReason) => {
              const success = status === "ok";
              if (!success) {
                warn("set at " + path + " failed: " + status);
              }
              const clearEvents = syncTreeAckUserWrite(
                repo.serverSyncTree_,
                writeId,
                !success
              );
              eventQueueRaiseEventsForChangedPath(
                repo.eventQueue_,
                path,
                clearEvents
              );
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
            }
          );
          const affectedPath = repoAbortTransactions(repo, path);
          repoRerunTransactions(repo, affectedPath);
          // We queued the events above, so just flush the queue here
          eventQueueRaiseEventsForChangedPath(
            repo.eventQueue_,
            affectedPath,
            []
          );
        }
        function repoUpdate(repo, path, childrenToMerge, onComplete) {
          repoLog(repo, "update", {
            path: path.toString(),
            value: childrenToMerge,
          });
          // Start with our existing data and merge each child into it.
          let empty = true;
          const serverValues = repoGenerateServerValues(repo);
          const changedChildren = {};
          each(childrenToMerge, (changedKey, changedValue) => {
            empty = false;
            changedChildren[changedKey] = resolveDeferredValueTree(
              pathChild(path, changedKey),
              nodeFromJSON(changedValue),
              repo.serverSyncTree_,
              serverValues
            );
          });
          if (!empty) {
            const writeId = repoGetNextWriteId(repo);
            const events = syncTreeApplyUserMerge(
              repo.serverSyncTree_,
              path,
              changedChildren,
              writeId
            );
            eventQueueQueueEvents(repo.eventQueue_, events);
            repo.server_.merge(
              path.toString(),
              childrenToMerge,
              (status, errorReason) => {
                const success = status === "ok";
                if (!success) {
                  warn("update at " + path + " failed: " + status);
                }
                const clearEvents = syncTreeAckUserWrite(
                  repo.serverSyncTree_,
                  writeId,
                  !success
                );
                const affectedPath =
                  clearEvents.length > 0
                    ? repoRerunTransactions(repo, path)
                    : path;
                eventQueueRaiseEventsForChangedPath(
                  repo.eventQueue_,
                  affectedPath,
                  clearEvents
                );
                repoCallOnCompleteCallback(
                  repo,
                  onComplete,
                  status,
                  errorReason
                );
              }
            );
            each(childrenToMerge, (changedPath) => {
              const affectedPath = repoAbortTransactions(
                repo,
                pathChild(path, changedPath)
              );
              repoRerunTransactions(repo, affectedPath);
            });
            // We queued the events above, so just flush the queue here
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
          } else {
            log("update() called with empty data.  Don't do anything.");
            repoCallOnCompleteCallback(repo, onComplete, "ok", undefined);
          }
        }
        /**
         * Applies all of the changes stored up in the onDisconnect_ tree.
         */
        function repoRunOnDisconnectEvents(repo) {
          repoLog(repo, "onDisconnectEvents");
          const serverValues = repoGenerateServerValues(repo);
          const resolvedOnDisconnectTree = newSparseSnapshotTree();
          sparseSnapshotTreeForEachTree(
            repo.onDisconnect_,
            newEmptyPath(),
            (path, node) => {
              const resolved = resolveDeferredValueTree(
                path,
                node,
                repo.serverSyncTree_,
                serverValues
              );
              sparseSnapshotTreeRemember(
                resolvedOnDisconnectTree,
                path,
                resolved
              );
            }
          );
          let events = [];
          sparseSnapshotTreeForEachTree(
            resolvedOnDisconnectTree,
            newEmptyPath(),
            (path, snap) => {
              events = events.concat(
                syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)
              );
              const affectedPath = repoAbortTransactions(repo, path);
              repoRerunTransactions(repo, affectedPath);
            }
          );
          repo.onDisconnect_ = newSparseSnapshotTree();
          eventQueueRaiseEventsForChangedPath(
            repo.eventQueue_,
            newEmptyPath(),
            events
          );
        }
        function repoOnDisconnectCancel(repo, path, onComplete) {
          repo.server_.onDisconnectCancel(
            path.toString(),
            (status, errorReason) => {
              if (status === "ok") {
                sparseSnapshotTreeForget(repo.onDisconnect_, path);
              }
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
            }
          );
        }
        function repoOnDisconnectSet(repo, path, value, onComplete) {
          const newNode = nodeFromJSON(value);
          repo.server_.onDisconnectPut(
            path.toString(),
            newNode.val(/*export=*/ true),
            (status, errorReason) => {
              if (status === "ok") {
                sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
              }
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
            }
          );
        }
        function repoOnDisconnectSetWithPriority(
          repo,
          path,
          value,
          priority,
          onComplete
        ) {
          const newNode = nodeFromJSON(value, priority);
          repo.server_.onDisconnectPut(
            path.toString(),
            newNode.val(/*export=*/ true),
            (status, errorReason) => {
              if (status === "ok") {
                sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
              }
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
            }
          );
        }
        function repoOnDisconnectUpdate(
          repo,
          path,
          childrenToMerge,
          onComplete
        ) {
          if (
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(
              childrenToMerge
            )
          ) {
            log(
              "onDisconnect().update() called with empty data.  Don't do anything."
            );
            repoCallOnCompleteCallback(repo, onComplete, "ok", undefined);
            return;
          }
          repo.server_.onDisconnectMerge(
            path.toString(),
            childrenToMerge,
            (status, errorReason) => {
              if (status === "ok") {
                each(childrenToMerge, (childName, childNode) => {
                  const newChildNode = nodeFromJSON(childNode);
                  sparseSnapshotTreeRemember(
                    repo.onDisconnect_,
                    pathChild(path, childName),
                    newChildNode
                  );
                });
              }
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
            }
          );
        }
        function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
          let events;
          if (pathGetFront(query._path) === ".info") {
            events = syncTreeAddEventRegistration(
              repo.infoSyncTree_,
              query,
              eventRegistration
            );
          } else {
            events = syncTreeAddEventRegistration(
              repo.serverSyncTree_,
              query,
              eventRegistration
            );
          }
          eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
        }
        function repoRemoveEventCallbackForQuery(
          repo,
          query,
          eventRegistration
        ) {
          // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
          // a little bit by handling the return values anyways.
          let events;
          if (pathGetFront(query._path) === ".info") {
            events = syncTreeRemoveEventRegistration(
              repo.infoSyncTree_,
              query,
              eventRegistration
            );
          } else {
            events = syncTreeRemoveEventRegistration(
              repo.serverSyncTree_,
              query,
              eventRegistration
            );
          }
          eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
        }
        function repoInterrupt(repo) {
          if (repo.persistentConnection_) {
            repo.persistentConnection_.interrupt(INTERRUPT_REASON);
          }
        }
        function repoResume(repo) {
          if (repo.persistentConnection_) {
            repo.persistentConnection_.resume(INTERRUPT_REASON);
          }
        }
        function repoLog(repo, ...varArgs) {
          let prefix = "";
          if (repo.persistentConnection_) {
            prefix = repo.persistentConnection_.id + ":";
          }
          log(prefix, ...varArgs);
        }
        function repoCallOnCompleteCallback(
          repo,
          callback,
          status,
          errorReason
        ) {
          if (callback) {
            exceptionGuard(() => {
              if (status === "ok") {
                callback(null);
              } else {
                const code = (status || "error").toUpperCase();
                let message = code;
                if (errorReason) {
                  message += ": " + errorReason;
                }
                const error = new Error(message);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                error.code = code;
                callback(error);
              }
            });
          }
        }
        /**
         * Creates a new transaction, adds it to the transactions we're tracking, and
         * sends it to the server if possible.
         *
         * @param path - Path at which to do transaction.
         * @param transactionUpdate - Update callback.
         * @param onComplete - Completion callback.
         * @param unwatcher - Function that will be called when the transaction no longer
         * need data updates for `path`.
         * @param applyLocally - Whether or not to make intermediate results visible
         */
        function repoStartTransaction(
          repo,
          path,
          transactionUpdate,
          onComplete,
          unwatcher,
          applyLocally
        ) {
          repoLog(repo, "transaction on " + path);
          // Initialize transaction.
          const transaction = {
            path,
            update: transactionUpdate,
            onComplete,
            // One of TransactionStatus enums.
            status: null,
            // Used when combining transactions at different locations to figure out
            // which one goes first.
            order: LUIDGenerator(),
            // Whether to raise local events for this transaction.
            applyLocally,
            // Count of how many times we've retried the transaction.
            retryCount: 0,
            // Function to call to clean up our .on() listener.
            unwatcher,
            // Stores why a transaction was aborted.
            abortReason: null,
            currentWriteId: null,
            currentInputSnapshot: null,
            currentOutputSnapshotRaw: null,
            currentOutputSnapshotResolved: null,
          };
          // Run transaction initially.
          const currentState = repoGetLatestState(repo, path, undefined);
          transaction.currentInputSnapshot = currentState;
          const newVal = transaction.update(currentState.val());
          if (newVal === undefined) {
            // Abort transaction.
            transaction.unwatcher();
            transaction.currentOutputSnapshotRaw = null;
            transaction.currentOutputSnapshotResolved = null;
            if (transaction.onComplete) {
              transaction.onComplete(
                null,
                false,
                transaction.currentInputSnapshot
              );
            }
          } else {
            validateFirebaseData(
              "transaction failed: Data returned ",
              newVal,
              transaction.path
            );
            // Mark as run and add to our queue.
            transaction.status = 0 /* RUN */;
            const queueNode = treeSubTree(repo.transactionQueueTree_, path);
            const nodeQueue = treeGetValue(queueNode) || [];
            nodeQueue.push(transaction);
            treeSetValue(queueNode, nodeQueue);
            // Update visibleData and raise events
            // Note: We intentionally raise events after updating all of our
            // transaction state, since the user could start new transactions from the
            // event callbacks.
            let priorityForNode;
            if (
              typeof newVal === "object" &&
              newVal !== null &&
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                newVal,
                ".priority"
              )
            ) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              priorityForNode = (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(
                  newVal,
                  ".priority"
                );
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                isValidPriority(priorityForNode),
                "Invalid priority returned by transaction. " +
                "Priority must be a valid string, finite number, server value, or null."
              );
            } else {
              const currentNode =
                syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||
                ChildrenNode.EMPTY_NODE;
              priorityForNode = currentNode.getPriority().val();
            }
            const serverValues = repoGenerateServerValues(repo);
            const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);
            const newNode = resolveDeferredValueSnapshot(
              newNodeUnresolved,
              currentState,
              serverValues
            );
            transaction.currentOutputSnapshotRaw = newNodeUnresolved;
            transaction.currentOutputSnapshotResolved = newNode;
            transaction.currentWriteId = repoGetNextWriteId(repo);
            const events = syncTreeApplyUserOverwrite(
              repo.serverSyncTree_,
              path,
              newNode,
              transaction.currentWriteId,
              transaction.applyLocally
            );
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            repoSendReadyTransactions(repo, repo.transactionQueueTree_);
          }
        }
        /**
         * @param excludeSets - A specific set to exclude
         */
        function repoGetLatestState(repo, path, excludeSets) {
          return (
            syncTreeCalcCompleteEventCache(
              repo.serverSyncTree_,
              path,
              excludeSets
            ) || ChildrenNode.EMPTY_NODE
          );
        }
        /**
         * Sends any already-run transactions that aren't waiting for outstanding
         * transactions to complete.
         *
         * Externally it's called with no arguments, but it calls itself recursively
         * with a particular transactionQueueTree node to recurse through the tree.
         *
         * @param node - transactionQueueTree node to start at.
         */
        function repoSendReadyTransactions(
          repo,
          node = repo.transactionQueueTree_
        ) {
          // Before recursing, make sure any completed transactions are removed.
          if (!node) {
            repoPruneCompletedTransactionsBelowNode(repo, node);
          }
          if (treeGetValue(node)) {
            const queue = repoBuildTransactionQueue(repo, node);
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              queue.length > 0,
              "Sending zero length transaction queue"
            );
            const allRun = queue.every(
              (transaction) => transaction.status === 0 /* RUN */
            );
            // If they're all run (and not sent), we can send them.  Else, we must wait.
            if (allRun) {
              repoSendTransactionQueue(repo, treeGetPath(node), queue);
            }
          } else if (treeHasChildren(node)) {
            treeForEachChild(node, (childNode) => {
              repoSendReadyTransactions(repo, childNode);
            });
          }
        }
        /**
         * Given a list of run transactions, send them to the server and then handle
         * the result (success or failure).
         *
         * @param path - The location of the queue.
         * @param queue - Queue of transactions under the specified location.
         */
        function repoSendTransactionQueue(repo, path, queue) {
          // Mark transactions as sent and increment retry count!
          const setsToIgnore = queue.map((txn) => {
            return txn.currentWriteId;
          });
          const latestState = repoGetLatestState(repo, path, setsToIgnore);
          let snapToSend = latestState;
          const latestHash = latestState.hash();
          for (let i = 0; i < queue.length; i++) {
            const txn = queue[i];
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              txn.status === 0 /* RUN */,
              "tryToSendTransactionQueue_: items in queue should all be run."
            );
            txn.status = 1 /* SENT */;
            txn.retryCount++;
            const relativePath = newRelativePath(path, txn.path);
            // If we've gotten to this point, the output snapshot must be defined.
            snapToSend = snapToSend.updateChild(
              relativePath /** @type {!Node} */,
              txn.currentOutputSnapshotRaw
            );
          }
          const dataToSend = snapToSend.val(true);
          const pathToSend = path;
          // Send the put.
          repo.server_.put(
            pathToSend.toString(),
            dataToSend,
            (status) => {
              repoLog(repo, "transaction put response", {
                path: pathToSend.toString(),
                status,
              });
              let events = [];
              if (status === "ok") {
                // Queue up the callbacks and fire them after cleaning up all of our
                // transaction state, since the callback could trigger more
                // transactions or sets.
                const callbacks = [];
                for (let i = 0; i < queue.length; i++) {
                  queue[i].status = 2 /* COMPLETED */;
                  events = events.concat(
                    syncTreeAckUserWrite(
                      repo.serverSyncTree_,
                      queue[i].currentWriteId
                    )
                  );
                  if (queue[i].onComplete) {
                    // We never unset the output snapshot, and given that this
                    // transaction is complete, it should be set
                    callbacks.push(() =>
                      queue[i].onComplete(
                        null,
                        true,
                        queue[i].currentOutputSnapshotResolved
                      )
                    );
                  }
                  queue[i].unwatcher();
                }
                // Now remove the completed transactions.
                repoPruneCompletedTransactionsBelowNode(
                  repo,
                  treeSubTree(repo.transactionQueueTree_, path)
                );
                // There may be pending transactions that we can now send.
                repoSendReadyTransactions(repo, repo.transactionQueueTree_);
                eventQueueRaiseEventsForChangedPath(
                  repo.eventQueue_,
                  path,
                  events
                );
                // Finally, trigger onComplete callbacks.
                for (let i = 0; i < callbacks.length; i++) {
                  exceptionGuard(callbacks[i]);
                }
              } else {
                // transactions are no longer sent.  Update their status appropriately.
                if (status === "datastale") {
                  for (let i = 0; i < queue.length; i++) {
                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {
                      queue[i].status = 4 /* NEEDS_ABORT */;
                    } else {
                      queue[i].status = 0 /* RUN */;
                    }
                  }
                } else {
                  warn(
                    "transaction at " +
                    pathToSend.toString() +
                    " failed: " +
                    status
                  );
                  for (let i = 0; i < queue.length; i++) {
                    queue[i].status = 4 /* NEEDS_ABORT */;
                    queue[i].abortReason = status;
                  }
                }
                repoRerunTransactions(repo, path);
              }
            },
            latestHash
          );
        }
        /**
         * Finds all transactions dependent on the data at changedPath and reruns them.
         *
         * Should be called any time cached data changes.
         *
         * Return the highest path that was affected by rerunning transactions. This
         * is the path at which events need to be raised for.
         *
         * @param changedPath - The path in mergedData that changed.
         * @returns The rootmost path that was affected by rerunning transactions.
         */
        function repoRerunTransactions(repo, changedPath) {
          const rootMostTransactionNode = repoGetAncestorTransactionNode(
            repo,
            changedPath
          );
          const path = treeGetPath(rootMostTransactionNode);
          const queue = repoBuildTransactionQueue(
            repo,
            rootMostTransactionNode
          );
          repoRerunTransactionQueue(repo, queue, path);
          return path;
        }
        /**
         * Does all the work of rerunning transactions (as well as cleans up aborted
         * transactions and whatnot).
         *
         * @param queue - The queue of transactions to run.
         * @param path - The path the queue is for.
         */
        function repoRerunTransactionQueue(repo, queue, path) {
          if (queue.length === 0) {
            return; // Nothing to do!
          }
          // Queue up the callbacks and fire them after cleaning up all of our
          // transaction state, since the callback could trigger more transactions or
          // sets.
          const callbacks = [];
          let events = [];
          // Ignore all of the sets we're going to re-run.
          const txnsToRerun = queue.filter((q) => {
            return q.status === 0 /* RUN */;
          });
          const setsToIgnore = txnsToRerun.map((q) => {
            return q.currentWriteId;
          });
          for (let i = 0; i < queue.length; i++) {
            const transaction = queue[i];
            const relativePath = newRelativePath(path, transaction.path);
            let abortTransaction = false,
              abortReason;
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              relativePath !== null,
              "rerunTransactionsUnderNode_: relativePath should not be null."
            );
            if (transaction.status === 4 /* NEEDS_ABORT */) {
              abortTransaction = true;
              abortReason = transaction.abortReason;
              events = events.concat(
                syncTreeAckUserWrite(
                  repo.serverSyncTree_,
                  transaction.currentWriteId,
                  true
                )
              );
            } else if (transaction.status === 0 /* RUN */) {
              if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                abortTransaction = true;
                abortReason = "maxretry";
                events = events.concat(
                  syncTreeAckUserWrite(
                    repo.serverSyncTree_,
                    transaction.currentWriteId,
                    true
                  )
                );
              } else {
                // This code reruns a transaction
                const currentNode = repoGetLatestState(
                  repo,
                  transaction.path,
                  setsToIgnore
                );
                transaction.currentInputSnapshot = currentNode;
                const newData = queue[i].update(currentNode.val());
                if (newData !== undefined) {
                  validateFirebaseData(
                    "transaction failed: Data returned ",
                    newData,
                    transaction.path
                  );
                  let newDataNode = nodeFromJSON(newData);
                  const hasExplicitPriority =
                    typeof newData === "object" &&
                    newData != null &&
                    (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(
                      newData,
                      ".priority"
                    );
                  if (!hasExplicitPriority) {
                    // Keep the old priority if there wasn't a priority explicitly specified.
                    newDataNode = newDataNode.updatePriority(
                      currentNode.getPriority()
                    );
                  }
                  const oldWriteId = transaction.currentWriteId;
                  const serverValues = repoGenerateServerValues(repo);
                  const newNodeResolved = resolveDeferredValueSnapshot(
                    newDataNode,
                    currentNode,
                    serverValues
                  );
                  transaction.currentOutputSnapshotRaw = newDataNode;
                  transaction.currentOutputSnapshotResolved = newNodeResolved;
                  transaction.currentWriteId = repoGetNextWriteId(repo);
                  // Mutates setsToIgnore in place
                  setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                  events = events.concat(
                    syncTreeApplyUserOverwrite(
                      repo.serverSyncTree_,
                      transaction.path,
                      newNodeResolved,
                      transaction.currentWriteId,
                      transaction.applyLocally
                    )
                  );
                  events = events.concat(
                    syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)
                  );
                } else {
                  abortTransaction = true;
                  abortReason = "nodata";
                  events = events.concat(
                    syncTreeAckUserWrite(
                      repo.serverSyncTree_,
                      transaction.currentWriteId,
                      true
                    )
                  );
                }
              }
            }
            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            events = [];
            if (abortTransaction) {
              // Abort.
              queue[i].status = 2 /* COMPLETED */;
              // Removing a listener can trigger pruning which can muck with
              // mergedData/visibleData (as it prunes data). So defer the unwatcher
              // until we're done.
              (function (unwatcher) {
                setTimeout(unwatcher, Math.floor(0));
              })(queue[i].unwatcher);
              if (queue[i].onComplete) {
                if (abortReason === "nodata") {
                  callbacks.push(() =>
                    queue[i].onComplete(
                      null,
                      false,
                      queue[i].currentInputSnapshot
                    )
                  );
                } else {
                  callbacks.push(() =>
                    queue[i].onComplete(new Error(abortReason), false, null)
                  );
                }
              }
            }
          }
          // Clean up completed transactions.
          repoPruneCompletedTransactionsBelowNode(
            repo,
            repo.transactionQueueTree_
          );
          // Now fire callbacks, now that we're in a good, known state.
          for (let i = 0; i < callbacks.length; i++) {
            exceptionGuard(callbacks[i]);
          }
          // Try to send the transaction result to the server.
          repoSendReadyTransactions(repo, repo.transactionQueueTree_);
        }
        /**
         * Returns the rootmost ancestor node of the specified path that has a pending
         * transaction on it, or just returns the node for the given path if there are
         * no pending transactions on any ancestor.
         *
         * @param path - The location to start at.
         * @returns The rootmost node with a transaction.
         */
        function repoGetAncestorTransactionNode(repo, path) {
          let front;
          // Start at the root and walk deeper into the tree towards path until we
          // find a node with pending transactions.
          let transactionNode = repo.transactionQueueTree_;
          front = pathGetFront(path);
          while (
            front !== null &&
            treeGetValue(transactionNode) === undefined
          ) {
            transactionNode = treeSubTree(transactionNode, front);
            path = pathPopFront(path);
            front = pathGetFront(path);
          }
          return transactionNode;
        }
        /**
         * Builds the queue of all transactions at or below the specified
         * transactionNode.
         *
         * @param transactionNode
         * @returns The generated queue.
         */
        function repoBuildTransactionQueue(repo, transactionNode) {
          // Walk any child transaction queues and aggregate them into a single queue.
          const transactionQueue = [];
          repoAggregateTransactionQueuesForNode(
            repo,
            transactionNode,
            transactionQueue
          );
          // Sort them by the order the transactions were created.
          transactionQueue.sort((a, b) => a.order - b.order);
          return transactionQueue;
        }
        function repoAggregateTransactionQueuesForNode(repo, node, queue) {
          const nodeQueue = treeGetValue(node);
          if (nodeQueue) {
            for (let i = 0; i < nodeQueue.length; i++) {
              queue.push(nodeQueue[i]);
            }
          }
          treeForEachChild(node, (child) => {
            repoAggregateTransactionQueuesForNode(repo, child, queue);
          });
        }
        /**
         * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
         */
        function repoPruneCompletedTransactionsBelowNode(repo, node) {
          const queue = treeGetValue(node);
          if (queue) {
            let to = 0;
            for (let from = 0; from < queue.length; from++) {
              if (queue[from].status !== 2 /* COMPLETED */) {
                queue[to] = queue[from];
                to++;
              }
            }
            queue.length = to;
            treeSetValue(node, queue.length > 0 ? queue : undefined);
          }
          treeForEachChild(node, (childNode) => {
            repoPruneCompletedTransactionsBelowNode(repo, childNode);
          });
        }
        /**
         * Aborts all transactions on ancestors or descendants of the specified path.
         * Called when doing a set() or update() since we consider them incompatible
         * with transactions.
         *
         * @param path - Path for which we want to abort related transactions.
         */
        function repoAbortTransactions(repo, path) {
          const affectedPath = treeGetPath(
            repoGetAncestorTransactionNode(repo, path)
          );
          const transactionNode = treeSubTree(repo.transactionQueueTree_, path);
          treeForEachAncestor(transactionNode, (node) => {
            repoAbortTransactionsOnNode(repo, node);
          });
          repoAbortTransactionsOnNode(repo, transactionNode);
          treeForEachDescendant(transactionNode, (node) => {
            repoAbortTransactionsOnNode(repo, node);
          });
          return affectedPath;
        }
        /**
         * Abort transactions stored in this transaction queue node.
         *
         * @param node - Node to abort transactions for.
         */
        function repoAbortTransactionsOnNode(repo, node) {
          const queue = treeGetValue(node);
          if (queue) {
            // Queue up the callbacks and fire them after cleaning up all of our
            // transaction state, since the callback could trigger more transactions
            // or sets.
            const callbacks = [];
            // Go through queue.  Any already-sent transactions must be marked for
            // abort, while the unsent ones can be immediately aborted and removed.
            let events = [];
            let lastSent = -1;
            for (let i = 0; i < queue.length; i++) {
              if (queue[i].status === 3 /* SENT_NEEDS_ABORT */);
              else if (queue[i].status === 1 /* SENT */) {
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                  lastSent === i - 1,
                  "All SENT items should be at beginning of queue."
                );
                lastSent = i;
                // Mark transaction for abort when it comes back.
                queue[i].status = 3 /* SENT_NEEDS_ABORT */;
                queue[i].abortReason = "set";
              } else {
                (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
                  queue[i].status === 0 /* RUN */,
                  "Unexpected transaction status in abort"
                );
                // We can abort it immediately.
                queue[i].unwatcher();
                events = events.concat(
                  syncTreeAckUserWrite(
                    repo.serverSyncTree_,
                    queue[i].currentWriteId,
                    true
                  )
                );
                if (queue[i].onComplete) {
                  callbacks.push(
                    queue[i].onComplete.bind(
                      null,
                      new Error("set"),
                      false,
                      null
                    )
                  );
                }
              }
            }
            if (lastSent === -1) {
              // We're not waiting for any sent transactions.  We can clear the queue.
              treeSetValue(node, undefined);
            } else {
              // Remove the transactions we aborted.
              queue.length = lastSent + 1;
            }
            // Now fire the callbacks.
            eventQueueRaiseEventsForChangedPath(
              repo.eventQueue_,
              treeGetPath(node),
              events
            );
            for (let i = 0; i < callbacks.length; i++) {
              exceptionGuard(callbacks[i]);
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function decodePath(pathString) {
          let pathStringDecoded = "";
          const pieces = pathString.split("/");
          for (let i = 0; i < pieces.length; i++) {
            if (pieces[i].length > 0) {
              let piece = pieces[i];
              try {
                piece = decodeURIComponent(piece.replace(/\+/g, " "));
              } catch (e) { }
              pathStringDecoded += "/" + piece;
            }
          }
          return pathStringDecoded;
        }
        /**
         * @returns key value hash
         */
        function decodeQuery(queryString) {
          const results = {};
          if (queryString.charAt(0) === "?") {
            queryString = queryString.substring(1);
          }
          for (const segment of queryString.split("&")) {
            if (segment.length === 0) {
              continue;
            }
            const kv = segment.split("=");
            if (kv.length === 2) {
              results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
            } else {
              warn(
                `Invalid query segment '${segment}' in query '${queryString}'`
              );
            }
          }
          return results;
        }
        const parseRepoInfo = function (dataURL, nodeAdmin) {
          const parsedUrl = parseDatabaseURL(dataURL),
            namespace = parsedUrl.namespace;
          if (parsedUrl.domain === "firebase.com") {
            fatal(
              parsedUrl.host +
              " is no longer supported. " +
              "Please use <YOUR FIREBASE>.firebaseio.com instead"
            );
          }
          // Catch common error of uninitialized namespace value.
          if (
            (!namespace || namespace === "undefined") &&
            parsedUrl.domain !== "localhost"
          ) {
            fatal(
              "Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"
            );
          }
          if (!parsedUrl.secure) {
            warnIfPageIsSecure();
          }
          const webSocketOnly =
            parsedUrl.scheme === "ws" || parsedUrl.scheme === "wss";
          return {
            repoInfo: new RepoInfo(
              parsedUrl.host,
              parsedUrl.secure,
              namespace,
              webSocketOnly,
              nodeAdmin,
              /*persistenceKey=*/ "",
              /*includeNamespaceInQueryParams=*/ namespace !==
              parsedUrl.subdomain
            ),
            path: new Path(parsedUrl.pathString),
          };
        };
        const parseDatabaseURL = function (dataURL) {
          // Default to empty strings in the event of a malformed string.
          let host = "",
            domain = "",
            subdomain = "",
            pathString = "",
            namespace = "";
          // Always default to SSL, unless otherwise specified.
          let secure = true,
            scheme = "https",
            port = 443;
          // Don't do any validation here. The caller is responsible for validating the result of parsing.
          if (typeof dataURL === "string") {
            // Parse scheme.
            let colonInd = dataURL.indexOf("//");
            if (colonInd >= 0) {
              scheme = dataURL.substring(0, colonInd - 1);
              dataURL = dataURL.substring(colonInd + 2);
            }
            // Parse host, path, and query string.
            let slashInd = dataURL.indexOf("/");
            if (slashInd === -1) {
              slashInd = dataURL.length;
            }
            let questionMarkInd = dataURL.indexOf("?");
            if (questionMarkInd === -1) {
              questionMarkInd = dataURL.length;
            }
            host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
            if (slashInd < questionMarkInd) {
              // For pathString, questionMarkInd will always come after slashInd
              pathString = decodePath(
                dataURL.substring(slashInd, questionMarkInd)
              );
            }
            const queryParams = decodeQuery(
              dataURL.substring(Math.min(dataURL.length, questionMarkInd))
            );
            // If we have a port, use scheme for determining if it's secure.
            colonInd = host.indexOf(":");
            if (colonInd >= 0) {
              secure = scheme === "https" || scheme === "wss";
              port = parseInt(host.substring(colonInd + 1), 10);
            } else {
              colonInd = host.length;
            }
            const hostWithoutPort = host.slice(0, colonInd);
            if (hostWithoutPort.toLowerCase() === "localhost") {
              domain = "localhost";
            } else if (hostWithoutPort.split(".").length <= 2) {
              domain = hostWithoutPort;
            } else {
              // Interpret the subdomain of a 3 or more component URL as the namespace name.
              const dotInd = host.indexOf(".");
              subdomain = host.substring(0, dotInd).toLowerCase();
              domain = host.substring(dotInd + 1);
              // Normalize namespaces to lowercase to share storage / connection.
              namespace = subdomain;
            }
            // Always treat the value of the `ns` as the namespace name if it is present.
            if ("ns" in queryParams) {
              namespace = queryParams["ns"];
            }
          }
          return {
            host,
            port,
            domain,
            subdomain,
            secure,
            scheme,
            pathString,
            namespace,
          };
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Encapsulates the data needed to raise an event
         */
        class DataEvent {
          /**
           * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
           * @param eventRegistration - The function to call to with the event data. User provided
           * @param snapshot - The data backing the event
           * @param prevName - Optional, the name of the previous child for child_* events.
           */
          constructor(eventType, eventRegistration, snapshot, prevName) {
            this.eventType = eventType;
            this.eventRegistration = eventRegistration;
            this.snapshot = snapshot;
            this.prevName = prevName;
          }
          getPath() {
            const ref = this.snapshot.ref;
            if (this.eventType === "value") {
              return ref._path;
            } else {
              return ref.parent._path;
            }
          }
          getEventType() {
            return this.eventType;
          }
          getEventRunner() {
            return this.eventRegistration.getEventRunner(this);
          }
          toString() {
            return (
              this.getPath().toString() +
              ":" +
              this.eventType +
              ":" +
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(
                this.snapshot.exportVal()
              )
            );
          }
        }
        class CancelEvent {
          constructor(eventRegistration, error, path) {
            this.eventRegistration = eventRegistration;
            this.error = error;
            this.path = path;
          }
          getPath() {
            return this.path;
          }
          getEventType() {
            return "cancel";
          }
          getEventRunner() {
            return this.eventRegistration.getEventRunner(this);
          }
          toString() {
            return this.path.toString() + ":cancel";
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A wrapper class that converts events from the database@exp SDK to the legacy
         * Database SDK. Events are not converted directly as event registration relies
         * on reference comparison of the original user callback (see `matches()`) and
         * relies on equality of the legacy SDK's `context` object.
         */
        class CallbackContext {
          constructor(snapshotCallback, cancelCallback) {
            this.snapshotCallback = snapshotCallback;
            this.cancelCallback = cancelCallback;
          }
          onValue(expDataSnapshot, previousChildName) {
            this.snapshotCallback.call(
              null,
              expDataSnapshot,
              previousChildName
            );
          }
          onCancel(error) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              this.hasCancelCallback,
              "Raising a cancel event on a listener with no cancel callback"
            );
            return this.cancelCallback.call(null, error);
          }
          get hasCancelCallback() {
            return !!this.cancelCallback;
          }
          matches(other) {
            return (
              this.snapshotCallback === other.snapshotCallback ||
              (this.snapshotCallback.userCallback !== undefined &&
                this.snapshotCallback.userCallback ===
                other.snapshotCallback.userCallback &&
                this.snapshotCallback.context ===
                other.snapshotCallback.context)
            );
          }
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The `onDisconnect` class allows you to write or clear data when your client
         * disconnects from the Database server. These updates occur whether your
         * client disconnects cleanly or not, so you can rely on them to clean up data
         * even if a connection is dropped or a client crashes.
         *
         * The `onDisconnect` class is most commonly used to manage presence in
         * applications where it is useful to detect how many clients are connected and
         * when other clients disconnect. See
         * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
         * for more information.
         *
         * To avoid problems when a connection is dropped before the requests can be
         * transferred to the Database server, these functions should be called before
         * writing any data.
         *
         * Note that `onDisconnect` operations are only triggered once. If you want an
         * operation to occur each time a disconnect occurs, you'll need to re-establish
         * the `onDisconnect` operations each time you reconnect.
         */
        class OnDisconnect {
          /** @hideconstructor */
          constructor(_repo, _path) {
            this._repo = _repo;
            this._path = _path;
          }
          /**
           * Cancels all previously queued `onDisconnect()` set or update events for this
           * location and all children.
           *
           * If a write has been queued for this location via a `set()` or `update()` at a
           * parent location, the write at this location will be canceled, though writes
           * to sibling locations will still occur.
           *
           * @returns Resolves when synchronization to the server is complete.
           */
          cancel() {
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            repoOnDisconnectCancel(
              this._repo,
              this._path,
              deferred.wrapCallback(() => { })
            );
            return deferred.promise;
          }
          /**
           * Ensures the data at this location is deleted when the client is disconnected
           * (due to closing the browser, navigating to a new page, or network issues).
           *
           * @returns Resolves when synchronization to the server is complete.
           */
          remove() {
            validateWritablePath("OnDisconnect.remove", this._path);
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            repoOnDisconnectSet(
              this._repo,
              this._path,
              null,
              deferred.wrapCallback(() => { })
            );
            return deferred.promise;
          }
          /**
           * Ensures the data at this location is set to the specified value when the
           * client is disconnected (due to closing the browser, navigating to a new page,
           * or network issues).
           *
           * `set()` is especially useful for implementing "presence" systems, where a
           * value should be changed or cleared when a user disconnects so that they
           * appear "offline" to other users. See
           * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
           * for more information.
           *
           * Note that `onDisconnect` operations are only triggered once. If you want an
           * operation to occur each time a disconnect occurs, you'll need to re-establish
           * the `onDisconnect` operations each time.
           *
           * @param value - The value to be written to this location on disconnect (can
           * be an object, array, string, number, boolean, or null).
           * @returns Resolves when synchronization to the Database is complete.
           */
          set(value) {
            validateWritablePath("OnDisconnect.set", this._path);
            validateFirebaseDataArg(
              "OnDisconnect.set",
              value,
              this._path,
              false
            );
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            repoOnDisconnectSet(
              this._repo,
              this._path,
              value,
              deferred.wrapCallback(() => { })
            );
            return deferred.promise;
          }
          /**
           * Ensures the data at this location is set to the specified value and priority
           * when the client is disconnected (due to closing the browser, navigating to a
           * new page, or network issues).
           *
           * @param value - The value to be written to this location on disconnect (can
           * be an object, array, string, number, boolean, or null).
           * @param priority - The priority to be written (string, number, or null).
           * @returns Resolves when synchronization to the Database is complete.
           */
          setWithPriority(value, priority) {
            validateWritablePath("OnDisconnect.setWithPriority", this._path);
            validateFirebaseDataArg(
              "OnDisconnect.setWithPriority",
              value,
              this._path,
              false
            );
            validatePriority("OnDisconnect.setWithPriority", priority, false);
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            repoOnDisconnectSetWithPriority(
              this._repo,
              this._path,
              value,
              priority,
              deferred.wrapCallback(() => { })
            );
            return deferred.promise;
          }
          /**
           * Writes multiple values at this location when the client is disconnected (due
           * to closing the browser, navigating to a new page, or network issues).
           *
           * The `values` argument contains multiple property-value pairs that will be
           * written to the Database together. Each child property can either be a simple
           * property (for example, "name") or a relative path (for example, "name/first")
           * from the current location to the data to update.
           *
           * As opposed to the `set()` method, `update()` can be use to selectively update
           * only the referenced properties at the current location (instead of replacing
           * all the child properties at the current location).
           *
           * @param values - Object containing multiple values.
           * @returns Resolves when synchronization to the Database is complete.
           */
          update(values) {
            validateWritablePath("OnDisconnect.update", this._path);
            validateFirebaseMergeDataArg(
              "OnDisconnect.update",
              values,
              this._path,
              false
            );
            const deferred =
              new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
            repoOnDisconnectUpdate(
              this._repo,
              this._path,
              values,
              deferred.wrapCallback(() => { })
            );
            return deferred.promise;
          }
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @internal
         */
        class QueryImpl {
          /**
           * @hideconstructor
           */
          constructor(_repo, _path, _queryParams, _orderByCalled) {
            this._repo = _repo;
            this._path = _path;
            this._queryParams = _queryParams;
            this._orderByCalled = _orderByCalled;
          }
          get key() {
            if (pathIsEmpty(this._path)) {
              return null;
            } else {
              return pathGetBack(this._path);
            }
          }
          get ref() {
            return new ReferenceImpl(this._repo, this._path);
          }
          get _queryIdentifier() {
            const obj = queryParamsGetQueryObject(this._queryParams);
            const id = ObjectToUniqueKey(obj);
            return id === "{}" ? "default" : id;
          }
          /**
           * An object representation of the query parameters used by this Query.
           */
          get _queryObject() {
            return queryParamsGetQueryObject(this._queryParams);
          }
          isEqual(other) {
            other = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
                other
              );
            if (!(other instanceof QueryImpl)) {
              return false;
            }
            const sameRepo = this._repo === other._repo;
            const samePath = pathEquals(this._path, other._path);
            const sameQueryIdentifier =
              this._queryIdentifier === other._queryIdentifier;
            return sameRepo && samePath && sameQueryIdentifier;
          }
          toJSON() {
            return this.toString();
          }
          toString() {
            return this._repo.toString() + pathToUrlEncodedString(this._path);
          }
        }
        /**
         * Validates that no other order by call has been made
         */
        function validateNoPreviousOrderByCall(query, fnName) {
          if (query._orderByCalled === true) {
            throw new Error(
              fnName + ": You can't combine multiple orderBy calls."
            );
          }
        }
        /**
         * Validates start/end values for queries.
         */
        function validateQueryEndpoints(params) {
          let startNode = null;
          let endNode = null;
          if (params.hasStart()) {
            startNode = params.getIndexStartValue();
          }
          if (params.hasEnd()) {
            endNode = params.getIndexEndValue();
          }
          if (params.getIndex() === KEY_INDEX) {
            const tooManyArgsError =
              "Query: When ordering by key, you may only pass one argument to " +
              "startAt(), endAt(), or equalTo().";
            const wrongArgTypeError =
              "Query: When ordering by key, the argument passed to startAt(), startAfter(), " +
              "endAt(), endBefore(), or equalTo() must be a string.";
            if (params.hasStart()) {
              const startName = params.getIndexStartName();
              if (startName !== MIN_NAME) {
                throw new Error(tooManyArgsError);
              } else if (typeof startNode !== "string") {
                throw new Error(wrongArgTypeError);
              }
            }
            if (params.hasEnd()) {
              const endName = params.getIndexEndName();
              if (endName !== MAX_NAME) {
                throw new Error(tooManyArgsError);
              } else if (typeof endNode !== "string") {
                throw new Error(wrongArgTypeError);
              }
            }
          } else if (params.getIndex() === PRIORITY_INDEX) {
            if (
              (startNode != null && !isValidPriority(startNode)) ||
              (endNode != null && !isValidPriority(endNode))
            ) {
              throw new Error(
                "Query: When ordering by priority, the first argument passed to startAt(), " +
                "startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value " +
                "(null, a number, or a string)."
              );
            }
          } else {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              params.getIndex() instanceof PathIndex ||
              params.getIndex() === VALUE_INDEX,
              "unknown index type."
            );
            if (
              (startNode != null && typeof startNode === "object") ||
              (endNode != null && typeof endNode === "object")
            ) {
              throw new Error(
                "Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or " +
                "equalTo() cannot be an object."
              );
            }
          }
        }
        /**
         * Validates that limit* has been called with the correct combination of parameters
         */
        function validateLimit(params) {
          if (
            params.hasStart() &&
            params.hasEnd() &&
            params.hasLimit() &&
            !params.hasAnchoredLimit()
          ) {
            throw new Error(
              "Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use " +
              "limitToFirst() or limitToLast() instead."
            );
          }
        }
        /**
         * @internal
         */
        class ReferenceImpl extends QueryImpl {
          /** @hideconstructor */
          constructor(repo, path) {
            super(repo, path, new QueryParams(), false);
          }
          get parent() {
            const parentPath = pathParent(this._path);
            return parentPath === null
              ? null
              : new ReferenceImpl(this._repo, parentPath);
          }
          get root() {
            let ref = this;
            while (ref.parent !== null) {
              ref = ref.parent;
            }
            return ref;
          }
        }
        /**
         * A `DataSnapshot` contains data from a Database location.
         *
         * Any time you read data from the Database, you receive the data as a
         * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
         * with `on()` or `once()`. You can extract the contents of the snapshot as a
         * JavaScript object by calling the `val()` method. Alternatively, you can
         * traverse into the snapshot by calling `child()` to return child snapshots
         * (which you could then call `val()` on).
         *
         * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
         * a Database location. It cannot be modified and will never change (to modify
         * data, you always call the `set()` method on a `Reference` directly).
         */
        class DataSnapshot {
          /**
           * @param _node - A SnapshotNode to wrap.
           * @param ref - The location this snapshot came from.
           * @param _index - The iteration order for this snapshot
           * @hideconstructor
           */
          constructor(
            _node,
            /**
             * The location of this DataSnapshot.
             */
            ref,
            _index
          ) {
            this._node = _node;
            this.ref = ref;
            this._index = _index;
          }
          /**
           * Gets the priority value of the data in this `DataSnapshot`.
           *
           * Applications need not use priority but can order collections by
           * ordinary properties (see
           * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
           * ).
           */
          get priority() {
            // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
            return this._node.getPriority().val();
          }
          /**
           * The key (last part of the path) of the location of this `DataSnapshot`.
           *
           * The last token in a Database location is considered its key. For example,
           * "ada" is the key for the /users/ada/ node. Accessing the key on any
           * `DataSnapshot` will return the key for the location that generated it.
           * However, accessing the key on the root URL of a Database will return
           * `null`.
           */
          get key() {
            return this.ref.key;
          }
          /** Returns the number of child properties of this `DataSnapshot`. */
          get size() {
            return this._node.numChildren();
          }
          /**
           * Gets another `DataSnapshot` for the location at the specified relative path.
           *
           * Passing a relative path to the `child()` method of a DataSnapshot returns
           * another `DataSnapshot` for the location at the specified relative path. The
           * relative path can either be a simple child name (for example, "ada") or a
           * deeper, slash-separated path (for example, "ada/name/first"). If the child
           * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
           * whose value is `null`) is returned.
           *
           * @param path - A relative path to the location of child data.
           */
          child(path) {
            const childPath = new Path(path);
            const childRef = child(this.ref, path);
            return new DataSnapshot(
              this._node.getChild(childPath),
              childRef,
              PRIORITY_INDEX
            );
          }
          /**
           * Returns true if this `DataSnapshot` contains any data. It is slightly more
           * efficient than using `snapshot.val() !== null`.
           */
          exists() {
            return !this._node.isEmpty();
          }
          /**
           * Exports the entire contents of the DataSnapshot as a JavaScript object.
           *
           * The `exportVal()` method is similar to `val()`, except priority information
           * is included (if available), making it suitable for backing up your data.
           *
           * @returns The DataSnapshot's contents as a JavaScript value (Object,
           *   Array, string, number, boolean, or `null`).
           */
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          exportVal() {
            return this._node.val(true);
          }
          /**
           * Enumerates the top-level children in the `DataSnapshot`.
           *
           * Because of the way JavaScript objects work, the ordering of data in the
           * JavaScript object returned by `val()` is not guaranteed to match the
           * ordering on the server nor the ordering of `onChildAdded()` events. That is
           * where `forEach()` comes in handy. It guarantees the children of a
           * `DataSnapshot` will be iterated in their query order.
           *
           * If no explicit `orderBy*()` method is used, results are returned
           * ordered by key (unless priorities are used, in which case, results are
           * returned by priority).
           *
           * @param action - A function that will be called for each child DataSnapshot.
           * The callback can return true to cancel further enumeration.
           * @returns true if enumeration was canceled due to your callback returning
           * true.
           */
          forEach(action) {
            if (this._node.isLeafNode()) {
              return false;
            }
            const childrenNode = this._node;
            // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
            return !!childrenNode.forEachChild(this._index, (key, node) => {
              return action(
                new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)
              );
            });
          }
          /**
           * Returns true if the specified child path has (non-null) data.
           *
           * @param path - A relative path to the location of a potential child.
           * @returns `true` if data exists at the specified child path; else
           *  `false`.
           */
          hasChild(path) {
            const childPath = new Path(path);
            return !this._node.getChild(childPath).isEmpty();
          }
          /**
           * Returns whether or not the `DataSnapshot` has any non-`null` child
           * properties.
           *
           * You can use `hasChildren()` to determine if a `DataSnapshot` has any
           * children. If it does, you can enumerate them using `forEach()`. If it
           * doesn't, then either this snapshot contains a primitive value (which can be
           * retrieved with `val()`) or it is empty (in which case, `val()` will return
           * `null`).
           *
           * @returns true if this snapshot has any children; else false.
           */
          hasChildren() {
            if (this._node.isLeafNode()) {
              return false;
            } else {
              return !this._node.isEmpty();
            }
          }
          /**
           * Returns a JSON-serializable representation of this object.
           */
          toJSON() {
            return this.exportVal();
          }
          /**
           * Extracts a JavaScript value from a `DataSnapshot`.
           *
           * Depending on the data in a `DataSnapshot`, the `val()` method may return a
           * scalar type (string, number, or boolean), an array, or an object. It may
           * also return null, indicating that the `DataSnapshot` is empty (contains no
           * data).
           *
           * @returns The DataSnapshot's contents as a JavaScript value (Object,
           *   Array, string, number, boolean, or `null`).
           */
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          val() {
            return this._node.val();
          }
        }
        /**
         *
         * Returns a `Reference` representing the location in the Database
         * corresponding to the provided path. If no path is provided, the `Reference`
         * will point to the root of the Database.
         *
         * @param db - The database instance to obtain a reference for.
         * @param path - Optional path representing the location the returned
         *   `Reference` will point. If not provided, the returned `Reference` will
         *   point to the root of the Database.
         * @returns If a path is provided, a `Reference`
         *   pointing to the provided path. Otherwise, a `Reference` pointing to the
         *   root of the Database.
         */
        function ref(db, path) {
          db = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);
          db._checkNotDeleted("ref");
          return path !== undefined ? child(db._root, path) : db._root;
        }
        /**
         * Returns a `Reference` representing the location in the Database
         * corresponding to the provided Firebase URL.
         *
         * An exception is thrown if the URL is not a valid Firebase Database URL or it
         * has a different domain than the current `Database` instance.
         *
         * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored
         * and are not applied to the returned `Reference`.
         *
         * @param db - The database instance to obtain a reference for.
         * @param url - The Firebase URL at which the returned `Reference` will
         *   point.
         * @returns A `Reference` pointing to the provided
         *   Firebase URL.
         */
        function refFromURL(db, url) {
          db = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);
          db._checkNotDeleted("refFromURL");
          const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);
          validateUrl("refFromURL", parsedURL);
          const repoInfo = parsedURL.repoInfo;
          if (
            !db._repo.repoInfo_.isCustomHost() &&
            repoInfo.host !== db._repo.repoInfo_.host
          ) {
            fatal(
              "refFromURL" +
              ": Host name does not match the current database: " +
              "(found " +
              repoInfo.host +
              " but expected " +
              db._repo.repoInfo_.host +
              ")"
            );
          }
          return ref(db, parsedURL.path.toString());
        }
        /**
         * Gets a `Reference` for the location at the specified relative path.
         *
         * The relative path can either be a simple child name (for example, "ada") or
         * a deeper slash-separated path (for example, "ada/name/first").
         *
         * @param parent - The parent location.
         * @param path - A relative path from this location to the desired child
         *   location.
         * @returns The specified child location.
         */
        function child(parent, path) {
          parent = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              parent
            );
          if (pathGetFront(parent._path) === null) {
            validateRootPathString("child", "path", path, false);
          } else {
            validatePathString("child", "path", path, false);
          }
          return new ReferenceImpl(parent._repo, pathChild(parent._path, path));
        }
        /**
         * Returns an `OnDisconnect` object - see
         * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
         * for more information on how to use it.
         *
         * @param ref - The reference to add OnDisconnect triggers for.
         */
        function onDisconnect(ref) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);
          return new OnDisconnect(ref._repo, ref._path);
        }
        /**
         * Generates a new child location using a unique key and returns its
         * `Reference`.
         *
         * This is the most common pattern for adding data to a collection of items.
         *
         * If you provide a value to `push()`, the value is written to the
         * generated location. If you don't pass a value, nothing is written to the
         * database and the child remains empty (but you can use the `Reference`
         * elsewhere).
         *
         * The unique keys generated by `push()` are ordered by the current time, so the
         * resulting list of items is chronologically sorted. The keys are also
         * designed to be unguessable (they contain 72 random bits of entropy).
         *
         * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.
         * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.
         *
         * @param parent - The parent location.
         * @param value - Optional value to be written at the generated location.
         * @returns Combined `Promise` and `Reference`; resolves when write is complete,
         * but can be used immediately as the `Reference` to the child location.
         */
        function push(parent, value) {
          parent = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              parent
            );
          validateWritablePath("push", parent._path);
          validateFirebaseDataArg("push", value, parent._path, true);
          const now = repoServerTime(parent._repo);
          const name = nextPushId(now);
          // push() returns a ThennableReference whose promise is fulfilled with a
          // regular Reference. We use child() to create handles to two different
          // references. The first is turned into a ThennableReference below by adding
          // then() and catch() methods and is used as the return value of push(). The
          // second remains a regular Reference and is used as the fulfilled value of
          // the first ThennableReference.
          const thennablePushRef = child(parent, name);
          const pushRef = child(parent, name);
          let promise;
          if (value != null) {
            promise = set(pushRef, value).then(() => pushRef);
          } else {
            promise = Promise.resolve(pushRef);
          }
          thennablePushRef.then = promise.then.bind(promise);
          thennablePushRef.catch = promise.then.bind(promise, undefined);
          return thennablePushRef;
        }
        /**
         * Removes the data at this Database location.
         *
         * Any data at child locations will also be deleted.
         *
         * The effect of the remove will be visible immediately and the corresponding
         * event 'value' will be triggered. Synchronization of the remove to the
         * Firebase servers will also be started, and the returned Promise will resolve
         * when complete. If provided, the onComplete callback will be called
         * asynchronously after synchronization has finished.
         *
         * @param ref - The location to remove.
         * @returns Resolves when remove on server is complete.
         */
        function remove(ref) {
          validateWritablePath("remove", ref._path);
          return set(ref, null);
        }
        /**
         * Writes data to this Database location.
         *
         * This will overwrite any data at this location and all child locations.
         *
         * The effect of the write will be visible immediately, and the corresponding
         * events ("value", "child_added", etc.) will be triggered. Synchronization of
         * the data to the Firebase servers will also be started, and the returned
         * Promise will resolve when complete. If provided, the `onComplete` callback
         * will be called asynchronously after synchronization has finished.
         *
         * Passing `null` for the new value is equivalent to calling `remove()`; namely,
         * all data at this location and all child locations will be deleted.
         *
         * `set()` will remove any priority stored at this location, so if priority is
         * meant to be preserved, you need to use `setWithPriority()` instead.
         *
         * Note that modifying data with `set()` will cancel any pending transactions
         * at that location, so extreme care should be taken if mixing `set()` and
         * `transaction()` to modify the same data.
         *
         * A single `set()` will generate a single "value" event at the location where
         * the `set()` was performed.
         *
         * @param ref - The location to write to.
         * @param value - The value to be written (string, number, boolean, object,
         *   array, or null).
         * @returns Resolves when write to server is complete.
         */
        function set(ref, value) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);
          validateWritablePath("set", ref._path);
          validateFirebaseDataArg("set", value, ref._path, false);
          const deferred =
            new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
          repoSetWithPriority(
            ref._repo,
            ref._path,
            value,
            /*priority=*/ null,
            deferred.wrapCallback(() => { })
          );
          return deferred.promise;
        }
        /**
         * Sets a priority for the data at this Database location.
         *
         * Applications need not use priority but can order collections by
         * ordinary properties (see
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
         * ).
         *
         * @param ref - The location to write to.
         * @param priority - The priority to be written (string, number, or null).
         * @returns Resolves when write to server is complete.
         */
        function setPriority(ref, priority) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);
          validateWritablePath("setPriority", ref._path);
          validatePriority("setPriority", priority, false);
          const deferred =
            new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
          repoSetWithPriority(
            ref._repo,
            pathChild(ref._path, ".priority"),
            priority,
            null,
            deferred.wrapCallback(() => { })
          );
          return deferred.promise;
        }
        /**
         * Writes data the Database location. Like `set()` but also specifies the
         * priority for that data.
         *
         * Applications need not use priority but can order collections by
         * ordinary properties (see
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
         * ).
         *
         * @param ref - The location to write to.
         * @param value - The value to be written (string, number, boolean, object,
         *   array, or null).
         * @param priority - The priority to be written (string, number, or null).
         * @returns Resolves when write to server is complete.
         */
        function setWithPriority(ref, value, priority) {
          validateWritablePath("setWithPriority", ref._path);
          validateFirebaseDataArg("setWithPriority", value, ref._path, false);
          validatePriority("setWithPriority", priority, false);
          if (ref.key === ".length" || ref.key === ".keys") {
            throw (
              "setWithPriority failed: " + ref.key + " is a read-only object."
            );
          }
          const deferred =
            new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
          repoSetWithPriority(
            ref._repo,
            ref._path,
            value,
            priority,
            deferred.wrapCallback(() => { })
          );
          return deferred.promise;
        }
        /**
         * Writes multiple values to the Database at once.
         *
         * The `values` argument contains multiple property-value pairs that will be
         * written to the Database together. Each child property can either be a simple
         * property (for example, "name") or a relative path (for example,
         * "name/first") from the current location to the data to update.
         *
         * As opposed to the `set()` method, `update()` can be use to selectively update
         * only the referenced properties at the current location (instead of replacing
         * all the child properties at the current location).
         *
         * The effect of the write will be visible immediately, and the corresponding
         * events ('value', 'child_added', etc.) will be triggered. Synchronization of
         * the data to the Firebase servers will also be started, and the returned
         * Promise will resolve when complete. If provided, the `onComplete` callback
         * will be called asynchronously after synchronization has finished.
         *
         * A single `update()` will generate a single "value" event at the location
         * where the `update()` was performed, regardless of how many children were
         * modified.
         *
         * Note that modifying data with `update()` will cancel any pending
         * transactions at that location, so extreme care should be taken if mixing
         * `update()` and `transaction()` to modify the same data.
         *
         * Passing `null` to `update()` will remove the data at this location.
         *
         * See
         * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.
         *
         * @param ref - The location to write to.
         * @param values - Object containing multiple values.
         * @returns Resolves when update on server is complete.
         */
        function update(ref, values) {
          validateFirebaseMergeDataArg("update", values, ref._path, false);
          const deferred =
            new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
          repoUpdate(
            ref._repo,
            ref._path,
            values,
            deferred.wrapCallback(() => { })
          );
          return deferred.promise;
        }
        /**
         * Gets the most up-to-date result for this query.
         *
         * @param query - The query to run.
         * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is
         * available, or rejects if the client is unable to return a value (e.g., if the
         * server is unreachable and there is nothing cached).
         */
        function get(query) {
          query = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              query
            );
          const callbackContext = new CallbackContext(() => { });
          const container = new ValueEventRegistration(callbackContext);
          return repoGetValue(query._repo, query, container).then((node) => {
            return new DataSnapshot(
              node,
              new ReferenceImpl(query._repo, query._path),
              query._queryParams.getIndex()
            );
          });
        }
        /**
         * Represents registration for 'value' events.
         */
        class ValueEventRegistration {
          constructor(callbackContext) {
            this.callbackContext = callbackContext;
          }
          respondsTo(eventType) {
            return eventType === "value";
          }
          createEvent(change, query) {
            const index = query._queryParams.getIndex();
            return new DataEvent(
              "value",
              this,
              new DataSnapshot(
                change.snapshotNode,
                new ReferenceImpl(query._repo, query._path),
                index
              )
            );
          }
          getEventRunner(eventData) {
            if (eventData.getEventType() === "cancel") {
              return () => this.callbackContext.onCancel(eventData.error);
            } else {
              return () =>
                this.callbackContext.onValue(eventData.snapshot, null);
            }
          }
          createCancelEvent(error, path) {
            if (this.callbackContext.hasCancelCallback) {
              return new CancelEvent(this, error, path);
            } else {
              return null;
            }
          }
          matches(other) {
            if (!(other instanceof ValueEventRegistration)) {
              return false;
            } else if (!other.callbackContext || !this.callbackContext) {
              // If no callback specified, we consider it to match any callback.
              return true;
            } else {
              return other.callbackContext.matches(this.callbackContext);
            }
          }
          hasAnyCallback() {
            return this.callbackContext !== null;
          }
        }
        /**
         * Represents the registration of a child_x event.
         */
        class ChildEventRegistration {
          constructor(eventType, callbackContext) {
            this.eventType = eventType;
            this.callbackContext = callbackContext;
          }
          respondsTo(eventType) {
            let eventToCheck =
              eventType === "children_added" ? "child_added" : eventType;
            eventToCheck =
              eventToCheck === "children_removed"
                ? "child_removed"
                : eventToCheck;
            return this.eventType === eventToCheck;
          }
          createCancelEvent(error, path) {
            if (this.callbackContext.hasCancelCallback) {
              return new CancelEvent(this, error, path);
            } else {
              return null;
            }
          }
          createEvent(change, query) {
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(
              change.childName != null,
              "Child events should have a childName."
            );
            const childRef = child(
              new ReferenceImpl(query._repo, query._path),
              change.childName
            );
            const index = query._queryParams.getIndex();
            return new DataEvent(
              change.type,
              this,
              new DataSnapshot(change.snapshotNode, childRef, index),
              change.prevName
            );
          }
          getEventRunner(eventData) {
            if (eventData.getEventType() === "cancel") {
              return () => this.callbackContext.onCancel(eventData.error);
            } else {
              return () =>
                this.callbackContext.onValue(
                  eventData.snapshot,
                  eventData.prevName
                );
            }
          }
          matches(other) {
            if (other instanceof ChildEventRegistration) {
              return (
                this.eventType === other.eventType &&
                (!this.callbackContext ||
                  !other.callbackContext ||
                  this.callbackContext.matches(other.callbackContext))
              );
            }
            return false;
          }
          hasAnyCallback() {
            return !!this.callbackContext;
          }
        }
        function addEventListener(
          query,
          eventType,
          callback,
          cancelCallbackOrListenOptions,
          options
        ) {
          let cancelCallback;
          if (typeof cancelCallbackOrListenOptions === "object") {
            cancelCallback = undefined;
            options = cancelCallbackOrListenOptions;
          }
          if (typeof cancelCallbackOrListenOptions === "function") {
            cancelCallback = cancelCallbackOrListenOptions;
          }
          if (options && options.onlyOnce) {
            const userCallback = callback;
            const onceCallback = (dataSnapshot, previousChildName) => {
              repoRemoveEventCallbackForQuery(query._repo, query, container);
              userCallback(dataSnapshot, previousChildName);
            };
            onceCallback.userCallback = callback.userCallback;
            onceCallback.context = callback.context;
            callback = onceCallback;
          }
          const callbackContext = new CallbackContext(
            callback,
            cancelCallback || undefined
          );
          const container =
            eventType === "value"
              ? new ValueEventRegistration(callbackContext)
              : new ChildEventRegistration(eventType, callbackContext);
          repoAddEventCallbackForQuery(query._repo, query, container);
          return () =>
            repoRemoveEventCallbackForQuery(query._repo, query, container);
        }
        function onValue(
          query,
          callback,
          cancelCallbackOrListenOptions,
          options
        ) {
          return addEventListener(
            query,
            "value",
            callback,
            cancelCallbackOrListenOptions,
            options
          );
        }
        function onChildAdded(
          query,
          callback,
          cancelCallbackOrListenOptions,
          options
        ) {
          return addEventListener(
            query,
            "child_added",
            callback,
            cancelCallbackOrListenOptions,
            options
          );
        }
        function onChildChanged(
          query,
          callback,
          cancelCallbackOrListenOptions,
          options
        ) {
          return addEventListener(
            query,
            "child_changed",
            callback,
            cancelCallbackOrListenOptions,
            options
          );
        }
        function onChildMoved(
          query,
          callback,
          cancelCallbackOrListenOptions,
          options
        ) {
          return addEventListener(
            query,
            "child_moved",
            callback,
            cancelCallbackOrListenOptions,
            options
          );
        }
        function onChildRemoved(
          query,
          callback,
          cancelCallbackOrListenOptions,
          options
        ) {
          return addEventListener(
            query,
            "child_removed",
            callback,
            cancelCallbackOrListenOptions,
            options
          );
        }
        /**
         * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.
         * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from
         * the respective `on*` callbacks.
         *
         * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener
         * will not automatically remove listeners registered on child nodes, `off()`
         * must also be called on any child listeners to remove the callback.
         *
         * If a callback is not specified, all callbacks for the specified eventType
         * will be removed. Similarly, if no eventType is specified, all callbacks
         * for the `Reference` will be removed.
         *
         * Individual listeners can also be removed by invoking their unsubscribe
         * callbacks.
         *
         * @param query - The query that the listener was registered with.
         * @param eventType - One of the following strings: "value", "child_added",
         * "child_changed", "child_removed", or "child_moved." If omitted, all callbacks
         * for the `Reference` will be removed.
         * @param callback - The callback function that was passed to `on()` or
         * `undefined` to remove all callbacks.
         */
        function off(query, eventType, callback) {
          let container = null;
          const expCallback = callback ? new CallbackContext(callback) : null;
          if (eventType === "value") {
            container = new ValueEventRegistration(expCallback);
          } else if (eventType) {
            container = new ChildEventRegistration(eventType, expCallback);
          }
          repoRemoveEventCallbackForQuery(query._repo, query, container);
        }
        /**
         * A `QueryConstraint` is used to narrow the set of documents returned by a
         * Database query. `QueryConstraint`s are created by invoking {@link endAt},
         * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link
         * limitToFirst}, {@link limitToLast}, {@link orderByChild},
         * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,
         * {@link orderByValue}  or {@link equalTo} and
         * can then be passed to {@link query} to create a new query instance that
         * also contains this `QueryConstraint`.
         */
        class QueryConstraint { }
        class QueryEndAtConstraint extends QueryConstraint {
          constructor(_value, _key) {
            super();
            this._value = _value;
            this._key = _key;
          }
          _apply(query) {
            validateFirebaseDataArg("endAt", this._value, query._path, true);
            const newParams = queryParamsEndAt(
              query._queryParams,
              this._value,
              this._key
            );
            validateLimit(newParams);
            validateQueryEndpoints(newParams);
            if (query._queryParams.hasEnd()) {
              throw new Error(
                "endAt: Starting point was already set (by another call to endAt, " +
                "endBefore or equalTo)."
              );
            }
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              query._orderByCalled
            );
          }
        }
        /**
         * Creates a `QueryConstraint` with the specified ending point.
         *
         * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
         * allows you to choose arbitrary starting and ending points for your queries.
         *
         * The ending point is inclusive, so children with exactly the specified value
         * will be included in the query. The optional key argument can be used to
         * further limit the range of the query. If it is specified, then children that
         * have exactly the specified value must also have a key name less than or equal
         * to the specified key.
         *
         * You can read more about `endAt()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
         *
         * @param value - The value to end at. The argument type depends on which
         * `orderBy*()` function was used in this query. Specify a value that matches
         * the `orderBy*()` type. When used in combination with `orderByKey()`, the
         * value must be a string.
         * @param key - The child key to end at, among the children with the previously
         * specified priority. This argument is only allowed if ordering by child,
         * value, or priority.
         */
        function endAt(value, key) {
          validateKey("endAt", "key", key, true);
          return new QueryEndAtConstraint(value, key);
        }
        class QueryEndBeforeConstraint extends QueryConstraint {
          constructor(_value, _key) {
            super();
            this._value = _value;
            this._key = _key;
          }
          _apply(query) {
            validateFirebaseDataArg(
              "endBefore",
              this._value,
              query._path,
              false
            );
            const newParams = queryParamsEndBefore(
              query._queryParams,
              this._value,
              this._key
            );
            validateLimit(newParams);
            validateQueryEndpoints(newParams);
            if (query._queryParams.hasEnd()) {
              throw new Error(
                "endBefore: Starting point was already set (by another call to endAt, " +
                "endBefore or equalTo)."
              );
            }
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              query._orderByCalled
            );
          }
        }
        /**
         * Creates a `QueryConstraint` with the specified ending point (exclusive).
         *
         * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
         * allows you to choose arbitrary starting and ending points for your queries.
         *
         * The ending point is exclusive. If only a value is provided, children
         * with a value less than the specified value will be included in the query.
         * If a key is specified, then children must have a value less than or equal
         * to the specified value and a key name less than the specified key.
         *
         * @param value - The value to end before. The argument type depends on which
         * `orderBy*()` function was used in this query. Specify a value that matches
         * the `orderBy*()` type. When used in combination with `orderByKey()`, the
         * value must be a string.
         * @param key - The child key to end before, among the children with the
         * previously specified priority. This argument is only allowed if ordering by
         * child, value, or priority.
         */
        function endBefore(value, key) {
          validateKey("endBefore", "key", key, true);
          return new QueryEndBeforeConstraint(value, key);
        }
        class QueryStartAtConstraint extends QueryConstraint {
          constructor(_value, _key) {
            super();
            this._value = _value;
            this._key = _key;
          }
          _apply(query) {
            validateFirebaseDataArg("startAt", this._value, query._path, true);
            const newParams = queryParamsStartAt(
              query._queryParams,
              this._value,
              this._key
            );
            validateLimit(newParams);
            validateQueryEndpoints(newParams);
            if (query._queryParams.hasStart()) {
              throw new Error(
                "startAt: Starting point was already set (by another call to startAt, " +
                "startBefore or equalTo)."
              );
            }
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              query._orderByCalled
            );
          }
        }
        /**
         * Creates a `QueryConstraint` with the specified starting point.
         *
         * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
         * allows you to choose arbitrary starting and ending points for your queries.
         *
         * The starting point is inclusive, so children with exactly the specified value
         * will be included in the query. The optional key argument can be used to
         * further limit the range of the query. If it is specified, then children that
         * have exactly the specified value must also have a key name greater than or
         * equal to the specified key.
         *
         * You can read more about `startAt()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
         *
         * @param value - The value to start at. The argument type depends on which
         * `orderBy*()` function was used in this query. Specify a value that matches
         * the `orderBy*()` type. When used in combination with `orderByKey()`, the
         * value must be a string.
         * @param key - The child key to start at. This argument is only allowed if
         * ordering by child, value, or priority.
         */
        function startAt(value = null, key) {
          validateKey("startAt", "key", key, true);
          return new QueryStartAtConstraint(value, key);
        }
        class QueryStartAfterConstraint extends QueryConstraint {
          constructor(_value, _key) {
            super();
            this._value = _value;
            this._key = _key;
          }
          _apply(query) {
            validateFirebaseDataArg(
              "startAfter",
              this._value,
              query._path,
              false
            );
            const newParams = queryParamsStartAfter(
              query._queryParams,
              this._value,
              this._key
            );
            validateLimit(newParams);
            validateQueryEndpoints(newParams);
            if (query._queryParams.hasStart()) {
              throw new Error(
                "startAfter: Starting point was already set (by another call to startAt, " +
                "startAfter, or equalTo)."
              );
            }
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              query._orderByCalled
            );
          }
        }
        /**
         * Creates a `QueryConstraint` with the specified starting point (exclusive).
         *
         * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
         * allows you to choose arbitrary starting and ending points for your queries.
         *
         * The starting point is exclusive. If only a value is provided, children
         * with a value greater than the specified value will be included in the query.
         * If a key is specified, then children must have a value greater than or equal
         * to the specified value and a a key name greater than the specified key.
         *
         * @param value - The value to start after. The argument type depends on which
         * `orderBy*()` function was used in this query. Specify a value that matches
         * the `orderBy*()` type. When used in combination with `orderByKey()`, the
         * value must be a string.
         * @param key - The child key to start after. This argument is only allowed if
         * ordering by child, value, or priority.
         */
        function startAfter(value, key) {
          validateKey("startAfter", "key", key, true);
          return new QueryStartAfterConstraint(value, key);
        }
        class QueryLimitToFirstConstraint extends QueryConstraint {
          constructor(_limit) {
            super();
            this._limit = _limit;
          }
          _apply(query) {
            if (query._queryParams.hasLimit()) {
              throw new Error(
                "limitToFirst: Limit was already set (by another call to limitToFirst " +
                "or limitToLast)."
              );
            }
            return new QueryImpl(
              query._repo,
              query._path,
              queryParamsLimitToFirst(query._queryParams, this._limit),
              query._orderByCalled
            );
          }
        }
        /**
         * Creates a new `QueryConstraint` that if limited to the first specific number
         * of children.
         *
         * The `limitToFirst()` method is used to set a maximum number of children to be
         * synced for a given callback. If we set a limit of 100, we will initially only
         * receive up to 100 `child_added` events. If we have fewer than 100 messages
         * stored in our Database, a `child_added` event will fire for each message.
         * However, if we have over 100 messages, we will only receive a `child_added`
         * event for the first 100 ordered messages. As items change, we will receive
         * `child_removed` events for each item that drops out of the active list so
         * that the total number stays at 100.
         *
         * You can read more about `limitToFirst()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
         *
         * @param limit - The maximum number of nodes to include in this query.
         */
        function limitToFirst(limit) {
          if (
            typeof limit !== "number" ||
            Math.floor(limit) !== limit ||
            limit <= 0
          ) {
            throw new Error(
              "limitToFirst: First argument must be a positive integer."
            );
          }
          return new QueryLimitToFirstConstraint(limit);
        }
        class QueryLimitToLastConstraint extends QueryConstraint {
          constructor(_limit) {
            super();
            this._limit = _limit;
          }
          _apply(query) {
            if (query._queryParams.hasLimit()) {
              throw new Error(
                "limitToLast: Limit was already set (by another call to limitToFirst " +
                "or limitToLast)."
              );
            }
            return new QueryImpl(
              query._repo,
              query._path,
              queryParamsLimitToLast(query._queryParams, this._limit),
              query._orderByCalled
            );
          }
        }
        /**
         * Creates a new `QueryConstraint` that is limited to return only the last
         * specified number of children.
         *
         * The `limitToLast()` method is used to set a maximum number of children to be
         * synced for a given callback. If we set a limit of 100, we will initially only
         * receive up to 100 `child_added` events. If we have fewer than 100 messages
         * stored in our Database, a `child_added` event will fire for each message.
         * However, if we have over 100 messages, we will only receive a `child_added`
         * event for the last 100 ordered messages. As items change, we will receive
         * `child_removed` events for each item that drops out of the active list so
         * that the total number stays at 100.
         *
         * You can read more about `limitToLast()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
         *
         * @param limit - The maximum number of nodes to include in this query.
         */
        function limitToLast(limit) {
          if (
            typeof limit !== "number" ||
            Math.floor(limit) !== limit ||
            limit <= 0
          ) {
            throw new Error(
              "limitToLast: First argument must be a positive integer."
            );
          }
          return new QueryLimitToLastConstraint(limit);
        }
        class QueryOrderByChildConstraint extends QueryConstraint {
          constructor(_path) {
            super();
            this._path = _path;
          }
          _apply(query) {
            validateNoPreviousOrderByCall(query, "orderByChild");
            const parsedPath = new Path(this._path);
            if (pathIsEmpty(parsedPath)) {
              throw new Error(
                "orderByChild: cannot pass in empty path. Use orderByValue() instead."
              );
            }
            const index = new PathIndex(parsedPath);
            const newParams = queryParamsOrderBy(query._queryParams, index);
            validateQueryEndpoints(newParams);
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              /*orderByCalled=*/ true
            );
          }
        }
        /**
         * Creates a new `QueryConstraint` that orders by the specified child key.
         *
         * Queries can only order by one key at a time. Calling `orderByChild()`
         * multiple times on the same query is an error.
         *
         * Firebase queries allow you to order your data by any child key on the fly.
         * However, if you know in advance what your indexes will be, you can define
         * them via the .indexOn rule in your Security Rules for better performance. See
         * the{@link https://firebase.google.com/docs/database/security/indexing-data}
         * rule for more information.
         *
         * You can read more about `orderByChild()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
         *
         * @param path - The path to order by.
         */
        function orderByChild(path) {
          if (path === "$key") {
            throw new Error(
              'orderByChild: "$key" is invalid.  Use orderByKey() instead.'
            );
          } else if (path === "$priority") {
            throw new Error(
              'orderByChild: "$priority" is invalid.  Use orderByPriority() instead.'
            );
          } else if (path === "$value") {
            throw new Error(
              'orderByChild: "$value" is invalid.  Use orderByValue() instead.'
            );
          }
          validatePathString("orderByChild", "path", path, false);
          return new QueryOrderByChildConstraint(path);
        }
        class QueryOrderByKeyConstraint extends QueryConstraint {
          _apply(query) {
            validateNoPreviousOrderByCall(query, "orderByKey");
            const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);
            validateQueryEndpoints(newParams);
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              /*orderByCalled=*/ true
            );
          }
        }
        /**
         * Creates a new `QueryConstraint` that orders by the key.
         *
         * Sorts the results of a query by their (ascending) key values.
         *
         * You can read more about `orderByKey()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
         */
        function orderByKey() {
          return new QueryOrderByKeyConstraint();
        }
        class QueryOrderByPriorityConstraint extends QueryConstraint {
          _apply(query) {
            validateNoPreviousOrderByCall(query, "orderByPriority");
            const newParams = queryParamsOrderBy(
              query._queryParams,
              PRIORITY_INDEX
            );
            validateQueryEndpoints(newParams);
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              /*orderByCalled=*/ true
            );
          }
        }
        /**
         * Creates a new `QueryConstraint` that orders by priority.
         *
         * Applications need not use priority but can order collections by
         * ordinary properties (see
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}
         * for alternatives to priority.
         */
        function orderByPriority() {
          return new QueryOrderByPriorityConstraint();
        }
        class QueryOrderByValueConstraint extends QueryConstraint {
          _apply(query) {
            validateNoPreviousOrderByCall(query, "orderByValue");
            const newParams = queryParamsOrderBy(
              query._queryParams,
              VALUE_INDEX
            );
            validateQueryEndpoints(newParams);
            return new QueryImpl(
              query._repo,
              query._path,
              newParams,
              /*orderByCalled=*/ true
            );
          }
        }
        /**
         * Creates a new `QueryConstraint` that orders by value.
         *
         * If the children of a query are all scalar values (string, number, or
         * boolean), you can order the results by their (ascending) values.
         *
         * You can read more about `orderByValue()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
         */
        function orderByValue() {
          return new QueryOrderByValueConstraint();
        }
        class QueryEqualToValueConstraint extends QueryConstraint {
          constructor(_value, _key) {
            super();
            this._value = _value;
            this._key = _key;
          }
          _apply(query) {
            validateFirebaseDataArg("equalTo", this._value, query._path, false);
            if (query._queryParams.hasStart()) {
              throw new Error(
                "equalTo: Starting point was already set (by another call to startAt/startAfter or " +
                "equalTo)."
              );
            }
            if (query._queryParams.hasEnd()) {
              throw new Error(
                "equalTo: Ending point was already set (by another call to endAt/endBefore or " +
                "equalTo)."
              );
            }
            return new QueryEndAtConstraint(this._value, this._key)._apply(
              new QueryStartAtConstraint(this._value, this._key)._apply(query)
            );
          }
        }
        /**
         * Creates a `QueryConstraint` that includes children that match the specified
         * value.
         *
         * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
         * allows you to choose arbitrary starting and ending points for your queries.
         *
         * The optional key argument can be used to further limit the range of the
         * query. If it is specified, then children that have exactly the specified
         * value must also have exactly the specified key as their key name. This can be
         * used to filter result sets with many matches for the same value.
         *
         * You can read more about `equalTo()` in
         * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
         *
         * @param value - The value to match for. The argument type depends on which
         * `orderBy*()` function was used in this query. Specify a value that matches
         * the `orderBy*()` type. When used in combination with `orderByKey()`, the
         * value must be a string.
         * @param key - The child key to start at, among the children with the
         * previously specified priority. This argument is only allowed if ordering by
         * child, value, or priority.
         */
        function equalTo(value, key) {
          validateKey("equalTo", "key", key, true);
          return new QueryEqualToValueConstraint(value, key);
        }
        /**
         * Creates a new immutable instance of `Query` that is extended to also include
         * additional query constraints.
         *
         * @param query - The Query instance to use as a base for the new constraints.
         * @param queryConstraints - The list of `QueryConstraint`s to apply.
         * @throws if any of the provided query constraints cannot be combined with the
         * existing or new constraints.
         */
        function query(query, ...queryConstraints) {
          let queryImpl = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              query
            );
          for (const constraint of queryConstraints) {
            queryImpl = constraint._apply(queryImpl);
          }
          return queryImpl;
        }
        /**
         * Define reference constructor in various modules
         *
         * We are doing this here to avoid several circular
         * dependency issues
         */
        syncPointSetReferenceConstructor(ReferenceImpl);
        syncTreeSetReferenceConstructor(ReferenceImpl);

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * This variable is also defined in the firebase Node.js Admin SDK. Before
         * modifying this definition, consult the definition in:
         *
         * https://github.com/firebase/firebase-admin-node
         *
         * and make sure the two are consistent.
         */
        const FIREBASE_DATABASE_EMULATOR_HOST_VAR =
          "FIREBASE_DATABASE_EMULATOR_HOST";
        /**
         * Creates and caches `Repo` instances.
         */
        const repos = {};
        /**
         * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).
         */
        let useRestClient = false;
        /**
         * Update an existing `Repo` in place to point to a new host/port.
         */
        function repoManagerApplyEmulatorSettings(
          repo,
          host,
          port,
          tokenProvider
        ) {
          repo.repoInfo_ = new RepoInfo(
            `${host}:${port}`,
            /* secure= */ false,
            repo.repoInfo_.namespace,
            repo.repoInfo_.webSocketOnly,
            repo.repoInfo_.nodeAdmin,
            repo.repoInfo_.persistenceKey,
            repo.repoInfo_.includeNamespaceInQueryParams
          );
          if (tokenProvider) {
            repo.authTokenProvider_ = tokenProvider;
          }
        }
        /**
         * This function should only ever be called to CREATE a new database instance.
         * @internal
         */
        function repoManagerDatabaseFromApp(
          app,
          authProvider,
          appCheckProvider,
          url,
          nodeAdmin
        ) {
          let dbUrl = url || app.options.databaseURL;
          if (dbUrl === undefined) {
            if (!app.options.projectId) {
              fatal(
                "Can't determine Firebase Database URL. Be sure to include " +
                " a Project ID when calling firebase.initializeApp()."
              );
            }
            log("Using default host for project ", app.options.projectId);
            dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;
          }
          let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
          let repoInfo = parsedUrl.repoInfo;
          let isEmulator;
          let dbEmulatorHost = undefined;
          if (typeof process !== "undefined" && process.env) {
            dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
          }
          if (dbEmulatorHost) {
            isEmulator = true;
            dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;
            parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
            repoInfo = parsedUrl.repoInfo;
          } else {
            isEmulator = !parsedUrl.repoInfo.secure;
          }
          const authTokenProvider =
            nodeAdmin && isEmulator
              ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)
              : new FirebaseAuthTokenProvider(
                app.name,
                app.options,
                authProvider
              );
          validateUrl("Invalid Firebase Database URL", parsedUrl);
          if (!pathIsEmpty(parsedUrl.path)) {
            fatal(
              "Database URL must point to the root of a Firebase Database " +
              "(not including a child path)."
            );
          }
          const repo = repoManagerCreateRepo(
            repoInfo,
            app,
            authTokenProvider,
            new AppCheckTokenProvider(app.name, appCheckProvider)
          );
          return new Database(repo, app);
        }
        /**
         * Remove the repo and make sure it is disconnected.
         *
         */
        function repoManagerDeleteRepo(repo, appName) {
          const appRepos = repos[appName];
          // This should never happen...
          if (!appRepos || appRepos[repo.key] !== repo) {
            fatal(
              `Database ${appName}(${repo.repoInfo_}) has already been deleted.`
            );
          }
          repoInterrupt(repo);
          delete appRepos[repo.key];
        }
        /**
         * Ensures a repo doesn't already exist and then creates one using the
         * provided app.
         *
         * @param repoInfo - The metadata about the Repo
         * @returns The Repo object for the specified server / repoName.
         */
        function repoManagerCreateRepo(
          repoInfo,
          app,
          authTokenProvider,
          appCheckProvider
        ) {
          let appRepos = repos[app.name];
          if (!appRepos) {
            appRepos = {};
            repos[app.name] = appRepos;
          }
          let repo = appRepos[repoInfo.toURLString()];
          if (repo) {
            fatal(
              "Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."
            );
          }
          repo = new Repo(
            repoInfo,
            useRestClient,
            authTokenProvider,
            appCheckProvider
          );
          appRepos[repoInfo.toURLString()] = repo;
          return repo;
        }
        /**
         * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
         */
        function repoManagerForceRestClient(forceRestClient) {
          useRestClient = forceRestClient;
        }
        /**
         * Class representing a Firebase Realtime Database.
         */
        class Database {
          /** @hideconstructor */
          constructor(
            _repoInternal,
            /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */
            app
          ) {
            this._repoInternal = _repoInternal;
            this.app = app;
            /** Represents a `Database` instance. */
            this["type"] = "database";
            /** Track if the instance has been used (root or repo accessed) */
            this._instanceStarted = false;
          }
          get _repo() {
            if (!this._instanceStarted) {
              repoStart(
                this._repoInternal,
                this.app.options.appId,
                this.app.options["databaseAuthVariableOverride"]
              );
              this._instanceStarted = true;
            }
            return this._repoInternal;
          }
          get _root() {
            if (!this._rootInternal) {
              this._rootInternal = new ReferenceImpl(
                this._repo,
                newEmptyPath()
              );
            }
            return this._rootInternal;
          }
          _delete() {
            if (this._rootInternal !== null) {
              repoManagerDeleteRepo(this._repo, this.app.name);
              this._repoInternal = null;
              this._rootInternal = null;
            }
            return Promise.resolve();
          }
          _checkNotDeleted(apiName) {
            if (this._rootInternal === null) {
              fatal("Cannot call " + apiName + " on a deleted database.");
            }
          }
        }
        function checkTransportInit() {
          if (TransportManager.IS_TRANSPORT_INITIALIZED) {
            warn(
              "Transport has already been initialized. Please call this function before calling ref or setting up a listener"
            );
          }
        }
        /**
         * Force the use of websockets instead of longPolling.
         */
        function forceWebSockets() {
          checkTransportInit();
          BrowserPollConnection.forceDisallow();
        }
        /**
         * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.
         */
        function forceLongPolling() {
          checkTransportInit();
          WebSocketConnection.forceDisallow();
          BrowserPollConnection.forceAllow();
        }
        /**
         * Returns the instance of the Realtime Database SDK that is associated
         * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with
         * with default settings if no instance exists or if the existing instance uses
         * a custom database URL.
         *
         * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime
         * Database instance is associated with.
         * @param url - The URL of the Realtime Database instance to connect to. If not
         * provided, the SDK connects to the default instance of the Firebase App.
         * @returns The `Database` instance of the provided app.
         */
        function getDatabase(
          app = (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)(),
          url
        ) {
          const db = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              "database"
            ).getImmediate({
              identifier: url,
            });
          const emulator = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultEmulatorHostnameAndPort)(
              "database"
            );
          if (emulator) {
            connectDatabaseEmulator(db, ...emulator);
          }
          return db;
        }
        /**
         * Modify the provided instance to communicate with the Realtime Database
         * emulator.
         *
         * <p>Note: This method must be called before performing any other operation.
         *
         * @param db - The instance to modify.
         * @param host - The emulator host (ex: localhost)
         * @param port - The emulator port (ex: 8080)
         * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
         */
        function connectDatabaseEmulator(db, host, port, options = {}) {
          db = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);
          db._checkNotDeleted("useEmulator");
          if (db._instanceStarted) {
            fatal(
              "Cannot call useEmulator() after instance has already been initialized."
            );
          }
          const repo = db._repoInternal;
          let tokenProvider = undefined;
          if (repo.repoInfo_.nodeAdmin) {
            if (options.mockUserToken) {
              fatal(
                'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".'
              );
            }
            tokenProvider = new EmulatorTokenProvider(
              EmulatorTokenProvider.OWNER
            );
          } else if (options.mockUserToken) {
            const token =
              typeof options.mockUserToken === "string"
                ? options.mockUserToken
                : (0,
                  _firebase_util__WEBPACK_IMPORTED_MODULE_2__.createMockUserToken)(
                    options.mockUserToken,
                    db.app.options.projectId
                  );
            tokenProvider = new EmulatorTokenProvider(token);
          }
          // Modify the repo to apply emulator settings
          repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
        }
        /**
         * Disconnects from the server (all Database operations will be completed
         * offline).
         *
         * The client automatically maintains a persistent connection to the Database
         * server, which will remain active indefinitely and reconnect when
         * disconnected. However, the `goOffline()` and `goOnline()` methods may be used
         * to control the client connection in cases where a persistent connection is
         * undesirable.
         *
         * While offline, the client will no longer receive data updates from the
         * Database. However, all Database operations performed locally will continue to
         * immediately fire events, allowing your application to continue behaving
         * normally. Additionally, each operation performed locally will automatically
         * be queued and retried upon reconnection to the Database server.
         *
         * To reconnect to the Database and begin receiving remote events, see
         * `goOnline()`.
         *
         * @param db - The instance to disconnect.
         */
        function goOffline(db) {
          db = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);
          db._checkNotDeleted("goOffline");
          repoInterrupt(db._repo);
        }
        /**
         * Reconnects to the server and synchronizes the offline Database state
         * with the server state.
         *
         * This method should be used after disabling the active connection with
         * `goOffline()`. Once reconnected, the client will transmit the proper data
         * and fire the appropriate events so that your client "catches up"
         * automatically.
         *
         * @param db - The instance to reconnect.
         */
        function goOnline(db) {
          db = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);
          db._checkNotDeleted("goOnline");
          repoResume(db._repo);
        }
        function enableLogging(logger, persistent) {
          enableLogging$1(logger, persistent);
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function registerDatabase(variant) {
          setSDKVersion(_firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION);
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(
              "database",
              (container, { instanceIdentifier: url }) => {
                const app = container.getProvider("app").getImmediate();
                const authProvider = container.getProvider("auth-internal");
                const appCheckProvider =
                  container.getProvider("app-check-internal");
                return repoManagerDatabaseFromApp(
                  app,
                  authProvider,
                  appCheckProvider,
                  url
                );
              },
              "PUBLIC" /* PUBLIC */
            ).setMultipleInstances(true)
          );
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
            name,
            version,
            variant
          );
          // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
            name,
            version,
            "esm2017"
          );
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const SERVER_TIMESTAMP = {
          ".sv": "timestamp",
        };
        /**
         * Returns a placeholder value for auto-populating the current timestamp (time
         * since the Unix epoch, in milliseconds) as determined by the Firebase
         * servers.
         */
        function serverTimestamp() {
          return SERVER_TIMESTAMP;
        }
        /**
         * Returns a placeholder value that can be used to atomically increment the
         * current database value by the provided delta.
         *
         * @param delta - the amount to modify the current value atomically.
         * @returns A placeholder value for modifying data atomically server-side.
         */
        function increment(delta) {
          return {
            ".sv": {
              increment: delta,
            },
          };
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A type for the resolve value of {@link runTransaction}.
         */
        class TransactionResult {
          /** @hideconstructor */
          constructor(
            /** Whether the transaction was successfully committed. */
            committed,
            /** The resulting data snapshot. */
            snapshot
          ) {
            this.committed = committed;
            this.snapshot = snapshot;
          }
          /** Returns a JSON-serializable representation of this object. */
          toJSON() {
            return {
              committed: this.committed,
              snapshot: this.snapshot.toJSON(),
            };
          }
        }
        /**
         * Atomically modifies the data at this location.
         *
         * Atomically modify the data at this location. Unlike a normal `set()`, which
         * just overwrites the data regardless of its previous value, `runTransaction()` is
         * used to modify the existing value to a new value, ensuring there are no
         * conflicts with other clients writing to the same location at the same time.
         *
         * To accomplish this, you pass `runTransaction()` an update function which is
         * used to transform the current value into a new value. If another client
         * writes to the location before your new value is successfully written, your
         * update function will be called again with the new current value, and the
         * write will be retried. This will happen repeatedly until your write succeeds
         * without conflict or you abort the transaction by not returning a value from
         * your update function.
         *
         * Note: Modifying data with `set()` will cancel any pending transactions at
         * that location, so extreme care should be taken if mixing `set()` and
         * `runTransaction()` to update the same data.
         *
         * Note: When using transactions with Security and Firebase Rules in place, be
         * aware that a client needs `.read` access in addition to `.write` access in
         * order to perform a transaction. This is because the client-side nature of
         * transactions requires the client to read the data in order to transactionally
         * update it.
         *
         * @param ref - The location to atomically modify.
         * @param transactionUpdate - A developer-supplied function which will be passed
         * the current data stored at this location (as a JavaScript object). The
         * function should return the new value it would like written (as a JavaScript
         * object). If `undefined` is returned (i.e. you return with no arguments) the
         * transaction will be aborted and the data at this location will not be
         * modified.
         * @param options - An options object to configure transactions.
         * @returns A `Promise` that can optionally be used instead of the `onComplete`
         * callback to handle success and failure.
         */
        function runTransaction(
          ref,
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          transactionUpdate,
          options
        ) {
          var _a;
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);
          validateWritablePath("Reference.transaction", ref._path);
          if (ref.key === ".length" || ref.key === ".keys") {
            throw (
              "Reference.transaction failed: " +
              ref.key +
              " is a read-only object."
            );
          }
          const applyLocally =
            (_a =
              options === null || options === void 0
                ? void 0
                : options.applyLocally) !== null && _a !== void 0
              ? _a
              : true;
          const deferred =
            new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();
          const promiseComplete = (error, committed, node) => {
            let dataSnapshot = null;
            if (error) {
              deferred.reject(error);
            } else {
              dataSnapshot = new DataSnapshot(
                node,
                new ReferenceImpl(ref._repo, ref._path),
                PRIORITY_INDEX
              );
              deferred.resolve(new TransactionResult(committed, dataSnapshot));
            }
          };
          // Add a watch to make sure we get server updates.
          const unwatcher = onValue(ref, () => { });
          repoStartTransaction(
            ref._repo,
            ref._path,
            transactionUpdate,
            promiseComplete,
            unwatcher,
            applyLocally
          );
          return deferred.promise;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        PersistentConnection;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        PersistentConnection.prototype.simpleListen = function (
          pathString,
          onComplete
        ) {
          this.sendRequest("q", { p: pathString }, onComplete);
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        PersistentConnection.prototype.echo = function (data, onEcho) {
          this.sendRequest("echo", { d: data }, onEcho);
        };
        // RealTimeConnection properties that we use in tests.
        Connection;
        /**
         * @internal
         */
        const hijackHash = function (newHash) {
          const oldPut = PersistentConnection.prototype.put;
          PersistentConnection.prototype.put = function (
            pathString,
            data,
            onComplete,
            hash
          ) {
            if (hash !== undefined) {
              hash = newHash();
            }
            oldPut.call(this, pathString, data, onComplete, hash);
          };
          return function () {
            PersistentConnection.prototype.put = oldPut;
          };
        };
        RepoInfo;
        /**
         * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
         * @internal
         */
        const forceRestClient = function (forceRestClient) {
          repoManagerForceRestClient(forceRestClient);
        };

        /**
         * Firebase Realtime Database
         *
         * @packageDocumentation
         */
        registerDatabase();

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/storage/dist/index.esm2017.js":
      /*!**************************************************************!*\
  !*** ./node_modules/@firebase/storage/dist/index.esm2017.js ***!
  \**************************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ StringFormat: () => /* binding */ StringFormat,
          /* harmony export */ _FbsBlob: () => /* binding */ FbsBlob,
          /* harmony export */ _Location: () => /* binding */ Location,
          /* harmony export */ _TaskEvent: () => /* binding */ TaskEvent,
          /* harmony export */ _TaskState: () => /* binding */ TaskState,
          /* harmony export */ _UploadTask: () => /* binding */ UploadTask,
          /* harmony export */ _dataFromString: () =>
            /* binding */ dataFromString,
          /* harmony export */ _getChild: () => /* binding */ _getChild,
          /* harmony export */ _invalidArgument: () =>
            /* binding */ invalidArgument,
          /* harmony export */ _invalidRootOperation: () =>
            /* binding */ invalidRootOperation,
          /* harmony export */ connectStorageEmulator: () =>
            /* binding */ connectStorageEmulator,
          /* harmony export */ deleteObject: () => /* binding */ deleteObject,
          /* harmony export */ getBlob: () => /* binding */ getBlob,
          /* harmony export */ getBytes: () => /* binding */ getBytes,
          /* harmony export */ getDownloadURL: () =>
            /* binding */ getDownloadURL,
          /* harmony export */ getMetadata: () => /* binding */ getMetadata,
          /* harmony export */ getStorage: () => /* binding */ getStorage,
          /* harmony export */ getStream: () => /* binding */ getStream,
          /* harmony export */ list: () => /* binding */ list,
          /* harmony export */ listAll: () => /* binding */ listAll,
          /* harmony export */ ref: () => /* binding */ ref,
          /* harmony export */ updateMetadata: () =>
            /* binding */ updateMetadata,
          /* harmony export */ uploadBytes: () => /* binding */ uploadBytes,
          /* harmony export */ uploadBytesResumable: () =>
            /* binding */ uploadBytesResumable,
          /* harmony export */ uploadString: () => /* binding */ uploadString,
          /* harmony export */
        });
        /* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );
        /* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js"
          );

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @fileoverview Constants used in the Firebase Storage library.
         */
        /**
         * Domain name for firebase storage.
         */
        const DEFAULT_HOST = "firebasestorage.googleapis.com";
        /**
         * The key in Firebase config json for the storage bucket.
         */
        const CONFIG_STORAGE_BUCKET_KEY = "storageBucket";
        /**
         * 2 minutes
         *
         * The timeout for all operations except upload.
         */
        const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
        /**
         * 10 minutes
         *
         * The timeout for upload.
         */
        const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;
        /**
         * 1 second
         */
        const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An error returned by the Firebase Storage SDK.
         * @public
         */
        class StorageError extends _firebase_util__WEBPACK_IMPORTED_MODULE_1__.FirebaseError {
          /**
           * @param code - A StorageErrorCode string to be prefixed with 'storage/' and
           *  added to the end of the message.
           * @param message  - Error message.
           * @param status_ - Corresponding HTTP Status Code
           */
          constructor(code, message, status_ = 0) {
            super(
              prependCode(code),
              `Firebase Storage: ${message} (${prependCode(code)})`
            );
            this.status_ = status_;
            /**
             * Stores custom error data unque to StorageError.
             */
            this.customData = { serverResponse: null };
            this._baseMessage = this.message;
            // Without this, `instanceof StorageError`, in tests for example,
            // returns false.
            Object.setPrototypeOf(this, StorageError.prototype);
          }
          get status() {
            return this.status_;
          }
          set status(status) {
            this.status_ = status;
          }
          /**
           * Compares a StorageErrorCode against this error's code, filtering out the prefix.
           */
          _codeEquals(code) {
            return prependCode(code) === this.code;
          }
          /**
           * Optional response message that was added by the server.
           */
          get serverResponse() {
            return this.customData.serverResponse;
          }
          set serverResponse(serverResponse) {
            this.customData.serverResponse = serverResponse;
            if (this.customData.serverResponse) {
              this.message = `${this._baseMessage}\n${this.customData.serverResponse}`;
            } else {
              this.message = this._baseMessage;
            }
          }
        }
        function prependCode(code) {
          return "storage/" + code;
        }
        function unknown() {
          const message =
            "An unknown error occurred, please check the error payload for " +
            "server response.";
          return new StorageError("unknown" /* UNKNOWN */, message);
        }
        function objectNotFound(path) {
          return new StorageError(
            "object-not-found" /* OBJECT_NOT_FOUND */,
            "Object '" + path + "' does not exist."
          );
        }
        function quotaExceeded(bucket) {
          return new StorageError(
            "quota-exceeded" /* QUOTA_EXCEEDED */,
            "Quota for bucket '" +
            bucket +
            "' exceeded, please view quota on " +
            "https://firebase.google.com/pricing/."
          );
        }
        function unauthenticated() {
          const message =
            "User is not authenticated, please authenticate using Firebase " +
            "Authentication and try again.";
          return new StorageError(
            "unauthenticated" /* UNAUTHENTICATED */,
            message
          );
        }
        function unauthorizedApp() {
          return new StorageError(
            "unauthorized-app" /* UNAUTHORIZED_APP */,
            "This app does not have permission to access Firebase Storage on this project."
          );
        }
        function unauthorized(path) {
          return new StorageError(
            "unauthorized" /* UNAUTHORIZED */,
            "User does not have permission to access '" + path + "'."
          );
        }
        function retryLimitExceeded() {
          return new StorageError(
            "retry-limit-exceeded" /* RETRY_LIMIT_EXCEEDED */,
            "Max retry time for operation exceeded, please try again."
          );
        }
        function canceled() {
          return new StorageError(
            "canceled" /* CANCELED */,
            "User canceled the upload/download."
          );
        }
        function invalidUrl(url) {
          return new StorageError(
            "invalid-url" /* INVALID_URL */,
            "Invalid URL '" + url + "'."
          );
        }
        function invalidDefaultBucket(bucket) {
          return new StorageError(
            "invalid-default-bucket" /* INVALID_DEFAULT_BUCKET */,
            "Invalid default bucket '" + bucket + "'."
          );
        }
        function noDefaultBucket() {
          return new StorageError(
            "no-default-bucket" /* NO_DEFAULT_BUCKET */,
            "No default bucket " +
            "found. Did you set the '" +
            CONFIG_STORAGE_BUCKET_KEY +
            "' property when initializing the app?"
          );
        }
        function cannotSliceBlob() {
          return new StorageError(
            "cannot-slice-blob" /* CANNOT_SLICE_BLOB */,
            "Cannot slice blob for upload. Please retry the upload."
          );
        }
        function serverFileWrongSize() {
          return new StorageError(
            "server-file-wrong-size" /* SERVER_FILE_WRONG_SIZE */,
            "Server recorded incorrect upload file size, please retry the upload."
          );
        }
        function noDownloadURL() {
          return new StorageError(
            "no-download-url" /* NO_DOWNLOAD_URL */,
            "The given file does not have any download URLs."
          );
        }
        function missingPolyFill(polyFill) {
          return new StorageError(
            "unsupported-environment" /* UNSUPPORTED_ENVIRONMENT */,
            `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`
          );
        }
        /**
         * @internal
         */
        function invalidArgument(message) {
          return new StorageError(
            "invalid-argument" /* INVALID_ARGUMENT */,
            message
          );
        }
        function appDeleted() {
          return new StorageError(
            "app-deleted" /* APP_DELETED */,
            "The Firebase app was deleted."
          );
        }
        /**
         * @param name - The name of the operation that was invalid.
         *
         * @internal
         */
        function invalidRootOperation(name) {
          return new StorageError(
            "invalid-root-operation" /* INVALID_ROOT_OPERATION */,
            "The operation '" +
            name +
            "' cannot be performed on a root reference, create a non-root " +
            "reference using child, such as .child('file.png')."
          );
        }
        /**
         * @param format - The format that was not valid.
         * @param message - A message describing the format violation.
         */
        function invalidFormat(format, message) {
          return new StorageError(
            "invalid-format" /* INVALID_FORMAT */,
            "String does not match format '" + format + "': " + message
          );
        }
        /**
         * @param message - A message describing the internal error.
         */
        function internalError(message) {
          throw new StorageError(
            "internal-error" /* INTERNAL_ERROR */,
            "Internal error: " + message
          );
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Firebase Storage location data.
         *
         * @internal
         */
        class Location {
          constructor(bucket, path) {
            this.bucket = bucket;
            this.path_ = path;
          }
          get path() {
            return this.path_;
          }
          get isRoot() {
            return this.path.length === 0;
          }
          fullServerUrl() {
            const encode = encodeURIComponent;
            return "/b/" + encode(this.bucket) + "/o/" + encode(this.path);
          }
          bucketOnlyServerUrl() {
            const encode = encodeURIComponent;
            return "/b/" + encode(this.bucket) + "/o";
          }
          static makeFromBucketSpec(bucketString, host) {
            let bucketLocation;
            try {
              bucketLocation = Location.makeFromUrl(bucketString, host);
            } catch (e) {
              // Not valid URL, use as-is. This lets you put bare bucket names in
              // config.
              return new Location(bucketString, "");
            }
            if (bucketLocation.path === "") {
              return bucketLocation;
            } else {
              throw invalidDefaultBucket(bucketString);
            }
          }
          static makeFromUrl(url, host) {
            let location = null;
            const bucketDomain = "([A-Za-z0-9.\\-_]+)";
            function gsModify(loc) {
              if (loc.path.charAt(loc.path.length - 1) === "/") {
                loc.path_ = loc.path_.slice(0, -1);
              }
            }
            const gsPath = "(/(.*))?$";
            const gsRegex = new RegExp("^gs://" + bucketDomain + gsPath, "i");
            const gsIndices = { bucket: 1, path: 3 };
            function httpModify(loc) {
              loc.path_ = decodeURIComponent(loc.path);
            }
            const version = "v[A-Za-z0-9_]+";
            const firebaseStorageHost = host.replace(/[.]/g, "\\.");
            const firebaseStoragePath = "(/([^?#]*).*)?$";
            const firebaseStorageRegExp = new RegExp(
              `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,
              "i"
            );
            const firebaseStorageIndices = { bucket: 1, path: 3 };
            const cloudStorageHost =
              host === DEFAULT_HOST
                ? "(?:storage.googleapis.com|storage.cloud.google.com)"
                : host;
            const cloudStoragePath = "([^?#]*)";
            const cloudStorageRegExp = new RegExp(
              `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,
              "i"
            );
            const cloudStorageIndices = { bucket: 1, path: 2 };
            const groups = [
              { regex: gsRegex, indices: gsIndices, postModify: gsModify },
              {
                regex: firebaseStorageRegExp,
                indices: firebaseStorageIndices,
                postModify: httpModify,
              },
              {
                regex: cloudStorageRegExp,
                indices: cloudStorageIndices,
                postModify: httpModify,
              },
            ];
            for (let i = 0; i < groups.length; i++) {
              const group = groups[i];
              const captures = group.regex.exec(url);
              if (captures) {
                const bucketValue = captures[group.indices.bucket];
                let pathValue = captures[group.indices.path];
                if (!pathValue) {
                  pathValue = "";
                }
                location = new Location(bucketValue, pathValue);
                group.postModify(location);
                break;
              }
            }
            if (location == null) {
              throw invalidUrl(url);
            }
            return location;
          }
        }

        /**
         * A request whose promise always fails.
         */
        class FailRequest {
          constructor(error) {
            this.promise_ = Promise.reject(error);
          }
          /** @inheritDoc */
          getPromise() {
            return this.promise_;
          }
          /** @inheritDoc */
          cancel(_appDelete = false) { }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Accepts a callback for an action to perform (`doRequest`),
         * and then a callback for when the backoff has completed (`backoffCompleteCb`).
         * The callback sent to start requires an argument to call (`onRequestComplete`).
         * When `start` calls `doRequest`, it passes a callback for when the request has
         * completed, `onRequestComplete`. Based on this, the backoff continues, with
         * another call to `doRequest` and the above loop continues until the timeout
         * is hit, or a successful response occurs.
         * @description
         * @param doRequest Callback to perform request
         * @param backoffCompleteCb Callback to call when backoff has been completed
         */
        function start(
          doRequest,
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          backoffCompleteCb,
          timeout
        ) {
          // TODO(andysoto): make this code cleaner (probably refactor into an actual
          // type instead of a bunch of functions with state shared in the closure)
          let waitSeconds = 1;
          // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
          // TODO: find a way to exclude Node type definition for storage because storage only works in browser
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          let retryTimeoutId = null;
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          let globalTimeoutId = null;
          let hitTimeout = false;
          let cancelState = 0;
          function canceled() {
            return cancelState === 2;
          }
          let triggeredCallback = false;
          function triggerCallback(...args) {
            if (!triggeredCallback) {
              triggeredCallback = true;
              backoffCompleteCb.apply(null, args);
            }
          }
          function callWithDelay(millis) {
            retryTimeoutId = setTimeout(() => {
              retryTimeoutId = null;
              doRequest(responseHandler, canceled());
            }, millis);
          }
          function clearGlobalTimeout() {
            if (globalTimeoutId) {
              clearTimeout(globalTimeoutId);
            }
          }
          function responseHandler(success, ...args) {
            if (triggeredCallback) {
              clearGlobalTimeout();
              return;
            }
            if (success) {
              clearGlobalTimeout();
              triggerCallback.call(null, success, ...args);
              return;
            }
            const mustStop = canceled() || hitTimeout;
            if (mustStop) {
              clearGlobalTimeout();
              triggerCallback.call(null, success, ...args);
              return;
            }
            if (waitSeconds < 64) {
              /* TODO(andysoto): don't back off so quickly if we know we're offline. */
              waitSeconds *= 2;
            }
            let waitMillis;
            if (cancelState === 1) {
              cancelState = 2;
              waitMillis = 0;
            } else {
              waitMillis = (waitSeconds + Math.random()) * 1000;
            }
            callWithDelay(waitMillis);
          }
          let stopped = false;
          function stop(wasTimeout) {
            if (stopped) {
              return;
            }
            stopped = true;
            clearGlobalTimeout();
            if (triggeredCallback) {
              return;
            }
            if (retryTimeoutId !== null) {
              if (!wasTimeout) {
                cancelState = 2;
              }
              clearTimeout(retryTimeoutId);
              callWithDelay(0);
            } else {
              if (!wasTimeout) {
                cancelState = 1;
              }
            }
          }
          callWithDelay(0);
          globalTimeoutId = setTimeout(() => {
            hitTimeout = true;
            stop(true);
          }, timeout);
          return stop;
        }
        /**
         * Stops the retry loop from repeating.
         * If the function is currently "in between" retries, it is invoked immediately
         * with the second parameter as "true". Otherwise, it will be invoked once more
         * after the current invocation finishes iff the current invocation would have
         * triggered another retry.
         */
        function stop(id) {
          id(false);
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function isJustDef(p) {
          return p !== void 0;
        }
        // eslint-disable-next-line @typescript-eslint/ban-types
        function isFunction(p) {
          return typeof p === "function";
        }
        function isNonArrayObject(p) {
          return typeof p === "object" && !Array.isArray(p);
        }
        function isString(p) {
          return typeof p === "string" || p instanceof String;
        }
        function isNativeBlob(p) {
          return isNativeBlobDefined() && p instanceof Blob;
        }
        function isNativeBlobDefined() {
          // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support
          // PR: https://github.com/node-fetch/node-fetch/pull/1664
          return (
            typeof Blob !== "undefined" &&
            !(0, _firebase_util__WEBPACK_IMPORTED_MODULE_1__.isNode)()
          );
        }
        function validateNumber(argument, minValue, maxValue, value) {
          if (value < minValue) {
            throw invalidArgument(
              `Invalid value for '${argument}'. Expected ${minValue} or greater.`
            );
          }
          if (value > maxValue) {
            throw invalidArgument(
              `Invalid value for '${argument}'. Expected ${maxValue} or less.`
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function makeUrl(urlPart, host, protocol) {
          let origin = host;
          if (protocol == null) {
            origin = `https://${host}`;
          }
          return `${protocol}://${origin}/v0${urlPart}`;
        }
        function makeQueryString(params) {
          const encode = encodeURIComponent;
          let queryPart = "?";
          for (const key in params) {
            if (params.hasOwnProperty(key)) {
              const nextPart = encode(key) + "=" + encode(params[key]);
              queryPart = queryPart + nextPart + "&";
            }
          }
          // Chop off the extra '&' or '?' on the end
          queryPart = queryPart.slice(0, -1);
          return queryPart;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Error codes for requests made by the the XhrIo wrapper.
         */
        var ErrorCode;
        (function (ErrorCode) {
          ErrorCode[(ErrorCode["NO_ERROR"] = 0)] = "NO_ERROR";
          ErrorCode[(ErrorCode["NETWORK_ERROR"] = 1)] = "NETWORK_ERROR";
          ErrorCode[(ErrorCode["ABORT"] = 2)] = "ABORT";
        })(ErrorCode || (ErrorCode = {}));

        /**
         * @license
         * Copyright 2022 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Checks the status code to see if the action should be retried.
         *
         * @param status Current HTTP status code returned by server.
         * @param additionalRetryCodes additional retry codes to check against
         */
        function isRetryStatusCode(status, additionalRetryCodes) {
          // The codes for which to retry came from this page:
          // https://cloud.google.com/storage/docs/exponential-backoff
          const isFiveHundredCode = status >= 500 && status < 600;
          const extraRetryCodes = [
            // Request Timeout: web server didn't receive full request in time.
            408,
            // Too Many Requests: you're getting rate-limited, basically.
            429,
          ];
          const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
          const isAdditionalRetryCode =
            additionalRetryCodes.indexOf(status) !== -1;
          return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Handles network logic for all Storage Requests, including error reporting and
         * retries with backoff.
         *
         * @param I - the type of the backend's network response.
         * @param - O the output type used by the rest of the SDK. The conversion
         * happens in the specified `callback_`.
         */
        class NetworkRequest {
          constructor(
            url_,
            method_,
            headers_,
            body_,
            successCodes_,
            additionalRetryCodes_,
            callback_,
            errorCallback_,
            timeout_,
            progressCallback_,
            connectionFactory_,
            retry = true
          ) {
            this.url_ = url_;
            this.method_ = method_;
            this.headers_ = headers_;
            this.body_ = body_;
            this.successCodes_ = successCodes_;
            this.additionalRetryCodes_ = additionalRetryCodes_;
            this.callback_ = callback_;
            this.errorCallback_ = errorCallback_;
            this.timeout_ = timeout_;
            this.progressCallback_ = progressCallback_;
            this.connectionFactory_ = connectionFactory_;
            this.retry = retry;
            this.pendingConnection_ = null;
            this.backoffId_ = null;
            this.canceled_ = false;
            this.appDelete_ = false;
            this.promise_ = new Promise((resolve, reject) => {
              this.resolve_ = resolve;
              this.reject_ = reject;
              this.start_();
            });
          }
          /**
           * Actually starts the retry loop.
           */
          start_() {
            const doTheRequest = (backoffCallback, canceled) => {
              if (canceled) {
                backoffCallback(false, new RequestEndStatus(false, null, true));
                return;
              }
              const connection = this.connectionFactory_();
              this.pendingConnection_ = connection;
              const progressListener = (progressEvent) => {
                const loaded = progressEvent.loaded;
                const total = progressEvent.lengthComputable
                  ? progressEvent.total
                  : -1;
                if (this.progressCallback_ !== null) {
                  this.progressCallback_(loaded, total);
                }
              };
              if (this.progressCallback_ !== null) {
                connection.addUploadProgressListener(progressListener);
              }
              // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              connection
                .send(this.url_, this.method_, this.body_, this.headers_)
                .then(() => {
                  if (this.progressCallback_ !== null) {
                    connection.removeUploadProgressListener(progressListener);
                  }
                  this.pendingConnection_ = null;
                  const hitServer =
                    connection.getErrorCode() === ErrorCode.NO_ERROR;
                  const status = connection.getStatus();
                  if (
                    (!hitServer ||
                      isRetryStatusCode(status, this.additionalRetryCodes_)) &&
                    this.retry
                  ) {
                    const wasCanceled =
                      connection.getErrorCode() === ErrorCode.ABORT;
                    backoffCallback(
                      false,
                      new RequestEndStatus(false, null, wasCanceled)
                    );
                    return;
                  }
                  const successCode = this.successCodes_.indexOf(status) !== -1;
                  backoffCallback(
                    true,
                    new RequestEndStatus(successCode, connection)
                  );
                });
            };
            /**
             * @param requestWentThrough - True if the request eventually went
             *     through, false if it hit the retry limit or was canceled.
             */
            const backoffDone = (requestWentThrough, status) => {
              const resolve = this.resolve_;
              const reject = this.reject_;
              const connection = status.connection;
              if (status.wasSuccessCode) {
                try {
                  const result = this.callback_(
                    connection,
                    connection.getResponse()
                  );
                  if (isJustDef(result)) {
                    resolve(result);
                  } else {
                    resolve();
                  }
                } catch (e) {
                  reject(e);
                }
              } else {
                if (connection !== null) {
                  const err = unknown();
                  err.serverResponse = connection.getErrorText();
                  if (this.errorCallback_) {
                    reject(this.errorCallback_(connection, err));
                  } else {
                    reject(err);
                  }
                } else {
                  if (status.canceled) {
                    const err = this.appDelete_ ? appDeleted() : canceled();
                    reject(err);
                  } else {
                    const err = retryLimitExceeded();
                    reject(err);
                  }
                }
              }
            };
            if (this.canceled_) {
              backoffDone(false, new RequestEndStatus(false, null, true));
            } else {
              this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
            }
          }
          /** @inheritDoc */
          getPromise() {
            return this.promise_;
          }
          /** @inheritDoc */
          cancel(appDelete) {
            this.canceled_ = true;
            this.appDelete_ = appDelete || false;
            if (this.backoffId_ !== null) {
              stop(this.backoffId_);
            }
            if (this.pendingConnection_ !== null) {
              this.pendingConnection_.abort();
            }
          }
        }
        /**
         * A collection of information about the result of a network request.
         * @param opt_canceled - Defaults to false.
         */
        class RequestEndStatus {
          constructor(wasSuccessCode, connection, canceled) {
            this.wasSuccessCode = wasSuccessCode;
            this.connection = connection;
            this.canceled = !!canceled;
          }
        }
        function addAuthHeader_(headers, authToken) {
          if (authToken !== null && authToken.length > 0) {
            headers["Authorization"] = "Firebase " + authToken;
          }
        }
        function addVersionHeader_(headers, firebaseVersion) {
          headers["X-Firebase-Storage-Version"] =
            "webjs/" +
            (firebaseVersion !== null && firebaseVersion !== void 0
              ? firebaseVersion
              : "AppManager");
        }
        function addGmpidHeader_(headers, appId) {
          if (appId) {
            headers["X-Firebase-GMPID"] = appId;
          }
        }
        function addAppCheckHeader_(headers, appCheckToken) {
          if (appCheckToken !== null) {
            headers["X-Firebase-AppCheck"] = appCheckToken;
          }
        }
        function makeRequest(
          requestInfo,
          appId,
          authToken,
          appCheckToken,
          requestFactory,
          firebaseVersion,
          retry = true
        ) {
          const queryPart = makeQueryString(requestInfo.urlParams);
          const url = requestInfo.url + queryPart;
          const headers = Object.assign({}, requestInfo.headers);
          addGmpidHeader_(headers, appId);
          addAuthHeader_(headers, authToken);
          addVersionHeader_(headers, firebaseVersion);
          addAppCheckHeader_(headers, appCheckToken);
          return new NetworkRequest(
            url,
            requestInfo.method,
            headers,
            requestInfo.body,
            requestInfo.successCodes,
            requestInfo.additionalRetryCodes,
            requestInfo.handler,
            requestInfo.errorHandler,
            requestInfo.timeout,
            requestInfo.progressCallback,
            requestFactory,
            retry
          );
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function getBlobBuilder() {
          if (typeof BlobBuilder !== "undefined") {
            return BlobBuilder;
          } else if (typeof WebKitBlobBuilder !== "undefined") {
            return WebKitBlobBuilder;
          } else {
            return undefined;
          }
        }
        /**
         * Concatenates one or more values together and converts them to a Blob.
         *
         * @param args The values that will make up the resulting blob.
         * @return The blob.
         */
        function getBlob$1(...args) {
          const BlobBuilder = getBlobBuilder();
          if (BlobBuilder !== undefined) {
            const bb = new BlobBuilder();
            for (let i = 0; i < args.length; i++) {
              bb.append(args[i]);
            }
            return bb.getBlob();
          } else {
            if (isNativeBlobDefined()) {
              return new Blob(args);
            } else {
              throw new StorageError(
                "unsupported-environment" /* UNSUPPORTED_ENVIRONMENT */,
                "This browser doesn't seem to support creating Blobs"
              );
            }
          }
        }
        /**
         * Slices the blob. The returned blob contains data from the start byte
         * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
         *
         * @param blob The blob to be sliced.
         * @param start Index of the starting byte.
         * @param end Index of the ending byte.
         * @return The blob slice or null if not supported.
         */
        function sliceBlob(blob, start, end) {
          if (blob.webkitSlice) {
            return blob.webkitSlice(start, end);
          } else if (blob.mozSlice) {
            return blob.mozSlice(start, end);
          } else if (blob.slice) {
            return blob.slice(start, end);
          }
          return null;
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /** Converts a Base64 encoded string to a binary string. */
        function decodeBase64(encoded) {
          if (typeof atob === "undefined") {
            throw missingPolyFill("base-64");
          }
          return atob(encoded);
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An enumeration of the possible string formats for upload.
         * @public
         */
        const StringFormat = {
          /**
           * Indicates the string should be interpreted "raw", that is, as normal text.
           * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
           * sequence.
           * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
           * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
           */
          RAW: "raw",
          /**
           * Indicates the string should be interpreted as base64-encoded data.
           * Padding characters (trailing '='s) are optional.
           * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
           * ad 69 8e fb e1 3a b7 bf eb 97
           */
          BASE64: "base64",
          /**
           * Indicates the string should be interpreted as base64url-encoded data.
           * Padding characters (trailing '='s) are optional.
           * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
           * ad 69 8e fb e1 3a b7 bf eb 97
           */
          BASE64URL: "base64url",
          /**
           * Indicates the string is a data URL, such as one obtained from
           * canvas.toDataURL().
           * Example: the string 'data:application/octet-stream;base64,aaaa'
           * becomes the byte sequence
           * 69 a6 9a
           * (the content-type "application/octet-stream" is also applied, but can
           * be overridden in the metadata object).
           */
          DATA_URL: "data_url",
        };
        class StringData {
          constructor(data, contentType) {
            this.data = data;
            this.contentType = contentType || null;
          }
        }
        /**
         * @internal
         */
        function dataFromString(format, stringData) {
          switch (format) {
            case StringFormat.RAW:
              return new StringData(utf8Bytes_(stringData));
            case StringFormat.BASE64:
            case StringFormat.BASE64URL:
              return new StringData(base64Bytes_(format, stringData));
            case StringFormat.DATA_URL:
              return new StringData(
                dataURLBytes_(stringData),
                dataURLContentType_(stringData)
              );
            // do nothing
          }
          // assert(false);
          throw unknown();
        }
        function utf8Bytes_(value) {
          const b = [];
          for (let i = 0; i < value.length; i++) {
            let c = value.charCodeAt(i);
            if (c <= 127) {
              b.push(c);
            } else {
              if (c <= 2047) {
                b.push(192 | (c >> 6), 128 | (c & 63));
              } else {
                if ((c & 64512) === 55296) {
                  // The start of a surrogate pair.
                  const valid =
                    i < value.length - 1 &&
                    (value.charCodeAt(i + 1) & 64512) === 56320;
                  if (!valid) {
                    // The second surrogate wasn't there.
                    b.push(239, 191, 189);
                  } else {
                    const hi = c;
                    const lo = value.charCodeAt(++i);
                    c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                    b.push(
                      240 | (c >> 18),
                      128 | ((c >> 12) & 63),
                      128 | ((c >> 6) & 63),
                      128 | (c & 63)
                    );
                  }
                } else {
                  if ((c & 64512) === 56320) {
                    // Invalid low surrogate.
                    b.push(239, 191, 189);
                  } else {
                    b.push(
                      224 | (c >> 12),
                      128 | ((c >> 6) & 63),
                      128 | (c & 63)
                    );
                  }
                }
              }
            }
          }
          return new Uint8Array(b);
        }
        function percentEncodedBytes_(value) {
          let decoded;
          try {
            decoded = decodeURIComponent(value);
          } catch (e) {
            throw invalidFormat(StringFormat.DATA_URL, "Malformed data URL.");
          }
          return utf8Bytes_(decoded);
        }
        function base64Bytes_(format, value) {
          switch (format) {
            case StringFormat.BASE64: {
              const hasMinus = value.indexOf("-") !== -1;
              const hasUnder = value.indexOf("_") !== -1;
              if (hasMinus || hasUnder) {
                const invalidChar = hasMinus ? "-" : "_";
                throw invalidFormat(
                  format,
                  "Invalid character '" +
                  invalidChar +
                  "' found: is it base64url encoded?"
                );
              }
              break;
            }
            case StringFormat.BASE64URL: {
              const hasPlus = value.indexOf("+") !== -1;
              const hasSlash = value.indexOf("/") !== -1;
              if (hasPlus || hasSlash) {
                const invalidChar = hasPlus ? "+" : "/";
                throw invalidFormat(
                  format,
                  "Invalid character '" +
                  invalidChar +
                  "' found: is it base64 encoded?"
                );
              }
              value = value.replace(/-/g, "+").replace(/_/g, "/");
              break;
            }
            // do nothing
          }
          let bytes;
          try {
            bytes = decodeBase64(value);
          } catch (e) {
            if (e.message.includes("polyfill")) {
              throw e;
            }
            throw invalidFormat(format, "Invalid character found");
          }
          const array = new Uint8Array(bytes.length);
          for (let i = 0; i < bytes.length; i++) {
            array[i] = bytes.charCodeAt(i);
          }
          return array;
        }
        class DataURLParts {
          constructor(dataURL) {
            this.base64 = false;
            this.contentType = null;
            const matches = dataURL.match(/^data:([^,]+)?,/);
            if (matches === null) {
              throw invalidFormat(
                StringFormat.DATA_URL,
                "Must be formatted 'data:[<mediatype>][;base64],<data>"
              );
            }
            const middle = matches[1] || null;
            if (middle != null) {
              this.base64 = endsWith(middle, ";base64");
              this.contentType = this.base64
                ? middle.substring(0, middle.length - ";base64".length)
                : middle;
            }
            this.rest = dataURL.substring(dataURL.indexOf(",") + 1);
          }
        }
        function dataURLBytes_(dataUrl) {
          const parts = new DataURLParts(dataUrl);
          if (parts.base64) {
            return base64Bytes_(StringFormat.BASE64, parts.rest);
          } else {
            return percentEncodedBytes_(parts.rest);
          }
        }
        function dataURLContentType_(dataUrl) {
          const parts = new DataURLParts(dataUrl);
          return parts.contentType;
        }
        function endsWith(s, end) {
          const longEnough = s.length >= end.length;
          if (!longEnough) {
            return false;
          }
          return s.substring(s.length - end.length) === end;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @param opt_elideCopy - If true, doesn't copy mutable input data
         *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
         *     modified after this blob's construction.
         *
         * @internal
         */
        class FbsBlob {
          constructor(data, elideCopy) {
            let size = 0;
            let blobType = "";
            if (isNativeBlob(data)) {
              this.data_ = data;
              size = data.size;
              blobType = data.type;
            } else if (data instanceof ArrayBuffer) {
              if (elideCopy) {
                this.data_ = new Uint8Array(data);
              } else {
                this.data_ = new Uint8Array(data.byteLength);
                this.data_.set(new Uint8Array(data));
              }
              size = this.data_.length;
            } else if (data instanceof Uint8Array) {
              if (elideCopy) {
                this.data_ = data;
              } else {
                this.data_ = new Uint8Array(data.length);
                this.data_.set(data);
              }
              size = data.length;
            }
            this.size_ = size;
            this.type_ = blobType;
          }
          size() {
            return this.size_;
          }
          type() {
            return this.type_;
          }
          slice(startByte, endByte) {
            if (isNativeBlob(this.data_)) {
              const realBlob = this.data_;
              const sliced = sliceBlob(realBlob, startByte, endByte);
              if (sliced === null) {
                return null;
              }
              return new FbsBlob(sliced);
            } else {
              const slice = new Uint8Array(
                this.data_.buffer,
                startByte,
                endByte - startByte
              );
              return new FbsBlob(slice, true);
            }
          }
          static getBlob(...args) {
            if (isNativeBlobDefined()) {
              const blobby = args.map((val) => {
                if (val instanceof FbsBlob) {
                  return val.data_;
                } else {
                  return val;
                }
              });
              return new FbsBlob(getBlob$1.apply(null, blobby));
            } else {
              const uint8Arrays = args.map((val) => {
                if (isString(val)) {
                  return dataFromString(StringFormat.RAW, val).data;
                } else {
                  // Blobs don't exist, so this has to be a Uint8Array.
                  return val.data_;
                }
              });
              let finalLength = 0;
              uint8Arrays.forEach((array) => {
                finalLength += array.byteLength;
              });
              const merged = new Uint8Array(finalLength);
              let index = 0;
              uint8Arrays.forEach((array) => {
                for (let i = 0; i < array.length; i++) {
                  merged[index++] = array[i];
                }
              });
              return new FbsBlob(merged, true);
            }
          }
          uploadData() {
            return this.data_;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns the Object resulting from parsing the given JSON, or null if the
         * given string does not represent a JSON object.
         */
        function jsonObjectOrNull(s) {
          let obj;
          try {
            obj = JSON.parse(s);
          } catch (e) {
            return null;
          }
          if (isNonArrayObject(obj)) {
            return obj;
          } else {
            return null;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @fileoverview Contains helper methods for manipulating paths.
         */
        /**
         * @return Null if the path is already at the root.
         */
        function parent(path) {
          if (path.length === 0) {
            return null;
          }
          const index = path.lastIndexOf("/");
          if (index === -1) {
            return "";
          }
          const newPath = path.slice(0, index);
          return newPath;
        }
        function child(path, childPath) {
          const canonicalChildPath = childPath
            .split("/")
            .filter((component) => component.length > 0)
            .join("/");
          if (path.length === 0) {
            return canonicalChildPath;
          } else {
            return path + "/" + canonicalChildPath;
          }
        }
        /**
         * Returns the last component of a path.
         * '/foo/bar' -> 'bar'
         * '/foo/bar/baz/' -> 'baz/'
         * '/a' -> 'a'
         */
        function lastComponent(path) {
          const index = path.lastIndexOf("/", path.length - 2);
          if (index === -1) {
            return path;
          } else {
            return path.slice(index + 1);
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function noXform_(metadata, value) {
          return value;
        }
        class Mapping {
          constructor(server, local, writable, xform) {
            this.server = server;
            this.local = local || server;
            this.writable = !!writable;
            this.xform = xform || noXform_;
          }
        }
        let mappings_ = null;
        function xformPath(fullPath) {
          if (!isString(fullPath) || fullPath.length < 2) {
            return fullPath;
          } else {
            return lastComponent(fullPath);
          }
        }
        function getMappings() {
          if (mappings_) {
            return mappings_;
          }
          const mappings = [];
          mappings.push(new Mapping("bucket"));
          mappings.push(new Mapping("generation"));
          mappings.push(new Mapping("metageneration"));
          mappings.push(new Mapping("name", "fullPath", true));
          function mappingsXformPath(_metadata, fullPath) {
            return xformPath(fullPath);
          }
          const nameMapping = new Mapping("name");
          nameMapping.xform = mappingsXformPath;
          mappings.push(nameMapping);
          /**
           * Coerces the second param to a number, if it is defined.
           */
          function xformSize(_metadata, size) {
            if (size !== undefined) {
              return Number(size);
            } else {
              return size;
            }
          }
          const sizeMapping = new Mapping("size");
          sizeMapping.xform = xformSize;
          mappings.push(sizeMapping);
          mappings.push(new Mapping("timeCreated"));
          mappings.push(new Mapping("updated"));
          mappings.push(new Mapping("md5Hash", null, true));
          mappings.push(new Mapping("cacheControl", null, true));
          mappings.push(new Mapping("contentDisposition", null, true));
          mappings.push(new Mapping("contentEncoding", null, true));
          mappings.push(new Mapping("contentLanguage", null, true));
          mappings.push(new Mapping("contentType", null, true));
          mappings.push(new Mapping("metadata", "customMetadata", true));
          mappings_ = mappings;
          return mappings_;
        }
        function addRef(metadata, service) {
          function generateRef() {
            const bucket = metadata["bucket"];
            const path = metadata["fullPath"];
            const loc = new Location(bucket, path);
            return service._makeStorageReference(loc);
          }
          Object.defineProperty(metadata, "ref", { get: generateRef });
        }
        function fromResource(service, resource, mappings) {
          const metadata = {};
          metadata["type"] = "file";
          const len = mappings.length;
          for (let i = 0; i < len; i++) {
            const mapping = mappings[i];
            metadata[mapping.local] = mapping.xform(
              metadata,
              resource[mapping.server]
            );
          }
          addRef(metadata, service);
          return metadata;
        }
        function fromResourceString(service, resourceString, mappings) {
          const obj = jsonObjectOrNull(resourceString);
          if (obj === null) {
            return null;
          }
          const resource = obj;
          return fromResource(service, resource, mappings);
        }
        function downloadUrlFromResourceString(
          metadata,
          resourceString,
          host,
          protocol
        ) {
          const obj = jsonObjectOrNull(resourceString);
          if (obj === null) {
            return null;
          }
          if (!isString(obj["downloadTokens"])) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return null;
          }
          const tokens = obj["downloadTokens"];
          if (tokens.length === 0) {
            return null;
          }
          const encode = encodeURIComponent;
          const tokensList = tokens.split(",");
          const urls = tokensList.map((token) => {
            const bucket = metadata["bucket"];
            const path = metadata["fullPath"];
            const urlPart = "/b/" + encode(bucket) + "/o/" + encode(path);
            const base = makeUrl(urlPart, host, protocol);
            const queryString = makeQueryString({
              alt: "media",
              token,
            });
            return base + queryString;
          });
          return urls[0];
        }
        function toResourceString(metadata, mappings) {
          const resource = {};
          const len = mappings.length;
          for (let i = 0; i < len; i++) {
            const mapping = mappings[i];
            if (mapping.writable) {
              resource[mapping.server] = metadata[mapping.local];
            }
          }
          return JSON.stringify(resource);
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const PREFIXES_KEY = "prefixes";
        const ITEMS_KEY = "items";
        function fromBackendResponse(service, bucket, resource) {
          const listResult = {
            prefixes: [],
            items: [],
            nextPageToken: resource["nextPageToken"],
          };
          if (resource[PREFIXES_KEY]) {
            for (const path of resource[PREFIXES_KEY]) {
              const pathWithoutTrailingSlash = path.replace(/\/$/, "");
              const reference = service._makeStorageReference(
                new Location(bucket, pathWithoutTrailingSlash)
              );
              listResult.prefixes.push(reference);
            }
          }
          if (resource[ITEMS_KEY]) {
            for (const item of resource[ITEMS_KEY]) {
              const reference = service._makeStorageReference(
                new Location(bucket, item["name"])
              );
              listResult.items.push(reference);
            }
          }
          return listResult;
        }
        function fromResponseString(service, bucket, resourceString) {
          const obj = jsonObjectOrNull(resourceString);
          if (obj === null) {
            return null;
          }
          const resource = obj;
          return fromBackendResponse(service, bucket, resource);
        }

        /**
         * Contains a fully specified request.
         *
         * @param I - the type of the backend's network response.
         * @param O - the output response type used by the rest of the SDK.
         */
        class RequestInfo {
          constructor(
            url,
            method,
            /**
             * Returns the value with which to resolve the request's promise. Only called
             * if the request is successful. Throw from this function to reject the
             * returned Request's promise with the thrown error.
             * Note: The XhrIo passed to this function may be reused after this callback
             * returns. Do not keep a reference to it in any way.
             */
            handler,
            timeout
          ) {
            this.url = url;
            this.method = method;
            this.handler = handler;
            this.timeout = timeout;
            this.urlParams = {};
            this.headers = {};
            this.body = null;
            this.errorHandler = null;
            /**
             * Called with the current number of bytes uploaded and total size (-1 if not
             * computable) of the request body (i.e. used to report upload progress).
             */
            this.progressCallback = null;
            this.successCodes = [200];
            this.additionalRetryCodes = [];
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Throws the UNKNOWN StorageError if cndn is false.
         */
        function handlerCheck(cndn) {
          if (!cndn) {
            throw unknown();
          }
        }
        function metadataHandler(service, mappings) {
          function handler(xhr, text) {
            const metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return metadata;
          }
          return handler;
        }
        function listHandler(service, bucket) {
          function handler(xhr, text) {
            const listResult = fromResponseString(service, bucket, text);
            handlerCheck(listResult !== null);
            return listResult;
          }
          return handler;
        }
        function downloadUrlHandler(service, mappings) {
          function handler(xhr, text) {
            const metadata = fromResourceString(service, text, mappings);
            handlerCheck(metadata !== null);
            return downloadUrlFromResourceString(
              metadata,
              text,
              service.host,
              service._protocol
            );
          }
          return handler;
        }
        function sharedErrorHandler(location) {
          function errorHandler(xhr, err) {
            let newErr;
            if (xhr.getStatus() === 401) {
              if (
                // This exact message string is the only consistent part of the
                // server's error response that identifies it as an App Check error.
                xhr
                  .getErrorText()
                  .includes("Firebase App Check token is invalid")
              ) {
                newErr = unauthorizedApp();
              } else {
                newErr = unauthenticated();
              }
            } else {
              if (xhr.getStatus() === 402) {
                newErr = quotaExceeded(location.bucket);
              } else {
                if (xhr.getStatus() === 403) {
                  newErr = unauthorized(location.path);
                } else {
                  newErr = err;
                }
              }
            }
            newErr.status = xhr.getStatus();
            newErr.serverResponse = err.serverResponse;
            return newErr;
          }
          return errorHandler;
        }
        function objectErrorHandler(location) {
          const shared = sharedErrorHandler(location);
          function errorHandler(xhr, err) {
            let newErr = shared(xhr, err);
            if (xhr.getStatus() === 404) {
              newErr = objectNotFound(location.path);
            }
            newErr.serverResponse = err.serverResponse;
            return newErr;
          }
          return errorHandler;
        }
        function getMetadata$2(service, location, mappings) {
          const urlPart = location.fullServerUrl();
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "GET";
          const timeout = service.maxOperationRetryTime;
          const requestInfo = new RequestInfo(
            url,
            method,
            metadataHandler(service, mappings),
            timeout
          );
          requestInfo.errorHandler = objectErrorHandler(location);
          return requestInfo;
        }
        function list$2(service, location, delimiter, pageToken, maxResults) {
          const urlParams = {};
          if (location.isRoot) {
            urlParams["prefix"] = "";
          } else {
            urlParams["prefix"] = location.path + "/";
          }
          if (delimiter && delimiter.length > 0) {
            urlParams["delimiter"] = delimiter;
          }
          if (pageToken) {
            urlParams["pageToken"] = pageToken;
          }
          if (maxResults) {
            urlParams["maxResults"] = maxResults;
          }
          const urlPart = location.bucketOnlyServerUrl();
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "GET";
          const timeout = service.maxOperationRetryTime;
          const requestInfo = new RequestInfo(
            url,
            method,
            listHandler(service, location.bucket),
            timeout
          );
          requestInfo.urlParams = urlParams;
          requestInfo.errorHandler = sharedErrorHandler(location);
          return requestInfo;
        }
        function getBytes$1(service, location, maxDownloadSizeBytes) {
          const urlPart = location.fullServerUrl();
          const url =
            makeUrl(urlPart, service.host, service._protocol) + "?alt=media";
          const method = "GET";
          const timeout = service.maxOperationRetryTime;
          const requestInfo = new RequestInfo(
            url,
            method,
            (_, data) => data,
            timeout
          );
          requestInfo.errorHandler = objectErrorHandler(location);
          if (maxDownloadSizeBytes !== undefined) {
            requestInfo.headers["Range"] = `bytes=0-${maxDownloadSizeBytes}`;
            requestInfo.successCodes = [
              200 /* OK */, 206 /* Partial Content */,
            ];
          }
          return requestInfo;
        }
        function getDownloadUrl(service, location, mappings) {
          const urlPart = location.fullServerUrl();
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "GET";
          const timeout = service.maxOperationRetryTime;
          const requestInfo = new RequestInfo(
            url,
            method,
            downloadUrlHandler(service, mappings),
            timeout
          );
          requestInfo.errorHandler = objectErrorHandler(location);
          return requestInfo;
        }
        function updateMetadata$2(service, location, metadata, mappings) {
          const urlPart = location.fullServerUrl();
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "PATCH";
          const body = toResourceString(metadata, mappings);
          const headers = { "Content-Type": "application/json; charset=utf-8" };
          const timeout = service.maxOperationRetryTime;
          const requestInfo = new RequestInfo(
            url,
            method,
            metadataHandler(service, mappings),
            timeout
          );
          requestInfo.headers = headers;
          requestInfo.body = body;
          requestInfo.errorHandler = objectErrorHandler(location);
          return requestInfo;
        }
        function deleteObject$2(service, location) {
          const urlPart = location.fullServerUrl();
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "DELETE";
          const timeout = service.maxOperationRetryTime;
          function handler(_xhr, _text) { }
          const requestInfo = new RequestInfo(url, method, handler, timeout);
          requestInfo.successCodes = [200, 204];
          requestInfo.errorHandler = objectErrorHandler(location);
          return requestInfo;
        }
        function determineContentType_(metadata, blob) {
          return (
            (metadata && metadata["contentType"]) ||
            (blob && blob.type()) ||
            "application/octet-stream"
          );
        }
        function metadataForUpload_(location, blob, metadata) {
          const metadataClone = Object.assign({}, metadata);
          metadataClone["fullPath"] = location.path;
          metadataClone["size"] = blob.size();
          if (!metadataClone["contentType"]) {
            metadataClone["contentType"] = determineContentType_(null, blob);
          }
          return metadataClone;
        }
        /**
         * Prepare RequestInfo for uploads as Content-Type: multipart.
         */
        function multipartUpload(service, location, mappings, blob, metadata) {
          const urlPart = location.bucketOnlyServerUrl();
          const headers = {
            "X-Goog-Upload-Protocol": "multipart",
          };
          function genBoundary() {
            let str = "";
            for (let i = 0; i < 2; i++) {
              str = str + Math.random().toString().slice(2);
            }
            return str;
          }
          const boundary = genBoundary();
          headers["Content-Type"] = "multipart/related; boundary=" + boundary;
          const metadata_ = metadataForUpload_(location, blob, metadata);
          const metadataString = toResourceString(metadata_, mappings);
          const preBlobPart =
            "--" +
            boundary +
            "\r\n" +
            "Content-Type: application/json; charset=utf-8\r\n\r\n" +
            metadataString +
            "\r\n--" +
            boundary +
            "\r\n" +
            "Content-Type: " +
            metadata_["contentType"] +
            "\r\n\r\n";
          const postBlobPart = "\r\n--" + boundary + "--";
          const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
          if (body === null) {
            throw cannotSliceBlob();
          }
          const urlParams = { name: metadata_["fullPath"] };
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "POST";
          const timeout = service.maxUploadRetryTime;
          const requestInfo = new RequestInfo(
            url,
            method,
            metadataHandler(service, mappings),
            timeout
          );
          requestInfo.urlParams = urlParams;
          requestInfo.headers = headers;
          requestInfo.body = body.uploadData();
          requestInfo.errorHandler = sharedErrorHandler(location);
          return requestInfo;
        }
        /**
         * @param current The number of bytes that have been uploaded so far.
         * @param total The total number of bytes in the upload.
         * @param opt_finalized True if the server has finished the upload.
         * @param opt_metadata The upload metadata, should
         *     only be passed if opt_finalized is true.
         */
        class ResumableUploadStatus {
          constructor(current, total, finalized, metadata) {
            this.current = current;
            this.total = total;
            this.finalized = !!finalized;
            this.metadata = metadata || null;
          }
        }
        function checkResumeHeader_(xhr, allowed) {
          let status = null;
          try {
            status = xhr.getResponseHeader("X-Goog-Upload-Status");
          } catch (e) {
            handlerCheck(false);
          }
          const allowedStatus = allowed || ["active"];
          handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
          return status;
        }
        function createResumableUpload(
          service,
          location,
          mappings,
          blob,
          metadata
        ) {
          const urlPart = location.bucketOnlyServerUrl();
          const metadataForUpload = metadataForUpload_(
            location,
            blob,
            metadata
          );
          const urlParams = { name: metadataForUpload["fullPath"] };
          const url = makeUrl(urlPart, service.host, service._protocol);
          const method = "POST";
          const headers = {
            "X-Goog-Upload-Protocol": "resumable",
            "X-Goog-Upload-Command": "start",
            "X-Goog-Upload-Header-Content-Length": `${blob.size()}`,
            "X-Goog-Upload-Header-Content-Type":
              metadataForUpload["contentType"],
            "Content-Type": "application/json; charset=utf-8",
          };
          const body = toResourceString(metadataForUpload, mappings);
          const timeout = service.maxUploadRetryTime;
          function handler(xhr) {
            checkResumeHeader_(xhr);
            let url;
            try {
              url = xhr.getResponseHeader("X-Goog-Upload-URL");
            } catch (e) {
              handlerCheck(false);
            }
            handlerCheck(isString(url));
            return url;
          }
          const requestInfo = new RequestInfo(url, method, handler, timeout);
          requestInfo.urlParams = urlParams;
          requestInfo.headers = headers;
          requestInfo.body = body;
          requestInfo.errorHandler = sharedErrorHandler(location);
          return requestInfo;
        }
        /**
         * @param url From a call to fbs.requests.createResumableUpload.
         */
        function getResumableUploadStatus(service, location, url, blob) {
          const headers = { "X-Goog-Upload-Command": "query" };
          function handler(xhr) {
            const status = checkResumeHeader_(xhr, ["active", "final"]);
            let sizeString = null;
            try {
              sizeString = xhr.getResponseHeader("X-Goog-Upload-Size-Received");
            } catch (e) {
              handlerCheck(false);
            }
            if (!sizeString) {
              // null or empty string
              handlerCheck(false);
            }
            const size = Number(sizeString);
            handlerCheck(!isNaN(size));
            return new ResumableUploadStatus(
              size,
              blob.size(),
              status === "final"
            );
          }
          const method = "POST";
          const timeout = service.maxUploadRetryTime;
          const requestInfo = new RequestInfo(url, method, handler, timeout);
          requestInfo.headers = headers;
          requestInfo.errorHandler = sharedErrorHandler(location);
          return requestInfo;
        }
        /**
         * Any uploads via the resumable upload API must transfer a number of bytes
         * that is a multiple of this number.
         */
        const RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;
        /**
         * @param url From a call to fbs.requests.createResumableUpload.
         * @param chunkSize Number of bytes to upload.
         * @param status The previous status.
         *     If not passed or null, we start from the beginning.
         * @throws fbs.Error If the upload is already complete, the passed in status
         *     has a final size inconsistent with the blob, or the blob cannot be sliced
         *     for upload.
         */
        function continueResumableUpload(
          location,
          service,
          url,
          blob,
          chunkSize,
          mappings,
          status,
          progressCallback
        ) {
          // TODO(andysoto): standardize on internal asserts
          // assert(!(opt_status && opt_status.finalized));
          const status_ = new ResumableUploadStatus(0, 0);
          if (status) {
            status_.current = status.current;
            status_.total = status.total;
          } else {
            status_.current = 0;
            status_.total = blob.size();
          }
          if (blob.size() !== status_.total) {
            throw serverFileWrongSize();
          }
          const bytesLeft = status_.total - status_.current;
          let bytesToUpload = bytesLeft;
          if (chunkSize > 0) {
            bytesToUpload = Math.min(bytesToUpload, chunkSize);
          }
          const startByte = status_.current;
          const endByte = startByte + bytesToUpload;
          let uploadCommand = "";
          if (bytesToUpload === 0) {
            uploadCommand = "finalize";
          } else if (bytesLeft === bytesToUpload) {
            uploadCommand = "upload, finalize";
          } else {
            uploadCommand = "upload";
          }
          const headers = {
            "X-Goog-Upload-Command": uploadCommand,
            "X-Goog-Upload-Offset": `${status_.current}`,
          };
          const body = blob.slice(startByte, endByte);
          if (body === null) {
            throw cannotSliceBlob();
          }
          function handler(xhr, text) {
            // TODO(andysoto): Verify the MD5 of each uploaded range:
            // the 'x-range-md5' header comes back with status code 308 responses.
            // We'll only be able to bail out though, because you can't re-upload a
            // range that you previously uploaded.
            const uploadStatus = checkResumeHeader_(xhr, ["active", "final"]);
            const newCurrent = status_.current + bytesToUpload;
            const size = blob.size();
            let metadata;
            if (uploadStatus === "final") {
              metadata = metadataHandler(service, mappings)(xhr, text);
            } else {
              metadata = null;
            }
            return new ResumableUploadStatus(
              newCurrent,
              size,
              uploadStatus === "final",
              metadata
            );
          }
          const method = "POST";
          const timeout = service.maxUploadRetryTime;
          const requestInfo = new RequestInfo(url, method, handler, timeout);
          requestInfo.headers = headers;
          requestInfo.body = body.uploadData();
          requestInfo.progressCallback = progressCallback || null;
          requestInfo.errorHandler = sharedErrorHandler(location);
          return requestInfo;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * An event that is triggered on a task.
         * @internal
         */
        const TaskEvent = {
          /**
           * For this event,
           * <ul>
           *   <li>The `next` function is triggered on progress updates and when the
           *       task is paused/resumed with an `UploadTaskSnapshot` as the first
           *       argument.</li>
           *   <li>The `error` function is triggered if the upload is canceled or fails
           *       for another reason.</li>
           *   <li>The `complete` function is triggered if the upload completes
           *       successfully.</li>
           * </ul>
           */
          STATE_CHANGED: "state_changed",
        };
        // type keys = keyof TaskState
        /**
         * Represents the current state of a running upload.
         * @internal
         */
        const TaskState = {
          /** The task is currently transferring data. */
          RUNNING: "running",
          /** The task was paused by the user. */
          PAUSED: "paused",
          /** The task completed successfully. */
          SUCCESS: "success",
          /** The task was canceled. */
          CANCELED: "canceled",
          /** The task failed with an error. */
          ERROR: "error",
        };
        function taskStateFromInternalTaskState(state) {
          switch (state) {
            case "running" /* RUNNING */:
            case "pausing" /* PAUSING */:
            case "canceling" /* CANCELING */:
              return TaskState.RUNNING;
            case "paused" /* PAUSED */:
              return TaskState.PAUSED;
            case "success" /* SUCCESS */:
              return TaskState.SUCCESS;
            case "canceled" /* CANCELED */:
              return TaskState.CANCELED;
            case "error" /* ERROR */:
              return TaskState.ERROR;
            default:
              // TODO(andysoto): assert(false);
              return TaskState.ERROR;
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class Observer {
          constructor(nextOrObserver, error, complete) {
            const asFunctions =
              isFunction(nextOrObserver) || error != null || complete != null;
            if (asFunctions) {
              this.next = nextOrObserver;
              this.error =
                error !== null && error !== void 0 ? error : undefined;
              this.complete =
                complete !== null && complete !== void 0 ? complete : undefined;
            } else {
              const observer = nextOrObserver;
              this.next = observer.next;
              this.error = observer.error;
              this.complete = observer.complete;
            }
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns a function that invokes f with its arguments asynchronously as a
         * microtask, i.e. as soon as possible after the current script returns back
         * into browser code.
         */
        // eslint-disable-next-line @typescript-eslint/ban-types
        function async(f) {
          return (...argsToForward) => {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(() => f(...argsToForward));
          };
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /** An override for the text-based Connection. Used in tests. */
        let textFactoryOverride = null;
        /**
         * Network layer for browsers. We use this instead of goog.net.XhrIo because
         * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.
         */
        class XhrConnection {
          constructor() {
            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.initXhr();
            this.errorCode_ = ErrorCode.NO_ERROR;
            this.sendPromise_ = new Promise((resolve) => {
              this.xhr_.addEventListener("abort", () => {
                this.errorCode_ = ErrorCode.ABORT;
                resolve();
              });
              this.xhr_.addEventListener("error", () => {
                this.errorCode_ = ErrorCode.NETWORK_ERROR;
                resolve();
              });
              this.xhr_.addEventListener("load", () => {
                resolve();
              });
            });
          }
          send(url, method, body, headers) {
            if (this.sent_) {
              throw internalError("cannot .send() more than once");
            }
            this.sent_ = true;
            this.xhr_.open(method, url, true);
            if (headers !== undefined) {
              for (const key in headers) {
                if (headers.hasOwnProperty(key)) {
                  this.xhr_.setRequestHeader(key, headers[key].toString());
                }
              }
            }
            if (body !== undefined) {
              this.xhr_.send(body);
            } else {
              this.xhr_.send();
            }
            return this.sendPromise_;
          }
          getErrorCode() {
            if (!this.sent_) {
              throw internalError("cannot .getErrorCode() before sending");
            }
            return this.errorCode_;
          }
          getStatus() {
            if (!this.sent_) {
              throw internalError("cannot .getStatus() before sending");
            }
            try {
              return this.xhr_.status;
            } catch (e) {
              return -1;
            }
          }
          getResponse() {
            if (!this.sent_) {
              throw internalError("cannot .getResponse() before sending");
            }
            return this.xhr_.response;
          }
          getErrorText() {
            if (!this.sent_) {
              throw internalError("cannot .getErrorText() before sending");
            }
            return this.xhr_.statusText;
          }
          /** Aborts the request. */
          abort() {
            this.xhr_.abort();
          }
          getResponseHeader(header) {
            return this.xhr_.getResponseHeader(header);
          }
          addUploadProgressListener(listener) {
            if (this.xhr_.upload != null) {
              this.xhr_.upload.addEventListener("progress", listener);
            }
          }
          removeUploadProgressListener(listener) {
            if (this.xhr_.upload != null) {
              this.xhr_.upload.removeEventListener("progress", listener);
            }
          }
        }
        class XhrTextConnection extends XhrConnection {
          initXhr() {
            this.xhr_.responseType = "text";
          }
        }
        function newTextConnection() {
          return textFactoryOverride
            ? textFactoryOverride()
            : new XhrTextConnection();
        }
        class XhrBytesConnection extends XhrConnection {
          initXhr() {
            this.xhr_.responseType = "arraybuffer";
          }
        }
        function newBytesConnection() {
          return new XhrBytesConnection();
        }
        class XhrBlobConnection extends XhrConnection {
          initXhr() {
            this.xhr_.responseType = "blob";
          }
        }
        function newBlobConnection() {
          return new XhrBlobConnection();
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Represents a blob being uploaded. Can be used to pause/resume/cancel the
         * upload and manage callbacks for various events.
         * @internal
         */
        class UploadTask {
          /**
           * @param ref - The firebaseStorage.Reference object this task came
           *     from, untyped to avoid cyclic dependencies.
           * @param blob - The blob to upload.
           */
          constructor(ref, blob, metadata = null) {
            /**
             * Number of bytes transferred so far.
             */
            this._transferred = 0;
            this._needToFetchStatus = false;
            this._needToFetchMetadata = false;
            this._observers = [];
            this._error = undefined;
            this._uploadUrl = undefined;
            this._request = undefined;
            this._chunkMultiplier = 1;
            this._resolve = undefined;
            this._reject = undefined;
            this._ref = ref;
            this._blob = blob;
            this._metadata = metadata;
            this._mappings = getMappings();
            this._resumable = this._shouldDoResumable(this._blob);
            this._state = "running" /* RUNNING */;
            this._errorHandler = (error) => {
              this._request = undefined;
              this._chunkMultiplier = 1;
              if (error._codeEquals("canceled" /* CANCELED */)) {
                this._needToFetchStatus = true;
                this.completeTransitions_();
              } else {
                const backoffExpired = this.isExponentialBackoffExpired();
                if (isRetryStatusCode(error.status, [])) {
                  if (backoffExpired) {
                    error = retryLimitExceeded();
                  } else {
                    this.sleepTime = Math.max(
                      this.sleepTime * 2,
                      DEFAULT_MIN_SLEEP_TIME_MILLIS
                    );
                    this._needToFetchStatus = true;
                    this.completeTransitions_();
                    return;
                  }
                }
                this._error = error;
                this._transition("error" /* ERROR */);
              }
            };
            this._metadataErrorHandler = (error) => {
              this._request = undefined;
              if (error._codeEquals("canceled" /* CANCELED */)) {
                this.completeTransitions_();
              } else {
                this._error = error;
                this._transition("error" /* ERROR */);
              }
            };
            this.sleepTime = 0;
            this.maxSleepTime = this._ref.storage.maxUploadRetryTime;
            this._promise = new Promise((resolve, reject) => {
              this._resolve = resolve;
              this._reject = reject;
              this._start();
            });
            // Prevent uncaught rejections on the internal promise from bubbling out
            // to the top level with a dummy handler.
            this._promise.then(null, () => { });
          }
          isExponentialBackoffExpired() {
            return this.sleepTime > this.maxSleepTime;
          }
          _makeProgressCallback() {
            const sizeBefore = this._transferred;
            return (loaded) => this._updateProgress(sizeBefore + loaded);
          }
          _shouldDoResumable(blob) {
            return blob.size() > 256 * 1024;
          }
          _start() {
            if (this._state !== "running" /* RUNNING */) {
              // This can happen if someone pauses us in a resume callback, for example.
              return;
            }
            if (this._request !== undefined) {
              return;
            }
            if (this._resumable) {
              if (this._uploadUrl === undefined) {
                this._createResumable();
              } else {
                if (this._needToFetchStatus) {
                  this._fetchStatus();
                } else {
                  if (this._needToFetchMetadata) {
                    // Happens if we miss the metadata on upload completion.
                    this._fetchMetadata();
                  } else {
                    this.pendingTimeout = setTimeout(() => {
                      this.pendingTimeout = undefined;
                      this._continueUpload();
                    }, this.sleepTime);
                  }
                }
              }
            } else {
              this._oneShotUpload();
            }
          }
          _resolveToken(callback) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.all([
              this._ref.storage._getAuthToken(),
              this._ref.storage._getAppCheckToken(),
            ]).then(([authToken, appCheckToken]) => {
              switch (this._state) {
                case "running" /* RUNNING */:
                  callback(authToken, appCheckToken);
                  break;
                case "canceling" /* CANCELING */:
                  this._transition("canceled" /* CANCELED */);
                  break;
                case "pausing" /* PAUSING */:
                  this._transition("paused" /* PAUSED */);
                  break;
              }
            });
          }
          // TODO(andysoto): assert false
          _createResumable() {
            this._resolveToken((authToken, appCheckToken) => {
              const requestInfo = createResumableUpload(
                this._ref.storage,
                this._ref._location,
                this._mappings,
                this._blob,
                this._metadata
              );
              const createRequest = this._ref.storage._makeRequest(
                requestInfo,
                newTextConnection,
                authToken,
                appCheckToken
              );
              this._request = createRequest;
              createRequest.getPromise().then((url) => {
                this._request = undefined;
                this._uploadUrl = url;
                this._needToFetchStatus = false;
                this.completeTransitions_();
              }, this._errorHandler);
            });
          }
          _fetchStatus() {
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            const url = this._uploadUrl;
            this._resolveToken((authToken, appCheckToken) => {
              const requestInfo = getResumableUploadStatus(
                this._ref.storage,
                this._ref._location,
                url,
                this._blob
              );
              const statusRequest = this._ref.storage._makeRequest(
                requestInfo,
                newTextConnection,
                authToken,
                appCheckToken
              );
              this._request = statusRequest;
              statusRequest.getPromise().then((status) => {
                status = status;
                this._request = undefined;
                this._updateProgress(status.current);
                this._needToFetchStatus = false;
                if (status.finalized) {
                  this._needToFetchMetadata = true;
                }
                this.completeTransitions_();
              }, this._errorHandler);
            });
          }
          _continueUpload() {
            const chunkSize =
              RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
            const status = new ResumableUploadStatus(
              this._transferred,
              this._blob.size()
            );
            // TODO(andysoto): assert(this.uploadUrl_ !== null);
            const url = this._uploadUrl;
            this._resolveToken((authToken, appCheckToken) => {
              let requestInfo;
              try {
                requestInfo = continueResumableUpload(
                  this._ref._location,
                  this._ref.storage,
                  url,
                  this._blob,
                  chunkSize,
                  this._mappings,
                  status,
                  this._makeProgressCallback()
                );
              } catch (e) {
                this._error = e;
                this._transition("error" /* ERROR */);
                return;
              }
              const uploadRequest = this._ref.storage._makeRequest(
                requestInfo,
                newTextConnection,
                authToken,
                appCheckToken,
                /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.
              );
              this._request = uploadRequest;
              uploadRequest.getPromise().then((newStatus) => {
                this._increaseMultiplier();
                this._request = undefined;
                this._updateProgress(newStatus.current);
                if (newStatus.finalized) {
                  this._metadata = newStatus.metadata;
                  this._transition("success" /* SUCCESS */);
                } else {
                  this.completeTransitions_();
                }
              }, this._errorHandler);
            });
          }
          _increaseMultiplier() {
            const currentSize =
              RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
            // Max chunk size is 32M.
            if (currentSize * 2 < 32 * 1024 * 1024) {
              this._chunkMultiplier *= 2;
            }
          }
          _fetchMetadata() {
            this._resolveToken((authToken, appCheckToken) => {
              const requestInfo = getMetadata$2(
                this._ref.storage,
                this._ref._location,
                this._mappings
              );
              const metadataRequest = this._ref.storage._makeRequest(
                requestInfo,
                newTextConnection,
                authToken,
                appCheckToken
              );
              this._request = metadataRequest;
              metadataRequest.getPromise().then((metadata) => {
                this._request = undefined;
                this._metadata = metadata;
                this._transition("success" /* SUCCESS */);
              }, this._metadataErrorHandler);
            });
          }
          _oneShotUpload() {
            this._resolveToken((authToken, appCheckToken) => {
              const requestInfo = multipartUpload(
                this._ref.storage,
                this._ref._location,
                this._mappings,
                this._blob,
                this._metadata
              );
              const multipartRequest = this._ref.storage._makeRequest(
                requestInfo,
                newTextConnection,
                authToken,
                appCheckToken
              );
              this._request = multipartRequest;
              multipartRequest.getPromise().then((metadata) => {
                this._request = undefined;
                this._metadata = metadata;
                this._updateProgress(this._blob.size());
                this._transition("success" /* SUCCESS */);
              }, this._errorHandler);
            });
          }
          _updateProgress(transferred) {
            const old = this._transferred;
            this._transferred = transferred;
            // A progress update can make the "transferred" value smaller (e.g. a
            // partial upload not completed by server, after which the "transferred"
            // value may reset to the value at the beginning of the request).
            if (this._transferred !== old) {
              this._notifyObservers();
            }
          }
          _transition(state) {
            if (this._state === state) {
              return;
            }
            switch (state) {
              case "canceling" /* CANCELING */:
              case "pausing" /* PAUSING */:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING);
                this._state = state;
                if (this._request !== undefined) {
                  this._request.cancel();
                } else if (this.pendingTimeout) {
                  clearTimeout(this.pendingTimeout);
                  this.pendingTimeout = undefined;
                  this.completeTransitions_();
                }
                break;
              case "running" /* RUNNING */:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.PAUSING);
                const wasPaused = this._state === "paused"; /* PAUSED */
                this._state = state;
                if (wasPaused) {
                  this._notifyObservers();
                  this._start();
                }
                break;
              case "paused" /* PAUSED */:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSING);
                this._state = state;
                this._notifyObservers();
                break;
              case "canceled" /* CANCELED */:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._error = canceled();
                this._state = state;
                this._notifyObservers();
                break;
              case "error" /* ERROR */:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._state = state;
                this._notifyObservers();
                break;
              case "success" /* SUCCESS */:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._state = state;
                this._notifyObservers();
                break;
            }
          }
          completeTransitions_() {
            switch (this._state) {
              case "pausing" /* PAUSING */:
                this._transition("paused" /* PAUSED */);
                break;
              case "canceling" /* CANCELING */:
                this._transition("canceled" /* CANCELED */);
                break;
              case "running" /* RUNNING */:
                this._start();
                break;
            }
          }
          /**
           * A snapshot of the current task state.
           */
          get snapshot() {
            const externalState = taskStateFromInternalTaskState(this._state);
            return {
              bytesTransferred: this._transferred,
              totalBytes: this._blob.size(),
              state: externalState,
              metadata: this._metadata,
              task: this,
              ref: this._ref,
            };
          }
          /**
           * Adds a callback for an event.
           * @param type - The type of event to listen for.
           * @param nextOrObserver -
           *     The `next` function, which gets called for each item in
           *     the event stream, or an observer object with some or all of these three
           *     properties (`next`, `error`, `complete`).
           * @param error - A function that gets called with a `StorageError`
           *     if the event stream ends due to an error.
           * @param completed - A function that gets called if the
           *     event stream ends normally.
           * @returns
           *     If only the event argument is passed, returns a function you can use to
           *     add callbacks (see the examples above). If more than just the event
           *     argument is passed, returns a function you can call to unregister the
           *     callbacks.
           */
          on(type, nextOrObserver, error, completed) {
            // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.
            const observer = new Observer(
              nextOrObserver || undefined,
              error || undefined,
              completed || undefined
            );
            this._addObserver(observer);
            return () => {
              this._removeObserver(observer);
            };
          }
          /**
           * This object behaves like a Promise, and resolves with its snapshot data
           * when the upload completes.
           * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
           * @param onRejected - The rejection callback.
           */
          then(onFulfilled, onRejected) {
            // These casts are needed so that TypeScript can infer the types of the
            // resulting Promise.
            return this._promise.then(onFulfilled, onRejected);
          }
          /**
           * Equivalent to calling `then(null, onRejected)`.
           */
          catch(onRejected) {
            return this.then(null, onRejected);
          }
          /**
           * Adds the given observer.
           */
          _addObserver(observer) {
            this._observers.push(observer);
            this._notifyObserver(observer);
          }
          /**
           * Removes the given observer.
           */
          _removeObserver(observer) {
            const i = this._observers.indexOf(observer);
            if (i !== -1) {
              this._observers.splice(i, 1);
            }
          }
          _notifyObservers() {
            this._finishPromise();
            const observers = this._observers.slice();
            observers.forEach((observer) => {
              this._notifyObserver(observer);
            });
          }
          _finishPromise() {
            if (this._resolve !== undefined) {
              let triggered = true;
              switch (taskStateFromInternalTaskState(this._state)) {
                case TaskState.SUCCESS:
                  async(this._resolve.bind(null, this.snapshot))();
                  break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                  const toCall = this._reject;
                  async(toCall.bind(null, this._error))();
                  break;
                default:
                  triggered = false;
                  break;
              }
              if (triggered) {
                this._resolve = undefined;
                this._reject = undefined;
              }
            }
          }
          _notifyObserver(observer) {
            const externalState = taskStateFromInternalTaskState(this._state);
            switch (externalState) {
              case TaskState.RUNNING:
              case TaskState.PAUSED:
                if (observer.next) {
                  async(observer.next.bind(observer, this.snapshot))();
                }
                break;
              case TaskState.SUCCESS:
                if (observer.complete) {
                  async(observer.complete.bind(observer))();
                }
                break;
              case TaskState.CANCELED:
              case TaskState.ERROR:
                if (observer.error) {
                  async(observer.error.bind(observer, this._error))();
                }
                break;
              default:
                // TODO(andysoto): assert(false);
                if (observer.error) {
                  async(observer.error.bind(observer, this._error))();
                }
            }
          }
          /**
           * Resumes a paused task. Has no effect on a currently running or failed task.
           * @returns True if the operation took effect, false if ignored.
           */
          resume() {
            const valid =
              this._state === "paused" /* PAUSED */ ||
              this._state === "pausing"; /* PAUSING */
            if (valid) {
              this._transition("running" /* RUNNING */);
            }
            return valid;
          }
          /**
           * Pauses a currently running task. Has no effect on a paused or failed task.
           * @returns True if the operation took effect, false if ignored.
           */
          pause() {
            const valid = this._state === "running"; /* RUNNING */
            if (valid) {
              this._transition("pausing" /* PAUSING */);
            }
            return valid;
          }
          /**
           * Cancels a currently running or paused task. Has no effect on a complete or
           * failed task.
           * @returns True if the operation took effect, false if ignored.
           */
          cancel() {
            const valid =
              this._state === "running" /* RUNNING */ ||
              this._state === "pausing"; /* PAUSING */
            if (valid) {
              this._transition("canceling" /* CANCELING */);
            }
            return valid;
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Provides methods to interact with a bucket in the Firebase Storage service.
         * @internal
         * @param _location - An fbs.location, or the URL at
         *     which to base this object, in one of the following forms:
         *         gs://<bucket>/<object-path>
         *         http[s]://firebasestorage.googleapis.com/
         *                     <api-version>/b/<bucket>/o/<object-path>
         *     Any query or fragment strings will be ignored in the http[s]
         *     format. If no value is passed, the storage object will use a URL based on
         *     the project ID of the base firebase.App instance.
         */
        class Reference {
          constructor(_service, location) {
            this._service = _service;
            if (location instanceof Location) {
              this._location = location;
            } else {
              this._location = Location.makeFromUrl(location, _service.host);
            }
          }
          /**
           * Returns the URL for the bucket and path this object references,
           *     in the form gs://<bucket>/<object-path>
           * @override
           */
          toString() {
            return "gs://" + this._location.bucket + "/" + this._location.path;
          }
          _newRef(service, location) {
            return new Reference(service, location);
          }
          /**
           * A reference to the root of this object's bucket.
           */
          get root() {
            const location = new Location(this._location.bucket, "");
            return this._newRef(this._service, location);
          }
          /**
           * The name of the bucket containing this reference's object.
           */
          get bucket() {
            return this._location.bucket;
          }
          /**
           * The full path of this object.
           */
          get fullPath() {
            return this._location.path;
          }
          /**
           * The short name of this object, which is the last component of the full path.
           * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
           */
          get name() {
            return lastComponent(this._location.path);
          }
          /**
           * The `StorageService` instance this `StorageReference` is associated with.
           */
          get storage() {
            return this._service;
          }
          /**
           * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
           * this reference is the root.
           */
          get parent() {
            const newPath = parent(this._location.path);
            if (newPath === null) {
              return null;
            }
            const location = new Location(this._location.bucket, newPath);
            return new Reference(this._service, location);
          }
          /**
           * Utility function to throw an error in methods that do not accept a root reference.
           */
          _throwIfRoot(name) {
            if (this._location.path === "") {
              throw invalidRootOperation(name);
            }
          }
        }
        /**
         * Download the bytes at the object's location.
         * @returns A Promise containing the downloaded bytes.
         */
        function getBytesInternal(ref, maxDownloadSizeBytes) {
          ref._throwIfRoot("getBytes");
          const requestInfo = getBytes$1(
            ref.storage,
            ref._location,
            maxDownloadSizeBytes
          );
          return ref.storage
            .makeRequestWithTokens(requestInfo, newBytesConnection)
            .then((bytes) =>
              maxDownloadSizeBytes !== undefined
                ? // GCS may not honor the Range header for small files
                bytes.slice(0, maxDownloadSizeBytes)
                : bytes
            );
        }
        /**
         * Download the bytes at the object's location.
         * @returns A Promise containing the downloaded blob.
         */
        function getBlobInternal(ref, maxDownloadSizeBytes) {
          ref._throwIfRoot("getBlob");
          const requestInfo = getBytes$1(
            ref.storage,
            ref._location,
            maxDownloadSizeBytes
          );
          return ref.storage
            .makeRequestWithTokens(requestInfo, newBlobConnection)
            .then((blob) =>
              maxDownloadSizeBytes !== undefined
                ? // GCS may not honor the Range header for small files
                blob.slice(0, maxDownloadSizeBytes)
                : blob
            );
        }
        /**
         * Uploads data to this object's location.
         * The upload is not resumable.
         *
         * @param ref - StorageReference where data should be uploaded.
         * @param data - The data to upload.
         * @param metadata - Metadata for the newly uploaded data.
         * @returns A Promise containing an UploadResult
         */
        function uploadBytes$1(ref, data, metadata) {
          ref._throwIfRoot("uploadBytes");
          const requestInfo = multipartUpload(
            ref.storage,
            ref._location,
            getMappings(),
            new FbsBlob(data, true),
            metadata
          );
          return ref.storage
            .makeRequestWithTokens(requestInfo, newTextConnection)
            .then((finalMetadata) => {
              return {
                metadata: finalMetadata,
                ref,
              };
            });
        }
        /**
         * Uploads data to this object's location.
         * The upload can be paused and resumed, and exposes progress updates.
         * @public
         * @param ref - StorageReference where data should be uploaded.
         * @param data - The data to upload.
         * @param metadata - Metadata for the newly uploaded data.
         * @returns An UploadTask
         */
        function uploadBytesResumable$1(ref, data, metadata) {
          ref._throwIfRoot("uploadBytesResumable");
          return new UploadTask(ref, new FbsBlob(data), metadata);
        }
        /**
         * Uploads a string to this object's location.
         * The upload is not resumable.
         * @public
         * @param ref - StorageReference where string should be uploaded.
         * @param value - The string to upload.
         * @param format - The format of the string to upload.
         * @param metadata - Metadata for the newly uploaded string.
         * @returns A Promise containing an UploadResult
         */
        function uploadString$1(
          ref,
          value,
          format = StringFormat.RAW,
          metadata
        ) {
          ref._throwIfRoot("uploadString");
          const data = dataFromString(format, value);
          const metadataClone = Object.assign({}, metadata);
          if (
            metadataClone["contentType"] == null &&
            data.contentType != null
          ) {
            metadataClone["contentType"] = data.contentType;
          }
          return uploadBytes$1(ref, data.data, metadataClone);
        }
        /**
         * List all items (files) and prefixes (folders) under this storage reference.
         *
         * This is a helper method for calling list() repeatedly until there are
         * no more results. The default pagination size is 1000.
         *
         * Note: The results may not be consistent if objects are changed while this
         * operation is running.
         *
         * Warning: listAll may potentially consume too many resources if there are
         * too many results.
         * @public
         * @param ref - StorageReference to get list from.
         *
         * @returns A Promise that resolves with all the items and prefixes under
         *      the current storage reference. `prefixes` contains references to
         *      sub-directories and `items` contains references to objects in this
         *      folder. `nextPageToken` is never returned.
         */
        function listAll$1(ref) {
          const accumulator = {
            prefixes: [],
            items: [],
          };
          return listAllHelper(ref, accumulator).then(() => accumulator);
        }
        /**
         * Separated from listAll because async functions can't use "arguments".
         * @param ref
         * @param accumulator
         * @param pageToken
         */
        async function listAllHelper(ref, accumulator, pageToken) {
          const opt = {
            // maxResults is 1000 by default.
            pageToken,
          };
          const nextPage = await list$1(ref, opt);
          accumulator.prefixes.push(...nextPage.prefixes);
          accumulator.items.push(...nextPage.items);
          if (nextPage.nextPageToken != null) {
            await listAllHelper(ref, accumulator, nextPage.nextPageToken);
          }
        }
        /**
         * List items (files) and prefixes (folders) under this storage reference.
         *
         * List API is only available for Firebase Rules Version 2.
         *
         * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
         * delimited folder structure.
         * Refer to GCS's List API if you want to learn more.
         *
         * To adhere to Firebase Rules's Semantics, Firebase Storage does not
         * support objects whose paths end with "/" or contain two consecutive
         * "/"s. Firebase Storage List API will filter these unsupported objects.
         * list() may fail if there are too many unsupported objects in the bucket.
         * @public
         *
         * @param ref - StorageReference to get list from.
         * @param options - See ListOptions for details.
         * @returns A Promise that resolves with the items and prefixes.
         *      `prefixes` contains references to sub-folders and `items`
         *      contains references to objects in this folder. `nextPageToken`
         *      can be used to get the rest of the results.
         */
        function list$1(ref, options) {
          if (options != null) {
            if (typeof options.maxResults === "number") {
              validateNumber(
                "options.maxResults",
                /* minValue= */ 1,
                /* maxValue= */ 1000,
                options.maxResults
              );
            }
          }
          const op = options || {};
          const requestInfo = list$2(
            ref.storage,
            ref._location,
            /*delimiter= */ "/",
            op.pageToken,
            op.maxResults
          );
          return ref.storage.makeRequestWithTokens(
            requestInfo,
            newTextConnection
          );
        }
        /**
         * A `Promise` that resolves with the metadata for this object. If this
         * object doesn't exist or metadata cannot be retreived, the promise is
         * rejected.
         * @public
         * @param ref - StorageReference to get metadata from.
         */
        function getMetadata$1(ref) {
          ref._throwIfRoot("getMetadata");
          const requestInfo = getMetadata$2(
            ref.storage,
            ref._location,
            getMappings()
          );
          return ref.storage.makeRequestWithTokens(
            requestInfo,
            newTextConnection
          );
        }
        /**
         * Updates the metadata for this object.
         * @public
         * @param ref - StorageReference to update metadata for.
         * @param metadata - The new metadata for the object.
         *     Only values that have been explicitly set will be changed. Explicitly
         *     setting a value to null will remove the metadata.
         * @returns A `Promise` that resolves
         *     with the new metadata for this object.
         *     See `firebaseStorage.Reference.prototype.getMetadata`
         */
        function updateMetadata$1(ref, metadata) {
          ref._throwIfRoot("updateMetadata");
          const requestInfo = updateMetadata$2(
            ref.storage,
            ref._location,
            metadata,
            getMappings()
          );
          return ref.storage.makeRequestWithTokens(
            requestInfo,
            newTextConnection
          );
        }
        /**
         * Returns the download URL for the given Reference.
         * @public
         * @returns A `Promise` that resolves with the download
         *     URL for this object.
         */
        function getDownloadURL$1(ref) {
          ref._throwIfRoot("getDownloadURL");
          const requestInfo = getDownloadUrl(
            ref.storage,
            ref._location,
            getMappings()
          );
          return ref.storage
            .makeRequestWithTokens(requestInfo, newTextConnection)
            .then((url) => {
              if (url === null) {
                throw noDownloadURL();
              }
              return url;
            });
        }
        /**
         * Deletes the object at this location.
         * @public
         * @param ref - StorageReference for object to delete.
         * @returns A `Promise` that resolves if the deletion succeeds.
         */
        function deleteObject$1(ref) {
          ref._throwIfRoot("deleteObject");
          const requestInfo = deleteObject$2(ref.storage, ref._location);
          return ref.storage.makeRequestWithTokens(
            requestInfo,
            newTextConnection
          );
        }
        /**
         * Returns reference for object obtained by appending `childPath` to `ref`.
         *
         * @param ref - StorageReference to get child of.
         * @param childPath - Child path from provided ref.
         * @returns A reference to the object obtained by
         * appending childPath, removing any duplicate, beginning, or trailing
         * slashes.
         *
         */
        function _getChild$1(ref, childPath) {
          const newPath = child(ref._location.path, childPath);
          const location = new Location(ref._location.bucket, newPath);
          return new Reference(ref.storage, location);
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function isUrl(path) {
          return /^[A-Za-z]+:\/\//.test(path);
        }
        /**
         * Returns a firebaseStorage.Reference for the given url.
         */
        function refFromURL(service, url) {
          return new Reference(service, url);
        }
        /**
         * Returns a firebaseStorage.Reference for the given path in the default
         * bucket.
         */
        function refFromPath(ref, path) {
          if (ref instanceof FirebaseStorageImpl) {
            const service = ref;
            if (service._bucket == null) {
              throw noDefaultBucket();
            }
            const reference = new Reference(service, service._bucket);
            if (path != null) {
              return refFromPath(reference, path);
            } else {
              return reference;
            }
          } else {
            // ref is a Reference
            if (path !== undefined) {
              return _getChild$1(ref, path);
            } else {
              return ref;
            }
          }
        }
        function ref$1(serviceOrRef, pathOrUrl) {
          if (pathOrUrl && isUrl(pathOrUrl)) {
            if (serviceOrRef instanceof FirebaseStorageImpl) {
              return refFromURL(serviceOrRef, pathOrUrl);
            } else {
              throw invalidArgument(
                "To use ref(service, url), the first argument must be a Storage instance."
              );
            }
          } else {
            return refFromPath(serviceOrRef, pathOrUrl);
          }
        }
        function extractBucket(host, config) {
          const bucketString =
            config === null || config === void 0
              ? void 0
              : config[CONFIG_STORAGE_BUCKET_KEY];
          if (bucketString == null) {
            return null;
          }
          return Location.makeFromBucketSpec(bucketString, host);
        }
        function connectStorageEmulator$1(storage, host, port, options = {}) {
          storage.host = `${host}:${port}`;
          storage._protocol = "http";
          const { mockUserToken } = options;
          if (mockUserToken) {
            storage._overrideAuthToken =
              typeof mockUserToken === "string"
                ? mockUserToken
                : (0,
                  _firebase_util__WEBPACK_IMPORTED_MODULE_1__.createMockUserToken)(
                    mockUserToken,
                    storage.app.options.projectId
                  );
          }
        }
        /**
         * A service that provides Firebase Storage Reference instances.
         * @param opt_url - gs:// url to a custom Storage Bucket
         *
         * @internal
         */
        class FirebaseStorageImpl {
          constructor(
            /**
             * FirebaseApp associated with this StorageService instance.
             */
            app,
            _authProvider,
            /**
             * @internal
             */
            _appCheckProvider,
            /**
             * @internal
             */
            _url,
            _firebaseVersion
          ) {
            this.app = app;
            this._authProvider = _authProvider;
            this._appCheckProvider = _appCheckProvider;
            this._url = _url;
            this._firebaseVersion = _firebaseVersion;
            this._bucket = null;
            /**
             * This string can be in the formats:
             * - host
             * - host:port
             */
            this._host = DEFAULT_HOST;
            this._protocol = "https";
            this._appId = null;
            this._deleted = false;
            this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
            this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
            this._requests = new Set();
            if (_url != null) {
              this._bucket = Location.makeFromBucketSpec(_url, this._host);
            } else {
              this._bucket = extractBucket(this._host, this.app.options);
            }
          }
          /**
           * The host string for this service, in the form of `host` or
           * `host:port`.
           */
          get host() {
            return this._host;
          }
          set host(host) {
            this._host = host;
            if (this._url != null) {
              this._bucket = Location.makeFromBucketSpec(this._url, host);
            } else {
              this._bucket = extractBucket(host, this.app.options);
            }
          }
          /**
           * The maximum time to retry uploads in milliseconds.
           */
          get maxUploadRetryTime() {
            return this._maxUploadRetryTime;
          }
          set maxUploadRetryTime(time) {
            validateNumber(
              "time",
              /* minValue=*/ 0,
              /* maxValue= */ Number.POSITIVE_INFINITY,
              time
            );
            this._maxUploadRetryTime = time;
          }
          /**
           * The maximum time to retry operations other than uploads or downloads in
           * milliseconds.
           */
          get maxOperationRetryTime() {
            return this._maxOperationRetryTime;
          }
          set maxOperationRetryTime(time) {
            validateNumber(
              "time",
              /* minValue=*/ 0,
              /* maxValue= */ Number.POSITIVE_INFINITY,
              time
            );
            this._maxOperationRetryTime = time;
          }
          async _getAuthToken() {
            if (this._overrideAuthToken) {
              return this._overrideAuthToken;
            }
            const auth = this._authProvider.getImmediate({ optional: true });
            if (auth) {
              const tokenData = await auth.getToken();
              if (tokenData !== null) {
                return tokenData.accessToken;
              }
            }
            return null;
          }
          async _getAppCheckToken() {
            const appCheck = this._appCheckProvider.getImmediate({
              optional: true,
            });
            if (appCheck) {
              const result = await appCheck.getToken();
              // TODO: What do we want to do if there is an error getting the token?
              // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be
              // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use
              // the token (actual or dummy) to send requests.
              return result.token;
            }
            return null;
          }
          /**
           * Stop running requests and prevent more from being created.
           */
          _delete() {
            if (!this._deleted) {
              this._deleted = true;
              this._requests.forEach((request) => request.cancel());
              this._requests.clear();
            }
            return Promise.resolve();
          }
          /**
           * Returns a new firebaseStorage.Reference object referencing this StorageService
           * at the given Location.
           */
          _makeStorageReference(loc) {
            return new Reference(this, loc);
          }
          /**
           * @param requestInfo - HTTP RequestInfo object
           * @param authToken - Firebase auth token
           */
          _makeRequest(
            requestInfo,
            requestFactory,
            authToken,
            appCheckToken,
            retry = true
          ) {
            if (!this._deleted) {
              const request = makeRequest(
                requestInfo,
                this._appId,
                authToken,
                appCheckToken,
                requestFactory,
                this._firebaseVersion,
                retry
              );
              this._requests.add(request);
              // Request removes itself from set when complete.
              request.getPromise().then(
                () => this._requests.delete(request),
                () => this._requests.delete(request)
              );
              return request;
            } else {
              return new FailRequest(appDeleted());
            }
          }
          async makeRequestWithTokens(requestInfo, requestFactory) {
            const [authToken, appCheckToken] = await Promise.all([
              this._getAuthToken(),
              this._getAppCheckToken(),
            ]);
            return this._makeRequest(
              requestInfo,
              requestFactory,
              authToken,
              appCheckToken
            ).getPromise();
          }
        }

        const name = "@firebase/storage";
        const version = "0.9.14";

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Type constant for Firebase Storage.
         */
        const STORAGE_TYPE = "storage";

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Downloads the data at the object's location. Returns an error if the object
         * is not found.
         *
         * To use this functionality, you have to whitelist your app's origin in your
         * Cloud Storage bucket. See also
         * https://cloud.google.com/storage/docs/configuring-cors
         *
         * @public
         * @param ref - StorageReference where data should be downloaded.
         * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to
         * retrieve.
         * @returns A Promise containing the object's bytes
         */
        function getBytes(ref, maxDownloadSizeBytes) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return getBytesInternal(ref, maxDownloadSizeBytes);
        }
        /**
         * Uploads data to this object's location.
         * The upload is not resumable.
         * @public
         * @param ref - {@link StorageReference} where data should be uploaded.
         * @param data - The data to upload.
         * @param metadata - Metadata for the data to upload.
         * @returns A Promise containing an UploadResult
         */
        function uploadBytes(ref, data, metadata) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return uploadBytes$1(ref, data, metadata);
        }
        /**
         * Uploads a string to this object's location.
         * The upload is not resumable.
         * @public
         * @param ref - {@link StorageReference} where string should be uploaded.
         * @param value - The string to upload.
         * @param format - The format of the string to upload.
         * @param metadata - Metadata for the string to upload.
         * @returns A Promise containing an UploadResult
         */
        function uploadString(ref, value, format, metadata) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return uploadString$1(ref, value, format, metadata);
        }
        /**
         * Uploads data to this object's location.
         * The upload can be paused and resumed, and exposes progress updates.
         * @public
         * @param ref - {@link StorageReference} where data should be uploaded.
         * @param data - The data to upload.
         * @param metadata - Metadata for the data to upload.
         * @returns An UploadTask
         */
        function uploadBytesResumable(ref, data, metadata) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return uploadBytesResumable$1(ref, data, metadata);
        }
        /**
         * A `Promise` that resolves with the metadata for this object. If this
         * object doesn't exist or metadata cannot be retreived, the promise is
         * rejected.
         * @public
         * @param ref - {@link StorageReference} to get metadata from.
         */
        function getMetadata(ref) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return getMetadata$1(ref);
        }
        /**
         * Updates the metadata for this object.
         * @public
         * @param ref - {@link StorageReference} to update metadata for.
         * @param metadata - The new metadata for the object.
         *     Only values that have been explicitly set will be changed. Explicitly
         *     setting a value to null will remove the metadata.
         * @returns A `Promise` that resolves with the new metadata for this object.
         */
        function updateMetadata(ref, metadata) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return updateMetadata$1(ref, metadata);
        }
        /**
         * List items (files) and prefixes (folders) under this storage reference.
         *
         * List API is only available for Firebase Rules Version 2.
         *
         * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
         * delimited folder structure.
         * Refer to GCS's List API if you want to learn more.
         *
         * To adhere to Firebase Rules's Semantics, Firebase Storage does not
         * support objects whose paths end with "/" or contain two consecutive
         * "/"s. Firebase Storage List API will filter these unsupported objects.
         * list() may fail if there are too many unsupported objects in the bucket.
         * @public
         *
         * @param ref - {@link StorageReference} to get list from.
         * @param options - See {@link ListOptions} for details.
         * @returns A `Promise` that resolves with the items and prefixes.
         *      `prefixes` contains references to sub-folders and `items`
         *      contains references to objects in this folder. `nextPageToken`
         *      can be used to get the rest of the results.
         */
        function list(ref, options) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return list$1(ref, options);
        }
        /**
         * List all items (files) and prefixes (folders) under this storage reference.
         *
         * This is a helper method for calling list() repeatedly until there are
         * no more results. The default pagination size is 1000.
         *
         * Note: The results may not be consistent if objects are changed while this
         * operation is running.
         *
         * Warning: `listAll` may potentially consume too many resources if there are
         * too many results.
         * @public
         * @param ref - {@link StorageReference} to get list from.
         *
         * @returns A `Promise` that resolves with all the items and prefixes under
         *      the current storage reference. `prefixes` contains references to
         *      sub-directories and `items` contains references to objects in this
         *      folder. `nextPageToken` is never returned.
         */
        function listAll(ref) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return listAll$1(ref);
        }
        /**
         * Returns the download URL for the given {@link StorageReference}.
         * @public
         * @param ref - {@link StorageReference} to get the download URL for.
         * @returns A `Promise` that resolves with the download
         *     URL for this object.
         */
        function getDownloadURL(ref) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return getDownloadURL$1(ref);
        }
        /**
         * Deletes the object at this location.
         * @public
         * @param ref - {@link StorageReference} for object to delete.
         * @returns A `Promise` that resolves if the deletion succeeds.
         */
        function deleteObject(ref) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return deleteObject$1(ref);
        }
        function ref(serviceOrRef, pathOrUrl) {
          serviceOrRef = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(
              serviceOrRef
            );
          return ref$1(serviceOrRef, pathOrUrl);
        }
        /**
         * @internal
         */
        function _getChild(ref, childPath) {
          return _getChild$1(ref, childPath);
        }
        /**
         * Gets a {@link FirebaseStorage} instance for the given Firebase app.
         * @public
         * @param app - Firebase app to get {@link FirebaseStorage} instance for.
         * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.
         * If not passed, uses the app's default Storage Bucket.
         * @returns A {@link FirebaseStorage} instance.
         */
        function getStorage(
          app = (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)(),
          bucketUrl
        ) {
          app = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(app);
          const storageProvider = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              STORAGE_TYPE
            );
          const storageInstance = storageProvider.getImmediate({
            identifier: bucketUrl,
          });
          const emulator = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getDefaultEmulatorHostnameAndPort)(
              "storage"
            );
          if (emulator) {
            connectStorageEmulator(storageInstance, ...emulator);
          }
          return storageInstance;
        }
        /**
         * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.
         *
         * @param storage - The {@link FirebaseStorage} instance
         * @param host - The emulator host (ex: localhost)
         * @param port - The emulator port (ex: 5001)
         * @param options - Emulator options. `options.mockUserToken` is the mock auth
         * token to use for unit testing Security Rules.
         * @public
         */
        function connectStorageEmulator(storage, host, port, options = {}) {
          connectStorageEmulator$1(storage, host, port, options);
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Downloads the data at the object's location. Returns an error if the object
         * is not found.
         *
         * To use this functionality, you have to whitelist your app's origin in your
         * Cloud Storage bucket. See also
         * https://cloud.google.com/storage/docs/configuring-cors
         *
         * This API is not available in Node.
         *
         * @public
         * @param ref - StorageReference where data should be downloaded.
         * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to
         * retrieve.
         * @returns A Promise that resolves with a Blob containing the object's bytes
         */
        function getBlob(ref, maxDownloadSizeBytes) {
          ref = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(ref);
          return getBlobInternal(ref, maxDownloadSizeBytes);
        }
        /**
         * Downloads the data at the object's location. Raises an error event if the
         * object is not found.
         *
         * This API is only available in Node.
         *
         * @public
         * @param ref - StorageReference where data should be downloaded.
         * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to
         * retrieve.
         * @returns A stream with the object's data as bytes
         */
        function getStream(ref, maxDownloadSizeBytes) {
          throw new Error("getStream() is only supported by NodeJS builds");
        }

        /**
         * Cloud Storage for Firebase
         *
         * @packageDocumentation
         */
        function factory(container, { instanceIdentifier: url }) {
          const app = container.getProvider("app").getImmediate();
          const authProvider = container.getProvider("auth-internal");
          const appCheckProvider = container.getProvider("app-check-internal");
          return new FirebaseStorageImpl(
            app,
            authProvider,
            appCheckProvider,
            url,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION
          );
        }
        function registerStorage() {
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_2__.Component(
              STORAGE_TYPE,
              factory,
              "PUBLIC" /* PUBLIC */
            ).setMultipleInstances(true)
          );
          //RUNTIME_ENV will be replaced during the compilation to "node" for nodejs and an empty string for browser
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
            name,
            version,
            ""
          );
          // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
            name,
            version,
            "esm2017"
          );
        }
        registerStorage();

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/util/dist/index.esm2017.js":
      /*!***********************************************************!*\
  !*** ./node_modules/@firebase/util/dist/index.esm2017.js ***!
  \***********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ CONSTANTS: () => /* binding */ CONSTANTS,
          /* harmony export */ Deferred: () => /* binding */ Deferred,
          /* harmony export */ ErrorFactory: () => /* binding */ ErrorFactory,
          /* harmony export */ FirebaseError: () => /* binding */ FirebaseError,
          /* harmony export */ MAX_VALUE_MILLIS: () =>
            /* binding */ MAX_VALUE_MILLIS,
          /* harmony export */ RANDOM_FACTOR: () => /* binding */ RANDOM_FACTOR,
          /* harmony export */ Sha1: () => /* binding */ Sha1,
          /* harmony export */ areCookiesEnabled: () =>
            /* binding */ areCookiesEnabled,
          /* harmony export */ assert: () => /* binding */ assert,
          /* harmony export */ assertionError: () =>
            /* binding */ assertionError,
          /* harmony export */ async: () => /* binding */ async,
          /* harmony export */ base64: () => /* binding */ base64,
          /* harmony export */ base64Decode: () => /* binding */ base64Decode,
          /* harmony export */ base64Encode: () => /* binding */ base64Encode,
          /* harmony export */ base64urlEncodeWithoutPadding: () =>
            /* binding */ base64urlEncodeWithoutPadding,
          /* harmony export */ calculateBackoffMillis: () =>
            /* binding */ calculateBackoffMillis,
          /* harmony export */ contains: () => /* binding */ contains,
          /* harmony export */ createMockUserToken: () =>
            /* binding */ createMockUserToken,
          /* harmony export */ createSubscribe: () =>
            /* binding */ createSubscribe,
          /* harmony export */ decode: () => /* binding */ decode,
          /* harmony export */ deepCopy: () => /* binding */ deepCopy,
          /* harmony export */ deepEqual: () => /* binding */ deepEqual,
          /* harmony export */ deepExtend: () => /* binding */ deepExtend,
          /* harmony export */ errorPrefix: () => /* binding */ errorPrefix,
          /* harmony export */ extractQuerystring: () =>
            /* binding */ extractQuerystring,
          /* harmony export */ getDefaultAppConfig: () =>
            /* binding */ getDefaultAppConfig,
          /* harmony export */ getDefaultEmulatorHost: () =>
            /* binding */ getDefaultEmulatorHost,
          /* harmony export */ getDefaultEmulatorHostnameAndPort: () =>
            /* binding */ getDefaultEmulatorHostnameAndPort,
          /* harmony export */ getExperimentalSetting: () =>
            /* binding */ getExperimentalSetting,
          /* harmony export */ getGlobal: () => /* binding */ getGlobal,
          /* harmony export */ getModularInstance: () =>
            /* binding */ getModularInstance,
          /* harmony export */ getUA: () => /* binding */ getUA,
          /* harmony export */ isAdmin: () => /* binding */ isAdmin,
          /* harmony export */ isBrowser: () => /* binding */ isBrowser,
          /* harmony export */ isBrowserExtension: () =>
            /* binding */ isBrowserExtension,
          /* harmony export */ isElectron: () => /* binding */ isElectron,
          /* harmony export */ isEmpty: () => /* binding */ isEmpty,
          /* harmony export */ isIE: () => /* binding */ isIE,
          /* harmony export */ isIndexedDBAvailable: () =>
            /* binding */ isIndexedDBAvailable,
          /* harmony export */ isMobileCordova: () =>
            /* binding */ isMobileCordova,
          /* harmony export */ isNode: () => /* binding */ isNode,
          /* harmony export */ isNodeSdk: () => /* binding */ isNodeSdk,
          /* harmony export */ isReactNative: () => /* binding */ isReactNative,
          /* harmony export */ isSafari: () => /* binding */ isSafari,
          /* harmony export */ isUWP: () => /* binding */ isUWP,
          /* harmony export */ isValidFormat: () => /* binding */ isValidFormat,
          /* harmony export */ isValidTimestamp: () =>
            /* binding */ isValidTimestamp,
          /* harmony export */ issuedAtTime: () => /* binding */ issuedAtTime,
          /* harmony export */ jsonEval: () => /* binding */ jsonEval,
          /* harmony export */ map: () => /* binding */ map,
          /* harmony export */ ordinal: () => /* binding */ ordinal,
          /* harmony export */ promiseWithTimeout: () =>
            /* binding */ promiseWithTimeout,
          /* harmony export */ querystring: () => /* binding */ querystring,
          /* harmony export */ querystringDecode: () =>
            /* binding */ querystringDecode,
          /* harmony export */ safeGet: () => /* binding */ safeGet,
          /* harmony export */ stringLength: () => /* binding */ stringLength,
          /* harmony export */ stringToByteArray: () =>
            /* binding */ stringToByteArray,
          /* harmony export */ stringify: () => /* binding */ stringify,
          /* harmony export */ uuidv4: () => /* binding */ uuidv4,
          /* harmony export */ validateArgCount: () =>
            /* binding */ validateArgCount,
          /* harmony export */ validateCallback: () =>
            /* binding */ validateCallback,
          /* harmony export */ validateContextObject: () =>
            /* binding */ validateContextObject,
          /* harmony export */ validateIndexedDBOpenable: () =>
            /* binding */ validateIndexedDBOpenable,
          /* harmony export */ validateNamespace: () =>
            /* binding */ validateNamespace,
          /* harmony export */
        });
        /* provided dependency */ var process = __webpack_require__(
          /*! process/browser.js */ "./node_modules/process/browser.js"
        );
        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
         */
        const CONSTANTS = {
          /**
           * @define {boolean} Whether this is the client Node.js SDK.
           */
          NODE_CLIENT: false,
          /**
           * @define {boolean} Whether this is the Admin Node.js SDK.
           */
          NODE_ADMIN: false,
          /**
           * Firebase SDK Version
           */
          SDK_VERSION: "${JSCORE_VERSION}",
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Throws an error if the provided assertion is falsy
         */
        const assert = function (assertion, message) {
          if (!assertion) {
            throw assertionError(message);
          }
        };
        /**
         * Returns an Error object suitable for throwing.
         */
        const assertionError = function (message) {
          return new Error(
            "Firebase Database (" +
            CONSTANTS.SDK_VERSION +
            ") INTERNAL ASSERT FAILED: " +
            message
          );
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const stringToByteArray$1 = function (str) {
          // TODO(user): Use native implementations if/when available
          const out = [];
          let p = 0;
          for (let i = 0; i < str.length; i++) {
            let c = str.charCodeAt(i);
            if (c < 128) {
              out[p++] = c;
            } else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
            } else if (
              (c & 0xfc00) === 0xd800 &&
              i + 1 < str.length &&
              (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00
            ) {
              // Surrogate Pair
              c =
                0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
            } else {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
            }
          }
          return out;
        };
        /**
         * Turns an array of numbers into the string given by the concatenation of the
         * characters to which the numbers correspond.
         * @param bytes Array of numbers representing characters.
         * @return Stringification of the array.
         */
        const byteArrayToString = function (bytes) {
          // TODO(user): Use native implementations if/when available
          const out = [];
          let pos = 0,
            c = 0;
          while (pos < bytes.length) {
            const c1 = bytes[pos++];
            if (c1 < 128) {
              out[c++] = String.fromCharCode(c1);
            } else if (c1 > 191 && c1 < 224) {
              const c2 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            } else if (c1 > 239 && c1 < 365) {
              // Surrogate Pair
              const c2 = bytes[pos++];
              const c3 = bytes[pos++];
              const c4 = bytes[pos++];
              const u =
                (((c1 & 7) << 18) |
                  ((c2 & 63) << 12) |
                  ((c3 & 63) << 6) |
                  (c4 & 63)) -
                0x10000;
              out[c++] = String.fromCharCode(0xd800 + (u >> 10));
              out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            } else {
              const c2 = bytes[pos++];
              const c3 = bytes[pos++];
              out[c++] = String.fromCharCode(
                ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)
              );
            }
          }
          return out.join("");
        };
        // We define it as an object literal instead of a class because a class compiled down to es5 can't
        // be treeshaked. https://github.com/rollup/rollup/issues/1691
        // Static lookup maps, lazily populated by init_()
        const base64 = {
          /**
           * Maps bytes to characters.
           */
          byteToCharMap_: null,
          /**
           * Maps characters to bytes.
           */
          charToByteMap_: null,
          /**
           * Maps bytes to websafe characters.
           * @private
           */
          byteToCharMapWebSafe_: null,
          /**
           * Maps websafe characters to bytes.
           * @private
           */
          charToByteMapWebSafe_: null,
          /**
           * Our default alphabet, shared between
           * ENCODED_VALS and ENCODED_VALS_WEBSAFE
           */
          ENCODED_VALS_BASE:
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
            "abcdefghijklmnopqrstuvwxyz" +
            "0123456789",
          /**
           * Our default alphabet. Value 64 (=) is special; it means "nothing."
           */
          get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + "+/=";
          },
          /**
           * Our websafe alphabet.
           */
          get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + "-_.";
          },
          /**
           * Whether this browser supports the atob and btoa functions. This extension
           * started at Mozilla but is now implemented by many browsers. We use the
           * ASSUME_* variables to avoid pulling in the full useragent detection library
           * but still allowing the standard per-browser compilations.
           *
           */
          HAS_NATIVE_SUPPORT: typeof atob === "function",
          /**
           * Base64-encode an array of bytes.
           *
           * @param input An array of bytes (numbers with
           *     value in [0, 255]) to encode.
           * @param webSafe Boolean indicating we should use the
           *     alternative alphabet.
           * @return The base64 encoded string.
           */
          encodeByteArray(input, webSafe) {
            if (!Array.isArray(input)) {
              throw Error("encodeByteArray takes an array as a parameter");
            }
            this.init_();
            const byteToCharMap = webSafe
              ? this.byteToCharMapWebSafe_
              : this.byteToCharMap_;
            const output = [];
            for (let i = 0; i < input.length; i += 3) {
              const byte1 = input[i];
              const haveByte2 = i + 1 < input.length;
              const byte2 = haveByte2 ? input[i + 1] : 0;
              const haveByte3 = i + 2 < input.length;
              const byte3 = haveByte3 ? input[i + 2] : 0;
              const outByte1 = byte1 >> 2;
              const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
              let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
              let outByte4 = byte3 & 0x3f;
              if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                  outByte3 = 64;
                }
              }
              output.push(
                byteToCharMap[outByte1],
                byteToCharMap[outByte2],
                byteToCharMap[outByte3],
                byteToCharMap[outByte4]
              );
            }
            return output.join("");
          },
          /**
           * Base64-encode a string.
           *
           * @param input A string to encode.
           * @param webSafe If true, we should use the
           *     alternative alphabet.
           * @return The base64 encoded string.
           */
          encodeString(input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray$1(input), webSafe);
          },
          /**
           * Base64-decode a string.
           *
           * @param input to decode.
           * @param webSafe True if we should use the
           *     alternative alphabet.
           * @return string representing the decoded value.
           */
          decodeString(input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return atob(input);
            }
            return byteArrayToString(
              this.decodeStringToByteArray(input, webSafe)
            );
          },
          /**
           * Base64-decode a string.
           *
           * In base-64 decoding, groups of four characters are converted into three
           * bytes.  If the encoder did not apply padding, the input length may not
           * be a multiple of 4.
           *
           * In this case, the last group will have fewer than 4 characters, and
           * padding will be inferred.  If the group has one or two characters, it decodes
           * to one byte.  If the group has three characters, it decodes to two bytes.
           *
           * @param input Input to decode.
           * @param webSafe True if we should use the web-safe alphabet.
           * @return bytes representing the decoded value.
           */
          decodeStringToByteArray(input, webSafe) {
            this.init_();
            const charToByteMap = webSafe
              ? this.charToByteMapWebSafe_
              : this.charToByteMap_;
            const output = [];
            for (let i = 0; i < input.length;) {
              const byte1 = charToByteMap[input.charAt(i++)];
              const haveByte2 = i < input.length;
              const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
              ++i;
              const haveByte3 = i < input.length;
              const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              const haveByte4 = i < input.length;
              const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              if (
                byte1 == null ||
                byte2 == null ||
                byte3 == null ||
                byte4 == null
              ) {
                throw Error();
              }
              const outByte1 = (byte1 << 2) | (byte2 >> 4);
              output.push(outByte1);
              if (byte3 !== 64) {
                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 !== 64) {
                  const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                  output.push(outByte3);
                }
              }
            }
            return output;
          },
          /**
           * Lazy static initialization function. Called before
           * accessing any of the static map variables.
           * @private
           */
          init_() {
            if (!this.byteToCharMap_) {
              this.byteToCharMap_ = {};
              this.charToByteMap_ = {};
              this.byteToCharMapWebSafe_ = {};
              this.charToByteMapWebSafe_ = {};
              // We want quick mappings back and forth, so we precompute two maps.
              for (let i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] =
                  this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                  this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                  this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
              }
            }
          },
        };
        /**
         * URL-safe base64 encoding
         */
        const base64Encode = function (str) {
          const utf8Bytes = stringToByteArray$1(str);
          return base64.encodeByteArray(utf8Bytes, true);
        };
        /**
         * URL-safe base64 encoding (without "." padding in the end).
         * e.g. Used in JSON Web Token (JWT) parts.
         */
        const base64urlEncodeWithoutPadding = function (str) {
          // Use base64url encoding and remove padding in the end (dot characters).
          return base64Encode(str).replace(/\./g, "");
        };
        /**
         * URL-safe base64 decoding
         *
         * NOTE: DO NOT use the global atob() function - it does NOT support the
         * base64Url variant encoding.
         *
         * @param str To be decoded
         * @return Decoded result, if possible
         */
        const base64Decode = function (str) {
          try {
            return base64.decodeString(str, true);
          } catch (e) {
            console.error("base64Decode failed: ", e);
          }
          return null;
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Do a deep-copy of basic JavaScript Objects or Arrays.
         */
        function deepCopy(value) {
          return deepExtend(undefined, value);
        }
        /**
         * Copy properties from source to target (recursively allows extension
         * of Objects and Arrays).  Scalar values in the target are over-written.
         * If target is undefined, an object of the appropriate type will be created
         * (and returned).
         *
         * We recursively copy all child properties of plain Objects in the source- so
         * that namespace- like dictionaries are merged.
         *
         * Note that the target can be a function, in which case the properties in
         * the source Object are copied onto it as static properties of the Function.
         *
         * Note: we don't merge __proto__ to prevent prototype pollution
         */
        function deepExtend(target, source) {
          if (!(source instanceof Object)) {
            return source;
          }
          switch (source.constructor) {
            case Date:
              // Treat Dates like scalars; if the target date object had any child
              // properties - they will be lost!
              const dateValue = source;
              return new Date(dateValue.getTime());
            case Object:
              if (target === undefined) {
                target = {};
              }
              break;
            case Array:
              // Always copy the array source and overwrite the target.
              target = [];
              break;
            default:
              // Not a plain Object - treat it as a scalar.
              return source;
          }
          for (const prop in source) {
            // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
            if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
              continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
          }
          return target;
        }
        function isValidKey(key) {
          return key !== "__proto__";
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns navigator.userAgent string or '' if it's not defined.
         * @return user agent string
         */
        function getUA() {
          if (
            typeof navigator !== "undefined" &&
            typeof navigator["userAgent"] === "string"
          ) {
            return navigator["userAgent"];
          } else {
            return "";
          }
        }
        /**
         * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
         *
         * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
         * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
         * wait for a callback.
         */
        function isMobileCordova() {
          return (
            typeof window !== "undefined" &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())
          );
        }
        /**
         * Detect Node.js.
         *
         * @return true if Node.js environment is detected.
         */
        // Node detection logic from: https://github.com/iliakan/detect-node/
        function isNode() {
          try {
            return (
              Object.prototype.toString.call(__webpack_require__.g.process) ===
              "[object process]"
            );
          } catch (e) {
            return false;
          }
        }
        /**
         * Detect Browser Environment
         */
        function isBrowser() {
          return typeof self === "object" && self.self === self;
        }
        function isBrowserExtension() {
          const runtime =
            typeof chrome === "object"
              ? chrome.runtime
              : typeof browser === "object"
                ? browser.runtime
                : undefined;
          return typeof runtime === "object" && runtime.id !== undefined;
        }
        /**
         * Detect React Native.
         *
         * @return true if ReactNative environment is detected.
         */
        function isReactNative() {
          return (
            typeof navigator === "object" &&
            navigator["product"] === "ReactNative"
          );
        }
        /** Detects Electron apps. */
        function isElectron() {
          return getUA().indexOf("Electron/") >= 0;
        }
        /** Detects Internet Explorer. */
        function isIE() {
          const ua = getUA();
          return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
        }
        /** Detects Universal Windows Platform apps. */
        function isUWP() {
          return getUA().indexOf("MSAppHost/") >= 0;
        }
        /**
         * Detect whether the current SDK build is the Node version.
         *
         * @return true if it's the Node SDK build.
         */
        function isNodeSdk() {
          return (
            CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true
          );
        }
        /** Returns true if we are running in Safari. */
        function isSafari() {
          return (
            !isNode() &&
            navigator.userAgent.includes("Safari") &&
            !navigator.userAgent.includes("Chrome")
          );
        }
        /**
         * This method checks if indexedDB is supported by current browser/service worker context
         * @return true if indexedDB is supported by current browser/service worker context
         */
        function isIndexedDBAvailable() {
          return typeof indexedDB === "object";
        }
        /**
         * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
         * if errors occur during the database open operation.
         *
         * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
         * private browsing)
         */
        function validateIndexedDBOpenable() {
          return new Promise((resolve, reject) => {
            try {
              let preExist = true;
              const DB_CHECK_NAME =
                "validate-browser-context-for-indexeddb-analytics-module";
              const request = self.indexedDB.open(DB_CHECK_NAME);
              request.onsuccess = () => {
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) {
                  self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                }
                resolve(true);
              };
              request.onupgradeneeded = () => {
                preExist = false;
              };
              request.onerror = () => {
                var _a;
                reject(
                  ((_a = request.error) === null || _a === void 0
                    ? void 0
                    : _a.message) || ""
                );
              };
            } catch (error) {
              reject(error);
            }
          });
        }
        /**
         *
         * This method checks whether cookie is enabled within current browser
         * @return true if cookie is enabled within current browser
         */
        function areCookiesEnabled() {
          if (typeof navigator === "undefined" || !navigator.cookieEnabled) {
            return false;
          }
          return true;
        }
        /**
         * Polyfill for `globalThis` object.
         * @returns the `globalThis` object for the given environment.
         */
        function getGlobal() {
          if (typeof self !== "undefined") {
            return self;
          }
          if (typeof window !== "undefined") {
            return window;
          }
          if (typeof __webpack_require__.g !== "undefined") {
            return __webpack_require__.g;
          }
          throw new Error("Unable to locate global object.");
        }

        /**
         * @license
         * Copyright 2022 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
        /**
         * Attempt to read defaults from a JSON string provided to
         * process.env.__FIREBASE_DEFAULTS__ or a JSON file whose path is in
         * process.env.__FIREBASE_DEFAULTS_PATH__
         */
        const getDefaultsFromEnvVariable = () => {
          if (
            typeof process === "undefined" ||
            typeof process.env === "undefined"
          ) {
            return;
          }
          const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
          if (defaultsJsonString) {
            return JSON.parse(defaultsJsonString);
          }
        };
        const getDefaultsFromCookie = () => {
          if (typeof document === "undefined") {
            return;
          }
          let match;
          try {
            match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
          } catch (e) {
            // Some environments such as Angular Universal SSR have a
            // `document` object but error on accessing `document.cookie`.
            return;
          }
          const decoded = match && base64Decode(match[1]);
          return decoded && JSON.parse(decoded);
        };
        /**
         * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
         * (1) if such an object exists as a property of `globalThis`
         * (2) if such an object was provided on a shell environment variable
         * (3) if such an object exists in a cookie
         */
        const getDefaults = () => {
          try {
            return (
              getDefaultsFromGlobal() ||
              getDefaultsFromEnvVariable() ||
              getDefaultsFromCookie()
            );
          } catch (e) {
            /**
             * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
             * to any environment case we have not accounted for. Log to
             * info instead of swallowing so we can find these unknown cases
             * and add paths for them if needed.
             */
            console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
            return;
          }
        };
        /**
         * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
         * for the given product.
         * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
         * @public
         */
        const getDefaultEmulatorHost = (productName) => {
          var _a, _b;
          return (_b =
            (_a = getDefaults()) === null || _a === void 0
              ? void 0
              : _a.emulatorHosts) === null || _b === void 0
            ? void 0
            : _b[productName];
        };
        /**
         * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
         * for the given product.
         * @returns a pair of hostname and port like `["::1", 4000]` if available
         * @public
         */
        const getDefaultEmulatorHostnameAndPort = (productName) => {
          const host = getDefaultEmulatorHost(productName);
          if (!host) {
            return undefined;
          }
          const separatorIndex = host.lastIndexOf(":"); // Finding the last since IPv6 addr also has colons.
          if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
            throw new Error(
              `Invalid host ${host} with no separate hostname and port!`
            );
          }
          // eslint-disable-next-line no-restricted-globals
          const port = parseInt(host.substring(separatorIndex + 1), 10);
          if (host[0] === "[") {
            // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
            return [host.substring(1, separatorIndex - 1), port];
          } else {
            return [host.substring(0, separatorIndex), port];
          }
        };
        /**
         * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
         * @public
         */
        const getDefaultAppConfig = () => {
          var _a;
          return (_a = getDefaults()) === null || _a === void 0
            ? void 0
            : _a.config;
        };
        /**
         * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
         * prefixed by "_")
         * @public
         */
        const getExperimentalSetting = (name) => {
          var _a;
          return (_a = getDefaults()) === null || _a === void 0
            ? void 0
            : _a[`_${name}`];
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class Deferred {
          constructor() {
            this.reject = () => { };
            this.resolve = () => { };
            this.promise = new Promise((resolve, reject) => {
              this.resolve = resolve;
              this.reject = reject;
            });
          }
          /**
           * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
           * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
           * and returns a node-style callback which will resolve or reject the Deferred's promise.
           */
          wrapCallback(callback) {
            return (error, value) => {
              if (error) {
                this.reject(error);
              } else {
                this.resolve(value);
              }
              if (typeof callback === "function") {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(() => { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                  callback(error);
                } else {
                  callback(error, value);
                }
              }
            };
          }
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function createMockUserToken(token, projectId) {
          if (token.uid) {
            throw new Error(
              'The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.'
            );
          }
          // Unsecured JWTs use "none" as the algorithm.
          const header = {
            alg: "none",
            type: "JWT",
          };
          const project = projectId || "demo-project";
          const iat = token.iat || 0;
          const sub = token.sub || token.user_id;
          if (!sub) {
            throw new Error(
              "mockUserToken must contain 'sub' or 'user_id' field!"
            );
          }
          const payload = Object.assign(
            {
              // Set all required fields to decent defaults
              iss: `https://securetoken.google.com/${project}`,
              aud: project,
              iat,
              exp: iat + 3600,
              auth_time: iat,
              sub,
              user_id: sub,
              firebase: {
                sign_in_provider: "custom",
                identities: {},
              },
            },
            token
          );
          // Unsecured JWTs use the empty string as a signature.
          const signature = "";
          return [
            base64urlEncodeWithoutPadding(JSON.stringify(header)),
            base64urlEncodeWithoutPadding(JSON.stringify(payload)),
            signature,
          ].join(".");
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @fileoverview Standardized Firebase Error.
         *
         * Usage:
         *
         *   // Typescript string literals for type-safe codes
         *   type Err =
         *     'unknown' |
         *     'object-not-found'
         *     ;
         *
         *   // Closure enum for type-safe error codes
         *   // at-enum {string}
         *   var Err = {
         *     UNKNOWN: 'unknown',
         *     OBJECT_NOT_FOUND: 'object-not-found',
         *   }
         *
         *   let errors: Map<Err, string> = {
         *     'generic-error': "Unknown error",
         *     'file-not-found': "Could not find file: {$file}",
         *   };
         *
         *   // Type-safe function - must pass a valid error code as param.
         *   let error = new ErrorFactory<Err>('service', 'Service', errors);
         *
         *   ...
         *   throw error.create(Err.GENERIC);
         *   ...
         *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
         *   ...
         *   // Service: Could not file file: foo.txt (service/file-not-found).
         *
         *   catch (e) {
         *     assert(e.message === "Could not find file: foo.txt.");
         *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
         *       console.log("Could not read file: " + e['file']);
         *     }
         *   }
         */
        const ERROR_NAME = "FirebaseError";
        // Based on code from:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
        class FirebaseError extends Error {
          constructor(
            /** The error code for this error. */
            code,
            message,
            /** Custom data for this error. */
            customData
          ) {
            super(message);
            this.code = code;
            this.customData = customData;
            /** The custom name for all FirebaseErrors. */
            this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, ErrorFactory.prototype.create);
            }
          }
        }
        class ErrorFactory {
          constructor(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
          }
          create(code, ...data) {
            const customData = data[0] || {};
            const fullCode = `${this.service}/${code}`;
            const template = this.errors[code];
            const message = template
              ? replaceTemplate(template, customData)
              : "Error";
            // Service Name: Error message (service/code).
            const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
            const error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
          }
        }
        function replaceTemplate(template, data) {
          return template.replace(PATTERN, (_, key) => {
            const value = data[key];
            return value != null ? String(value) : `<${key}?>`;
          });
        }
        const PATTERN = /\{\$([^}]+)}/g;

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Evaluates a JSON string into a javascript object.
         *
         * @param {string} str A string containing JSON.
         * @return {*} The javascript object representing the specified JSON.
         */
        function jsonEval(str) {
          return JSON.parse(str);
        }
        /**
         * Returns JSON representing a javascript object.
         * @param {*} data Javascript object to be stringified.
         * @return {string} The JSON contents of the object.
         */
        function stringify(data) {
          return JSON.stringify(data);
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Decodes a Firebase auth. token into constituent parts.
         *
         * Notes:
         * - May return with invalid / incomplete claims if there's no native base64 decoding support.
         * - Doesn't check if the token is actually valid.
         */
        const decode = function (token) {
          let header = {},
            claims = {},
            data = {},
            signature = "";
          try {
            const parts = token.split(".");
            header = jsonEval(base64Decode(parts[0]) || "");
            claims = jsonEval(base64Decode(parts[1]) || "");
            signature = parts[2];
            data = claims["d"] || {};
            delete claims["d"];
          } catch (e) { }
          return {
            header,
            claims,
            data,
            signature,
          };
        };
        /**
         * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
         * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
         *
         * Notes:
         * - May return a false negative if there's no native base64 decoding support.
         * - Doesn't check if the token is actually valid.
         */
        const isValidTimestamp = function (token) {
          const claims = decode(token).claims;
          const now = Math.floor(new Date().getTime() / 1000);
          let validSince = 0,
            validUntil = 0;
          if (typeof claims === "object") {
            if (claims.hasOwnProperty("nbf")) {
              validSince = claims["nbf"];
            } else if (claims.hasOwnProperty("iat")) {
              validSince = claims["iat"];
            }
            if (claims.hasOwnProperty("exp")) {
              validUntil = claims["exp"];
            } else {
              // token will expire after 24h by default
              validUntil = validSince + 86400;
            }
          }
          return (
            !!now &&
            !!validSince &&
            !!validUntil &&
            now >= validSince &&
            now <= validUntil
          );
        };
        /**
         * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
         *
         * Notes:
         * - May return null if there's no native base64 decoding support.
         * - Doesn't check if the token is actually valid.
         */
        const issuedAtTime = function (token) {
          const claims = decode(token).claims;
          if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
            return claims["iat"];
          }
          return null;
        };
        /**
         * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
         *
         * Notes:
         * - May return a false negative if there's no native base64 decoding support.
         * - Doesn't check if the token is actually valid.
         */
        const isValidFormat = function (token) {
          const decoded = decode(token),
            claims = decoded.claims;
          return (
            !!claims &&
            typeof claims === "object" &&
            claims.hasOwnProperty("iat")
          );
        };
        /**
         * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
         *
         * Notes:
         * - May return a false negative if there's no native base64 decoding support.
         * - Doesn't check if the token is actually valid.
         */
        const isAdmin = function (token) {
          const claims = decode(token).claims;
          return typeof claims === "object" && claims["admin"] === true;
        };

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function contains(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
        function safeGet(obj, key) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return obj[key];
          } else {
            return undefined;
          }
        }
        function isEmpty(obj) {
          for (const key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              return false;
            }
          }
          return true;
        }
        function map(obj, fn, contextObj) {
          const res = {};
          for (const key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              res[key] = fn.call(contextObj, obj[key], key, obj);
            }
          }
          return res;
        }
        /**
         * Deep equal two objects. Support Arrays and Objects.
         */
        function deepEqual(a, b) {
          if (a === b) {
            return true;
          }
          const aKeys = Object.keys(a);
          const bKeys = Object.keys(b);
          for (const k of aKeys) {
            if (!bKeys.includes(k)) {
              return false;
            }
            const aProp = a[k];
            const bProp = b[k];
            if (isObject(aProp) && isObject(bProp)) {
              if (!deepEqual(aProp, bProp)) {
                return false;
              }
            } else if (aProp !== bProp) {
              return false;
            }
          }
          for (const k of bKeys) {
            if (!aKeys.includes(k)) {
              return false;
            }
          }
          return true;
        }
        function isObject(thing) {
          return thing !== null && typeof thing === "object";
        }

        /**
         * @license
         * Copyright 2022 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Rejects if the given promise doesn't resolve in timeInMS milliseconds.
         * @internal
         */
        function promiseWithTimeout(promise, timeInMS = 2000) {
          const deferredPromise = new Deferred();
          setTimeout(() => deferredPromise.reject("timeout!"), timeInMS);
          promise.then(deferredPromise.resolve, deferredPromise.reject);
          return deferredPromise.promise;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
         * params object (e.g. {arg: 'val', arg2: 'val2'})
         * Note: You must prepend it with ? when adding it to a URL.
         */
        function querystring(querystringParams) {
          const params = [];
          for (const [key, value] of Object.entries(querystringParams)) {
            if (Array.isArray(value)) {
              value.forEach((arrayVal) => {
                params.push(
                  encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal)
                );
              });
            } else {
              params.push(
                encodeURIComponent(key) + "=" + encodeURIComponent(value)
              );
            }
          }
          return params.length ? "&" + params.join("&") : "";
        }
        /**
         * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
         * (e.g. {arg: 'val', arg2: 'val2'})
         */
        function querystringDecode(querystring) {
          const obj = {};
          const tokens = querystring.replace(/^\?/, "").split("&");
          tokens.forEach((token) => {
            if (token) {
              const [key, value] = token.split("=");
              obj[decodeURIComponent(key)] = decodeURIComponent(value);
            }
          });
          return obj;
        }
        /**
         * Extract the query string part of a URL, including the leading question mark (if present).
         */
        function extractQuerystring(url) {
          const queryStart = url.indexOf("?");
          if (!queryStart) {
            return "";
          }
          const fragmentStart = url.indexOf("#", queryStart);
          return url.substring(
            queryStart,
            fragmentStart > 0 ? fragmentStart : undefined
          );
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @fileoverview SHA-1 cryptographic hash.
         * Variable names follow the notation in FIPS PUB 180-3:
         * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
         *
         * Usage:
         *   var sha1 = new sha1();
         *   sha1.update(bytes);
         *   var hash = sha1.digest();
         *
         * Performance:
         *   Chrome 23:   ~400 Mbit/s
         *   Firefox 16:  ~250 Mbit/s
         *
         */
        /**
         * SHA-1 cryptographic hash constructor.
         *
         * The properties declared here are discussed in the above algorithm document.
         * @constructor
         * @final
         * @struct
         */
        class Sha1 {
          constructor() {
            /**
             * Holds the previous values of accumulated variables a-e in the compress_
             * function.
             * @private
             */
            this.chain_ = [];
            /**
             * A buffer holding the partially computed hash result.
             * @private
             */
            this.buf_ = [];
            /**
             * An array of 80 bytes, each a part of the message to be hashed.  Referred to
             * as the message schedule in the docs.
             * @private
             */
            this.W_ = [];
            /**
             * Contains data needed to pad messages less than 64 bytes.
             * @private
             */
            this.pad_ = [];
            /**
             * @private {number}
             */
            this.inbuf_ = 0;
            /**
             * @private {number}
             */
            this.total_ = 0;
            this.blockSize = 512 / 8;
            this.pad_[0] = 128;
            for (let i = 1; i < this.blockSize; ++i) {
              this.pad_[i] = 0;
            }
            this.reset();
          }
          reset() {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
          }
          /**
           * Internal compress helper function.
           * @param buf Block to compress.
           * @param offset Offset of the block in the buffer.
           * @private
           */
          compress_(buf, offset) {
            if (!offset) {
              offset = 0;
            }
            const W = this.W_;
            // get 16 big endian words
            if (typeof buf === "string") {
              for (let i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                  (buf.charCodeAt(offset) << 24) |
                  (buf.charCodeAt(offset + 1) << 16) |
                  (buf.charCodeAt(offset + 2) << 8) |
                  buf.charCodeAt(offset + 3);
                offset += 4;
              }
            } else {
              for (let i = 0; i < 16; i++) {
                W[i] =
                  (buf[offset] << 24) |
                  (buf[offset + 1] << 16) |
                  (buf[offset + 2] << 8) |
                  buf[offset + 3];
                offset += 4;
              }
            }
            // expand to 80 words
            for (let i = 16; i < 80; i++) {
              const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
            }
            let a = this.chain_[0];
            let b = this.chain_[1];
            let c = this.chain_[2];
            let d = this.chain_[3];
            let e = this.chain_[4];
            let f, k;
            // TODO(user): Try to unroll this loop to speed up the computation.
            for (let i = 0; i < 80; i++) {
              if (i < 40) {
                if (i < 20) {
                  f = d ^ (b & (c ^ d));
                  k = 0x5a827999;
                } else {
                  f = b ^ c ^ d;
                  k = 0x6ed9eba1;
                }
              } else {
                if (i < 60) {
                  f = (b & c) | (d & (b | c));
                  k = 0x8f1bbcdc;
                } else {
                  f = b ^ c ^ d;
                  k = 0xca62c1d6;
                }
              }
              const t =
                (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
              e = d;
              d = c;
              c = ((b << 30) | (b >>> 2)) & 0xffffffff;
              b = a;
              a = t;
            }
            this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
            this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
            this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
            this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
            this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
          }
          update(bytes, length) {
            // TODO(johnlenz): tighten the function signature and remove this check
            if (bytes == null) {
              return;
            }
            if (length === undefined) {
              length = bytes.length;
            }
            const lengthMinusBlock = length - this.blockSize;
            let n = 0;
            // Using local instead of member variables gives ~5% speedup on Firefox 16.
            const buf = this.buf_;
            let inbuf = this.inbuf_;
            // The outer while loop should execute at most twice.
            while (n < length) {
              // When we have no data in the block to top up, we can directly process the
              // input buffer (assuming it contains sufficient data). This gives ~25%
              // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
              // the data is provided in large chunks (or in multiples of 64 bytes).
              if (inbuf === 0) {
                while (n <= lengthMinusBlock) {
                  this.compress_(bytes, n);
                  n += this.blockSize;
                }
              }
              if (typeof bytes === "string") {
                while (n < length) {
                  buf[inbuf] = bytes.charCodeAt(n);
                  ++inbuf;
                  ++n;
                  if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    // Jump to the outer loop so we use the full-block optimization.
                    break;
                  }
                }
              } else {
                while (n < length) {
                  buf[inbuf] = bytes[n];
                  ++inbuf;
                  ++n;
                  if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    // Jump to the outer loop so we use the full-block optimization.
                    break;
                  }
                }
              }
            }
            this.inbuf_ = inbuf;
            this.total_ += length;
          }
          /** @override */
          digest() {
            const digest = [];
            let totalBits = this.total_ * 8;
            // Add pad 0x80 0x00*.
            if (this.inbuf_ < 56) {
              this.update(this.pad_, 56 - this.inbuf_);
            } else {
              this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }
            // Add # bits.
            for (let i = this.blockSize - 1; i >= 56; i--) {
              this.buf_[i] = totalBits & 255;
              totalBits /= 256; // Don't use bit-shifting here!
            }
            this.compress_(this.buf_);
            let n = 0;
            for (let i = 0; i < 5; i++) {
              for (let j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
              }
            }
            return digest;
          }
        }

        /**
         * Helper to make a Subscribe function (just like Promise helps make a
         * Thenable).
         *
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function createSubscribe(executor, onNoObservers) {
          const proxy = new ObserverProxy(executor, onNoObservers);
          return proxy.subscribe.bind(proxy);
        }
        /**
         * Implement fan-out for any number of Observers attached via a subscribe
         * function.
         */
        class ObserverProxy {
          /**
           * @param executor Function which can make calls to a single Observer
           *     as a proxy.
           * @param onNoObservers Callback when count of Observers goes to zero.
           */
          constructor(executor, onNoObservers) {
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
              .then(() => {
                executor(this);
              })
              .catch((e) => {
                this.error(e);
              });
          }
          next(value) {
            this.forEachObserver((observer) => {
              observer.next(value);
            });
          }
          error(error) {
            this.forEachObserver((observer) => {
              observer.error(error);
            });
            this.close(error);
          }
          complete() {
            this.forEachObserver((observer) => {
              observer.complete();
            });
            this.close();
          }
          /**
           * Subscribe function that can be used to add an Observer to the fan-out list.
           *
           * - We require that no event is sent to a subscriber sychronously to their
           *   call to subscribe().
           */
          subscribe(nextOrObserver, error, complete) {
            let observer;
            if (
              nextOrObserver === undefined &&
              error === undefined &&
              complete === undefined
            ) {
              throw new Error("Missing Observer.");
            }
            // Assemble an Observer object when passed as callback functions.
            if (
              implementsAnyMethods(nextOrObserver, [
                "next",
                "error",
                "complete",
              ])
            ) {
              observer = nextOrObserver;
            } else {
              observer = {
                next: nextOrObserver,
                error,
                complete,
              };
            }
            if (observer.next === undefined) {
              observer.next = noop;
            }
            if (observer.error === undefined) {
              observer.error = noop;
            }
            if (observer.complete === undefined) {
              observer.complete = noop;
            }
            const unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              this.task.then(() => {
                try {
                  if (this.finalError) {
                    observer.error(this.finalError);
                  } else {
                    observer.complete();
                  }
                } catch (e) {
                  // nothing
                }
                return;
              });
            }
            this.observers.push(observer);
            return unsub;
          }
          // Unsubscribe is synchronous - we guarantee that no events are sent to
          // any unsubscribed Observer.
          unsubscribeOne(i) {
            if (
              this.observers === undefined ||
              this.observers[i] === undefined
            ) {
              return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
              this.onNoObservers(this);
            }
          }
          forEachObserver(fn) {
            if (this.finalized) {
              // Already closed by previous event....just eat the additional values.
              return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (let i = 0; i < this.observers.length; i++) {
              this.sendOne(i, fn);
            }
          }
          // Call the Observer via one of it's callback function. We are careful to
          // confirm that the observe has not been unsubscribed since this asynchronous
          // function had been queued.
          sendOne(i, fn) {
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
              if (
                this.observers !== undefined &&
                this.observers[i] !== undefined
              ) {
                try {
                  fn(this.observers[i]);
                } catch (e) {
                  // Ignore exceptions raised in Observers or missing methods of an
                  // Observer.
                  // Log error to console. b/31404806
                  if (typeof console !== "undefined" && console.error) {
                    console.error(e);
                  }
                }
              }
            });
          }
          close(err) {
            if (this.finalized) {
              return;
            }
            this.finalized = true;
            if (err !== undefined) {
              this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
              this.observers = undefined;
              this.onNoObservers = undefined;
            });
          }
        }
        /** Turn synchronous function into one called asynchronously. */
        // eslint-disable-next-line @typescript-eslint/ban-types
        function async(fn, onError) {
          return (...args) => {
            Promise.resolve(true)
              .then(() => {
                fn(...args);
              })
              .catch((error) => {
                if (onError) {
                  onError(error);
                }
              });
          };
        }
        /**
         * Return true if the object passed in implements any of the named methods.
         */
        function implementsAnyMethods(obj, methods) {
          if (typeof obj !== "object" || obj === null) {
            return false;
          }
          for (const method of methods) {
            if (method in obj && typeof obj[method] === "function") {
              return true;
            }
          }
          return false;
        }
        function noop() {
          // do nothing
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Check to make sure the appropriate number of arguments are provided for a public function.
         * Throws an error if it fails.
         *
         * @param fnName The function name
         * @param minCount The minimum number of arguments to allow for the function call
         * @param maxCount The maximum number of argument to allow for the function call
         * @param argCount The actual number of arguments provided.
         */
        const validateArgCount = function (
          fnName,
          minCount,
          maxCount,
          argCount
        ) {
          let argError;
          if (argCount < minCount) {
            argError = "at least " + minCount;
          } else if (argCount > maxCount) {
            argError = maxCount === 0 ? "none" : "no more than " + maxCount;
          }
          if (argError) {
            const error =
              fnName +
              " failed: Was called with " +
              argCount +
              (argCount === 1 ? " argument." : " arguments.") +
              " Expects " +
              argError +
              ".";
            throw new Error(error);
          }
        };
        /**
         * Generates a string to prefix an error message about failed argument validation
         *
         * @param fnName The function name
         * @param argName The name of the argument
         * @return The prefix to add to the error thrown for validation.
         */
        function errorPrefix(fnName, argName) {
          return `${fnName} failed: ${argName} argument `;
        }
        /**
         * @param fnName
         * @param argumentNumber
         * @param namespace
         * @param optional
         */
        function validateNamespace(fnName, namespace, optional) {
          if (optional && !namespace) {
            return;
          }
          if (typeof namespace !== "string") {
            //TODO: I should do more validation here. We only allow certain chars in namespaces.
            throw new Error(
              errorPrefix(fnName, "namespace") +
              "must be a valid firebase namespace."
            );
          }
        }
        function validateCallback(
          fnName,
          argumentName,
          // eslint-disable-next-line @typescript-eslint/ban-types
          callback,
          optional
        ) {
          if (optional && !callback) {
            return;
          }
          if (typeof callback !== "function") {
            throw new Error(
              errorPrefix(fnName, argumentName) + "must be a valid function."
            );
          }
        }
        function validateContextObject(
          fnName,
          argumentName,
          context,
          optional
        ) {
          if (optional && !context) {
            return;
          }
          if (typeof context !== "object" || context === null) {
            throw new Error(
              errorPrefix(fnName, argumentName) +
              "must be a valid context object."
            );
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
        // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
        // so it's been modified.
        // Note that not all Unicode characters appear as single characters in JavaScript strings.
        // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
        // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
        // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
        // pair).
        // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
        /**
         * @param {string} str
         * @return {Array}
         */
        const stringToByteArray = function (str) {
          const out = [];
          let p = 0;
          for (let i = 0; i < str.length; i++) {
            let c = str.charCodeAt(i);
            // Is this the lead surrogate in a surrogate pair?
            if (c >= 0xd800 && c <= 0xdbff) {
              const high = c - 0xd800; // the high 10 bits.
              i++;
              assert(i < str.length, "Surrogate pair missing trail surrogate.");
              const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
              c = 0x10000 + (high << 10) + low;
            }
            if (c < 128) {
              out[p++] = c;
            } else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
            } else if (c < 65536) {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
            } else {
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
            }
          }
          return out;
        };
        /**
         * Calculate length without actually converting; useful for doing cheaper validation.
         * @param {string} str
         * @return {number}
         */
        const stringLength = function (str) {
          let p = 0;
          for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 128) {
              p++;
            } else if (c < 2048) {
              p += 2;
            } else if (c >= 0xd800 && c <= 0xdbff) {
              // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
              p += 4;
              i++; // skip trail surrogate.
            } else {
              p += 3;
            }
          }
          return p;
        };

        /**
         * @license
         * Copyright 2022 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Copied from https://stackoverflow.com/a/2117523
         * Generates a new uuid.
         * @public
         */
        const uuidv4 = function () {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
            /[xy]/g,
            (c) => {
              const r = (Math.random() * 16) | 0,
                v = c === "x" ? r : (r & 0x3) | 0x8;
              return v.toString(16);
            }
          );
        };

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The amount of milliseconds to exponentially increase.
         */
        const DEFAULT_INTERVAL_MILLIS = 1000;
        /**
         * The factor to backoff by.
         * Should be a number greater than 1.
         */
        const DEFAULT_BACKOFF_FACTOR = 2;
        /**
         * The maximum milliseconds to increase to.
         *
         * <p>Visible for testing
         */
        const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
        /**
         * The percentage of backoff time to randomize by.
         * See
         * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
         * for context.
         *
         * <p>Visible for testing
         */
        const RANDOM_FACTOR = 0.5;
        /**
         * Based on the backoff method from
         * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
         * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
         */
        function calculateBackoffMillis(
          backoffCount,
          intervalMillis = DEFAULT_INTERVAL_MILLIS,
          backoffFactor = DEFAULT_BACKOFF_FACTOR
        ) {
          // Calculates an exponentially increasing value.
          // Deviation: calculates value from count and a constant interval, so we only need to save value
          // and count to restore state.
          const currBaseValue =
            intervalMillis * Math.pow(backoffFactor, backoffCount);
          // A random "fuzz" to avoid waves of retries.
          // Deviation: randomFactor is required.
          const randomWait = Math.round(
            // A fraction of the backoff value to add/subtract.
            // Deviation: changes multiplication order to improve readability.
            RANDOM_FACTOR *
            currBaseValue *
            // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
            // if we add or subtract.
            (Math.random() - 0.5) *
            2
          );
          // Limits backoff to max to avoid effectively permanent backoff.
          return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Provide English ordinal letters after a number
         */
        function ordinal(i) {
          if (!Number.isFinite(i)) {
            return `${i}`;
          }
          return i + indicator(i);
        }
        function indicator(i) {
          i = Math.abs(i);
          const cent = i % 100;
          if (cent >= 10 && cent <= 20) {
            return "th";
          }
          const dec = i % 10;
          if (dec === 1) {
            return "st";
          }
          if (dec === 2) {
            return "nd";
          }
          if (dec === 3) {
            return "rd";
          }
          return "th";
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function getModularInstance(service) {
          if (service && service._delegate) {
            return service._delegate;
          } else {
            return service;
          }
        }

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./resources/js/app.js":
      /*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
        /* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");
        /* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! howler */ "./node_modules/howler/dist/howler.js"
          );
        /* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            howler__WEBPACK_IMPORTED_MODULE_1__
          );
        /* harmony import */ var push_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! push.js */ "./node_modules/push.js/bin/push.min.js"
          );
        /* harmony import */ var push_js__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            push_js__WEBPACK_IMPORTED_MODULE_2__
          );
        /* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! firebase/app */ "./node_modules/firebase/app/dist/index.esm.js"
          );
        /* harmony import */ var firebase_analytics__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! firebase/analytics */ "./node_modules/firebase/analytics/dist/index.esm.js"
          );
        /* harmony import */ var firebase_messaging__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! firebase/messaging */ "./node_modules/firebase/messaging/dist/index.esm.js"
          );
        /* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! firebase/database */ "./node_modules/firebase/database/dist/index.esm.js"
          );
        /* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! firebase/storage */ "./node_modules/firebase/storage/dist/index.esm.js"
          );
        // we skiped use strict mode due to global access

        var base_url = localStorage.getItem("base_url");
        var user_ip = getUserIp();
        var pusher_info = __webpack_require__("./assets/json/pusher.json");
        var auth_id = localStorage.getItem("auth_id");
        var auth_type = localStorage.getItem("auth_type");
        var chat_sound = localStorage.getItem("chat_sound");
        var browser_push = localStorage.getItem("browser_push");
        var sound_1 = new howler__WEBPACK_IMPORTED_MODULE_1__.Howl({
          src: [base_url + "/assets/media/click.mp3"],
          autoplay: false,
          loop: false,
          html5: true,
          volume: 0.5,
          muted: true,
          onend: function onend() {
            console.log("Finished!"); //For debugging
          },
        });

        var sound_2 = new howler__WEBPACK_IMPORTED_MODULE_1__.Howl({
          src: [base_url + "/assets/media/bip.mp3"],
          autoplay: false,
          loop: false,
          html5: true,
          volume: 0.5,
          muted: true,
          onend: function onend() {
            console.log("Finished!"); //For debugging
          },
        });

        // Single chat part
        $(document).on(
          "click",
          ".single-chat-message-send-btn_" + auth_id,
          function (e) {
            e.preventDefault();

            var to_id = $("#to_id").val();
            var message = $(".single-chat-input_" + auth_id).val();
            var push_div = "";
            var message_div = "";
            var pair_key = auth_id + "_" + to_id;
            var message_time = time();
            if (validURL(message)) {
              var valid_url = fetchValidUrl(message);
              message_div = '<a target="_blank" href="'
                .concat(valid_url, '" id="message_')
                .concat(
                  message_time,
                  '"><i class="bi bi-check2-all receiver-status-icon d-none"></i>'
                )
                .concat(valid_url, "</a>");
            } else {
              message_div = '<p id="message_'
                .concat(
                  message_time,
                  '"><i class="bi bi-check2-all receiver-status-icon d-none"></i>'
                )
                .concat(message, "</p>");
            }
            push_div = `
  <div class="receiver-data">
      <div class="c-pull-right">
          <div class="receiver-info">
              ${message_div}
              <div class="receiver-time">
                  <span>${currentTime()}</span>
              </div>
          </div>
      </div>
  </div>`;
            $(".single-chat-users_" + auth_id)
              .prepend($(".single-pair-class_" + pair_key))
              .animate("slow"); // Push last message to top
            $(".single-chat-last-message_" + pair_key).text(
              message.substring(0, 13)
            ); // Add last message and css
            $("#single-chat-message-push-div_" + pair_key).append(push_div);
            $("#single-chat-messages_" + pair_key).scrollTop(
              $("#single-chat-messages_" + pair_key)[0].scrollHeight
            );
            $(".single-chat-input_" + auth_id).val("");
            axios__WEBPACK_IMPORTED_MODULE_3__["default"]
              .post(base_url + "/chat/send-single-chat-message", {
                to_id: to_id,
                message: message,
              })
              .then(function (response) {
                if (response.data.status == false) {
                  var target = "message_" + message_time;
                  $("#" + target).addClass("text-line-throw");
                  $(
                    '<span class="color-red">Message not sent!</span>'
                  ).insertAfter("#" + target);
                }
              });
          }
        );

        // Listen single chat event
        window.Echo.channel(pusher_info.channel_name).listen(
          ".single-chat",
          function (response) {
            if (response.receiver.id == auth_id) {
              var push_div = "";
              var message_div = "";
              var pair_key = "";
              console.log(response);
              // Find message div
              if (response.message.is_link) {
                message_div =
                  '<a target="_blank" href="' +
                  response.message.text +
                  '">' +
                  response.message.text +
                  "</a>";
              } else {
                message_div = "<p>" + response.message.text + "</p>";
              }
                push_div = `
                <div class="sender-data">
                  <div class="c-pull-left">
                  <div class="sender-avater">
                    <img title="${response.sender.name}" src="${base_url}/${response.sender.image}">                    
                  </div>
                  <div class="sender-info">
                    ${message_div}
                    <div class="sender-time">
                    <span>${response.message.message_time}</span>
                    </div>
                  </div>
                  
                  </div>
                </div>`;
              pair_key = auth_id + "_" + response.sender.id;
              // Find pair id to handle conflict
              plusUnseenMessage(response.receiver.id);
              $(".single-chat-users_" + auth_id)
                .prepend($(".single-pair-class_" + pair_key))
                .animate("slow"); // Push last message to top
              var last_message = response.message.is_file
                ? "An attachment"
                : response.message.text;
              $(".single-chat-last-message_" + pair_key)
                .text(last_message.substring(0, 100))
                .addClass("text-unseen")
                .removeClass("text-seen"); // Add last message and css
              $("#single-chat-message-push-div_" + pair_key).append(push_div);
              $("#single-chat-messages_" + pair_key).scrollTop(
                $("#single-chat-messages_" + pair_key)[0].scrollHeight
              );
            }
          }
        );

        // Update Single chat status
        $(document).on(
          "click",
          ".single-chat-input_" + auth_id,
          function (event) {
            var to_id = $(this).attr("data-to");
            var target = "single-chat-last-message_" + auth_id + "_" + to_id;
            $("." + target)
              .addClass("text-seen")
              .removeClass("text-unseen");
            axios__WEBPACK_IMPORTED_MODULE_3__["default"]
              .get(base_url + "/chat/update-single-message-status/", {
                params: {
                  to_id: to_id,
                  status: 1,
                },
              })
              .then(function (response) {
                var current_value = $(".user-unseen_" + auth_id).text();
                var total_update = response.data.total;
                if (current_value > 0) {
                  $(".user-unseen_" + auth_id).text(
                    parseInt(current_value) - parseInt(total_update)
                  );
                } else {
                  $(".user-unseen_" + auth_id).text(0);
                }
              });
          }
        );

        // Update group chat status
        $(document).on(
          "click",
          ".group-chat-input_" + auth_id,
          function (event) {
            var group_id = $(this).attr("data-to");
            updateGroupMessageSeenStatus(group_id);
          }
        );
        $(document).on(
          "keypress",
          ".single-chat-input_" + auth_id,
          function (event) {
            var to_id = $(this).attr("data-to");
            axios__WEBPACK_IMPORTED_MODULE_3__["default"].get(
              base_url + "/chat/update-single-message-status/",
              {
                params: {
                  to_id: to_id,
                  status: 1,
                },
              }
            );
            if (event.which == 13) {
              $(".single-chat-message-send-btn_" + auth_id).click();
            }
          }
        );

        // Group chat part
        $(document).on(
          "keypress",
          ".group-chat-input_" + auth_id,
          function (event) {
            if (event.which == 13) {
              $(".group-chat-message-send-btn_" + auth_id).click();
            }
          }
        );

        function set_default_select_product_for_customer() {
          var group_id = $("#group_id").val();
          var pair_key = auth_id + "_" + group_id;

          let html_for_select_product = `<div class="sender-data">
        <div class="c-pull-left">
            <div class="sender-info">
                <p>Do you require support with <b>Pre Sale Query</b> or are you looking to <b>After Sale Support</b>?<br>To best assist you, please select one of the options below.</p>
            </div>
    </div>
    
    <div class="user-chat d-flex" data-show_button="1">
            <div class="chat-text custom_gap_chat">
                <button class="btn send-btn pre_sale_btn pre_sale_after_sale_btn" type="button">Pre Sale Query</button>
                <button class="btn send-btn pre_sale_btn pre_sale_after_sale_btn" type="button">After Sale Support</button>
            </div>
    </div>
    `;

          setTimeout(function () {
            $("#group-chat-messages-push-div_" + pair_key).append(
              html_for_select_product
            );
            $("#group-chat-messages_" + pair_key).scrollTop(
              $("#group-chat-messages_" + pair_key)[0].scrollHeight
            );
          }, 1000);
        }

        function call_verification_for_customer(product_id, group_id) {
          var group_id = $("#group_id").val();
          var pair_key = auth_id + "_" + group_id;

          let html_for_select_product = `<div class="sender-data margin_bottom_11">
                <div class="c-pull-left">
                <input type="hidden" id="product_category_id" value="${product_id}">
                <input type="hidden" id="verify_group_id" value="${group_id}">
                <input type="text" class="form-control verification mb-2" id="envato_u_name" placeholder="Envato Username" maxlength="100">
                <input type="text" class="form-control verification bottom_margin_chat mb-2" id="envato_p_code" placeholder="Envato Purchase Code" maxlength="100">
                <div class="d-flex justify-content-center"><button class="btn send-btn pre_sale_btn verify_now" type="button">Verify Now</button></div>
                <p class="envato_err"></p>
                </div>
            </div>`;

          setTimeout(function () {
            $("#group-chat-messages-push-div_" + pair_key).append(
              html_for_select_product
            );
            $("#group-chat-messages_" + pair_key).scrollTop(
              $("#group-chat-messages_" + pair_key)[0].scrollHeight
            );
          }, 1000);
        }

        function set_default_agent_button_for_customer() {
          var group_id = $("#group_id").val();
          var pair_key = auth_id + "_" + group_id;

          let html_for_select_product = `<div class="sender-data">
        <div class="c-pull-left">
            <div class="sender-info">
                <p>Did that answer your question? if not please click on <b>No</b> for connect with agent directly</p>
            </div>
        </div>
        
        <div class="user-chat d-flex" data-show_button="1">
                <div class="chat-text custom_gap_chat">
                <button class="btn send-btn yes_no_btn" data-type="yes" type="button">Yes</button>
                <button class="btn send-btn yes_no_btn" data-type="no" type="button">No</button>
                </div>
        </div>
        `;

          setTimeout(function () {
            $("#group-chat-messages-push-div_" + pair_key).append(
              html_for_select_product
            );
            $("#group-chat-messages_" + pair_key).scrollTop(
              $("#group-chat-messages_" + pair_key)[0].scrollHeight
            );
          }, 5000);
        }

        $(document).on(
          "click",
          ".group-chat-message-send-btn_" + auth_id,
          function (e) {
            e.preventDefault();
            var group_id = $("#group_id").val();
            var pair_key = auth_id + "_" + group_id;
            var message = sanitizeInput($(".group-chat-input_" + auth_id).val());
            var message_div = "";
            var push_div = "";
            var message_time = time();
            if (validURL(message)) {
              var valid_url = fetchValidUrl(message);
              message_div = '<a target="_blank" href="'
                .concat(valid_url, '" id="message_')
                .concat(
                  message_time,
                  '"><i class="bi bi-check2-all receiver-status-icon d-none"></i>'
                )
                .concat(valid_url, "</a>");
            } else {
              message_div = '<p id="message_'
                .concat(
                  message_time,
                  '"><i class="bi bi-check2-all receiver-status-icon d-none"></i>'
                )
                .concat(message, "</p>");
            }
            $(".ai_is_replying").show();
            push_div =
              '<div class="receiver-data">\n            <div class="c-pull-right">\n            <div class="receiver-info">\n            \n                '
                .concat(
                  message_div,
                  ' \n            <div class="receiver-time">\n                <span>'
                )
                .concat(
                  currentTime(),
                  "</span>\n                </div>\n </div>\n                     </div>\n        </div>"
                );
            $(".group-chat-input_" + auth_id).val("");
            $("#group-chat-messages-push-div_" + pair_key).append(push_div);
            $(".group-chat-users_" + auth_id)
              .prepend($(".group-pair-class_" + pair_key))
              .animate("slow"); // Push last message to top
            $(".group-chat-last-message_" + pair_key)
              .text(message.substring(0, 13))
              .addClass("text-seen")
              .removeClass("text-unseen"); // Add last message and css
            $("#group-chat-messages_" + pair_key).scrollTop(
              $("#group-chat-messages_" + pair_key)[0].scrollHeight
            );
            axios__WEBPACK_IMPORTED_MODULE_3__["default"]
              .post(base_url + "/chat/send-group-chat-message", {
                group_id: group_id,
                message: message,
              })
              .then(function (response) {
                if (response.data.status == false) {
                  $(".ai_is_replying").hide();
                  var target = "message_" + message_time;
                  $("#" + target).addClass("text-line-throw");
                  $(
                    '<span class="color-red">Message not sent!</span>'
                  ).insertAfter("#" + target);
                } else {
                  let chat_type = response.data.chat_type;
                  if (
                    chat_type == "" ||
                    chat_type == null ||
                    chat_type == "null"
                  ) {
                    if (response.data.need_validation == true) {
                      setTimeout(function () {
                        call_verification_for_customer(
                          response.data.product_id,
                          response.data.group_id
                        );
                      }, 3000);
                    } else {
                      set_default_select_product_for_customer();
                    }
                  } else {
                    if (response.data.need_validation == true) {
                      setTimeout(function () {
                        call_verification_for_customer(
                          response.data.product_id,
                          response.data.group_id
                        );
                      }, 3000);
                    } else {
                      if (!response.data.need_close_chat) {
                        if (response.data.need_show_agent_button) {
                          if (
                            message != "After Sale Support" ||
                            message != "Pre Sale Query"
                          )
                            $(".ai_is_replying").hide();
                            if(chat_type != 'agent'){
                              set_default_agent_button_for_customer();
                            }
                          
                        }
                      }
                    }
                  }

                  if (response.data.need_close_chat) {
                    $(".cancel_customer_chat").click();
                  }
                  setTimeout(function () {
                    $(".ai_is_replying").hide();
                  }, 3000);
                }
              })
              .catch((err) => {
                $(".ai_is_replying").hide();
              });
          }
        );

        // Listen group chat event
        window.Echo.channel(pusher_info.channel_name).listen(
          ".group-chat",
          function (response) {
            if (response.sender.id != auth_id) {
              var push_div = "";
              var message_div = "";
              var auth_user_id = auth_id;
              var group_id = response.group.id;
              var pair_key = auth_user_id + "_" + group_id;
              if (response.message.is_link) {
                message_div =
                  '<a target="_blank" href="' +
                  response.message.text +
                  '">' +
                  response.message.text +
                  "</a>";
              } else {
                message_div = "<p>" + response.message.text + "</p>";
              }
                push_div = `
                <div class="sender-data">
                  <div class="c-pull-left">
                  <div class="sender-avater">
                    <img title="${response.sender.name}" src="${base_url}/${response.sender.image}">                    
                  </div>
                  <div class="sender-info">
                    ${message_div}
                    <div class="sender-time">
                    <span>${response.message.message_time}</span>
                    </div>
                  </div>
                  
                  </div>
                </div>`;
              plusUnseenMessage(response.group.receiver_id);
              $("#group-chat-messages-push-div_" + pair_key).append(push_div);
              $(".group-chat-users_" + auth_id)
                .prepend($(".group-pair-class_" + pair_key))
                .animate("slow"); // Push last message to top
              var last_message = response.message.is_file
                ? "An attachment"
                : response.message.text;
              $(".group-chat-last-message_" + pair_key)
                .text(last_message.substring(0, 13))
                .addClass("text-unseen"); // Add last message and css
              $("#group-chat-messages_" + pair_key).scrollTop(
                $("#group-chat-messages_" + pair_key)[0].scrollHeight
              );
            }
          }
        );

        // Send message to agent from frontend
        $(document).on("keypress", "#message-box_" + user_ip, function (event) {
          $("#message-box_" + user_ip).css(
            "border",
            "1px solid rgb(206, 212, 218)"
          );
          if (event.which == 13) {
            $("#customer-send-message_" + user_ip).click();
          }
        });
        $(document).on("click", "#message-box_" + user_ip, function (event) {
          var group_id = $(this).attr("data-id");
          if (group_id != undefined) {
            updateSeenStatusFromGuest(group_id);
          }
          $("#message-box_" + user_ip).css(
            "border",
            "1px solid rgb(206, 212, 218)"
          );
          if (event.which == 13) {
            $("#customer-send-message_" + user_ip).click();
          }
        });
        function set_default_select_product() {
          let html_for_select_product = `<div class="agent-chat d-flex">
        <div class="chat-text">
            <span>
                <span>Do you require support with <b>Pre Sale Query</b> or are you looking to <b>After Sale Support</b>?<br>To best assist you, please select one of the options below.</span>
            </span>
        </div>
        </div>

        <div class="user-chat d-flex" data-show_button="1">
            <div class="chat-text">
                <button class="btn send-btn pre_sale_btn pre_sale_after_sale_btn" type="button">Pre Sale Query</button>
                <button class="btn send-btn pre_sale_btn pre_sale_after_sale_btn" type="button">After Sale Support</button>
            </div>
        </div>`;
          setTimeout(function () {
            $("#gust-chat-message_" + user_ip)
              .append(html_for_select_product)
              .scrollTop($("#gust-chat-message_" + user_ip)[0].scrollHeight);
          }, 1000);
        }

        function call_verification(product_id, group_id) {
          let html_for_select_product = `<div class="agent-chat">
    <div class="chat-text">
        <input type="hidden" id="product_category_id" value="${product_id}">
        <input type="hidden" id="verify_group_id" value="${group_id}">
        <input type="text" class="form-control verification mb-2" id="envato_u_name" placeholder="Envato Username" maxlength="100">
        <input type="text" class="form-control verification bottom_margin_chat mb-2" id="envato_p_code" placeholder="Envato Purchase Code" maxlength="100">
        <div class="d-flex justify-content-center"><button class="btn send-btn pre_sale_btn verify_now" type="button">Verify Now</button></div>
        <p class="envato_err"></p>
    </div>
</div>`;

          setTimeout(function () {
            $("#gust-chat-message_" + user_ip)
              .append(html_for_select_product)
              .scrollTop($("#gust-chat-message_" + user_ip)[0].scrollHeight);
          }, 1000);
        }

        function set_default_agent_button() {
          let html_for_select_product = `<div class="agent-chat d-flex">
            <div class="chat-text text-align-right">
                <span class='mb-0'>
                    <span>Did that answer your question? if not please click on <b>No</b> for connect with agent directly</span>
                </span>

                <div class="yes_no_button">
                  <button class="btn send-btn yes_no_btn" data-type="no" type="button"><svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.54 9.79625C4.9425 9.94625 4.38812 9.49375 4.3475 8.90875C4.3025 8.2525 4.20375 7.64937 4.08 7.29C4.00187 7.065 3.78062 6.6575 3.43 6.26625C3.08187 5.87625 2.62875 5.52938 2.09813 5.385C1.67813 5.27 1.25 4.90625 1.25 4.375V1.875C1.25 1.34687 1.67625 0.96 2.155 0.90875C2.82375 0.838125 3.1325 0.649375 3.4475 0.456875L3.4775 0.43875C3.6475 0.335 3.83875 0.220625 4.08375 0.13625C4.33187 0.05 4.62188 0 5 0H7.1875C7.77313 0 8.18687 0.29875 8.39625 0.665C8.49875 0.844375 8.555 1.04437 8.555 1.23563C8.555 1.33062 8.54063 1.43062 8.50688 1.52562C8.6325 1.68938 8.74437 1.88625 8.81187 2.08812C8.88062 2.29437 8.91937 2.56438 8.81437 2.80688C8.8575 2.88813 8.88938 2.97438 8.91375 3.05875C8.96187 3.2275 8.98438 3.41313 8.98438 3.59375C8.98438 3.77437 8.96187 3.96 8.91375 4.12875C8.89188 4.20375 8.86375 4.28125 8.8275 4.35563C9.07375 4.7125 9.08875 5.10562 8.97375 5.43875C8.845 5.80875 8.5475 6.12625 8.22375 6.23375C7.69438 6.41062 7.09688 6.40625 6.65125 6.36563C6.55874 6.35727 6.46642 6.34685 6.37438 6.33438C6.59142 7.26307 6.57812 8.23075 6.33563 9.15313C6.24937 9.47062 5.99188 9.68313 5.70312 9.75562L5.54 9.79625ZM7.1875 0.625H5C4.68125 0.625 4.46063 0.6675 4.2875 0.726875C4.11188 0.7875 3.97125 0.87 3.8025 0.9725L3.7775 0.988125C3.43063 1.19938 3.02875 1.44437 2.22125 1.53062C2.01312 1.5525 1.875 1.71188 1.875 1.87438V4.375C1.875 4.53438 2.01625 4.71438 2.2625 4.78125C2.94687 4.96875 3.49813 5.40438 3.89625 5.84938C4.29313 6.29313 4.56125 6.77125 4.67 7.085C4.82188 7.5225 4.92438 8.19 4.97125 8.86625C4.98688 9.0925 5.19625 9.23812 5.38813 9.19L5.55188 9.14937C5.65188 9.12438 5.71312 9.05937 5.73187 8.99C5.98724 8.01729 5.95577 6.99148 5.64125 6.03625C5.6236 5.98317 5.62053 5.92632 5.63234 5.87165C5.64416 5.81697 5.67043 5.76647 5.70842 5.72541C5.74642 5.68436 5.79473 5.65425 5.84833 5.63824C5.90192 5.62222 5.95884 5.62089 6.01313 5.63438H6.015L6.02375 5.63688L6.06 5.645C6.27374 5.69026 6.48994 5.72302 6.7075 5.74312C7.12188 5.78062 7.61812 5.77688 8.02625 5.64125C8.13562 5.60437 8.3075 5.45312 8.3825 5.23438C8.44937 5.04187 8.43687 4.81563 8.21625 4.59625L7.99563 4.375L8.21625 4.15375C8.24312 4.1275 8.28188 4.06625 8.3125 3.95687C8.3425 3.8525 8.35938 3.72563 8.35938 3.59375C8.35938 3.46187 8.3425 3.335 8.3125 3.23063C8.28125 3.12188 8.24312 3.06 8.21625 3.03375L7.99563 2.8125L8.21625 2.59125C8.24563 2.56187 8.28438 2.48125 8.21938 2.28625C8.152 2.09777 8.04428 1.92628 7.90375 1.78375L7.68313 1.5625L7.90375 1.34125C7.9075 1.33812 7.92938 1.31 7.92938 1.235C7.92561 1.14368 7.89966 1.05466 7.85375 0.975625C7.75 0.795 7.53937 0.625 7.1875 0.625Z" fill="white"/>
</svg>
No</button>
                  <button class="btn send-btn yes_no_btn" data-type="yes" type="button"><svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_399_1012)">
<path d="M5.54 0.0288026C4.9425 -0.120572 4.3875 0.331303 4.3475 0.916303C4.3025 1.57318 4.20375 2.1763 4.08 2.53505C4.00187 2.76005 3.78062 3.16818 3.43 3.55943C3.08187 3.9488 2.62875 4.29568 2.09813 4.44068C1.67813 4.55505 1.25 4.9188 1.25 5.45005V7.95068C1.25 8.4788 1.67625 8.86568 2.155 8.9163C2.82375 8.98755 3.1325 9.17568 3.4475 9.36818L3.4775 9.38693C3.6475 9.49005 3.83875 9.60443 4.08375 9.68943C4.33187 9.77443 4.62188 9.82505 5 9.82505H7.1875C7.77313 9.82505 8.18687 9.52693 8.39625 9.16005C8.49744 8.98693 8.55213 8.79056 8.555 8.59005C8.555 8.49505 8.54063 8.39505 8.50688 8.30005C8.6325 8.13568 8.74437 7.9388 8.81187 7.73693C8.88062 7.53068 8.91937 7.26068 8.81437 7.0188C8.8575 6.93755 8.88938 6.85068 8.91375 6.76693C8.96187 6.59818 8.98438 6.41193 8.98438 6.2313C8.98438 6.0513 8.96187 5.86568 8.91375 5.6963C8.89239 5.61827 8.8635 5.5425 8.8275 5.47005C8.93694 5.31435 9.00735 5.13462 9.0328 4.94601C9.05825 4.75741 9.038 4.56545 8.97375 4.3863C8.845 4.0163 8.5475 3.6988 8.22375 3.5913C7.69438 3.41505 7.09688 3.4188 6.65125 3.45943C6.55874 3.46779 6.46642 3.4782 6.37438 3.49068C6.59031 2.56207 6.57701 1.59487 6.33563 0.672553C6.29348 0.524796 6.21262 0.390981 6.10142 0.284946C5.99022 0.178912 5.85272 0.104507 5.70312 0.0694276L5.54 0.0288026ZM7.1875 9.20068H5C4.68125 9.20068 4.46063 9.15755 4.2875 9.09818C4.11188 9.03755 3.97125 8.95568 3.8025 8.85255L3.7775 8.83755C3.43063 8.62568 3.02875 8.38068 2.22125 8.29505C2.01312 8.27255 1.875 8.1138 1.875 7.9513V5.45005C1.875 5.2913 2.01625 5.11068 2.2625 5.0438C2.94687 4.8563 3.49813 4.4213 3.89625 3.9763C4.29313 3.53255 4.56125 3.05443 4.67 2.74005C4.82188 2.30255 4.92438 1.63505 4.97125 0.958803C4.98688 0.732553 5.19625 0.587553 5.38813 0.635053L5.55188 0.676303C5.65188 0.701303 5.71312 0.765678 5.73187 0.835678C5.98712 1.80819 5.95564 2.83377 5.64125 3.7888C5.62345 3.84192 5.62026 3.89884 5.63201 3.95362C5.64376 4.00839 5.67002 4.059 5.70803 4.10014C5.74605 4.14129 5.79442 4.17146 5.8481 4.1875C5.90177 4.20353 5.95877 4.20485 6.01313 4.1913L6.015 4.19068L6.02375 4.1888L6.06 4.18005C6.27374 4.1348 6.48994 4.10203 6.7075 4.08193C7.12188 4.04443 7.61812 4.04818 8.02625 4.18443C8.13562 4.22068 8.3075 4.37193 8.3825 4.59068C8.44937 4.78318 8.43687 5.00943 8.21625 5.22943L7.99563 5.45005L8.21625 5.6713C8.24312 5.69818 8.28188 5.75943 8.3125 5.86818C8.3425 5.97255 8.35938 6.09943 8.35938 6.2313C8.35938 6.3638 8.3425 6.49005 8.3125 6.59505C8.28125 6.7038 8.24312 6.76505 8.21625 6.79193L7.99563 7.01255L8.21625 7.2338C8.24563 7.26318 8.28438 7.34443 8.21938 7.5388C8.15208 7.7275 8.04436 7.89922 7.90375 8.04193L7.68313 8.26255L7.90375 8.4838C7.9075 8.48693 7.92938 8.51505 7.92938 8.59005C7.92571 8.68158 7.89975 8.77084 7.85375 8.85005C7.75063 9.03005 7.53937 9.20068 7.1875 9.20068Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_399_1012">
<rect width="10" height="10" fill="white"/>
</clipPath>
</defs>
</svg>
Yes</button>                  
                </div>
            </div>
                
        </div>`;
          setTimeout(function () {
            $("#gust-chat-message_" + user_ip)
              .append(html_for_select_product)
              .scrollTop($("#gust-chat-message_" + user_ip)[0].scrollHeight);
          }, 5000);
        }
        function sanitizeInput(input) {
          if (typeof input !== 'string') {
              return '';
          }
          return input
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
      }
        $(document).on(
          "click",
          "#customer-send-message_" + user_ip,
          function () {
            var guest_name = sanitizeInput($("#guest-user-name_" + user_ip).val());
            var guest_email = sanitizeInput($("#guest-user-email_" + user_ip).val());
            var message = sanitizeInput($("#message-box_" + user_ip).val());
            var product_id = $("#category-box_" + user_ip).val();

            if (product_id == undefined) {
              product_id = $("#selected-product_" + user_ip).val();
            }
            if (guest_name == undefined) {
              guest_name = $("#selected-guest-name_" + user_ip).val();
            }
            if (guest_email == undefined) {
              guest_email = $("#selected-guest-email_" + user_ip).val();
            }
            if (!guest_name.length && guest_name.trim() == "") {
              $("#guest-user-name_" + user_ip)
                .addClass("is-invalid-chat");
              return false;
            } else if (!guest_email.length && guest_email.trim() == "") {
              $("#guest-user-email_" + user_ip)
                .addClass("is-invalid-chat");
              return false;
            } else if (!ValidateEmail(guest_email)) {
              $("#guest-user-email_" + user_ip)
                .addClass("is-invalid-chat");
              return false;
            } else if (!product_id.length || product_id == 0) {
              $(".category-box-" + user_ip).trigger("click");
              return false;
            } else if (!message.length && message.trim() == "") {
              $("#message-box_" + user_ip)
                .addClass("is-invalid-chat");
              return false;
            } else {
              var message_from = "guest";
              var sender_message = "";
              var message_time = time();
              if (validURL(message)) {
                var valid_url = fetchValidUrl(message);
                sender_message =
                  '<div class="user-chat d-flex">\n                <div class="read-status delivered"></div>\n                <div class="chat-text">\n                    <span><span id="message_'
                    .concat(message_time, '"><a target="_blank" href="')
                    .concat(valid_url, '" >')
                    .concat(
                      valid_url,
                      "</a></span></span>\n                </div>\n            </div>"
                    );
              } else {
                sender_message =
                  '<div class="user-chat d-flex">\n                <div class="read-status delivered"></div>\n                <div class="chat-text">\n                    <span><span id="message_'
                    .concat(message_time, '">')
                    .concat(
                      message,
                      "</span></span>\n                </div>\n            </div>"
                    );
              }
              $(".category-box-" + user_ip).addClass("d-none");
              $("#guest-user-name_" + user_ip).addClass("d-none");
              $(".start_new_conversation_btn").addClass("d-none");
              $("#guest-user-email_" + user_ip).addClass("d-none");


              $(".need_help_text").addClass("d-none");
              $(".chatbox-content").removeClass("trigger_to_small");
              $(".chatbox-content").removeClass("p-0");
              $(".chatbox-content").addClass("trigger_to_large");
              $(this).removeClass('customer-send-message-first-time');
              $("#gust-chat-message_" + user_ip)
                .addClass("trigger_to_large")
                .removeClass("trigger_to_small");
              $("#message-box_" + user_ip).val("");
              $(".ai_is_replying").show();
              $("#gust-chat-message_" + user_ip)
                .append(sender_message)
                .scrollTop($("#gust-chat-message_" + user_ip)[0].scrollHeight);
              axios__WEBPACK_IMPORTED_MODULE_3__["default"]
                .post(base_url + "/send-message", {
                  guest_user_name: guest_name,
                  guest_user_email: guest_email,
                  message: message,
                  product_id: product_id,
                  message_from: message_from,

                })
                .then(function (response) {
                  let chat_type = response.data.chat_type;
                  if (
                    chat_type == "" ||
                    chat_type == null ||
                    chat_type == "null" ||
                    chat_type == "first_time"
                  ) {
                    if (response.data.need_validation == true) {
                      setTimeout(function () {
                        call_verification(product_id, response.data.group_id);
                      }, 3000);
                    } else {
                      set_default_select_product();
                    }
                  } else {
                    if (response.data.need_validation == true) {
                      setTimeout(function () {
                        call_verification(product_id, response.data.group_id);
                      }, 3000);
                    } else {
                      if (!response.data.need_close_chat) {
                        if (response.data.need_show_agent_button) {
                          if (
                            message != "After Sale Support" ||
                            message != "Pre Sale Query"
                          )
                            set_default_agent_button();
                        }
                      }
                    }
                  }

                  $(".guest-product").text(response.data.product);
                  $(".chat-close-btn").removeClass("d-none");
                  $("#message-box_" + user_ip).attr(
                    "data-id",
                    response.data.group_id
                  );
                  $("#selected-product_" + user_ip).val(
                    response.data.product_id
                  );
                  $("#selected-guest-name_" + user_ip).val(guest_name);
                  $("#selected-guest-email_" + user_ip).val(guest_email);
                  $(".guest-close-chat-form").attr(
                    "action",
                    location.href + "guest-close-chat/" + response.data.group_id
                  );
                  $("#product_category_id").val(product_id);
                  $("#verify_group_id").val(response.data.group_id);

                  if (response.data.need_close_chat) {
                    $(".chat-close-btn").click();
                  }
                  setTimeout(function () {
                    $(".ai_is_replying").hide();
                  }, 3000);

                  if (response.data.status == false) {
                    var target = "message_" + message_time;
                    $("#" + target).addClass("text-line-throw");
                    $(
                      '<span class="color-red">Message not sent!</span>'
                    ).insertAfter("#" + target);
                  }
                })
                .catch((err) => {
                  $(".ai_is_replying").hide();
                });
            }
          }
        );

        // Admin Push notification part
        if (auth_type === "Admin") {
          window.Echo.channel(pusher_info.channel_name).listen(
            ".admin-notification",
            function (response) {
              if (auth_type === "Admin") {
                callNotification(response.message);
              }
            }
          );
        }

        // Agent Push notification part
        if (auth_type === "Agent") {
          window.Echo.channel(pusher_info.channel_name).listen(
            ".agent-notification",
            function (response) {
              if (response.agent_for.includes(auth_id)) {
                callNotification(response.message);
              }
            }
          );
        }

        // Customer Push notification part
        if (auth_type === "Customer") {
          window.Echo.channel(pusher_info.channel_name).listen(
            ".customer-notification",
            function (response) {
              if (
                response.customer_for === auth_id &&
                auth_type === "Customer"
              ) {
                callNotification(response.message);
              }
            }
          );
        }
        window.Echo.channel(pusher_info.channel_name).listen(
          ".guest-message",
          function (response) {
            if (response.group.created_by == user_ip) {
              $("#agent-name_" + user_ip).text(response.sender.name);
              $(".typing_name").text(response.sender.name);
              console.log(response.sender.name);
              $("#agent-photo").attr(
                "src",
                base_url + "/" + response.sender.image
              );
              let agent_image = base_url + "/" + response.sender.image;
              var message_div = "";
              if (response.message.is_link) {
                message_div =
                  '<div class="agent-chat d-flex">\n                <div class="chat-text d-flex">\n <img src="' + agent_image + '" alt="" id="agent-photo">                   <span>\n                        <span><a target="_blank" href="'
                    .concat(response.message.text, '">')
                    .concat(
                      response.message.text,
                      "</a></span>\n                    </span>\n                </div>\n            </div>"
                    );
              } else {
                message_div =
                  '<div class="agent-chat d-flex">\n                <div class="chat-text d-flex">\n     <img src="' +
                  agent_image +
                  '" alt="" id="agent-photo">               <span>\n                        <span>'.concat(
                    response.message.text,
                    "</span>\n                    </span>\n                </div>\n            </div>"
                  );
              }
              $("#gust-chat-message_" + user_ip)
                .append(message_div)
                .scrollTop($("#gust-chat-message_" + user_ip)[0].scrollHeight);
              sound_1.play();
              $(".ai_is_replying").hide();
            }
          }
        );

        // Browser push notification with npm puser if need
        window.Echo.channel(pusher_info.channel_name).listen(
          ".browser-push",
          function (response) {
            if (browser_push == "Yes") {
              if (response.browser_id == getUserIp()) {
                var iconPath = $("#site_logo").val();
                push_js__WEBPACK_IMPORTED_MODULE_2___default().create(
                  response.title,
                  {
                    body: response.message,
                    timeout: 5000,
                    icon: iconPath,
                  }
                );
              }
            }
          }
        );
        window.Echo.channel(pusher_info.channel_name).listen(
          ".make-seen",
          function (response) {
            if (response.type == "group") {
              $(".individual-group_" + response["for"])
                .find(".receiver-status-icon")
                .removeClass("d-none")
                .addClass("receiver-status-seen");
            } else if (response.type == "guest") {
              $("#gust-chat-message_" + response["for"])
                .find(".read-status")
                .removeClass("delivered")
                .addClass("seen");
            } else if (response.type == "single") {
              $(".single-message-for_" + response["for"])
                .find(".receiver-status-icon")
                .removeClass("d-none")
                .addClass("receiver-status-seen");
            }
          }
        );
        function updateGroupMessageSeenStatus(group_id) {
          var target = "group-chat-last-message_" + auth_id + "_" + group_id;
          $("." + target)
            .addClass("text-seen")
            .removeClass("text-unseen");
          axios__WEBPACK_IMPORTED_MODULE_3__["default"]
            .get(base_url + "/chat/update-group-message-status", {
              params: {
                group_id: group_id,
                status: 1,
              },
            })
            .then(function (response) {
              var current_value = $(".user-unseen_" + auth_id).text();
              var total_update = response.data.total;
              if (response.data.status == true) {
                var current_text_count =
                  parseInt(current_value) - parseInt(total_update);
                if (current_text_count < 0) {
                  $(".user-unseen_" + auth_id).text(0);
                } else {
                  $(".user-unseen_" + auth_id).text(current_text_count);
                }
              }
            });
        }
        function updateSeenStatusFromGuest(group_id) {
          $.ajax({
            url: base_url + "/update-seen-status-from-guest",
            data: {
              group_id: group_id,
            },
            method: "GET",
          });
        }
        function plusUnseenMessage(target_user_id) {
          var current_value = $(".user-unseen_" + target_user_id).text();
          $(".user-unseen_" + target_user_id).text(parseInt(current_value) + 1);
          if (target_user_id == auth_id) {
            sound_1.play();
          }
        }

        // Call notification
        function callNotification(text) {
          sound_2.play();
          toastr.options.positionClass = "toast-top-right";
          toastr.success(text);
          var notification_div = $(".user-notification_" + auth_id);
          var current_count = parseInt(notification_div.text());
          if (current_count === 99 || current_count > 99) {
            notification_div.text("99+");
          } else {
            notification_div.text(parseInt(notification_div.text()) + 1);
          }
        }

        // Get client ip address
        function getUserIp() {
          var original_ip = localStorage.getItem("user_ip");
          return original_ip;
        }
        function validURL(str) {
          var pattern = new RegExp(
            "^(https?:\\/\\/)?" +
            // protocol
            "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" +
            // domain name
            "((\\d{1,3}\\.){3}\\d{1,3}))" +
            // OR ip (v4) address
            "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" +
            // port and path
            "(\\?[;&a-z\\d%_.~+=-]*)?" +
            // query string
            "(\\#[-a-z\\d_]*)?$",
            "i"
          ); // fragment locator
          return !!pattern.test(str);
        }
        function currentTime() {
          var date = new Date(); // for now
          var hours = date.getHours();
          var minutes = date.getMinutes();
          var ampm = hours >= 12 ? "pm" : "am";
          hours = hours % 12;
          hours = hours ? hours : 12; // the hour '0' should be '12'
          minutes = minutes < 10 ? "0" + minutes : minutes;
          var strTime = hours + ":" + minutes + " " + ampm;
          return strTime;
        }
        function time() {
          var timestamp = Math.floor(new Date().getTime() / 1000);
          return timestamp;
        }
        function ValidateEmail(email) {
          var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
          if (email.match(mailformat)) {
            return true;
          } else {
            return false;
          }
        }
        function fetchValidUrl(message) {
          var valid_url = "";
          $.ajax({
            url: base_url + "/api/make-valid-url",
            method: "POST",
            async: false,
            data: {
              message: message,
            },
            success: function success(response) {
              valid_url = response;
            },
          });
          return valid_url;
        }

        // FCM
        // Import firebase data from json file

        var firebase_info = __webpack_require__(
          /*! ../../../../assets/json/firebase.json */ "./assets/json/firebase.json"
        );

        // If using Firebase database
        // If using Firebase storage

        var firebaseConfig = {
          apiKey: firebase_info.api_key,
          authDomain: firebase_info.auth_domain,
          databaseURL: firebase_info.database_url,
          projectId: firebase_info.project_id,
          storageBucket: firebase_info.storage_bucket,
          messagingSenderId: firebase_info.messaging_sender_id,
          appId: firebase_info.app_id,
          measurementId: firebase_info.measurement_id,
        };
        var app = (0, firebase_app__WEBPACK_IMPORTED_MODULE_4__.initializeApp)(
          firebaseConfig
        );
        var analytics = (0,
          firebase_analytics__WEBPACK_IMPORTED_MODULE_5__.getAnalytics)(app);
        var messaging = (0,
          firebase_messaging__WEBPACK_IMPORTED_MODULE_6__.getMessaging)();
        (0, firebase_messaging__WEBPACK_IMPORTED_MODULE_6__.getToken)(
          messaging,
          firebase_info.key_pair
        )
          .then(function (currentToken) {
            if (currentToken) {
              axios__WEBPACK_IMPORTED_MODULE_3__["default"].post(
                base_url + "/store-token",
                {
                  token: currentToken,
                }
              );
            }
          })
        ["catch"](function (err) {
          console.log("An error occurred while retrieving token. ", err);
          // ...
        });

        (0, firebase_messaging__WEBPACK_IMPORTED_MODULE_6__.onMessage)(
          messaging,
          function (payload) {
            var noteTitle = payload.notification.title;
            var noteOptions = {
              body: payload.notification.body,
              icon: payload.notification.icon,
            };
            new Notification(noteTitle, noteOptions);
          }
        );

        /***/
      },

    /***/ "./resources/js/bootstrap.js":
      /*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var laravel_echo__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! laravel-echo */ "./node_modules/laravel-echo/dist/echo.js"
          );
        /* harmony import */ var pusher_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! pusher-js */ "./node_modules/pusher-js/dist/web/pusher.js"
          );
        /* harmony import */ var pusher_js__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            pusher_js__WEBPACK_IMPORTED_MODULE_1__
          );
        // we skiped use strict mode due to global access
        window._ = __webpack_require__(
          /*! lodash */ "./node_modules/lodash/lodash.js"
        );

        /**
         * We'll load jQuery and the Bootstrap jQuery plugin which provides support
         * for JavaScript based Bootstrap features such as modals and tabs. This
         * code may be modified to fit the specific needs of your application.
         */

        try {
          window.Popper = __webpack_require__(
            /*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js"
          )["default"];
          window.$ = window.jQuery = __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          );
          __webpack_require__(
            /*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js"
          );
        } catch (e) { }

        /**
         * We'll load the axios HTTP library which allows us to easily issue requests
         * to our Laravel back-end. This library automatically handles sending the
         * CSRF token as a header based on the value of the "XSRF" token cookie.
         */

        window.axios = __webpack_require__(
          /*! axios */ "./node_modules/axios/dist/browser/axios.cjs"
        );
        window.axios.defaults.headers.common["X-Requested-With"] =
          "XMLHttpRequest";

        /**
         * Echo exposes an expressive API for subscribing to channels and listening
         * for events that are broadcast by Laravel. Echo and event broadcasting
         * allows your team to easily build robust real-time web applications.
         */

        var pusher_info = __webpack_require__(
          /*! ../../../../assets/json/pusher.json */ "./assets/json/pusher.json"
        );
        window.Pusher = pusher_js__WEBPACK_IMPORTED_MODULE_1___default();
        window.Echo = new laravel_echo__WEBPACK_IMPORTED_MODULE_0__["default"]({
          broadcaster: "pusher",
          key: pusher_info.app_key,
          cluster: pusher_info.app_cluster,
          forceTLS: true,
        });

        /***/
      },

    /***/ "./node_modules/base64-js/index.js":
      /*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
      /***/ (__unused_webpack_module, exports) => {
        "use strict";

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;

        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

        var code =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        // Support decoding URL-safe base64 strings, as Node.js does.
        // See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;

        function getLens(b64) {
          var len = b64.length;

          if (len % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }

          // Trim off extra bytes after placeholder bytes are found
          // See: https://github.com/beatgammit/base64-js/issues/42
          var validLen = b64.indexOf("=");
          if (validLen === -1) validLen = len;

          var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

          return [validLen, placeHoldersLen];
        }

        // base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function _byteLength(b64, validLen, placeHoldersLen) {
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];

          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

          var curByte = 0;

          // if there are placeholders, only get up to the last complete 4 chars
          var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

          var i;
          for (i = 0; i < len; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)];
            arr[curByte++] = (tmp >> 16) & 0xff;
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4);
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2);
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          return arr;
        }

        function tripletToBase64(num) {
          return (
            lookup[(num >> 18) & 0x3f] +
            lookup[(num >> 12) & 0x3f] +
            lookup[(num >> 6) & 0x3f] +
            lookup[num & 0x3f]
          );
        }

        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i = start; i < end; i += 3) {
            tmp =
              ((uint8[i] << 16) & 0xff0000) +
              ((uint8[i + 1] << 8) & 0xff00) +
              (uint8[i + 2] & 0xff);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }

        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
          var parts = [];
          var maxChunkLength = 16383; // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (
            var i = 0, len2 = len - extraBytes;
            i < len2;
            i += maxChunkLength
          ) {
            parts.push(
              encodeChunk(
                uint8,
                i,
                i + maxChunkLength > len2 ? len2 : i + maxChunkLength
              )
            );
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            parts.push(
              lookup[tmp >> 10] +
              lookup[(tmp >> 4) & 0x3f] +
              lookup[(tmp << 2) & 0x3f] +
              "="
            );
          }

          return parts.join("");
        }

        /***/
      },

    /***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
      /*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        /*!
         * Bootstrap v4.6.2 (https://getbootstrap.com/)
         * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
         */
        (function (global, factory) {
          true
            ? factory(
              exports,
              __webpack_require__(
                  /*! jquery */ "./node_modules/jquery/dist/jquery.js"
              ),
              __webpack_require__(
                  /*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js"
              )
            )
            : 0;
        })(this, function (exports, $, Popper) {
          "use strict";

          function _interopDefaultLegacy(e) {
            return e && typeof e === "object" && "default" in e
              ? e
              : { default: e };
          }

          var $__default = /*#__PURE__*/ _interopDefaultLegacy($);
          var Popper__default = /*#__PURE__*/ _interopDefaultLegacy(Popper);

          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
              writable: false,
            });
            return Constructor;
          }

          function _extends() {
            _extends = Object.assign
              ? Object.assign.bind()
              : function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];

                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }

                return target;
              };
            return _extends.apply(this, arguments);
          }

          function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;

            _setPrototypeOf(subClass, superClass);
          }

          function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf
              ? Object.setPrototypeOf.bind()
              : function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };
            return _setPrototypeOf(o, p);
          }

          /**
           * --------------------------------------------------------------------------
           * Bootstrap (v4.6.2): util.js
           * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
           * --------------------------------------------------------------------------
           */
          /**
           * Private TransitionEnd Helpers
           */

          var TRANSITION_END = "transitionend";
          var MAX_UID = 1000000;
          var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

          function toType(obj) {
            if (obj === null || typeof obj === "undefined") {
              return "" + obj;
            }

            return {}.toString
              .call(obj)
              .match(/\s([a-z]+)/i)[1]
              .toLowerCase();
          }

          function getSpecialTransitionEndEvent() {
            return {
              bindType: TRANSITION_END,
              delegateType: TRANSITION_END,
              handle: function handle(event) {
                if ($__default["default"](event.target).is(this)) {
                  return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                }

                return undefined;
              },
            };
          }

          function transitionEndEmulator(duration) {
            var _this = this;

            var called = false;
            $__default["default"](this).one(Util.TRANSITION_END, function () {
              called = true;
            });
            setTimeout(function () {
              if (!called) {
                Util.triggerTransitionEnd(_this);
              }
            }, duration);
            return this;
          }

          function setTransitionEndSupport() {
            $__default["default"].fn.emulateTransitionEnd =
              transitionEndEmulator;
            $__default["default"].event.special[Util.TRANSITION_END] =
              getSpecialTransitionEndEvent();
          }
          /**
           * Public Util API
           */

          var Util = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function getUID(prefix) {
              do {
                // eslint-disable-next-line no-bitwise
                prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
              } while (document.getElementById(prefix));

              return prefix;
            },
            getSelectorFromElement: function getSelectorFromElement(element) {
              var selector = element.getAttribute("data-target");

              if (!selector || selector === "#") {
                var hrefAttr = element.getAttribute("href");
                selector = hrefAttr && hrefAttr !== "#" ? hrefAttr.trim() : "";
              }

              try {
                return document.querySelector(selector) ? selector : null;
              } catch (_) {
                return null;
              }
            },
            getTransitionDurationFromElement:
              function getTransitionDurationFromElement(element) {
                if (!element) {
                  return 0;
                } // Get transition-duration of the element

                var transitionDuration = $__default["default"](element).css(
                  "transition-duration"
                );
                var transitionDelay =
                  $__default["default"](element).css("transition-delay");
                var floatTransitionDuration = parseFloat(transitionDuration);
                var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

                if (!floatTransitionDuration && !floatTransitionDelay) {
                  return 0;
                } // If multiple durations are defined, take the first

                transitionDuration = transitionDuration.split(",")[0];
                transitionDelay = transitionDelay.split(",")[0];
                return (
                  (parseFloat(transitionDuration) +
                    parseFloat(transitionDelay)) *
                  MILLISECONDS_MULTIPLIER
                );
              },
            reflow: function reflow(element) {
              return element.offsetHeight;
            },
            triggerTransitionEnd: function triggerTransitionEnd(element) {
              $__default["default"](element).trigger(TRANSITION_END);
            },
            supportsTransitionEnd: function supportsTransitionEnd() {
              return Boolean(TRANSITION_END);
            },
            isElement: function isElement(obj) {
              return (obj[0] || obj).nodeType;
            },
            typeCheckConfig: function typeCheckConfig(
              componentName,
              config,
              configTypes
            ) {
              for (var property in configTypes) {
                if (
                  Object.prototype.hasOwnProperty.call(configTypes, property)
                ) {
                  var expectedTypes = configTypes[property];
                  var value = config[property];
                  var valueType =
                    value && Util.isElement(value) ? "element" : toType(value);

                  if (!new RegExp(expectedTypes).test(valueType)) {
                    throw new Error(
                      componentName.toUpperCase() +
                      ": " +
                      ('Option "' +
                        property +
                        '" provided type "' +
                        valueType +
                        '" ') +
                      ('but expected type "' + expectedTypes + '".')
                    );
                  }
                }
              }
            },
            findShadowRoot: function findShadowRoot(element) {
              if (!document.documentElement.attachShadow) {
                return null;
              } // Can find the shadow root otherwise it'll return the document

              if (typeof element.getRootNode === "function") {
                var root = element.getRootNode();
                return root instanceof ShadowRoot ? root : null;
              }

              if (element instanceof ShadowRoot) {
                return element;
              } // when we don't find a shadow root

              if (!element.parentNode) {
                return null;
              }

              return Util.findShadowRoot(element.parentNode);
            },
            jQueryDetection: function jQueryDetection() {
              if (typeof $__default["default"] === "undefined") {
                throw new TypeError(
                  "Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript."
                );
              }

              var version = $__default["default"].fn.jquery
                .split(" ")[0]
                .split(".");
              var minMajor = 1;
              var ltMajor = 2;
              var minMinor = 9;
              var minPatch = 1;
              var maxMajor = 4;

              if (
                (version[0] < ltMajor && version[1] < minMinor) ||
                (version[0] === minMajor &&
                  version[1] === minMinor &&
                  version[2] < minPatch) ||
                version[0] >= maxMajor
              ) {
                throw new Error(
                  "Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0"
                );
              }
            },
          };
          Util.jQueryDetection();
          setTransitionEndSupport();

          /**
           * Constants
           */

          var NAME$a = "alert";
          var VERSION$a = "4.6.2";
          var DATA_KEY$a = "bs.alert";
          var EVENT_KEY$a = "." + DATA_KEY$a;
          var DATA_API_KEY$7 = ".data-api";
          var JQUERY_NO_CONFLICT$a = $__default["default"].fn[NAME$a];
          var CLASS_NAME_ALERT = "alert";
          var CLASS_NAME_FADE$5 = "fade";
          var CLASS_NAME_SHOW$7 = "show";
          var EVENT_CLOSE = "close" + EVENT_KEY$a;
          var EVENT_CLOSED = "closed" + EVENT_KEY$a;
          var EVENT_CLICK_DATA_API$6 = "click" + EVENT_KEY$a + DATA_API_KEY$7;
          var SELECTOR_DISMISS = '[data-dismiss="alert"]';
          /**
           * Class definition
           */

          var Alert = /*#__PURE__*/ (function () {
            function Alert(element) {
              this._element = element;
            } // Getters

            var _proto = Alert.prototype;

            // Public
            _proto.close = function close(element) {
              var rootElement = this._element;

              if (element) {
                rootElement = this._getRootElement(element);
              }

              var customEvent = this._triggerCloseEvent(rootElement);

              if (customEvent.isDefaultPrevented()) {
                return;
              }

              this._removeElement(rootElement);
            };

            _proto.dispose = function dispose() {
              $__default["default"].removeData(this._element, DATA_KEY$a);
              this._element = null;
            }; // Private

            _proto._getRootElement = function _getRootElement(element) {
              var selector = Util.getSelectorFromElement(element);
              var parent = false;

              if (selector) {
                parent = document.querySelector(selector);
              }

              if (!parent) {
                parent = $__default["default"](element).closest(
                  "." + CLASS_NAME_ALERT
                )[0];
              }

              return parent;
            };

            _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
              var closeEvent = $__default["default"].Event(EVENT_CLOSE);
              $__default["default"](element).trigger(closeEvent);
              return closeEvent;
            };

            _proto._removeElement = function _removeElement(element) {
              var _this = this;

              $__default["default"](element).removeClass(CLASS_NAME_SHOW$7);

              if (!$__default["default"](element).hasClass(CLASS_NAME_FADE$5)) {
                this._destroyElement(element);

                return;
              }

              var transitionDuration =
                Util.getTransitionDurationFromElement(element);
              $__default["default"](element)
                .one(Util.TRANSITION_END, function (event) {
                  return _this._destroyElement(element, event);
                })
                .emulateTransitionEnd(transitionDuration);
            };

            _proto._destroyElement = function _destroyElement(element) {
              $__default["default"](element)
                .detach()
                .trigger(EVENT_CLOSED)
                .remove();
            }; // Static

            Alert._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var $element = $__default["default"](this);
                var data = $element.data(DATA_KEY$a);

                if (!data) {
                  data = new Alert(this);
                  $element.data(DATA_KEY$a, data);
                }

                if (config === "close") {
                  data[config](this);
                }
              });
            };

            Alert._handleDismiss = function _handleDismiss(alertInstance) {
              return function (event) {
                if (event) {
                  event.preventDefault();
                }

                alertInstance.close(this);
              };
            };

            _createClass(Alert, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$a;
                },
              },
            ]);

            return Alert;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document).on(
            EVENT_CLICK_DATA_API$6,
            SELECTOR_DISMISS,
            Alert._handleDismiss(new Alert())
          );
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$a] = Alert._jQueryInterface;
          $__default["default"].fn[NAME$a].Constructor = Alert;

          $__default["default"].fn[NAME$a].noConflict = function () {
            $__default["default"].fn[NAME$a] = JQUERY_NO_CONFLICT$a;
            return Alert._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$9 = "button";
          var VERSION$9 = "4.6.2";
          var DATA_KEY$9 = "bs.button";
          var EVENT_KEY$9 = "." + DATA_KEY$9;
          var DATA_API_KEY$6 = ".data-api";
          var JQUERY_NO_CONFLICT$9 = $__default["default"].fn[NAME$9];
          var CLASS_NAME_ACTIVE$3 = "active";
          var CLASS_NAME_BUTTON = "btn";
          var CLASS_NAME_FOCUS = "focus";
          var EVENT_CLICK_DATA_API$5 = "click" + EVENT_KEY$9 + DATA_API_KEY$6;
          var EVENT_FOCUS_BLUR_DATA_API =
            "focus" +
            EVENT_KEY$9 +
            DATA_API_KEY$6 +
            " " +
            ("blur" + EVENT_KEY$9 + DATA_API_KEY$6);
          var EVENT_LOAD_DATA_API$2 = "load" + EVENT_KEY$9 + DATA_API_KEY$6;
          var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
          var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
          var SELECTOR_DATA_TOGGLE$4 = '[data-toggle="button"]';
          var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
          var SELECTOR_INPUT = 'input:not([type="hidden"])';
          var SELECTOR_ACTIVE$2 = ".active";
          var SELECTOR_BUTTON = ".btn";
          /**
           * Class definition
           */

          var Button = /*#__PURE__*/ (function () {
            function Button(element) {
              this._element = element;
              this.shouldAvoidTriggerChange = false;
            } // Getters

            var _proto = Button.prototype;

            // Public
            _proto.toggle = function toggle() {
              var triggerChangeEvent = true;
              var addAriaPressed = true;
              var rootElement = $__default["default"](this._element).closest(
                SELECTOR_DATA_TOGGLES
              )[0];

              if (rootElement) {
                var input = this._element.querySelector(SELECTOR_INPUT);

                if (input) {
                  if (input.type === "radio") {
                    if (
                      input.checked &&
                      this._element.classList.contains(CLASS_NAME_ACTIVE$3)
                    ) {
                      triggerChangeEvent = false;
                    } else {
                      var activeElement =
                        rootElement.querySelector(SELECTOR_ACTIVE$2);

                      if (activeElement) {
                        $__default["default"](activeElement).removeClass(
                          CLASS_NAME_ACTIVE$3
                        );
                      }
                    }
                  }

                  if (triggerChangeEvent) {
                    // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
                    if (input.type === "checkbox" || input.type === "radio") {
                      input.checked =
                        !this._element.classList.contains(CLASS_NAME_ACTIVE$3);
                    }

                    if (!this.shouldAvoidTriggerChange) {
                      $__default["default"](input).trigger("change");
                    }
                  }

                  input.focus();
                  addAriaPressed = false;
                }
              }

              if (
                !(
                  this._element.hasAttribute("disabled") ||
                  this._element.classList.contains("disabled")
                )
              ) {
                if (addAriaPressed) {
                  this._element.setAttribute(
                    "aria-pressed",
                    !this._element.classList.contains(CLASS_NAME_ACTIVE$3)
                  );
                }

                if (triggerChangeEvent) {
                  $__default["default"](this._element).toggleClass(
                    CLASS_NAME_ACTIVE$3
                  );
                }
              }
            };

            _proto.dispose = function dispose() {
              $__default["default"].removeData(this._element, DATA_KEY$9);
              this._element = null;
            }; // Static

            Button._jQueryInterface = function _jQueryInterface(
              config,
              avoidTriggerChange
            ) {
              return this.each(function () {
                var $element = $__default["default"](this);
                var data = $element.data(DATA_KEY$9);

                if (!data) {
                  data = new Button(this);
                  $element.data(DATA_KEY$9, data);
                }

                data.shouldAvoidTriggerChange = avoidTriggerChange;

                if (config === "toggle") {
                  data[config]();
                }
              });
            };

            _createClass(Button, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$9;
                },
              },
            ]);

            return Button;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document)
            .on(
              EVENT_CLICK_DATA_API$5,
              SELECTOR_DATA_TOGGLE_CARROT,
              function (event) {
                var button = event.target;
                var initialButton = button;

                if (
                  !$__default["default"](button).hasClass(CLASS_NAME_BUTTON)
                ) {
                  button =
                    $__default["default"](button).closest(SELECTOR_BUTTON)[0];
                }

                if (
                  !button ||
                  button.hasAttribute("disabled") ||
                  button.classList.contains("disabled")
                ) {
                  event.preventDefault(); // work around Firefox bug #1540995
                } else {
                  var inputBtn = button.querySelector(SELECTOR_INPUT);

                  if (
                    inputBtn &&
                    (inputBtn.hasAttribute("disabled") ||
                      inputBtn.classList.contains("disabled"))
                  ) {
                    event.preventDefault(); // work around Firefox bug #1540995

                    return;
                  }

                  if (
                    initialButton.tagName === "INPUT" ||
                    button.tagName !== "LABEL"
                  ) {
                    Button._jQueryInterface.call(
                      $__default["default"](button),
                      "toggle",
                      initialButton.tagName === "INPUT"
                    );
                  }
                }
              }
            )
            .on(
              EVENT_FOCUS_BLUR_DATA_API,
              SELECTOR_DATA_TOGGLE_CARROT,
              function (event) {
                var button = $__default["default"](event.target).closest(
                  SELECTOR_BUTTON
                )[0];
                $__default["default"](button).toggleClass(
                  CLASS_NAME_FOCUS,
                  /^focus(in)?$/.test(event.type)
                );
              }
            );
          $__default["default"](window).on(EVENT_LOAD_DATA_API$2, function () {
            // ensure correct active class is set to match the controls' actual values/states
            // find all checkboxes/readio buttons inside data-toggle groups
            var buttons = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS)
            );

            for (var i = 0, len = buttons.length; i < len; i++) {
              var button = buttons[i];
              var input = button.querySelector(SELECTOR_INPUT);

              if (input.checked || input.hasAttribute("checked")) {
                button.classList.add(CLASS_NAME_ACTIVE$3);
              } else {
                button.classList.remove(CLASS_NAME_ACTIVE$3);
              }
            } // find all button toggles

            buttons = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_TOGGLE$4)
            );

            for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
              var _button = buttons[_i];

              if (_button.getAttribute("aria-pressed") === "true") {
                _button.classList.add(CLASS_NAME_ACTIVE$3);
              } else {
                _button.classList.remove(CLASS_NAME_ACTIVE$3);
              }
            }
          });
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$9] = Button._jQueryInterface;
          $__default["default"].fn[NAME$9].Constructor = Button;

          $__default["default"].fn[NAME$9].noConflict = function () {
            $__default["default"].fn[NAME$9] = JQUERY_NO_CONFLICT$9;
            return Button._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$8 = "carousel";
          var VERSION$8 = "4.6.2";
          var DATA_KEY$8 = "bs.carousel";
          var EVENT_KEY$8 = "." + DATA_KEY$8;
          var DATA_API_KEY$5 = ".data-api";
          var JQUERY_NO_CONFLICT$8 = $__default["default"].fn[NAME$8];
          var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

          var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

          var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

          var SWIPE_THRESHOLD = 40;
          var CLASS_NAME_CAROUSEL = "carousel";
          var CLASS_NAME_ACTIVE$2 = "active";
          var CLASS_NAME_SLIDE = "slide";
          var CLASS_NAME_RIGHT = "carousel-item-right";
          var CLASS_NAME_LEFT = "carousel-item-left";
          var CLASS_NAME_NEXT = "carousel-item-next";
          var CLASS_NAME_PREV = "carousel-item-prev";
          var CLASS_NAME_POINTER_EVENT = "pointer-event";
          var DIRECTION_NEXT = "next";
          var DIRECTION_PREV = "prev";
          var DIRECTION_LEFT = "left";
          var DIRECTION_RIGHT = "right";
          var EVENT_SLIDE = "slide" + EVENT_KEY$8;
          var EVENT_SLID = "slid" + EVENT_KEY$8;
          var EVENT_KEYDOWN = "keydown" + EVENT_KEY$8;
          var EVENT_MOUSEENTER = "mouseenter" + EVENT_KEY$8;
          var EVENT_MOUSELEAVE = "mouseleave" + EVENT_KEY$8;
          var EVENT_TOUCHSTART = "touchstart" + EVENT_KEY$8;
          var EVENT_TOUCHMOVE = "touchmove" + EVENT_KEY$8;
          var EVENT_TOUCHEND = "touchend" + EVENT_KEY$8;
          var EVENT_POINTERDOWN = "pointerdown" + EVENT_KEY$8;
          var EVENT_POINTERUP = "pointerup" + EVENT_KEY$8;
          var EVENT_DRAG_START = "dragstart" + EVENT_KEY$8;
          var EVENT_LOAD_DATA_API$1 = "load" + EVENT_KEY$8 + DATA_API_KEY$5;
          var EVENT_CLICK_DATA_API$4 = "click" + EVENT_KEY$8 + DATA_API_KEY$5;
          var SELECTOR_ACTIVE$1 = ".active";
          var SELECTOR_ACTIVE_ITEM = ".active.carousel-item";
          var SELECTOR_ITEM = ".carousel-item";
          var SELECTOR_ITEM_IMG = ".carousel-item img";
          var SELECTOR_NEXT_PREV = ".carousel-item-next, .carousel-item-prev";
          var SELECTOR_INDICATORS = ".carousel-indicators";
          var SELECTOR_DATA_SLIDE = "[data-slide], [data-slide-to]";
          var SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
          var Default$7 = {
            interval: 5000,
            keyboard: true,
            slide: false,
            pause: "hover",
            wrap: true,
            touch: true,
          };
          var DefaultType$7 = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean",
            touch: "boolean",
          };
          var PointerType = {
            TOUCH: "touch",
            PEN: "pen",
          };
          /**
           * Class definition
           */

          var Carousel = /*#__PURE__*/ (function () {
            function Carousel(element, config) {
              this._items = null;
              this._interval = null;
              this._activeElement = null;
              this._isPaused = false;
              this._isSliding = false;
              this.touchTimeout = null;
              this.touchStartX = 0;
              this.touchDeltaX = 0;
              this._config = this._getConfig(config);
              this._element = element;
              this._indicatorsElement =
                this._element.querySelector(SELECTOR_INDICATORS);
              this._touchSupported =
                "ontouchstart" in document.documentElement ||
                navigator.maxTouchPoints > 0;
              this._pointerEvent = Boolean(
                window.PointerEvent || window.MSPointerEvent
              );

              this._addEventListeners();
            } // Getters

            var _proto = Carousel.prototype;

            // Public
            _proto.next = function next() {
              if (!this._isSliding) {
                this._slide(DIRECTION_NEXT);
              }
            };

            _proto.nextWhenVisible = function nextWhenVisible() {
              var $element = $__default["default"](this._element); // Don't call next when the page isn't visible
              // or the carousel or its parent isn't visible

              if (
                !document.hidden &&
                $element.is(":visible") &&
                $element.css("visibility") !== "hidden"
              ) {
                this.next();
              }
            };

            _proto.prev = function prev() {
              if (!this._isSliding) {
                this._slide(DIRECTION_PREV);
              }
            };

            _proto.pause = function pause(event) {
              if (!event) {
                this._isPaused = true;
              }

              if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
                Util.triggerTransitionEnd(this._element);
                this.cycle(true);
              }

              clearInterval(this._interval);
              this._interval = null;
            };

            _proto.cycle = function cycle(event) {
              if (!event) {
                this._isPaused = false;
              }

              if (this._interval) {
                clearInterval(this._interval);
                this._interval = null;
              }

              if (this._config.interval && !this._isPaused) {
                this._updateInterval();

                this._interval = setInterval(
                  (document.visibilityState
                    ? this.nextWhenVisible
                    : this.next
                  ).bind(this),
                  this._config.interval
                );
              }
            };

            _proto.to = function to(index) {
              var _this = this;

              this._activeElement =
                this._element.querySelector(SELECTOR_ACTIVE_ITEM);

              var activeIndex = this._getItemIndex(this._activeElement);

              if (index > this._items.length - 1 || index < 0) {
                return;
              }

              if (this._isSliding) {
                $__default["default"](this._element).one(
                  EVENT_SLID,
                  function () {
                    return _this.to(index);
                  }
                );
                return;
              }

              if (activeIndex === index) {
                this.pause();
                this.cycle();
                return;
              }

              var direction =
                index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;

              this._slide(direction, this._items[index]);
            };

            _proto.dispose = function dispose() {
              $__default["default"](this._element).off(EVENT_KEY$8);
              $__default["default"].removeData(this._element, DATA_KEY$8);
              this._items = null;
              this._config = null;
              this._element = null;
              this._interval = null;
              this._isPaused = null;
              this._isSliding = null;
              this._activeElement = null;
              this._indicatorsElement = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _extends({}, Default$7, config);
              Util.typeCheckConfig(NAME$8, config, DefaultType$7);
              return config;
            };

            _proto._handleSwipe = function _handleSwipe() {
              var absDeltax = Math.abs(this.touchDeltaX);

              if (absDeltax <= SWIPE_THRESHOLD) {
                return;
              }

              var direction = absDeltax / this.touchDeltaX;
              this.touchDeltaX = 0; // swipe left

              if (direction > 0) {
                this.prev();
              } // swipe right

              if (direction < 0) {
                this.next();
              }
            };

            _proto._addEventListeners = function _addEventListeners() {
              var _this2 = this;

              if (this._config.keyboard) {
                $__default["default"](this._element).on(
                  EVENT_KEYDOWN,
                  function (event) {
                    return _this2._keydown(event);
                  }
                );
              }

              if (this._config.pause === "hover") {
                $__default["default"](this._element)
                  .on(EVENT_MOUSEENTER, function (event) {
                    return _this2.pause(event);
                  })
                  .on(EVENT_MOUSELEAVE, function (event) {
                    return _this2.cycle(event);
                  });
              }

              if (this._config.touch) {
                this._addTouchEventListeners();
              }
            };

            _proto._addTouchEventListeners =
              function _addTouchEventListeners() {
                var _this3 = this;

                if (!this._touchSupported) {
                  return;
                }

                var start = function start(event) {
                  if (
                    _this3._pointerEvent &&
                    PointerType[event.originalEvent.pointerType.toUpperCase()]
                  ) {
                    _this3.touchStartX = event.originalEvent.clientX;
                  } else if (!_this3._pointerEvent) {
                    _this3.touchStartX = event.originalEvent.touches[0].clientX;
                  }
                };

                var move = function move(event) {
                  // ensure swiping with one touch and not pinching
                  _this3.touchDeltaX =
                    event.originalEvent.touches &&
                      event.originalEvent.touches.length > 1
                      ? 0
                      : event.originalEvent.touches[0].clientX -
                      _this3.touchStartX;
                };

                var end = function end(event) {
                  if (
                    _this3._pointerEvent &&
                    PointerType[event.originalEvent.pointerType.toUpperCase()]
                  ) {
                    _this3.touchDeltaX =
                      event.originalEvent.clientX - _this3.touchStartX;
                  }

                  _this3._handleSwipe();

                  if (_this3._config.pause === "hover") {
                    // If it's a touch-enabled device, mouseenter/leave are fired as
                    // part of the mouse compatibility events on first tap - the carousel
                    // would stop cycling until user tapped out of it;
                    // here, we listen for touchend, explicitly pause the carousel
                    // (as if it's the second time we tap on it, mouseenter compat event
                    // is NOT fired) and after a timeout (to allow for mouse compatibility
                    // events to fire) we explicitly restart cycling
                    _this3.pause();

                    if (_this3.touchTimeout) {
                      clearTimeout(_this3.touchTimeout);
                    }

                    _this3.touchTimeout = setTimeout(function (event) {
                      return _this3.cycle(event);
                    }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
                  }
                };

                $__default["default"](
                  this._element.querySelectorAll(SELECTOR_ITEM_IMG)
                ).on(EVENT_DRAG_START, function (e) {
                  return e.preventDefault();
                });

                if (this._pointerEvent) {
                  $__default["default"](this._element).on(
                    EVENT_POINTERDOWN,
                    function (event) {
                      return start(event);
                    }
                  );
                  $__default["default"](this._element).on(
                    EVENT_POINTERUP,
                    function (event) {
                      return end(event);
                    }
                  );

                  this._element.classList.add(CLASS_NAME_POINTER_EVENT);
                } else {
                  $__default["default"](this._element).on(
                    EVENT_TOUCHSTART,
                    function (event) {
                      return start(event);
                    }
                  );
                  $__default["default"](this._element).on(
                    EVENT_TOUCHMOVE,
                    function (event) {
                      return move(event);
                    }
                  );
                  $__default["default"](this._element).on(
                    EVENT_TOUCHEND,
                    function (event) {
                      return end(event);
                    }
                  );
                }
              };

            _proto._keydown = function _keydown(event) {
              if (/input|textarea/i.test(event.target.tagName)) {
                return;
              }

              switch (event.which) {
                case ARROW_LEFT_KEYCODE:
                  event.preventDefault();
                  this.prev();
                  break;

                case ARROW_RIGHT_KEYCODE:
                  event.preventDefault();
                  this.next();
                  break;
              }
            };

            _proto._getItemIndex = function _getItemIndex(element) {
              this._items =
                element && element.parentNode
                  ? [].slice.call(
                    element.parentNode.querySelectorAll(SELECTOR_ITEM)
                  )
                  : [];
              return this._items.indexOf(element);
            };

            _proto._getItemByDirection = function _getItemByDirection(
              direction,
              activeElement
            ) {
              var isNextDirection = direction === DIRECTION_NEXT;
              var isPrevDirection = direction === DIRECTION_PREV;

              var activeIndex = this._getItemIndex(activeElement);

              var lastItemIndex = this._items.length - 1;
              var isGoingToWrap =
                (isPrevDirection && activeIndex === 0) ||
                (isNextDirection && activeIndex === lastItemIndex);

              if (isGoingToWrap && !this._config.wrap) {
                return activeElement;
              }

              var delta = direction === DIRECTION_PREV ? -1 : 1;
              var itemIndex = (activeIndex + delta) % this._items.length;
              return itemIndex === -1
                ? this._items[this._items.length - 1]
                : this._items[itemIndex];
            };

            _proto._triggerSlideEvent = function _triggerSlideEvent(
              relatedTarget,
              eventDirectionName
            ) {
              var targetIndex = this._getItemIndex(relatedTarget);

              var fromIndex = this._getItemIndex(
                this._element.querySelector(SELECTOR_ACTIVE_ITEM)
              );

              var slideEvent = $__default["default"].Event(EVENT_SLIDE, {
                relatedTarget: relatedTarget,
                direction: eventDirectionName,
                from: fromIndex,
                to: targetIndex,
              });
              $__default["default"](this._element).trigger(slideEvent);
              return slideEvent;
            };

            _proto._setActiveIndicatorElement =
              function _setActiveIndicatorElement(element) {
                if (this._indicatorsElement) {
                  var indicators = [].slice.call(
                    this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1)
                  );
                  $__default["default"](indicators).removeClass(
                    CLASS_NAME_ACTIVE$2
                  );

                  var nextIndicator =
                    this._indicatorsElement.children[
                    this._getItemIndex(element)
                    ];

                  if (nextIndicator) {
                    $__default["default"](nextIndicator).addClass(
                      CLASS_NAME_ACTIVE$2
                    );
                  }
                }
              };

            _proto._updateInterval = function _updateInterval() {
              var element =
                this._activeElement ||
                this._element.querySelector(SELECTOR_ACTIVE_ITEM);

              if (!element) {
                return;
              }

              var elementInterval = parseInt(
                element.getAttribute("data-interval"),
                10
              );

              if (elementInterval) {
                this._config.defaultInterval =
                  this._config.defaultInterval || this._config.interval;
                this._config.interval = elementInterval;
              } else {
                this._config.interval =
                  this._config.defaultInterval || this._config.interval;
              }
            };

            _proto._slide = function _slide(direction, element) {
              var _this4 = this;

              var activeElement =
                this._element.querySelector(SELECTOR_ACTIVE_ITEM);

              var activeElementIndex = this._getItemIndex(activeElement);

              var nextElement =
                element ||
                (activeElement &&
                  this._getItemByDirection(direction, activeElement));

              var nextElementIndex = this._getItemIndex(nextElement);

              var isCycling = Boolean(this._interval);
              var directionalClassName;
              var orderClassName;
              var eventDirectionName;

              if (direction === DIRECTION_NEXT) {
                directionalClassName = CLASS_NAME_LEFT;
                orderClassName = CLASS_NAME_NEXT;
                eventDirectionName = DIRECTION_LEFT;
              } else {
                directionalClassName = CLASS_NAME_RIGHT;
                orderClassName = CLASS_NAME_PREV;
                eventDirectionName = DIRECTION_RIGHT;
              }

              if (
                nextElement &&
                $__default["default"](nextElement).hasClass(CLASS_NAME_ACTIVE$2)
              ) {
                this._isSliding = false;
                return;
              }

              var slideEvent = this._triggerSlideEvent(
                nextElement,
                eventDirectionName
              );

              if (slideEvent.isDefaultPrevented()) {
                return;
              }

              if (!activeElement || !nextElement) {
                // Some weirdness is happening, so we bail
                return;
              }

              this._isSliding = true;

              if (isCycling) {
                this.pause();
              }

              this._setActiveIndicatorElement(nextElement);

              this._activeElement = nextElement;
              var slidEvent = $__default["default"].Event(EVENT_SLID, {
                relatedTarget: nextElement,
                direction: eventDirectionName,
                from: activeElementIndex,
                to: nextElementIndex,
              });

              if (
                $__default["default"](this._element).hasClass(CLASS_NAME_SLIDE)
              ) {
                $__default["default"](nextElement).addClass(orderClassName);
                Util.reflow(nextElement);
                $__default["default"](activeElement).addClass(
                  directionalClassName
                );
                $__default["default"](nextElement).addClass(
                  directionalClassName
                );
                var transitionDuration =
                  Util.getTransitionDurationFromElement(activeElement);
                $__default["default"](activeElement)
                  .one(Util.TRANSITION_END, function () {
                    $__default["default"](nextElement)
                      .removeClass(directionalClassName + " " + orderClassName)
                      .addClass(CLASS_NAME_ACTIVE$2);
                    $__default["default"](activeElement).removeClass(
                      CLASS_NAME_ACTIVE$2 +
                      " " +
                      orderClassName +
                      " " +
                      directionalClassName
                    );
                    _this4._isSliding = false;
                    setTimeout(function () {
                      return $__default["default"](_this4._element).trigger(
                        slidEvent
                      );
                    }, 0);
                  })
                  .emulateTransitionEnd(transitionDuration);
              } else {
                $__default["default"](activeElement).removeClass(
                  CLASS_NAME_ACTIVE$2
                );
                $__default["default"](nextElement).addClass(
                  CLASS_NAME_ACTIVE$2
                );
                this._isSliding = false;
                $__default["default"](this._element).trigger(slidEvent);
              }

              if (isCycling) {
                this.cycle();
              }
            }; // Static

            Carousel._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var data = $__default["default"](this).data(DATA_KEY$8);

                var _config = _extends(
                  {},
                  Default$7,
                  $__default["default"](this).data()
                );

                if (typeof config === "object") {
                  _config = _extends({}, _config, config);
                }

                var action =
                  typeof config === "string" ? config : _config.slide;

                if (!data) {
                  data = new Carousel(this, _config);
                  $__default["default"](this).data(DATA_KEY$8, data);
                }

                if (typeof config === "number") {
                  data.to(config);
                } else if (typeof action === "string") {
                  if (typeof data[action] === "undefined") {
                    throw new TypeError('No method named "' + action + '"');
                  }

                  data[action]();
                } else if (_config.interval && _config.ride) {
                  data.pause();
                  data.cycle();
                }
              });
            };

            Carousel._dataApiClickHandler = function _dataApiClickHandler(
              event
            ) {
              var selector = Util.getSelectorFromElement(this);

              if (!selector) {
                return;
              }

              var target = $__default["default"](selector)[0];

              if (
                !target ||
                !$__default["default"](target).hasClass(CLASS_NAME_CAROUSEL)
              ) {
                return;
              }

              var config = _extends(
                {},
                $__default["default"](target).data(),
                $__default["default"](this).data()
              );

              var slideIndex = this.getAttribute("data-slide-to");

              if (slideIndex) {
                config.interval = false;
              }

              Carousel._jQueryInterface.call(
                $__default["default"](target),
                config
              );

              if (slideIndex) {
                $__default["default"](target).data(DATA_KEY$8).to(slideIndex);
              }

              event.preventDefault();
            };

            _createClass(Carousel, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$8;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$7;
                },
              },
            ]);

            return Carousel;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document).on(
            EVENT_CLICK_DATA_API$4,
            SELECTOR_DATA_SLIDE,
            Carousel._dataApiClickHandler
          );
          $__default["default"](window).on(EVENT_LOAD_DATA_API$1, function () {
            var carousels = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_RIDE)
            );

            for (var i = 0, len = carousels.length; i < len; i++) {
              var $carousel = $__default["default"](carousels[i]);

              Carousel._jQueryInterface.call($carousel, $carousel.data());
            }
          });
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$8] = Carousel._jQueryInterface;
          $__default["default"].fn[NAME$8].Constructor = Carousel;

          $__default["default"].fn[NAME$8].noConflict = function () {
            $__default["default"].fn[NAME$8] = JQUERY_NO_CONFLICT$8;
            return Carousel._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$7 = "collapse";
          var VERSION$7 = "4.6.2";
          var DATA_KEY$7 = "bs.collapse";
          var EVENT_KEY$7 = "." + DATA_KEY$7;
          var DATA_API_KEY$4 = ".data-api";
          var JQUERY_NO_CONFLICT$7 = $__default["default"].fn[NAME$7];
          var CLASS_NAME_SHOW$6 = "show";
          var CLASS_NAME_COLLAPSE = "collapse";
          var CLASS_NAME_COLLAPSING = "collapsing";
          var CLASS_NAME_COLLAPSED = "collapsed";
          var DIMENSION_WIDTH = "width";
          var DIMENSION_HEIGHT = "height";
          var EVENT_SHOW$4 = "show" + EVENT_KEY$7;
          var EVENT_SHOWN$4 = "shown" + EVENT_KEY$7;
          var EVENT_HIDE$4 = "hide" + EVENT_KEY$7;
          var EVENT_HIDDEN$4 = "hidden" + EVENT_KEY$7;
          var EVENT_CLICK_DATA_API$3 = "click" + EVENT_KEY$7 + DATA_API_KEY$4;
          var SELECTOR_ACTIVES = ".show, .collapsing";
          var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="collapse"]';
          var Default$6 = {
            toggle: true,
            parent: "",
          };
          var DefaultType$6 = {
            toggle: "boolean",
            parent: "(string|element)",
          };
          /**
           * Class definition
           */

          var Collapse = /*#__PURE__*/ (function () {
            function Collapse(element, config) {
              this._isTransitioning = false;
              this._element = element;
              this._config = this._getConfig(config);
              this._triggerArray = [].slice.call(
                document.querySelectorAll(
                  '[data-toggle="collapse"][href="#' +
                  element.id +
                  '"],' +
                  ('[data-toggle="collapse"][data-target="#' +
                    element.id +
                    '"]')
                )
              );
              var toggleList = [].slice.call(
                document.querySelectorAll(SELECTOR_DATA_TOGGLE$3)
              );

              for (var i = 0, len = toggleList.length; i < len; i++) {
                var elem = toggleList[i];
                var selector = Util.getSelectorFromElement(elem);
                var filterElement = [].slice
                  .call(document.querySelectorAll(selector))
                  .filter(function (foundElem) {
                    return foundElem === element;
                  });

                if (selector !== null && filterElement.length > 0) {
                  this._selector = selector;

                  this._triggerArray.push(elem);
                }
              }

              this._parent = this._config.parent ? this._getParent() : null;

              if (!this._config.parent) {
                this._addAriaAndCollapsedClass(
                  this._element,
                  this._triggerArray
                );
              }

              if (this._config.toggle) {
                this.toggle();
              }
            } // Getters

            var _proto = Collapse.prototype;

            // Public
            _proto.toggle = function toggle() {
              if (
                $__default["default"](this._element).hasClass(CLASS_NAME_SHOW$6)
              ) {
                this.hide();
              } else {
                this.show();
              }
            };

            _proto.show = function show() {
              var _this = this;

              if (
                this._isTransitioning ||
                $__default["default"](this._element).hasClass(CLASS_NAME_SHOW$6)
              ) {
                return;
              }

              var actives;
              var activesData;

              if (this._parent) {
                actives = [].slice
                  .call(this._parent.querySelectorAll(SELECTOR_ACTIVES))
                  .filter(function (elem) {
                    if (typeof _this._config.parent === "string") {
                      return (
                        elem.getAttribute("data-parent") ===
                        _this._config.parent
                      );
                    }

                    return elem.classList.contains(CLASS_NAME_COLLAPSE);
                  });

                if (actives.length === 0) {
                  actives = null;
                }
              }

              if (actives) {
                activesData = $__default["default"](actives)
                  .not(this._selector)
                  .data(DATA_KEY$7);

                if (activesData && activesData._isTransitioning) {
                  return;
                }
              }

              var startEvent = $__default["default"].Event(EVENT_SHOW$4);
              $__default["default"](this._element).trigger(startEvent);

              if (startEvent.isDefaultPrevented()) {
                return;
              }

              if (actives) {
                Collapse._jQueryInterface.call(
                  $__default["default"](actives).not(this._selector),
                  "hide"
                );

                if (!activesData) {
                  $__default["default"](actives).data(DATA_KEY$7, null);
                }
              }

              var dimension = this._getDimension();

              $__default["default"](this._element)
                .removeClass(CLASS_NAME_COLLAPSE)
                .addClass(CLASS_NAME_COLLAPSING);
              this._element.style[dimension] = 0;

              if (this._triggerArray.length) {
                $__default["default"](this._triggerArray)
                  .removeClass(CLASS_NAME_COLLAPSED)
                  .attr("aria-expanded", true);
              }

              this.setTransitioning(true);

              var complete = function complete() {
                $__default["default"](_this._element)
                  .removeClass(CLASS_NAME_COLLAPSING)
                  .addClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$6);
                _this._element.style[dimension] = "";

                _this.setTransitioning(false);

                $__default["default"](_this._element).trigger(EVENT_SHOWN$4);
              };

              var capitalizedDimension =
                dimension[0].toUpperCase() + dimension.slice(1);
              var scrollSize = "scroll" + capitalizedDimension;
              var transitionDuration = Util.getTransitionDurationFromElement(
                this._element
              );
              $__default["default"](this._element)
                .one(Util.TRANSITION_END, complete)
                .emulateTransitionEnd(transitionDuration);
              this._element.style[dimension] = this._element[scrollSize] + "px";
            };

            _proto.hide = function hide() {
              var _this2 = this;

              if (
                this._isTransitioning ||
                !$__default["default"](this._element).hasClass(
                  CLASS_NAME_SHOW$6
                )
              ) {
                return;
              }

              var startEvent = $__default["default"].Event(EVENT_HIDE$4);
              $__default["default"](this._element).trigger(startEvent);

              if (startEvent.isDefaultPrevented()) {
                return;
              }

              var dimension = this._getDimension();

              this._element.style[dimension] =
                this._element.getBoundingClientRect()[dimension] + "px";
              Util.reflow(this._element);
              $__default["default"](this._element)
                .addClass(CLASS_NAME_COLLAPSING)
                .removeClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$6);
              var triggerArrayLength = this._triggerArray.length;

              if (triggerArrayLength > 0) {
                for (var i = 0; i < triggerArrayLength; i++) {
                  var trigger = this._triggerArray[i];
                  var selector = Util.getSelectorFromElement(trigger);

                  if (selector !== null) {
                    var $elem = $__default["default"](
                      [].slice.call(document.querySelectorAll(selector))
                    );

                    if (!$elem.hasClass(CLASS_NAME_SHOW$6)) {
                      $__default["default"](trigger)
                        .addClass(CLASS_NAME_COLLAPSED)
                        .attr("aria-expanded", false);
                    }
                  }
                }
              }

              this.setTransitioning(true);

              var complete = function complete() {
                _this2.setTransitioning(false);

                $__default["default"](_this2._element)
                  .removeClass(CLASS_NAME_COLLAPSING)
                  .addClass(CLASS_NAME_COLLAPSE)
                  .trigger(EVENT_HIDDEN$4);
              };

              this._element.style[dimension] = "";
              var transitionDuration = Util.getTransitionDurationFromElement(
                this._element
              );
              $__default["default"](this._element)
                .one(Util.TRANSITION_END, complete)
                .emulateTransitionEnd(transitionDuration);
            };

            _proto.setTransitioning = function setTransitioning(
              isTransitioning
            ) {
              this._isTransitioning = isTransitioning;
            };

            _proto.dispose = function dispose() {
              $__default["default"].removeData(this._element, DATA_KEY$7);
              this._config = null;
              this._parent = null;
              this._element = null;
              this._triggerArray = null;
              this._isTransitioning = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _extends({}, Default$6, config);
              config.toggle = Boolean(config.toggle); // Coerce string values

              Util.typeCheckConfig(NAME$7, config, DefaultType$6);
              return config;
            };

            _proto._getDimension = function _getDimension() {
              var hasWidth = $__default["default"](this._element).hasClass(
                DIMENSION_WIDTH
              );
              return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
            };

            _proto._getParent = function _getParent() {
              var _this3 = this;

              var parent;

              if (Util.isElement(this._config.parent)) {
                parent = this._config.parent; // It's a jQuery object

                if (typeof this._config.parent.jquery !== "undefined") {
                  parent = this._config.parent[0];
                }
              } else {
                parent = document.querySelector(this._config.parent);
              }

              var selector =
                '[data-toggle="collapse"][data-parent="' +
                this._config.parent +
                '"]';
              var children = [].slice.call(parent.querySelectorAll(selector));
              $__default["default"](children).each(function (i, element) {
                _this3._addAriaAndCollapsedClass(
                  Collapse._getTargetFromElement(element),
                  [element]
                );
              });
              return parent;
            };

            _proto._addAriaAndCollapsedClass =
              function _addAriaAndCollapsedClass(element, triggerArray) {
                var isOpen =
                  $__default["default"](element).hasClass(CLASS_NAME_SHOW$6);

                if (triggerArray.length) {
                  $__default["default"](triggerArray)
                    .toggleClass(CLASS_NAME_COLLAPSED, !isOpen)
                    .attr("aria-expanded", isOpen);
                }
              }; // Static

            Collapse._getTargetFromElement = function _getTargetFromElement(
              element
            ) {
              var selector = Util.getSelectorFromElement(element);
              return selector ? document.querySelector(selector) : null;
            };

            Collapse._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var $element = $__default["default"](this);
                var data = $element.data(DATA_KEY$7);

                var _config = _extends(
                  {},
                  Default$6,
                  $element.data(),
                  typeof config === "object" && config ? config : {}
                );

                if (
                  !data &&
                  _config.toggle &&
                  typeof config === "string" &&
                  /show|hide/.test(config)
                ) {
                  _config.toggle = false;
                }

                if (!data) {
                  data = new Collapse(this, _config);
                  $element.data(DATA_KEY$7, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Collapse, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$7;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$6;
                },
              },
            ]);

            return Collapse;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document).on(
            EVENT_CLICK_DATA_API$3,
            SELECTOR_DATA_TOGGLE$3,
            function (event) {
              // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
              if (event.currentTarget.tagName === "A") {
                event.preventDefault();
              }

              var $trigger = $__default["default"](this);
              var selector = Util.getSelectorFromElement(this);
              var selectors = [].slice.call(
                document.querySelectorAll(selector)
              );
              $__default["default"](selectors).each(function () {
                var $target = $__default["default"](this);
                var data = $target.data(DATA_KEY$7);
                var config = data ? "toggle" : $trigger.data();

                Collapse._jQueryInterface.call($target, config);
              });
            }
          );
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$7] = Collapse._jQueryInterface;
          $__default["default"].fn[NAME$7].Constructor = Collapse;

          $__default["default"].fn[NAME$7].noConflict = function () {
            $__default["default"].fn[NAME$7] = JQUERY_NO_CONFLICT$7;
            return Collapse._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$6 = "dropdown";
          var VERSION$6 = "4.6.2";
          var DATA_KEY$6 = "bs.dropdown";
          var EVENT_KEY$6 = "." + DATA_KEY$6;
          var DATA_API_KEY$3 = ".data-api";
          var JQUERY_NO_CONFLICT$6 = $__default["default"].fn[NAME$6];
          var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key

          var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

          var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

          var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

          var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

          var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

          var REGEXP_KEYDOWN = new RegExp(
            ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE$1
          );
          var CLASS_NAME_DISABLED$1 = "disabled";
          var CLASS_NAME_SHOW$5 = "show";
          var CLASS_NAME_DROPUP = "dropup";
          var CLASS_NAME_DROPRIGHT = "dropright";
          var CLASS_NAME_DROPLEFT = "dropleft";
          var CLASS_NAME_MENURIGHT = "dropdown-menu-right";
          var CLASS_NAME_POSITION_STATIC = "position-static";
          var EVENT_HIDE$3 = "hide" + EVENT_KEY$6;
          var EVENT_HIDDEN$3 = "hidden" + EVENT_KEY$6;
          var EVENT_SHOW$3 = "show" + EVENT_KEY$6;
          var EVENT_SHOWN$3 = "shown" + EVENT_KEY$6;
          var EVENT_CLICK = "click" + EVENT_KEY$6;
          var EVENT_CLICK_DATA_API$2 = "click" + EVENT_KEY$6 + DATA_API_KEY$3;
          var EVENT_KEYDOWN_DATA_API = "keydown" + EVENT_KEY$6 + DATA_API_KEY$3;
          var EVENT_KEYUP_DATA_API = "keyup" + EVENT_KEY$6 + DATA_API_KEY$3;
          var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="dropdown"]';
          var SELECTOR_FORM_CHILD = ".dropdown form";
          var SELECTOR_MENU = ".dropdown-menu";
          var SELECTOR_NAVBAR_NAV = ".navbar-nav";
          var SELECTOR_VISIBLE_ITEMS =
            ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
          var PLACEMENT_TOP = "top-start";
          var PLACEMENT_TOPEND = "top-end";
          var PLACEMENT_BOTTOM = "bottom-start";
          var PLACEMENT_BOTTOMEND = "bottom-end";
          var PLACEMENT_RIGHT = "right-start";
          var PLACEMENT_LEFT = "left-start";
          var Default$5 = {
            offset: 0,
            flip: true,
            boundary: "scrollParent",
            reference: "toggle",
            display: "dynamic",
            popperConfig: null,
          };
          var DefaultType$5 = {
            offset: "(number|string|function)",
            flip: "boolean",
            boundary: "(string|element)",
            reference: "(string|element)",
            display: "string",
            popperConfig: "(null|object)",
          };
          /**
           * Class definition
           */

          var Dropdown = /*#__PURE__*/ (function () {
            function Dropdown(element, config) {
              this._element = element;
              this._popper = null;
              this._config = this._getConfig(config);
              this._menu = this._getMenuElement();
              this._inNavbar = this._detectNavbar();

              this._addEventListeners();
            } // Getters

            var _proto = Dropdown.prototype;

            // Public
            _proto.toggle = function toggle() {
              if (
                this._element.disabled ||
                $__default["default"](this._element).hasClass(
                  CLASS_NAME_DISABLED$1
                )
              ) {
                return;
              }

              var isActive = $__default["default"](this._menu).hasClass(
                CLASS_NAME_SHOW$5
              );

              Dropdown._clearMenus();

              if (isActive) {
                return;
              }

              this.show(true);
            };

            _proto.show = function show(usePopper) {
              if (usePopper === void 0) {
                usePopper = false;
              }

              if (
                this._element.disabled ||
                $__default["default"](this._element).hasClass(
                  CLASS_NAME_DISABLED$1
                ) ||
                $__default["default"](this._menu).hasClass(CLASS_NAME_SHOW$5)
              ) {
                return;
              }

              var relatedTarget = {
                relatedTarget: this._element,
              };
              var showEvent = $__default["default"].Event(
                EVENT_SHOW$3,
                relatedTarget
              );

              var parent = Dropdown._getParentFromElement(this._element);

              $__default["default"](parent).trigger(showEvent);

              if (showEvent.isDefaultPrevented()) {
                return;
              } // Totally disable Popper for Dropdowns in Navbar

              if (!this._inNavbar && usePopper) {
                // Check for Popper dependency
                if (typeof Popper__default["default"] === "undefined") {
                  throw new TypeError(
                    "Bootstrap's dropdowns require Popper (https://popper.js.org)"
                  );
                }

                var referenceElement = this._element;

                if (this._config.reference === "parent") {
                  referenceElement = parent;
                } else if (Util.isElement(this._config.reference)) {
                  referenceElement = this._config.reference; // Check if it's jQuery element

                  if (typeof this._config.reference.jquery !== "undefined") {
                    referenceElement = this._config.reference[0];
                  }
                } // If boundary is not `scrollParent`, then set position to `static`
                // to allow the menu to "escape" the scroll parent's boundaries
                // https://github.com/twbs/bootstrap/issues/24251

                if (this._config.boundary !== "scrollParent") {
                  $__default["default"](parent).addClass(
                    CLASS_NAME_POSITION_STATIC
                  );
                }

                this._popper = new Popper__default["default"](
                  referenceElement,
                  this._menu,
                  this._getPopperConfig()
                );
              } // If this is a touch-enabled device we add extra
              // empty mouseover listeners to the body's immediate children;
              // only needed because of broken event delegation on iOS
              // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

              if (
                "ontouchstart" in document.documentElement &&
                $__default["default"](parent).closest(SELECTOR_NAVBAR_NAV)
                  .length === 0
              ) {
                $__default["default"](document.body)
                  .children()
                  .on("mouseover", null, $__default["default"].noop);
              }

              this._element.focus();

              this._element.setAttribute("aria-expanded", true);

              $__default["default"](this._menu).toggleClass(CLASS_NAME_SHOW$5);
              $__default["default"](parent)
                .toggleClass(CLASS_NAME_SHOW$5)
                .trigger(
                  $__default["default"].Event(EVENT_SHOWN$3, relatedTarget)
                );
            };

            _proto.hide = function hide() {
              if (
                this._element.disabled ||
                $__default["default"](this._element).hasClass(
                  CLASS_NAME_DISABLED$1
                ) ||
                !$__default["default"](this._menu).hasClass(CLASS_NAME_SHOW$5)
              ) {
                return;
              }

              var relatedTarget = {
                relatedTarget: this._element,
              };
              var hideEvent = $__default["default"].Event(
                EVENT_HIDE$3,
                relatedTarget
              );

              var parent = Dropdown._getParentFromElement(this._element);

              $__default["default"](parent).trigger(hideEvent);

              if (hideEvent.isDefaultPrevented()) {
                return;
              }

              if (this._popper) {
                this._popper.destroy();
              }

              $__default["default"](this._menu).toggleClass(CLASS_NAME_SHOW$5);
              $__default["default"](parent)
                .toggleClass(CLASS_NAME_SHOW$5)
                .trigger(
                  $__default["default"].Event(EVENT_HIDDEN$3, relatedTarget)
                );
            };

            _proto.dispose = function dispose() {
              $__default["default"].removeData(this._element, DATA_KEY$6);
              $__default["default"](this._element).off(EVENT_KEY$6);
              this._element = null;
              this._menu = null;

              if (this._popper !== null) {
                this._popper.destroy();

                this._popper = null;
              }
            };

            _proto.update = function update() {
              this._inNavbar = this._detectNavbar();

              if (this._popper !== null) {
                this._popper.scheduleUpdate();
              }
            }; // Private

            _proto._addEventListeners = function _addEventListeners() {
              var _this = this;

              $__default["default"](this._element).on(
                EVENT_CLICK,
                function (event) {
                  event.preventDefault();
                  event.stopPropagation();

                  _this.toggle();
                }
              );
            };

            _proto._getConfig = function _getConfig(config) {
              config = _extends(
                {},
                this.constructor.Default,
                $__default["default"](this._element).data(),
                config
              );
              Util.typeCheckConfig(
                NAME$6,
                config,
                this.constructor.DefaultType
              );
              return config;
            };

            _proto._getMenuElement = function _getMenuElement() {
              if (!this._menu) {
                var parent = Dropdown._getParentFromElement(this._element);

                if (parent) {
                  this._menu = parent.querySelector(SELECTOR_MENU);
                }
              }

              return this._menu;
            };

            _proto._getPlacement = function _getPlacement() {
              var $parentDropdown = $__default["default"](
                this._element.parentNode
              );
              var placement = PLACEMENT_BOTTOM; // Handle dropup

              if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
                placement = $__default["default"](this._menu).hasClass(
                  CLASS_NAME_MENURIGHT
                )
                  ? PLACEMENT_TOPEND
                  : PLACEMENT_TOP;
              } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
                placement = PLACEMENT_RIGHT;
              } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
                placement = PLACEMENT_LEFT;
              } else if (
                $__default["default"](this._menu).hasClass(CLASS_NAME_MENURIGHT)
              ) {
                placement = PLACEMENT_BOTTOMEND;
              }

              return placement;
            };

            _proto._detectNavbar = function _detectNavbar() {
              return (
                $__default["default"](this._element).closest(".navbar").length >
                0
              );
            };

            _proto._getOffset = function _getOffset() {
              var _this2 = this;

              var offset = {};

              if (typeof this._config.offset === "function") {
                offset.fn = function (data) {
                  data.offsets = _extends(
                    {},
                    data.offsets,
                    _this2._config.offset(data.offsets, _this2._element)
                  );
                  return data;
                };
              } else {
                offset.offset = this._config.offset;
              }

              return offset;
            };

            _proto._getPopperConfig = function _getPopperConfig() {
              var popperConfig = {
                placement: this._getPlacement(),
                modifiers: {
                  offset: this._getOffset(),
                  flip: {
                    enabled: this._config.flip,
                  },
                  preventOverflow: {
                    boundariesElement: this._config.boundary,
                  },
                },
              }; // Disable Popper if we have a static display

              if (this._config.display === "static") {
                popperConfig.modifiers.applyStyle = {
                  enabled: false,
                };
              }

              return _extends({}, popperConfig, this._config.popperConfig);
            }; // Static

            Dropdown._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var data = $__default["default"](this).data(DATA_KEY$6);

                var _config = typeof config === "object" ? config : null;

                if (!data) {
                  data = new Dropdown(this, _config);
                  $__default["default"](this).data(DATA_KEY$6, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            Dropdown._clearMenus = function _clearMenus(event) {
              if (
                event &&
                (event.which === RIGHT_MOUSE_BUTTON_WHICH ||
                  (event.type === "keyup" && event.which !== TAB_KEYCODE))
              ) {
                return;
              }

              var toggles = [].slice.call(
                document.querySelectorAll(SELECTOR_DATA_TOGGLE$2)
              );

              for (var i = 0, len = toggles.length; i < len; i++) {
                var parent = Dropdown._getParentFromElement(toggles[i]);

                var context = $__default["default"](toggles[i]).data(
                  DATA_KEY$6
                );
                var relatedTarget = {
                  relatedTarget: toggles[i],
                };

                if (event && event.type === "click") {
                  relatedTarget.clickEvent = event;
                }

                if (!context) {
                  continue;
                }

                var dropdownMenu = context._menu;

                if (
                  !$__default["default"](parent).hasClass(CLASS_NAME_SHOW$5)
                ) {
                  continue;
                }

                if (
                  event &&
                  ((event.type === "click" &&
                    /input|textarea/i.test(event.target.tagName)) ||
                    (event.type === "keyup" && event.which === TAB_KEYCODE)) &&
                  $__default["default"].contains(parent, event.target)
                ) {
                  continue;
                }

                var hideEvent = $__default["default"].Event(
                  EVENT_HIDE$3,
                  relatedTarget
                );
                $__default["default"](parent).trigger(hideEvent);

                if (hideEvent.isDefaultPrevented()) {
                  continue;
                } // If this is a touch-enabled device we remove the extra
                // empty mouseover listeners we added for iOS support

                if ("ontouchstart" in document.documentElement) {
                  $__default["default"](document.body)
                    .children()
                    .off("mouseover", null, $__default["default"].noop);
                }

                toggles[i].setAttribute("aria-expanded", "false");

                if (context._popper) {
                  context._popper.destroy();
                }

                $__default["default"](dropdownMenu).removeClass(
                  CLASS_NAME_SHOW$5
                );
                $__default["default"](parent)
                  .removeClass(CLASS_NAME_SHOW$5)
                  .trigger(
                    $__default["default"].Event(EVENT_HIDDEN$3, relatedTarget)
                  );
              }
            };

            Dropdown._getParentFromElement = function _getParentFromElement(
              element
            ) {
              var parent;
              var selector = Util.getSelectorFromElement(element);

              if (selector) {
                parent = document.querySelector(selector);
              }

              return parent || element.parentNode;
            }; // eslint-disable-next-line complexity

            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(
              event
            ) {
              // If not input/textarea:
              //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
              // If input/textarea:
              //  - If space key => not a dropdown command
              //  - If key is other than escape
              //    - If key is not up or down => not a dropdown command
              //    - If trigger inside the menu => not a dropdown command
              if (
                /input|textarea/i.test(event.target.tagName)
                  ? event.which === SPACE_KEYCODE ||
                  (event.which !== ESCAPE_KEYCODE$1 &&
                    ((event.which !== ARROW_DOWN_KEYCODE &&
                      event.which !== ARROW_UP_KEYCODE) ||
                      $__default["default"](event.target).closest(
                        SELECTOR_MENU
                      ).length))
                  : !REGEXP_KEYDOWN.test(event.which)
              ) {
                return;
              }

              if (
                this.disabled ||
                $__default["default"](this).hasClass(CLASS_NAME_DISABLED$1)
              ) {
                return;
              }

              var parent = Dropdown._getParentFromElement(this);

              var isActive =
                $__default["default"](parent).hasClass(CLASS_NAME_SHOW$5);

              if (!isActive && event.which === ESCAPE_KEYCODE$1) {
                return;
              }

              event.preventDefault();
              event.stopPropagation();

              if (
                !isActive ||
                event.which === ESCAPE_KEYCODE$1 ||
                event.which === SPACE_KEYCODE
              ) {
                if (event.which === ESCAPE_KEYCODE$1) {
                  $__default["default"](
                    parent.querySelector(SELECTOR_DATA_TOGGLE$2)
                  ).trigger("focus");
                }

                $__default["default"](this).trigger("click");
                return;
              }

              var items = [].slice
                .call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS))
                .filter(function (item) {
                  return $__default["default"](item).is(":visible");
                });

              if (items.length === 0) {
                return;
              }

              var index = items.indexOf(event.target);

              if (event.which === ARROW_UP_KEYCODE && index > 0) {
                // Up
                index--;
              }

              if (
                event.which === ARROW_DOWN_KEYCODE &&
                index < items.length - 1
              ) {
                // Down
                index++;
              }

              if (index < 0) {
                index = 0;
              }

              items[index].focus();
            };

            _createClass(Dropdown, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$6;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$5;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$5;
                },
              },
            ]);

            return Dropdown;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document)
            .on(
              EVENT_KEYDOWN_DATA_API,
              SELECTOR_DATA_TOGGLE$2,
              Dropdown._dataApiKeydownHandler
            )
            .on(
              EVENT_KEYDOWN_DATA_API,
              SELECTOR_MENU,
              Dropdown._dataApiKeydownHandler
            )
            .on(
              EVENT_CLICK_DATA_API$2 + " " + EVENT_KEYUP_DATA_API,
              Dropdown._clearMenus
            )
            .on(
              EVENT_CLICK_DATA_API$2,
              SELECTOR_DATA_TOGGLE$2,
              function (event) {
                event.preventDefault();
                event.stopPropagation();

                Dropdown._jQueryInterface.call(
                  $__default["default"](this),
                  "toggle"
                );
              }
            )
            .on(EVENT_CLICK_DATA_API$2, SELECTOR_FORM_CHILD, function (e) {
              e.stopPropagation();
            });
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$6] = Dropdown._jQueryInterface;
          $__default["default"].fn[NAME$6].Constructor = Dropdown;

          $__default["default"].fn[NAME$6].noConflict = function () {
            $__default["default"].fn[NAME$6] = JQUERY_NO_CONFLICT$6;
            return Dropdown._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$5 = "modal";
          var VERSION$5 = "4.6.2";
          var DATA_KEY$5 = "bs.modal";
          var EVENT_KEY$5 = "." + DATA_KEY$5;
          var DATA_API_KEY$2 = ".data-api";
          var JQUERY_NO_CONFLICT$5 = $__default["default"].fn[NAME$5];
          var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

          var CLASS_NAME_SCROLLABLE = "modal-dialog-scrollable";
          var CLASS_NAME_SCROLLBAR_MEASURER = "modal-scrollbar-measure";
          var CLASS_NAME_BACKDROP = "modal-backdrop";
          var CLASS_NAME_OPEN = "modal-open";
          var CLASS_NAME_FADE$4 = "fade";
          var CLASS_NAME_SHOW$4 = "show";
          var CLASS_NAME_STATIC = "modal-static";
          var EVENT_HIDE$2 = "hide" + EVENT_KEY$5;
          var EVENT_HIDE_PREVENTED = "hidePrevented" + EVENT_KEY$5;
          var EVENT_HIDDEN$2 = "hidden" + EVENT_KEY$5;
          var EVENT_SHOW$2 = "show" + EVENT_KEY$5;
          var EVENT_SHOWN$2 = "shown" + EVENT_KEY$5;
          var EVENT_FOCUSIN = "focusin" + EVENT_KEY$5;
          var EVENT_RESIZE = "resize" + EVENT_KEY$5;
          var EVENT_CLICK_DISMISS$1 = "click.dismiss" + EVENT_KEY$5;
          var EVENT_KEYDOWN_DISMISS = "keydown.dismiss" + EVENT_KEY$5;
          var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss" + EVENT_KEY$5;
          var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss" + EVENT_KEY$5;
          var EVENT_CLICK_DATA_API$1 = "click" + EVENT_KEY$5 + DATA_API_KEY$2;
          var SELECTOR_DIALOG = ".modal-dialog";
          var SELECTOR_MODAL_BODY = ".modal-body";
          var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="modal"]';
          var SELECTOR_DATA_DISMISS$1 = '[data-dismiss="modal"]';
          var SELECTOR_FIXED_CONTENT =
            ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
          var SELECTOR_STICKY_CONTENT = ".sticky-top";
          var Default$4 = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true,
          };
          var DefaultType$4 = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean",
          };
          /**
           * Class definition
           */

          var Modal = /*#__PURE__*/ (function () {
            function Modal(element, config) {
              this._config = this._getConfig(config);
              this._element = element;
              this._dialog = element.querySelector(SELECTOR_DIALOG);
              this._backdrop = null;
              this._isShown = false;
              this._isBodyOverflowing = false;
              this._ignoreBackdropClick = false;
              this._isTransitioning = false;
              this._scrollbarWidth = 0;
            } // Getters

            var _proto = Modal.prototype;

            // Public
            _proto.toggle = function toggle(relatedTarget) {
              return this._isShown ? this.hide() : this.show(relatedTarget);
            };

            _proto.show = function show(relatedTarget) {
              var _this = this;

              if (this._isShown || this._isTransitioning) {
                return;
              }

              var showEvent = $__default["default"].Event(EVENT_SHOW$2, {
                relatedTarget: relatedTarget,
              });
              $__default["default"](this._element).trigger(showEvent);

              if (showEvent.isDefaultPrevented()) {
                return;
              }

              this._isShown = true;

              if (
                $__default["default"](this._element).hasClass(CLASS_NAME_FADE$4)
              ) {
                this._isTransitioning = true;
              }

              this._checkScrollbar();

              this._setScrollbar();

              this._adjustDialog();

              this._setEscapeEvent();

              this._setResizeEvent();

              $__default["default"](this._element).on(
                EVENT_CLICK_DISMISS$1,
                SELECTOR_DATA_DISMISS$1,
                function (event) {
                  return _this.hide(event);
                }
              );
              $__default["default"](this._dialog).on(
                EVENT_MOUSEDOWN_DISMISS,
                function () {
                  $__default["default"](_this._element).one(
                    EVENT_MOUSEUP_DISMISS,
                    function (event) {
                      if (
                        $__default["default"](event.target).is(_this._element)
                      ) {
                        _this._ignoreBackdropClick = true;
                      }
                    }
                  );
                }
              );

              this._showBackdrop(function () {
                return _this._showElement(relatedTarget);
              });
            };

            _proto.hide = function hide(event) {
              var _this2 = this;

              if (event) {
                event.preventDefault();
              }

              if (!this._isShown || this._isTransitioning) {
                return;
              }

              var hideEvent = $__default["default"].Event(EVENT_HIDE$2);
              $__default["default"](this._element).trigger(hideEvent);

              if (!this._isShown || hideEvent.isDefaultPrevented()) {
                return;
              }

              this._isShown = false;
              var transition = $__default["default"](this._element).hasClass(
                CLASS_NAME_FADE$4
              );

              if (transition) {
                this._isTransitioning = true;
              }

              this._setEscapeEvent();

              this._setResizeEvent();

              $__default["default"](document).off(EVENT_FOCUSIN);
              $__default["default"](this._element).removeClass(
                CLASS_NAME_SHOW$4
              );
              $__default["default"](this._element).off(EVENT_CLICK_DISMISS$1);
              $__default["default"](this._dialog).off(EVENT_MOUSEDOWN_DISMISS);

              if (transition) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $__default["default"](this._element)
                  .one(Util.TRANSITION_END, function (event) {
                    return _this2._hideModal(event);
                  })
                  .emulateTransitionEnd(transitionDuration);
              } else {
                this._hideModal();
              }
            };

            _proto.dispose = function dispose() {
              [window, this._element, this._dialog].forEach(function (
                htmlElement
              ) {
                return $__default["default"](htmlElement).off(EVENT_KEY$5);
              });
              /**
               * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
               * Do not move `document` in `htmlElements` array
               * It will remove `EVENT_CLICK_DATA_API` event that should remain
               */

              $__default["default"](document).off(EVENT_FOCUSIN);
              $__default["default"].removeData(this._element, DATA_KEY$5);
              this._config = null;
              this._element = null;
              this._dialog = null;
              this._backdrop = null;
              this._isShown = null;
              this._isBodyOverflowing = null;
              this._ignoreBackdropClick = null;
              this._isTransitioning = null;
              this._scrollbarWidth = null;
            };

            _proto.handleUpdate = function handleUpdate() {
              this._adjustDialog();
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _extends({}, Default$4, config);
              Util.typeCheckConfig(NAME$5, config, DefaultType$4);
              return config;
            };

            _proto._triggerBackdropTransition =
              function _triggerBackdropTransition() {
                var _this3 = this;

                var hideEventPrevented =
                  $__default["default"].Event(EVENT_HIDE_PREVENTED);
                $__default["default"](this._element).trigger(
                  hideEventPrevented
                );

                if (hideEventPrevented.isDefaultPrevented()) {
                  return;
                }

                var isModalOverflowing =
                  this._element.scrollHeight >
                  document.documentElement.clientHeight;

                if (!isModalOverflowing) {
                  this._element.style.overflowY = "hidden";
                }

                this._element.classList.add(CLASS_NAME_STATIC);

                var modalTransitionDuration =
                  Util.getTransitionDurationFromElement(this._dialog);
                $__default["default"](this._element).off(Util.TRANSITION_END);
                $__default["default"](this._element)
                  .one(Util.TRANSITION_END, function () {
                    _this3._element.classList.remove(CLASS_NAME_STATIC);

                    if (!isModalOverflowing) {
                      $__default["default"](_this3._element)
                        .one(Util.TRANSITION_END, function () {
                          _this3._element.style.overflowY = "";
                        })
                        .emulateTransitionEnd(
                          _this3._element,
                          modalTransitionDuration
                        );
                    }
                  })
                  .emulateTransitionEnd(modalTransitionDuration);

                this._element.focus();
              };

            _proto._showElement = function _showElement(relatedTarget) {
              var _this4 = this;

              var transition = $__default["default"](this._element).hasClass(
                CLASS_NAME_FADE$4
              );
              var modalBody = this._dialog
                ? this._dialog.querySelector(SELECTOR_MODAL_BODY)
                : null;

              if (
                !this._element.parentNode ||
                this._element.parentNode.nodeType !== Node.ELEMENT_NODE
              ) {
                // Don't move modal's DOM position
                document.body.appendChild(this._element);
              }

              this._element.style.display = "block";

              this._element.removeAttribute("aria-hidden");

              this._element.setAttribute("aria-modal", true);

              this._element.setAttribute("role", "dialog");

              if (
                $__default["default"](this._dialog).hasClass(
                  CLASS_NAME_SCROLLABLE
                ) &&
                modalBody
              ) {
                modalBody.scrollTop = 0;
              } else {
                this._element.scrollTop = 0;
              }

              if (transition) {
                Util.reflow(this._element);
              }

              $__default["default"](this._element).addClass(CLASS_NAME_SHOW$4);

              if (this._config.focus) {
                this._enforceFocus();
              }

              var shownEvent = $__default["default"].Event(EVENT_SHOWN$2, {
                relatedTarget: relatedTarget,
              });

              var transitionComplete = function transitionComplete() {
                if (_this4._config.focus) {
                  _this4._element.focus();
                }

                _this4._isTransitioning = false;
                $__default["default"](_this4._element).trigger(shownEvent);
              };

              if (transition) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._dialog
                );
                $__default["default"](this._dialog)
                  .one(Util.TRANSITION_END, transitionComplete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                transitionComplete();
              }
            };

            _proto._enforceFocus = function _enforceFocus() {
              var _this5 = this;

              $__default["default"](document)
                .off(EVENT_FOCUSIN) // Guard against infinite focus loop
                .on(EVENT_FOCUSIN, function (event) {
                  if (
                    document !== event.target &&
                    _this5._element !== event.target &&
                    $__default["default"](_this5._element).has(event.target)
                      .length === 0
                  ) {
                    _this5._element.focus();
                  }
                });
            };

            _proto._setEscapeEvent = function _setEscapeEvent() {
              var _this6 = this;

              if (this._isShown) {
                $__default["default"](this._element).on(
                  EVENT_KEYDOWN_DISMISS,
                  function (event) {
                    if (
                      _this6._config.keyboard &&
                      event.which === ESCAPE_KEYCODE
                    ) {
                      event.preventDefault();

                      _this6.hide();
                    } else if (
                      !_this6._config.keyboard &&
                      event.which === ESCAPE_KEYCODE
                    ) {
                      _this6._triggerBackdropTransition();
                    }
                  }
                );
              } else if (!this._isShown) {
                $__default["default"](this._element).off(EVENT_KEYDOWN_DISMISS);
              }
            };

            _proto._setResizeEvent = function _setResizeEvent() {
              var _this7 = this;

              if (this._isShown) {
                $__default["default"](window).on(
                  EVENT_RESIZE,
                  function (event) {
                    return _this7.handleUpdate(event);
                  }
                );
              } else {
                $__default["default"](window).off(EVENT_RESIZE);
              }
            };

            _proto._hideModal = function _hideModal() {
              var _this8 = this;

              this._element.style.display = "none";

              this._element.setAttribute("aria-hidden", true);

              this._element.removeAttribute("aria-modal");

              this._element.removeAttribute("role");

              this._isTransitioning = false;

              this._showBackdrop(function () {
                $__default["default"](document.body).removeClass(
                  CLASS_NAME_OPEN
                );

                _this8._resetAdjustments();

                _this8._resetScrollbar();

                $__default["default"](_this8._element).trigger(EVENT_HIDDEN$2);
              });
            };

            _proto._removeBackdrop = function _removeBackdrop() {
              if (this._backdrop) {
                $__default["default"](this._backdrop).remove();
                this._backdrop = null;
              }
            };

            _proto._showBackdrop = function _showBackdrop(callback) {
              var _this9 = this;

              var animate = $__default["default"](this._element).hasClass(
                CLASS_NAME_FADE$4
              )
                ? CLASS_NAME_FADE$4
                : "";

              if (this._isShown && this._config.backdrop) {
                this._backdrop = document.createElement("div");
                this._backdrop.className = CLASS_NAME_BACKDROP;

                if (animate) {
                  this._backdrop.classList.add(animate);
                }

                $__default["default"](this._backdrop).appendTo(document.body);
                $__default["default"](this._element).on(
                  EVENT_CLICK_DISMISS$1,
                  function (event) {
                    if (_this9._ignoreBackdropClick) {
                      _this9._ignoreBackdropClick = false;
                      return;
                    }

                    if (event.target !== event.currentTarget) {
                      return;
                    }

                    if (_this9._config.backdrop === "static") {
                      _this9._triggerBackdropTransition();
                    } else {
                      _this9.hide();
                    }
                  }
                );

                if (animate) {
                  Util.reflow(this._backdrop);
                }

                $__default["default"](this._backdrop).addClass(
                  CLASS_NAME_SHOW$4
                );

                if (!callback) {
                  return;
                }

                if (!animate) {
                  callback();
                  return;
                }

                var backdropTransitionDuration =
                  Util.getTransitionDurationFromElement(this._backdrop);
                $__default["default"](this._backdrop)
                  .one(Util.TRANSITION_END, callback)
                  .emulateTransitionEnd(backdropTransitionDuration);
              } else if (!this._isShown && this._backdrop) {
                $__default["default"](this._backdrop).removeClass(
                  CLASS_NAME_SHOW$4
                );

                var callbackRemove = function callbackRemove() {
                  _this9._removeBackdrop();

                  if (callback) {
                    callback();
                  }
                };

                if (
                  $__default["default"](this._element).hasClass(
                    CLASS_NAME_FADE$4
                  )
                ) {
                  var _backdropTransitionDuration =
                    Util.getTransitionDurationFromElement(this._backdrop);

                  $__default["default"](this._backdrop)
                    .one(Util.TRANSITION_END, callbackRemove)
                    .emulateTransitionEnd(_backdropTransitionDuration);
                } else {
                  callbackRemove();
                }
              } else if (callback) {
                callback();
              }
            }; // ----------------------------------------------------------------------
            // the following methods are used to handle overflowing modals
            // todo (fat): these should probably be refactored out of modal.js
            // ----------------------------------------------------------------------

            _proto._adjustDialog = function _adjustDialog() {
              var isModalOverflowing =
                this._element.scrollHeight >
                document.documentElement.clientHeight;

              if (!this._isBodyOverflowing && isModalOverflowing) {
                this._element.style.paddingLeft = this._scrollbarWidth + "px";
              }

              if (this._isBodyOverflowing && !isModalOverflowing) {
                this._element.style.paddingRight = this._scrollbarWidth + "px";
              }
            };

            _proto._resetAdjustments = function _resetAdjustments() {
              this._element.style.paddingLeft = "";
              this._element.style.paddingRight = "";
            };

            _proto._checkScrollbar = function _checkScrollbar() {
              var rect = document.body.getBoundingClientRect();
              this._isBodyOverflowing =
                Math.round(rect.left + rect.right) < window.innerWidth;
              this._scrollbarWidth = this._getScrollbarWidth();
            };

            _proto._setScrollbar = function _setScrollbar() {
              var _this10 = this;

              if (this._isBodyOverflowing) {
                // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
                //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
                var fixedContent = [].slice.call(
                  document.querySelectorAll(SELECTOR_FIXED_CONTENT)
                );
                var stickyContent = [].slice.call(
                  document.querySelectorAll(SELECTOR_STICKY_CONTENT)
                ); // Adjust fixed content padding

                $__default["default"](fixedContent).each(function (
                  index,
                  element
                ) {
                  var actualPadding = element.style.paddingRight;
                  var calculatedPadding =
                    $__default["default"](element).css("padding-right");
                  $__default["default"](element)
                    .data("padding-right", actualPadding)
                    .css(
                      "padding-right",
                      parseFloat(calculatedPadding) +
                      _this10._scrollbarWidth +
                      "px"
                    );
                }); // Adjust sticky content margin

                $__default["default"](stickyContent).each(function (
                  index,
                  element
                ) {
                  var actualMargin = element.style.marginRight;
                  var calculatedMargin =
                    $__default["default"](element).css("margin-right");
                  $__default["default"](element)
                    .data("margin-right", actualMargin)
                    .css(
                      "margin-right",
                      parseFloat(calculatedMargin) -
                      _this10._scrollbarWidth +
                      "px"
                    );
                }); // Adjust body padding

                var actualPadding = document.body.style.paddingRight;
                var calculatedPadding = $__default["default"](
                  document.body
                ).css("padding-right");
                $__default["default"](document.body)
                  .data("padding-right", actualPadding)
                  .css(
                    "padding-right",
                    parseFloat(calculatedPadding) + this._scrollbarWidth + "px"
                  );
              }

              $__default["default"](document.body).addClass(CLASS_NAME_OPEN);
            };

            _proto._resetScrollbar = function _resetScrollbar() {
              // Restore fixed content padding
              var fixedContent = [].slice.call(
                document.querySelectorAll(SELECTOR_FIXED_CONTENT)
              );
              $__default["default"](fixedContent).each(function (
                index,
                element
              ) {
                var padding =
                  $__default["default"](element).data("padding-right");
                $__default["default"](element).removeData("padding-right");
                element.style.paddingRight = padding ? padding : "";
              }); // Restore sticky content

              var elements = [].slice.call(
                document.querySelectorAll("" + SELECTOR_STICKY_CONTENT)
              );
              $__default["default"](elements).each(function (index, element) {
                var margin =
                  $__default["default"](element).data("margin-right");

                if (typeof margin !== "undefined") {
                  $__default["default"](element)
                    .css("margin-right", margin)
                    .removeData("margin-right");
                }
              }); // Restore body padding

              var padding = $__default["default"](document.body).data(
                "padding-right"
              );
              $__default["default"](document.body).removeData("padding-right");
              document.body.style.paddingRight = padding ? padding : "";
            };

            _proto._getScrollbarWidth = function _getScrollbarWidth() {
              // thx d.walsh
              var scrollDiv = document.createElement("div");
              scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
              document.body.appendChild(scrollDiv);
              var scrollbarWidth =
                scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
              document.body.removeChild(scrollDiv);
              return scrollbarWidth;
            }; // Static

            Modal._jQueryInterface = function _jQueryInterface(
              config,
              relatedTarget
            ) {
              return this.each(function () {
                var data = $__default["default"](this).data(DATA_KEY$5);

                var _config = _extends(
                  {},
                  Default$4,
                  $__default["default"](this).data(),
                  typeof config === "object" && config ? config : {}
                );

                if (!data) {
                  data = new Modal(this, _config);
                  $__default["default"](this).data(DATA_KEY$5, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config](relatedTarget);
                } else if (_config.show) {
                  data.show(relatedTarget);
                }
              });
            };

            _createClass(Modal, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$5;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$4;
                },
              },
            ]);

            return Modal;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document).on(
            EVENT_CLICK_DATA_API$1,
            SELECTOR_DATA_TOGGLE$1,
            function (event) {
              var _this11 = this;

              var target;
              var selector = Util.getSelectorFromElement(this);

              if (selector) {
                target = document.querySelector(selector);
              }

              var config = $__default["default"](target).data(DATA_KEY$5)
                ? "toggle"
                : _extends(
                  {},
                  $__default["default"](target).data(),
                  $__default["default"](this).data()
                );

              if (this.tagName === "A" || this.tagName === "AREA") {
                event.preventDefault();
              }

              var $target = $__default["default"](target).one(
                EVENT_SHOW$2,
                function (showEvent) {
                  if (showEvent.isDefaultPrevented()) {
                    // Only register focus restorer if modal will actually get shown
                    return;
                  }

                  $target.one(EVENT_HIDDEN$2, function () {
                    if ($__default["default"](_this11).is(":visible")) {
                      _this11.focus();
                    }
                  });
                }
              );

              Modal._jQueryInterface.call(
                $__default["default"](target),
                config,
                this
              );
            }
          );
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$5] = Modal._jQueryInterface;
          $__default["default"].fn[NAME$5].Constructor = Modal;

          $__default["default"].fn[NAME$5].noConflict = function () {
            $__default["default"].fn[NAME$5] = JQUERY_NO_CONFLICT$5;
            return Modal._jQueryInterface;
          };

          /**
           * --------------------------------------------------------------------------
           * Bootstrap (v4.6.2): tools/sanitizer.js
           * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
           * --------------------------------------------------------------------------
           */
          var uriAttrs = [
            "background",
            "cite",
            "href",
            "itemtype",
            "longdesc",
            "poster",
            "src",
            "xlink:href",
          ];
          var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
          var DefaultWhitelist = {
            // Global attributes allowed on any supplied element below.
            "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
            a: ["target", "href", "title", "rel"],
            area: [],
            b: [],
            br: [],
            col: [],
            code: [],
            div: [],
            em: [],
            hr: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            i: [],
            img: ["src", "srcset", "alt", "title", "width", "height"],
            li: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            u: [],
            ul: [],
          };
          /**
           * A pattern that recognizes a commonly useful subset of URLs that are safe.
           *
           * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
           */

          var SAFE_URL_PATTERN =
            /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
          /**
           * A pattern that matches safe data URLs. Only matches image, video and audio types.
           *
           * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
           */

          var DATA_URL_PATTERN =
            /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

          function allowedAttribute(attr, allowedAttributeList) {
            var attrName = attr.nodeName.toLowerCase();

            if (allowedAttributeList.indexOf(attrName) !== -1) {
              if (uriAttrs.indexOf(attrName) !== -1) {
                return Boolean(
                  SAFE_URL_PATTERN.test(attr.nodeValue) ||
                  DATA_URL_PATTERN.test(attr.nodeValue)
                );
              }

              return true;
            }

            var regExp = allowedAttributeList.filter(function (attrRegex) {
              return attrRegex instanceof RegExp;
            }); // Check if a regular expression validates the attribute.

            for (var i = 0, len = regExp.length; i < len; i++) {
              if (regExp[i].test(attrName)) {
                return true;
              }
            }

            return false;
          }

          function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
            if (unsafeHtml.length === 0) {
              return unsafeHtml;
            }

            if (sanitizeFn && typeof sanitizeFn === "function") {
              return sanitizeFn(unsafeHtml);
            }

            var domParser = new window.DOMParser();
            var createdDocument = domParser.parseFromString(
              unsafeHtml,
              "text/html"
            );
            var whitelistKeys = Object.keys(whiteList);
            var elements = [].slice.call(
              createdDocument.body.querySelectorAll("*")
            );

            var _loop = function _loop(i, len) {
              var el = elements[i];
              var elName = el.nodeName.toLowerCase();

              if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
                el.parentNode.removeChild(el);
                return "continue";
              }

              var attributeList = [].slice.call(el.attributes); // eslint-disable-next-line unicorn/prefer-spread

              var whitelistedAttributes = [].concat(
                whiteList["*"] || [],
                whiteList[elName] || []
              );
              attributeList.forEach(function (attr) {
                if (!allowedAttribute(attr, whitelistedAttributes)) {
                  el.removeAttribute(attr.nodeName);
                }
              });
            };

            for (var i = 0, len = elements.length; i < len; i++) {
              var _ret = _loop(i);

              if (_ret === "continue") continue;
            }

            return createdDocument.body.innerHTML;
          }

          /**
           * Constants
           */

          var NAME$4 = "tooltip";
          var VERSION$4 = "4.6.2";
          var DATA_KEY$4 = "bs.tooltip";
          var EVENT_KEY$4 = "." + DATA_KEY$4;
          var JQUERY_NO_CONFLICT$4 = $__default["default"].fn[NAME$4];
          var CLASS_PREFIX$1 = "bs-tooltip";
          var BSCLS_PREFIX_REGEX$1 = new RegExp(
            "(^|\\s)" + CLASS_PREFIX$1 + "\\S+",
            "g"
          );
          var DISALLOWED_ATTRIBUTES = ["sanitize", "whiteList", "sanitizeFn"];
          var CLASS_NAME_FADE$3 = "fade";
          var CLASS_NAME_SHOW$3 = "show";
          var HOVER_STATE_SHOW = "show";
          var HOVER_STATE_OUT = "out";
          var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
          var SELECTOR_ARROW = ".arrow";
          var TRIGGER_HOVER = "hover";
          var TRIGGER_FOCUS = "focus";
          var TRIGGER_CLICK = "click";
          var TRIGGER_MANUAL = "manual";
          var AttachmentMap = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left",
          };
          var Default$3 = {
            animation: true,
            template:
              '<div class="tooltip" role="tooltip">' +
              '<div class="arrow"></div>' +
              '<div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: false,
            selector: false,
            placement: "top",
            offset: 0,
            container: false,
            fallbackPlacement: "flip",
            boundary: "scrollParent",
            customClass: "",
            sanitize: true,
            sanitizeFn: null,
            whiteList: DefaultWhitelist,
            popperConfig: null,
          };
          var DefaultType$3 = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string|function)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)",
            customClass: "(string|function)",
            sanitize: "boolean",
            sanitizeFn: "(null|function)",
            whiteList: "object",
            popperConfig: "(null|object)",
          };
          var Event$1 = {
            HIDE: "hide" + EVENT_KEY$4,
            HIDDEN: "hidden" + EVENT_KEY$4,
            SHOW: "show" + EVENT_KEY$4,
            SHOWN: "shown" + EVENT_KEY$4,
            INSERTED: "inserted" + EVENT_KEY$4,
            CLICK: "click" + EVENT_KEY$4,
            FOCUSIN: "focusin" + EVENT_KEY$4,
            FOCUSOUT: "focusout" + EVENT_KEY$4,
            MOUSEENTER: "mouseenter" + EVENT_KEY$4,
            MOUSELEAVE: "mouseleave" + EVENT_KEY$4,
          };
          /**
           * Class definition
           */

          var Tooltip = /*#__PURE__*/ (function () {
            function Tooltip(element, config) {
              if (typeof Popper__default["default"] === "undefined") {
                throw new TypeError(
                  "Bootstrap's tooltips require Popper (https://popper.js.org)"
                );
              } // Private

              this._isEnabled = true;
              this._timeout = 0;
              this._hoverState = "";
              this._activeTrigger = {};
              this._popper = null; // Protected

              this.element = element;
              this.config = this._getConfig(config);
              this.tip = null;

              this._setListeners();
            } // Getters

            var _proto = Tooltip.prototype;

            // Public
            _proto.enable = function enable() {
              this._isEnabled = true;
            };

            _proto.disable = function disable() {
              this._isEnabled = false;
            };

            _proto.toggleEnabled = function toggleEnabled() {
              this._isEnabled = !this._isEnabled;
            };

            _proto.toggle = function toggle(event) {
              if (!this._isEnabled) {
                return;
              }

              if (event) {
                var dataKey = this.constructor.DATA_KEY;
                var context = $__default["default"](event.currentTarget).data(
                  dataKey
                );

                if (!context) {
                  context = new this.constructor(
                    event.currentTarget,
                    this._getDelegateConfig()
                  );
                  $__default["default"](event.currentTarget).data(
                    dataKey,
                    context
                  );
                }

                context._activeTrigger.click = !context._activeTrigger.click;

                if (context._isWithActiveTrigger()) {
                  context._enter(null, context);
                } else {
                  context._leave(null, context);
                }
              } else {
                if (
                  $__default["default"](this.getTipElement()).hasClass(
                    CLASS_NAME_SHOW$3
                  )
                ) {
                  this._leave(null, this);

                  return;
                }

                this._enter(null, this);
              }
            };

            _proto.dispose = function dispose() {
              clearTimeout(this._timeout);
              $__default["default"].removeData(
                this.element,
                this.constructor.DATA_KEY
              );
              $__default["default"](this.element).off(
                this.constructor.EVENT_KEY
              );
              $__default["default"](this.element)
                .closest(".modal")
                .off("hide.bs.modal", this._hideModalHandler);

              if (this.tip) {
                $__default["default"](this.tip).remove();
              }

              this._isEnabled = null;
              this._timeout = null;
              this._hoverState = null;
              this._activeTrigger = null;

              if (this._popper) {
                this._popper.destroy();
              }

              this._popper = null;
              this.element = null;
              this.config = null;
              this.tip = null;
            };

            _proto.show = function show() {
              var _this = this;

              if (
                $__default["default"](this.element).css("display") === "none"
              ) {
                throw new Error("Please use show on visible elements");
              }

              var showEvent = $__default["default"].Event(
                this.constructor.Event.SHOW
              );

              if (this.isWithContent() && this._isEnabled) {
                $__default["default"](this.element).trigger(showEvent);
                var shadowRoot = Util.findShadowRoot(this.element);
                var isInTheDom = $__default["default"].contains(
                  shadowRoot !== null
                    ? shadowRoot
                    : this.element.ownerDocument.documentElement,
                  this.element
                );

                if (showEvent.isDefaultPrevented() || !isInTheDom) {
                  return;
                }

                var tip = this.getTipElement();
                var tipId = Util.getUID(this.constructor.NAME);
                tip.setAttribute("id", tipId);
                this.element.setAttribute("aria-describedby", tipId);
                this.setContent();

                if (this.config.animation) {
                  $__default["default"](tip).addClass(CLASS_NAME_FADE$3);
                }

                var placement =
                  typeof this.config.placement === "function"
                    ? this.config.placement.call(this, tip, this.element)
                    : this.config.placement;

                var attachment = this._getAttachment(placement);

                this.addAttachmentClass(attachment);

                var container = this._getContainer();

                $__default["default"](tip).data(
                  this.constructor.DATA_KEY,
                  this
                );

                if (
                  !$__default["default"].contains(
                    this.element.ownerDocument.documentElement,
                    this.tip
                  )
                ) {
                  $__default["default"](tip).appendTo(container);
                }

                $__default["default"](this.element).trigger(
                  this.constructor.Event.INSERTED
                );
                this._popper = new Popper__default["default"](
                  this.element,
                  tip,
                  this._getPopperConfig(attachment)
                );
                $__default["default"](tip).addClass(CLASS_NAME_SHOW$3);
                $__default["default"](tip).addClass(this.config.customClass); // If this is a touch-enabled device we add extra
                // empty mouseover listeners to the body's immediate children;
                // only needed because of broken event delegation on iOS
                // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

                if ("ontouchstart" in document.documentElement) {
                  $__default["default"](document.body)
                    .children()
                    .on("mouseover", null, $__default["default"].noop);
                }

                var complete = function complete() {
                  if (_this.config.animation) {
                    _this._fixTransition();
                  }

                  var prevHoverState = _this._hoverState;
                  _this._hoverState = null;
                  $__default["default"](_this.element).trigger(
                    _this.constructor.Event.SHOWN
                  );

                  if (prevHoverState === HOVER_STATE_OUT) {
                    _this._leave(null, _this);
                  }
                };

                if (
                  $__default["default"](this.tip).hasClass(CLASS_NAME_FADE$3)
                ) {
                  var transitionDuration =
                    Util.getTransitionDurationFromElement(this.tip);
                  $__default["default"](this.tip)
                    .one(Util.TRANSITION_END, complete)
                    .emulateTransitionEnd(transitionDuration);
                } else {
                  complete();
                }
              }
            };

            _proto.hide = function hide(callback) {
              var _this2 = this;

              var tip = this.getTipElement();
              var hideEvent = $__default["default"].Event(
                this.constructor.Event.HIDE
              );

              var complete = function complete() {
                if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
                  tip.parentNode.removeChild(tip);
                }

                _this2._cleanTipClass();

                _this2.element.removeAttribute("aria-describedby");

                $__default["default"](_this2.element).trigger(
                  _this2.constructor.Event.HIDDEN
                );

                if (_this2._popper !== null) {
                  _this2._popper.destroy();
                }

                if (callback) {
                  callback();
                }
              };

              $__default["default"](this.element).trigger(hideEvent);

              if (hideEvent.isDefaultPrevented()) {
                return;
              }

              $__default["default"](tip).removeClass(CLASS_NAME_SHOW$3); // If this is a touch-enabled device we remove the extra
              // empty mouseover listeners we added for iOS support

              if ("ontouchstart" in document.documentElement) {
                $__default["default"](document.body)
                  .children()
                  .off("mouseover", null, $__default["default"].noop);
              }

              this._activeTrigger[TRIGGER_CLICK] = false;
              this._activeTrigger[TRIGGER_FOCUS] = false;
              this._activeTrigger[TRIGGER_HOVER] = false;

              if ($__default["default"](this.tip).hasClass(CLASS_NAME_FADE$3)) {
                var transitionDuration =
                  Util.getTransitionDurationFromElement(tip);
                $__default["default"](tip)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }

              this._hoverState = "";
            };

            _proto.update = function update() {
              if (this._popper !== null) {
                this._popper.scheduleUpdate();
              }
            }; // Protected

            _proto.isWithContent = function isWithContent() {
              return Boolean(this.getTitle());
            };

            _proto.addAttachmentClass = function addAttachmentClass(
              attachment
            ) {
              $__default["default"](this.getTipElement()).addClass(
                CLASS_PREFIX$1 + "-" + attachment
              );
            };

            _proto.getTipElement = function getTipElement() {
              this.tip =
                this.tip || $__default["default"](this.config.template)[0];
              return this.tip;
            };

            _proto.setContent = function setContent() {
              var tip = this.getTipElement();
              this.setElementContent(
                $__default["default"](
                  tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)
                ),
                this.getTitle()
              );
              $__default["default"](tip).removeClass(
                CLASS_NAME_FADE$3 + " " + CLASS_NAME_SHOW$3
              );
            };

            _proto.setElementContent = function setElementContent(
              $element,
              content
            ) {
              if (
                typeof content === "object" &&
                (content.nodeType || content.jquery)
              ) {
                // Content is a DOM node or a jQuery
                if (this.config.html) {
                  if (!$__default["default"](content).parent().is($element)) {
                    $element.empty().append(content);
                  }
                } else {
                  $element.text($__default["default"](content).text());
                }

                return;
              }

              if (this.config.html) {
                if (this.config.sanitize) {
                  content = sanitizeHtml(
                    content,
                    this.config.whiteList,
                    this.config.sanitizeFn
                  );
                }

                $element.html(content);
              } else {
                $element.text(content);
              }
            };

            _proto.getTitle = function getTitle() {
              var title = this.element.getAttribute("data-original-title");

              if (!title) {
                title =
                  typeof this.config.title === "function"
                    ? this.config.title.call(this.element)
                    : this.config.title;
              }

              return title;
            }; // Private

            _proto._getPopperConfig = function _getPopperConfig(attachment) {
              var _this3 = this;

              var defaultBsConfig = {
                placement: attachment,
                modifiers: {
                  offset: this._getOffset(),
                  flip: {
                    behavior: this.config.fallbackPlacement,
                  },
                  arrow: {
                    element: SELECTOR_ARROW,
                  },
                  preventOverflow: {
                    boundariesElement: this.config.boundary,
                  },
                },
                onCreate: function onCreate(data) {
                  if (data.originalPlacement !== data.placement) {
                    _this3._handlePopperPlacementChange(data);
                  }
                },
                onUpdate: function onUpdate(data) {
                  return _this3._handlePopperPlacementChange(data);
                },
              };
              return _extends({}, defaultBsConfig, this.config.popperConfig);
            };

            _proto._getOffset = function _getOffset() {
              var _this4 = this;

              var offset = {};

              if (typeof this.config.offset === "function") {
                offset.fn = function (data) {
                  data.offsets = _extends(
                    {},
                    data.offsets,
                    _this4.config.offset(data.offsets, _this4.element)
                  );
                  return data;
                };
              } else {
                offset.offset = this.config.offset;
              }

              return offset;
            };

            _proto._getContainer = function _getContainer() {
              if (this.config.container === false) {
                return document.body;
              }

              if (Util.isElement(this.config.container)) {
                return $__default["default"](this.config.container);
              }

              return $__default["default"](document).find(
                this.config.container
              );
            };

            _proto._getAttachment = function _getAttachment(placement) {
              return AttachmentMap[placement.toUpperCase()];
            };

            _proto._setListeners = function _setListeners() {
              var _this5 = this;

              var triggers = this.config.trigger.split(" ");
              triggers.forEach(function (trigger) {
                if (trigger === "click") {
                  $__default["default"](_this5.element).on(
                    _this5.constructor.Event.CLICK,
                    _this5.config.selector,
                    function (event) {
                      return _this5.toggle(event);
                    }
                  );
                } else if (trigger !== TRIGGER_MANUAL) {
                  var eventIn =
                    trigger === TRIGGER_HOVER
                      ? _this5.constructor.Event.MOUSEENTER
                      : _this5.constructor.Event.FOCUSIN;
                  var eventOut =
                    trigger === TRIGGER_HOVER
                      ? _this5.constructor.Event.MOUSELEAVE
                      : _this5.constructor.Event.FOCUSOUT;
                  $__default["default"](_this5.element)
                    .on(eventIn, _this5.config.selector, function (event) {
                      return _this5._enter(event);
                    })
                    .on(eventOut, _this5.config.selector, function (event) {
                      return _this5._leave(event);
                    });
                }
              });

              this._hideModalHandler = function () {
                if (_this5.element) {
                  _this5.hide();
                }
              };

              $__default["default"](this.element)
                .closest(".modal")
                .on("hide.bs.modal", this._hideModalHandler);

              if (this.config.selector) {
                this.config = _extends({}, this.config, {
                  trigger: "manual",
                  selector: "",
                });
              } else {
                this._fixTitle();
              }
            };

            _proto._fixTitle = function _fixTitle() {
              var titleType = typeof this.element.getAttribute(
                "data-original-title"
              );

              if (
                this.element.getAttribute("title") ||
                titleType !== "string"
              ) {
                this.element.setAttribute(
                  "data-original-title",
                  this.element.getAttribute("title") || ""
                );
                this.element.setAttribute("title", "");
              }
            };

            _proto._enter = function _enter(event, context) {
              var dataKey = this.constructor.DATA_KEY;
              context =
                context ||
                $__default["default"](event.currentTarget).data(dataKey);

              if (!context) {
                context = new this.constructor(
                  event.currentTarget,
                  this._getDelegateConfig()
                );
                $__default["default"](event.currentTarget).data(
                  dataKey,
                  context
                );
              }

              if (event) {
                context._activeTrigger[
                  event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER
                ] = true;
              }

              if (
                $__default["default"](context.getTipElement()).hasClass(
                  CLASS_NAME_SHOW$3
                ) ||
                context._hoverState === HOVER_STATE_SHOW
              ) {
                context._hoverState = HOVER_STATE_SHOW;
                return;
              }

              clearTimeout(context._timeout);
              context._hoverState = HOVER_STATE_SHOW;

              if (!context.config.delay || !context.config.delay.show) {
                context.show();
                return;
              }

              context._timeout = setTimeout(function () {
                if (context._hoverState === HOVER_STATE_SHOW) {
                  context.show();
                }
              }, context.config.delay.show);
            };

            _proto._leave = function _leave(event, context) {
              var dataKey = this.constructor.DATA_KEY;
              context =
                context ||
                $__default["default"](event.currentTarget).data(dataKey);

              if (!context) {
                context = new this.constructor(
                  event.currentTarget,
                  this._getDelegateConfig()
                );
                $__default["default"](event.currentTarget).data(
                  dataKey,
                  context
                );
              }

              if (event) {
                context._activeTrigger[
                  event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER
                ] = false;
              }

              if (context._isWithActiveTrigger()) {
                return;
              }

              clearTimeout(context._timeout);
              context._hoverState = HOVER_STATE_OUT;

              if (!context.config.delay || !context.config.delay.hide) {
                context.hide();
                return;
              }

              context._timeout = setTimeout(function () {
                if (context._hoverState === HOVER_STATE_OUT) {
                  context.hide();
                }
              }, context.config.delay.hide);
            };

            _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
              for (var trigger in this._activeTrigger) {
                if (this._activeTrigger[trigger]) {
                  return true;
                }
              }

              return false;
            };

            _proto._getConfig = function _getConfig(config) {
              var dataAttributes = $__default["default"](this.element).data();
              Object.keys(dataAttributes).forEach(function (dataAttr) {
                if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
                  delete dataAttributes[dataAttr];
                }
              });
              config = _extends(
                {},
                this.constructor.Default,
                dataAttributes,
                typeof config === "object" && config ? config : {}
              );

              if (typeof config.delay === "number") {
                config.delay = {
                  show: config.delay,
                  hide: config.delay,
                };
              }

              if (typeof config.title === "number") {
                config.title = config.title.toString();
              }

              if (typeof config.content === "number") {
                config.content = config.content.toString();
              }

              Util.typeCheckConfig(
                NAME$4,
                config,
                this.constructor.DefaultType
              );

              if (config.sanitize) {
                config.template = sanitizeHtml(
                  config.template,
                  config.whiteList,
                  config.sanitizeFn
                );
              }

              return config;
            };

            _proto._getDelegateConfig = function _getDelegateConfig() {
              var config = {};

              if (this.config) {
                for (var key in this.config) {
                  if (this.constructor.Default[key] !== this.config[key]) {
                    config[key] = this.config[key];
                  }
                }
              }

              return config;
            };

            _proto._cleanTipClass = function _cleanTipClass() {
              var $tip = $__default["default"](this.getTipElement());
              var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX$1);

              if (tabClass !== null && tabClass.length) {
                $tip.removeClass(tabClass.join(""));
              }
            };

            _proto._handlePopperPlacementChange =
              function _handlePopperPlacementChange(popperData) {
                this.tip = popperData.instance.popper;

                this._cleanTipClass();

                this.addAttachmentClass(
                  this._getAttachment(popperData.placement)
                );
              };

            _proto._fixTransition = function _fixTransition() {
              var tip = this.getTipElement();
              var initConfigAnimation = this.config.animation;

              if (tip.getAttribute("x-placement") !== null) {
                return;
              }

              $__default["default"](tip).removeClass(CLASS_NAME_FADE$3);
              this.config.animation = false;
              this.hide();
              this.show();
              this.config.animation = initConfigAnimation;
            }; // Static

            Tooltip._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var $element = $__default["default"](this);
                var data = $element.data(DATA_KEY$4);

                var _config = typeof config === "object" && config;

                if (!data && /dispose|hide/.test(config)) {
                  return;
                }

                if (!data) {
                  data = new Tooltip(this, _config);
                  $element.data(DATA_KEY$4, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Tooltip, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$4;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$3;
                },
              },
              {
                key: "NAME",
                get: function get() {
                  return NAME$4;
                },
              },
              {
                key: "DATA_KEY",
                get: function get() {
                  return DATA_KEY$4;
                },
              },
              {
                key: "Event",
                get: function get() {
                  return Event$1;
                },
              },
              {
                key: "EVENT_KEY",
                get: function get() {
                  return EVENT_KEY$4;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$3;
                },
              },
            ]);

            return Tooltip;
          })();
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$4] = Tooltip._jQueryInterface;
          $__default["default"].fn[NAME$4].Constructor = Tooltip;

          $__default["default"].fn[NAME$4].noConflict = function () {
            $__default["default"].fn[NAME$4] = JQUERY_NO_CONFLICT$4;
            return Tooltip._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$3 = "popover";
          var VERSION$3 = "4.6.2";
          var DATA_KEY$3 = "bs.popover";
          var EVENT_KEY$3 = "." + DATA_KEY$3;
          var JQUERY_NO_CONFLICT$3 = $__default["default"].fn[NAME$3];
          var CLASS_PREFIX = "bs-popover";
          var BSCLS_PREFIX_REGEX = new RegExp(
            "(^|\\s)" + CLASS_PREFIX + "\\S+",
            "g"
          );
          var CLASS_NAME_FADE$2 = "fade";
          var CLASS_NAME_SHOW$2 = "show";
          var SELECTOR_TITLE = ".popover-header";
          var SELECTOR_CONTENT = ".popover-body";

          var Default$2 = _extends({}, Tooltip.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template:
              '<div class="popover" role="tooltip">' +
              '<div class="arrow"></div>' +
              '<h3 class="popover-header"></h3>' +
              '<div class="popover-body"></div></div>',
          });

          var DefaultType$2 = _extends({}, Tooltip.DefaultType, {
            content: "(string|element|function)",
          });

          var Event = {
            HIDE: "hide" + EVENT_KEY$3,
            HIDDEN: "hidden" + EVENT_KEY$3,
            SHOW: "show" + EVENT_KEY$3,
            SHOWN: "shown" + EVENT_KEY$3,
            INSERTED: "inserted" + EVENT_KEY$3,
            CLICK: "click" + EVENT_KEY$3,
            FOCUSIN: "focusin" + EVENT_KEY$3,
            FOCUSOUT: "focusout" + EVENT_KEY$3,
            MOUSEENTER: "mouseenter" + EVENT_KEY$3,
            MOUSELEAVE: "mouseleave" + EVENT_KEY$3,
          };
          /**
           * Class definition
           */

          var Popover = /*#__PURE__*/ (function (_Tooltip) {
            _inheritsLoose(Popover, _Tooltip);

            function Popover() {
              return _Tooltip.apply(this, arguments) || this;
            }

            var _proto = Popover.prototype;

            // Overrides
            _proto.isWithContent = function isWithContent() {
              return this.getTitle() || this._getContent();
            };

            _proto.addAttachmentClass = function addAttachmentClass(
              attachment
            ) {
              $__default["default"](this.getTipElement()).addClass(
                CLASS_PREFIX + "-" + attachment
              );
            };

            _proto.getTipElement = function getTipElement() {
              this.tip =
                this.tip || $__default["default"](this.config.template)[0];
              return this.tip;
            };

            _proto.setContent = function setContent() {
              var $tip = $__default["default"](this.getTipElement()); // We use append for html objects to maintain js events

              this.setElementContent(
                $tip.find(SELECTOR_TITLE),
                this.getTitle()
              );

              var content = this._getContent();

              if (typeof content === "function") {
                content = content.call(this.element);
              }

              this.setElementContent($tip.find(SELECTOR_CONTENT), content);
              $tip.removeClass(CLASS_NAME_FADE$2 + " " + CLASS_NAME_SHOW$2);
            }; // Private

            _proto._getContent = function _getContent() {
              return (
                this.element.getAttribute("data-content") || this.config.content
              );
            };

            _proto._cleanTipClass = function _cleanTipClass() {
              var $tip = $__default["default"](this.getTipElement());
              var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);

              if (tabClass !== null && tabClass.length > 0) {
                $tip.removeClass(tabClass.join(""));
              }
            }; // Static

            Popover._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var data = $__default["default"](this).data(DATA_KEY$3);

                var _config = typeof config === "object" ? config : null;

                if (!data && /dispose|hide/.test(config)) {
                  return;
                }

                if (!data) {
                  data = new Popover(this, _config);
                  $__default["default"](this).data(DATA_KEY$3, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Popover, null, [
              {
                key: "VERSION",
                // Getters
                get: function get() {
                  return VERSION$3;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$2;
                },
              },
              {
                key: "NAME",
                get: function get() {
                  return NAME$3;
                },
              },
              {
                key: "DATA_KEY",
                get: function get() {
                  return DATA_KEY$3;
                },
              },
              {
                key: "Event",
                get: function get() {
                  return Event;
                },
              },
              {
                key: "EVENT_KEY",
                get: function get() {
                  return EVENT_KEY$3;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$2;
                },
              },
            ]);

            return Popover;
          })(Tooltip);
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$3] = Popover._jQueryInterface;
          $__default["default"].fn[NAME$3].Constructor = Popover;

          $__default["default"].fn[NAME$3].noConflict = function () {
            $__default["default"].fn[NAME$3] = JQUERY_NO_CONFLICT$3;
            return Popover._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$2 = "scrollspy";
          var VERSION$2 = "4.6.2";
          var DATA_KEY$2 = "bs.scrollspy";
          var EVENT_KEY$2 = "." + DATA_KEY$2;
          var DATA_API_KEY$1 = ".data-api";
          var JQUERY_NO_CONFLICT$2 = $__default["default"].fn[NAME$2];
          var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
          var CLASS_NAME_ACTIVE$1 = "active";
          var EVENT_ACTIVATE = "activate" + EVENT_KEY$2;
          var EVENT_SCROLL = "scroll" + EVENT_KEY$2;
          var EVENT_LOAD_DATA_API = "load" + EVENT_KEY$2 + DATA_API_KEY$1;
          var METHOD_OFFSET = "offset";
          var METHOD_POSITION = "position";
          var SELECTOR_DATA_SPY = '[data-spy="scroll"]';
          var SELECTOR_NAV_LIST_GROUP$1 = ".nav, .list-group";
          var SELECTOR_NAV_LINKS = ".nav-link";
          var SELECTOR_NAV_ITEMS = ".nav-item";
          var SELECTOR_LIST_ITEMS = ".list-group-item";
          var SELECTOR_DROPDOWN$1 = ".dropdown";
          var SELECTOR_DROPDOWN_ITEMS = ".dropdown-item";
          var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
          var Default$1 = {
            offset: 10,
            method: "auto",
            target: "",
          };
          var DefaultType$1 = {
            offset: "number",
            method: "string",
            target: "(string|element)",
          };
          /**
           * Class definition
           */

          var ScrollSpy = /*#__PURE__*/ (function () {
            function ScrollSpy(element, config) {
              var _this = this;

              this._element = element;
              this._scrollElement =
                element.tagName === "BODY" ? window : element;
              this._config = this._getConfig(config);
              this._selector =
                this._config.target +
                " " +
                SELECTOR_NAV_LINKS +
                "," +
                (this._config.target + " " + SELECTOR_LIST_ITEMS + ",") +
                (this._config.target + " " + SELECTOR_DROPDOWN_ITEMS);
              this._offsets = [];
              this._targets = [];
              this._activeTarget = null;
              this._scrollHeight = 0;
              $__default["default"](this._scrollElement).on(
                EVENT_SCROLL,
                function (event) {
                  return _this._process(event);
                }
              );
              this.refresh();

              this._process();
            } // Getters

            var _proto = ScrollSpy.prototype;

            // Public
            _proto.refresh = function refresh() {
              var _this2 = this;

              var autoMethod =
                this._scrollElement === this._scrollElement.window
                  ? METHOD_OFFSET
                  : METHOD_POSITION;
              var offsetMethod =
                this._config.method === "auto"
                  ? autoMethod
                  : this._config.method;
              var offsetBase =
                offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
              this._offsets = [];
              this._targets = [];
              this._scrollHeight = this._getScrollHeight();
              var targets = [].slice.call(
                document.querySelectorAll(this._selector)
              );
              targets
                .map(function (element) {
                  var target;
                  var targetSelector = Util.getSelectorFromElement(element);

                  if (targetSelector) {
                    target = document.querySelector(targetSelector);
                  }

                  if (target) {
                    var targetBCR = target.getBoundingClientRect();

                    if (targetBCR.width || targetBCR.height) {
                      // TODO (fat): remove sketch reliance on jQuery position/offset
                      return [
                        $__default["default"](target)[offsetMethod]().top +
                        offsetBase,
                        targetSelector,
                      ];
                    }
                  }

                  return null;
                })
                .filter(Boolean)
                .sort(function (a, b) {
                  return a[0] - b[0];
                })
                .forEach(function (item) {
                  _this2._offsets.push(item[0]);

                  _this2._targets.push(item[1]);
                });
            };

            _proto.dispose = function dispose() {
              $__default["default"].removeData(this._element, DATA_KEY$2);
              $__default["default"](this._scrollElement).off(EVENT_KEY$2);
              this._element = null;
              this._scrollElement = null;
              this._config = null;
              this._selector = null;
              this._offsets = null;
              this._targets = null;
              this._activeTarget = null;
              this._scrollHeight = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _extends(
                {},
                Default$1,
                typeof config === "object" && config ? config : {}
              );

              if (
                typeof config.target !== "string" &&
                Util.isElement(config.target)
              ) {
                var id = $__default["default"](config.target).attr("id");

                if (!id) {
                  id = Util.getUID(NAME$2);
                  $__default["default"](config.target).attr("id", id);
                }

                config.target = "#" + id;
              }

              Util.typeCheckConfig(NAME$2, config, DefaultType$1);
              return config;
            };

            _proto._getScrollTop = function _getScrollTop() {
              return this._scrollElement === window
                ? this._scrollElement.pageYOffset
                : this._scrollElement.scrollTop;
            };

            _proto._getScrollHeight = function _getScrollHeight() {
              return (
                this._scrollElement.scrollHeight ||
                Math.max(
                  document.body.scrollHeight,
                  document.documentElement.scrollHeight
                )
              );
            };

            _proto._getOffsetHeight = function _getOffsetHeight() {
              return this._scrollElement === window
                ? window.innerHeight
                : this._scrollElement.getBoundingClientRect().height;
            };

            _proto._process = function _process() {
              var scrollTop = this._getScrollTop() + this._config.offset;

              var scrollHeight = this._getScrollHeight();

              var maxScroll =
                this._config.offset + scrollHeight - this._getOffsetHeight();

              if (this._scrollHeight !== scrollHeight) {
                this.refresh();
              }

              if (scrollTop >= maxScroll) {
                var target = this._targets[this._targets.length - 1];

                if (this._activeTarget !== target) {
                  this._activate(target);
                }

                return;
              }

              if (
                this._activeTarget &&
                scrollTop < this._offsets[0] &&
                this._offsets[0] > 0
              ) {
                this._activeTarget = null;

                this._clear();

                return;
              }

              for (var i = this._offsets.length; i--;) {
                var isActiveTarget =
                  this._activeTarget !== this._targets[i] &&
                  scrollTop >= this._offsets[i] &&
                  (typeof this._offsets[i + 1] === "undefined" ||
                    scrollTop < this._offsets[i + 1]);

                if (isActiveTarget) {
                  this._activate(this._targets[i]);
                }
              }
            };

            _proto._activate = function _activate(target) {
              this._activeTarget = target;

              this._clear();

              var queries = this._selector.split(",").map(function (selector) {
                return (
                  selector +
                  '[data-target="' +
                  target +
                  '"],' +
                  selector +
                  '[href="' +
                  target +
                  '"]'
                );
              });

              var $link = $__default["default"](
                [].slice.call(document.querySelectorAll(queries.join(",")))
              );

              if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
                $link
                  .closest(SELECTOR_DROPDOWN$1)
                  .find(SELECTOR_DROPDOWN_TOGGLE$1)
                  .addClass(CLASS_NAME_ACTIVE$1);
                $link.addClass(CLASS_NAME_ACTIVE$1);
              } else {
                // Set triggered link as active
                $link.addClass(CLASS_NAME_ACTIVE$1); // Set triggered links parents as active
                // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

                $link
                  .parents(SELECTOR_NAV_LIST_GROUP$1)
                  .prev(SELECTOR_NAV_LINKS + ", " + SELECTOR_LIST_ITEMS)
                  .addClass(CLASS_NAME_ACTIVE$1); // Handle special case when .nav-link is inside .nav-item

                $link
                  .parents(SELECTOR_NAV_LIST_GROUP$1)
                  .prev(SELECTOR_NAV_ITEMS)
                  .children(SELECTOR_NAV_LINKS)
                  .addClass(CLASS_NAME_ACTIVE$1);
              }

              $__default["default"](this._scrollElement).trigger(
                EVENT_ACTIVATE,
                {
                  relatedTarget: target,
                }
              );
            };

            _proto._clear = function _clear() {
              [].slice
                .call(document.querySelectorAll(this._selector))
                .filter(function (node) {
                  return node.classList.contains(CLASS_NAME_ACTIVE$1);
                })
                .forEach(function (node) {
                  return node.classList.remove(CLASS_NAME_ACTIVE$1);
                });
            }; // Static

            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var data = $__default["default"](this).data(DATA_KEY$2);

                var _config = typeof config === "object" && config;

                if (!data) {
                  data = new ScrollSpy(this, _config);
                  $__default["default"](this).data(DATA_KEY$2, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(ScrollSpy, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$2;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$1;
                },
              },
            ]);

            return ScrollSpy;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](window).on(EVENT_LOAD_DATA_API, function () {
            var scrollSpys = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_SPY)
            );
            var scrollSpysLength = scrollSpys.length;

            for (var i = scrollSpysLength; i--;) {
              var $spy = $__default["default"](scrollSpys[i]);

              ScrollSpy._jQueryInterface.call($spy, $spy.data());
            }
          });
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$2] = ScrollSpy._jQueryInterface;
          $__default["default"].fn[NAME$2].Constructor = ScrollSpy;

          $__default["default"].fn[NAME$2].noConflict = function () {
            $__default["default"].fn[NAME$2] = JQUERY_NO_CONFLICT$2;
            return ScrollSpy._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME$1 = "tab";
          var VERSION$1 = "4.6.2";
          var DATA_KEY$1 = "bs.tab";
          var EVENT_KEY$1 = "." + DATA_KEY$1;
          var DATA_API_KEY = ".data-api";
          var JQUERY_NO_CONFLICT$1 = $__default["default"].fn[NAME$1];
          var CLASS_NAME_DROPDOWN_MENU = "dropdown-menu";
          var CLASS_NAME_ACTIVE = "active";
          var CLASS_NAME_DISABLED = "disabled";
          var CLASS_NAME_FADE$1 = "fade";
          var CLASS_NAME_SHOW$1 = "show";
          var EVENT_HIDE$1 = "hide" + EVENT_KEY$1;
          var EVENT_HIDDEN$1 = "hidden" + EVENT_KEY$1;
          var EVENT_SHOW$1 = "show" + EVENT_KEY$1;
          var EVENT_SHOWN$1 = "shown" + EVENT_KEY$1;
          var EVENT_CLICK_DATA_API = "click" + EVENT_KEY$1 + DATA_API_KEY;
          var SELECTOR_DROPDOWN = ".dropdown";
          var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
          var SELECTOR_ACTIVE = ".active";
          var SELECTOR_ACTIVE_UL = "> li > .active";
          var SELECTOR_DATA_TOGGLE =
            '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
          var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
          var SELECTOR_DROPDOWN_ACTIVE_CHILD = "> .dropdown-menu .active";
          /**
           * Class definition
           */

          var Tab = /*#__PURE__*/ (function () {
            function Tab(element) {
              this._element = element;
            } // Getters

            var _proto = Tab.prototype;

            // Public
            _proto.show = function show() {
              var _this = this;

              if (
                (this._element.parentNode &&
                  this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
                  $__default["default"](this._element).hasClass(
                    CLASS_NAME_ACTIVE
                  )) ||
                $__default["default"](this._element).hasClass(
                  CLASS_NAME_DISABLED
                ) ||
                this._element.hasAttribute("disabled")
              ) {
                return;
              }

              var target;
              var previous;
              var listElement = $__default["default"](this._element).closest(
                SELECTOR_NAV_LIST_GROUP
              )[0];
              var selector = Util.getSelectorFromElement(this._element);

              if (listElement) {
                var itemSelector =
                  listElement.nodeName === "UL" || listElement.nodeName === "OL"
                    ? SELECTOR_ACTIVE_UL
                    : SELECTOR_ACTIVE;
                previous = $__default["default"].makeArray(
                  $__default["default"](listElement).find(itemSelector)
                );
                previous = previous[previous.length - 1];
              }

              var hideEvent = $__default["default"].Event(EVENT_HIDE$1, {
                relatedTarget: this._element,
              });
              var showEvent = $__default["default"].Event(EVENT_SHOW$1, {
                relatedTarget: previous,
              });

              if (previous) {
                $__default["default"](previous).trigger(hideEvent);
              }

              $__default["default"](this._element).trigger(showEvent);

              if (
                showEvent.isDefaultPrevented() ||
                hideEvent.isDefaultPrevented()
              ) {
                return;
              }

              if (selector) {
                target = document.querySelector(selector);
              }

              this._activate(this._element, listElement);

              var complete = function complete() {
                var hiddenEvent = $__default["default"].Event(EVENT_HIDDEN$1, {
                  relatedTarget: _this._element,
                });
                var shownEvent = $__default["default"].Event(EVENT_SHOWN$1, {
                  relatedTarget: previous,
                });
                $__default["default"](previous).trigger(hiddenEvent);
                $__default["default"](_this._element).trigger(shownEvent);
              };

              if (target) {
                this._activate(target, target.parentNode, complete);
              } else {
                complete();
              }
            };

            _proto.dispose = function dispose() {
              $__default["default"].removeData(this._element, DATA_KEY$1);
              this._element = null;
            }; // Private

            _proto._activate = function _activate(
              element,
              container,
              callback
            ) {
              var _this2 = this;

              var activeElements =
                container &&
                  (container.nodeName === "UL" || container.nodeName === "OL")
                  ? $__default["default"](container).find(SELECTOR_ACTIVE_UL)
                  : $__default["default"](container).children(SELECTOR_ACTIVE);
              var active = activeElements[0];
              var isTransitioning =
                callback &&
                active &&
                $__default["default"](active).hasClass(CLASS_NAME_FADE$1);

              var complete = function complete() {
                return _this2._transitionComplete(element, active, callback);
              };

              if (active && isTransitioning) {
                var transitionDuration =
                  Util.getTransitionDurationFromElement(active);
                $__default["default"](active)
                  .removeClass(CLASS_NAME_SHOW$1)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            };

            _proto._transitionComplete = function _transitionComplete(
              element,
              active,
              callback
            ) {
              if (active) {
                $__default["default"](active).removeClass(CLASS_NAME_ACTIVE);
                var dropdownChild = $__default["default"](
                  active.parentNode
                ).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];

                if (dropdownChild) {
                  $__default["default"](dropdownChild).removeClass(
                    CLASS_NAME_ACTIVE
                  );
                }

                if (active.getAttribute("role") === "tab") {
                  active.setAttribute("aria-selected", false);
                }
              }

              $__default["default"](element).addClass(CLASS_NAME_ACTIVE);

              if (element.getAttribute("role") === "tab") {
                element.setAttribute("aria-selected", true);
              }

              Util.reflow(element);

              if (element.classList.contains(CLASS_NAME_FADE$1)) {
                element.classList.add(CLASS_NAME_SHOW$1);
              }

              var parent = element.parentNode;

              if (parent && parent.nodeName === "LI") {
                parent = parent.parentNode;
              }

              if (
                parent &&
                $__default["default"](parent).hasClass(CLASS_NAME_DROPDOWN_MENU)
              ) {
                var dropdownElement =
                  $__default["default"](element).closest(SELECTOR_DROPDOWN)[0];

                if (dropdownElement) {
                  var dropdownToggleList = [].slice.call(
                    dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE)
                  );
                  $__default["default"](dropdownToggleList).addClass(
                    CLASS_NAME_ACTIVE
                  );
                }

                element.setAttribute("aria-expanded", true);
              }

              if (callback) {
                callback();
              }
            }; // Static

            Tab._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var $this = $__default["default"](this);
                var data = $this.data(DATA_KEY$1);

                if (!data) {
                  data = new Tab(this);
                  $this.data(DATA_KEY$1, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Tab, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$1;
                },
              },
            ]);

            return Tab;
          })();
          /**
           * Data API implementation
           */

          $__default["default"](document).on(
            EVENT_CLICK_DATA_API,
            SELECTOR_DATA_TOGGLE,
            function (event) {
              event.preventDefault();

              Tab._jQueryInterface.call($__default["default"](this), "show");
            }
          );
          /**
           * jQuery
           */

          $__default["default"].fn[NAME$1] = Tab._jQueryInterface;
          $__default["default"].fn[NAME$1].Constructor = Tab;

          $__default["default"].fn[NAME$1].noConflict = function () {
            $__default["default"].fn[NAME$1] = JQUERY_NO_CONFLICT$1;
            return Tab._jQueryInterface;
          };

          /**
           * Constants
           */

          var NAME = "toast";
          var VERSION = "4.6.2";
          var DATA_KEY = "bs.toast";
          var EVENT_KEY = "." + DATA_KEY;
          var JQUERY_NO_CONFLICT = $__default["default"].fn[NAME];
          var CLASS_NAME_FADE = "fade";
          var CLASS_NAME_HIDE = "hide";
          var CLASS_NAME_SHOW = "show";
          var CLASS_NAME_SHOWING = "showing";
          var EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY;
          var EVENT_HIDE = "hide" + EVENT_KEY;
          var EVENT_HIDDEN = "hidden" + EVENT_KEY;
          var EVENT_SHOW = "show" + EVENT_KEY;
          var EVENT_SHOWN = "shown" + EVENT_KEY;
          var SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';
          var Default = {
            animation: true,
            autohide: true,
            delay: 500,
          };
          var DefaultType = {
            animation: "boolean",
            autohide: "boolean",
            delay: "number",
          };
          /**
           * Class definition
           */

          var Toast = /*#__PURE__*/ (function () {
            function Toast(element, config) {
              this._element = element;
              this._config = this._getConfig(config);
              this._timeout = null;

              this._setListeners();
            } // Getters

            var _proto = Toast.prototype;

            // Public
            _proto.show = function show() {
              var _this = this;

              var showEvent = $__default["default"].Event(EVENT_SHOW);
              $__default["default"](this._element).trigger(showEvent);

              if (showEvent.isDefaultPrevented()) {
                return;
              }

              this._clearTimeout();

              if (this._config.animation) {
                this._element.classList.add(CLASS_NAME_FADE);
              }

              var complete = function complete() {
                _this._element.classList.remove(CLASS_NAME_SHOWING);

                _this._element.classList.add(CLASS_NAME_SHOW);

                $__default["default"](_this._element).trigger(EVENT_SHOWN);

                if (_this._config.autohide) {
                  _this._timeout = setTimeout(function () {
                    _this.hide();
                  }, _this._config.delay);
                }
              };

              this._element.classList.remove(CLASS_NAME_HIDE);

              Util.reflow(this._element);

              this._element.classList.add(CLASS_NAME_SHOWING);

              if (this._config.animation) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $__default["default"](this._element)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            };

            _proto.hide = function hide() {
              if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
                return;
              }

              var hideEvent = $__default["default"].Event(EVENT_HIDE);
              $__default["default"](this._element).trigger(hideEvent);

              if (hideEvent.isDefaultPrevented()) {
                return;
              }

              this._close();
            };

            _proto.dispose = function dispose() {
              this._clearTimeout();

              if (this._element.classList.contains(CLASS_NAME_SHOW)) {
                this._element.classList.remove(CLASS_NAME_SHOW);
              }

              $__default["default"](this._element).off(EVENT_CLICK_DISMISS);
              $__default["default"].removeData(this._element, DATA_KEY);
              this._element = null;
              this._config = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _extends(
                {},
                Default,
                $__default["default"](this._element).data(),
                typeof config === "object" && config ? config : {}
              );
              Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
              return config;
            };

            _proto._setListeners = function _setListeners() {
              var _this2 = this;

              $__default["default"](this._element).on(
                EVENT_CLICK_DISMISS,
                SELECTOR_DATA_DISMISS,
                function () {
                  return _this2.hide();
                }
              );
            };

            _proto._close = function _close() {
              var _this3 = this;

              var complete = function complete() {
                _this3._element.classList.add(CLASS_NAME_HIDE);

                $__default["default"](_this3._element).trigger(EVENT_HIDDEN);
              };

              this._element.classList.remove(CLASS_NAME_SHOW);

              if (this._config.animation) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $__default["default"](this._element)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            };

            _proto._clearTimeout = function _clearTimeout() {
              clearTimeout(this._timeout);
              this._timeout = null;
            }; // Static

            Toast._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function () {
                var $element = $__default["default"](this);
                var data = $element.data(DATA_KEY);

                var _config = typeof config === "object" && config;

                if (!data) {
                  data = new Toast(this, _config);
                  $element.data(DATA_KEY, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config](this);
                }
              });
            };

            _createClass(Toast, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default;
                },
              },
            ]);

            return Toast;
          })();
          /**
           * jQuery
           */

          $__default["default"].fn[NAME] = Toast._jQueryInterface;
          $__default["default"].fn[NAME].Constructor = Toast;

          $__default["default"].fn[NAME].noConflict = function () {
            $__default["default"].fn[NAME] = JQUERY_NO_CONFLICT;
            return Toast._jQueryInterface;
          };

          exports.Alert = Alert;
          exports.Button = Button;
          exports.Carousel = Carousel;
          exports.Collapse = Collapse;
          exports.Dropdown = Dropdown;
          exports.Modal = Modal;
          exports.Popover = Popover;
          exports.Scrollspy = ScrollSpy;
          exports.Tab = Tab;
          exports.Toast = Toast;
          exports.Tooltip = Tooltip;
          exports.Util = Util;

          Object.defineProperty(exports, "__esModule", { value: true });
        });
        //# sourceMappingURL=bootstrap.js.map

        /***/
      },

    /***/ "./node_modules/buffer/index.js":
      /*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        "use strict";
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <http://feross.org>
         * @license  MIT
         */
        /* eslint-disable no-proto */

        var base64 = __webpack_require__(
          /*! base64-js */ "./node_modules/base64-js/index.js"
        );
        var ieee754 = __webpack_require__(
          /*! ieee754 */ "./node_modules/ieee754/index.js"
        );
        var isArray = __webpack_require__(
          /*! isarray */ "./node_modules/isarray/index.js"
        );

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;

        /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
        Buffer.TYPED_ARRAY_SUPPORT =
          __webpack_require__.g.TYPED_ARRAY_SUPPORT !== undefined
            ? __webpack_require__.g.TYPED_ARRAY_SUPPORT
            : typedArraySupport();

        /*
         * Export kMaxLength after typed array support is determined.
         */
        exports.kMaxLength = kMaxLength();

        function typedArraySupport() {
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function () {
                return 42;
              },
            };
            return (
              arr.foo() === 42 && // typed array instances can be augmented
              typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
              arr.subarray(1, 1).byteLength === 0
            ); // ie10 has broken `subarray`
          } catch (e) {
            return false;
          }
        }

        function kMaxLength() {
          return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
        }

        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError("Invalid typed array length");
          }
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = new Uint8Array(length);
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            if (that === null) {
              that = new Buffer(length);
            }
            that.length = length;
          }

          return that;
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
          if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
            return new Buffer(arg, encodingOrOffset, length);
          }

          // Common case.
          if (typeof arg === "number") {
            if (typeof encodingOrOffset === "string") {
              throw new Error(
                "If encoding is specified then the first argument must be a string"
              );
            }
            return allocUnsafe(this, arg);
          }
          return from(this, arg, encodingOrOffset, length);
        }

        Buffer.poolSize = 8192; // not used by this implementation

        // TODO: Legacy, not needed anymore. Remove in next major version.
        Buffer._augment = function (arr) {
          arr.__proto__ = Buffer.prototype;
          return arr;
        };

        function from(that, value, encodingOrOffset, length) {
          if (typeof value === "number") {
            throw new TypeError('"value" argument must not be a number');
          }

          if (
            typeof ArrayBuffer !== "undefined" &&
            value instanceof ArrayBuffer
          ) {
            return fromArrayBuffer(that, value, encodingOrOffset, length);
          }

          if (typeof value === "string") {
            return fromString(that, value, encodingOrOffset);
          }

          return fromObject(that, value);
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
          return from(null, value, encodingOrOffset, length);
        };

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          Buffer.prototype.__proto__ = Uint8Array.prototype;
          Buffer.__proto__ = Uint8Array;
          if (
            typeof Symbol !== "undefined" &&
            Symbol.species &&
            Buffer[Symbol.species] === Buffer
          ) {
            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true,
            });
          }
        }

        function assertSize(size) {
          if (typeof size !== "number") {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(that, size, fill, encoding) {
          assertSize(size);
          if (size <= 0) {
            return createBuffer(that, size);
          }
          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === "string"
              ? createBuffer(that, size).fill(fill, encoding)
              : createBuffer(that, size).fill(fill);
          }
          return createBuffer(that, size);
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
          return alloc(null, size, fill, encoding);
        };

        function allocUnsafe(that, size) {
          assertSize(size);
          that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) {
            for (var i = 0; i < size; ++i) {
              that[i] = 0;
            }
          }
          return that;
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(null, size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(null, size);
        };

        function fromString(that, string, encoding) {
          if (typeof encoding !== "string" || encoding === "") {
            encoding = "utf8";
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          that = createBuffer(that, length);

          var actual = that.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            that = that.slice(0, actual);
          }

          return that;
        }

        function fromArrayLike(that, array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          that = createBuffer(that, length);
          for (var i = 0; i < length; i += 1) {
            that[i] = array[i] & 255;
          }
          return that;
        }

        function fromArrayBuffer(that, array, byteOffset, length) {
          array.byteLength; // this throws if `array` is not a valid ArrayBuffer

          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError("'offset' is out of bounds");
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError("'length' is out of bounds");
          }

          if (byteOffset === undefined && length === undefined) {
            array = new Uint8Array(array);
          } else if (length === undefined) {
            array = new Uint8Array(array, byteOffset);
          } else {
            array = new Uint8Array(array, byteOffset, length);
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = array;
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            that = fromArrayLike(that, array);
          }
          return that;
        }

        function fromObject(that, obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            that = createBuffer(that, len);

            if (that.length === 0) {
              return that;
            }

            obj.copy(that, 0, 0, len);
            return that;
          }

          if (obj) {
            if (
              (typeof ArrayBuffer !== "undefined" &&
                obj.buffer instanceof ArrayBuffer) ||
              "length" in obj
            ) {
              if (typeof obj.length !== "number" || isnan(obj.length)) {
                return createBuffer(that, 0);
              }
              return fromArrayLike(that, obj);
            }

            if (obj.type === "Buffer" && isArray(obj.data)) {
              return fromArrayLike(that, obj.data);
            }
          }

          throw new TypeError(
            "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
          );
        }

        function checked(length) {
          // Note: cannot use `length < kMaxLength()` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= kMaxLength()) {
            throw new RangeError(
              "Attempt to allocate Buffer larger than maximum " +
              "size: 0x" +
              kMaxLength().toString(16) +
              " bytes"
            );
          }
          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }
          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return !!(b != null && b._isBuffer);
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError("Arguments must be Buffers");
          }

          if (a === b) return 0;

          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;
          if (length === undefined) {
            length = 0;
            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;
          for (i = 0; i < list.length; ++i) {
            var buf = list[i];
            if (!Buffer.isBuffer(buf)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            }
            buf.copy(buffer, pos);
            pos += buf.length;
          }
          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }
          if (
            typeof ArrayBuffer !== "undefined" &&
            typeof ArrayBuffer.isView === "function" &&
            (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
          ) {
            return string.byteLength;
          }
          if (typeof string !== "string") {
            string = "" + string;
          }

          var len = string.length;
          if (len === 0) return 0;

          // Use a for loop to avoid recursion
          var loweredCase = false;
          for (; ;) {
            switch (encoding) {
              case "ascii":
              case "latin1":
              case "binary":
                return len;
              case "utf8":
              case "utf-8":
              case undefined:
                return utf8ToBytes(string).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return len * 2;
              case "hex":
                return len >>> 1;
              case "base64":
                return base64ToBytes(string).length;
              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }
        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false;

          // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.

          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
          if (start === undefined || start < 0) {
            start = 0;
          }
          // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.
          if (start > this.length) {
            return "";
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return "";
          }

          // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return "";
          }

          if (!encoding) encoding = "utf8";

          while (true) {
            switch (encoding) {
              case "hex":
                return hexSlice(this, start, end);

              case "utf8":
              case "utf-8":
                return utf8Slice(this, start, end);

              case "ascii":
                return asciiSlice(this, start, end);

              case "latin1":
              case "binary":
                return latin1Slice(this, start, end);

              case "base64":
                return base64Slice(this, start, end);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase)
                  throw new TypeError("Unknown encoding: " + encoding);
                encoding = (encoding + "").toLowerCase();
                loweredCase = true;
            }
          }
        }

        // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.
        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;
          if (len % 2 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          }
          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }
          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;
          if (len % 4 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          }
          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }
          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;
          if (len % 8 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          }
          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }
          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length | 0;
          if (length === 0) return "";
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b))
            throw new TypeError("Argument must be a Buffer");
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = "";
          var max = exports.INSPECT_MAX_BYTES;
          if (this.length > 0) {
            str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
            if (this.length > max) str += " ... ";
          }
          return "<Buffer " + str + ">";
        };

        Buffer.prototype.compare = function compare(
          target,
          start,
          end,
          thisStart,
          thisEnd
        ) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError("Argument must be a Buffer");
          }

          if (start === undefined) {
            start = 0;
          }
          if (end === undefined) {
            end = target ? target.length : 0;
          }
          if (thisStart === undefined) {
            thisStart = 0;
          }
          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (
            start < 0 ||
            end > target.length ||
            thisStart < 0 ||
            thisEnd > this.length
          ) {
            throw new RangeError("out of range index");
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }
          if (thisStart >= thisEnd) {
            return -1;
          }
          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;

          if (this === target) return 0;

          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);

          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1;

          // Normalize byteOffset
          if (typeof byteOffset === "string") {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }
          byteOffset = +byteOffset; // Coerce to Number.
          if (isNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          }

          // Normalize byteOffset: negative offsets start from the end of the buffer
          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
          if (byteOffset >= buffer.length) {
            if (dir) return -1;
            else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;
            else return -1;
          }

          // Normalize val
          if (typeof val === "string") {
            val = Buffer.from(val, encoding);
          }

          // Finally, search either indexOf (if dir is true) or lastIndexOf
          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === "number") {
            val = val & 0xff; // Search for a byte value [0-255]
            if (
              Buffer.TYPED_ARRAY_SUPPORT &&
              typeof Uint8Array.prototype.indexOf === "function"
            ) {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(
                  buffer,
                  val,
                  byteOffset
                );
              } else {
                return Uint8Array.prototype.lastIndexOf.call(
                  buffer,
                  val,
                  byteOffset
                );
              }
            }
            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError("val must be string, number or Buffer");
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();
            if (
              encoding === "ucs2" ||
              encoding === "ucs-2" ||
              encoding === "utf16le" ||
              encoding === "utf-16le"
            ) {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }
              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;
          if (dir) {
            var foundIndex = -1;
            for (i = byteOffset; i < arrLength; i++) {
              if (
                read(arr, i) ===
                read(val, foundIndex === -1 ? 0 : i - foundIndex)
              ) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength)
                  return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength)
              byteOffset = arrLength - valLength;
            for (i = byteOffset; i >= 0; i--) {
              var found = true;
              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }
              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(
          val,
          byteOffset,
          encoding
        ) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(
          val,
          byteOffset,
          encoding
        ) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;
          if (!length) {
            length = remaining;
          } else {
            length = Number(length);
            if (length > remaining) {
              length = remaining;
            }
          }

          // must be an even number of digits
          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

          if (length > strLen / 2) {
            length = strLen / 2;
          }
          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (isNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }
          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(
            utf8ToBytes(string, buf.length - offset),
            buf,
            offset,
            length
          );
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(
            utf16leToBytes(string, buf.length - offset),
            buf,
            offset,
            length
          );
        }

        Buffer.prototype.write = function write(
          string,
          offset,
          length,
          encoding
        ) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = "utf8";
            length = this.length;
            offset = 0;
            // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === "string") {
            encoding = offset;
            length = this.length;
            offset = 0;
            // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset | 0;
            if (isFinite(length)) {
              length = length | 0;
              if (encoding === undefined) encoding = "utf8";
            } else {
              encoding = length;
              length = undefined;
            }
            // legacy write(string, encoding, offset, length) - remove in v0.13
          } else {
            throw new Error(
              "Buffer.write(string, encoding, offset[, length]) is no longer supported"
            );
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (
            (string.length > 0 && (length < 0 || offset < 0)) ||
            offset > this.length
          ) {
            throw new RangeError("Attempt to write outside buffer bounds");
          }

          if (!encoding) encoding = "utf8";

          var loweredCase = false;
          for (; ;) {
            switch (encoding) {
              case "hex":
                return hexWrite(this, string, offset, length);

              case "utf8":
              case "utf-8":
                return utf8Write(this, string, offset, length);

              case "ascii":
                return asciiWrite(this, string, offset, length);

              case "latin1":
              case "binary":
                return latin1Write(this, string, offset, length);

              case "base64":
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase)
                  throw new TypeError("Unknown encoding: " + encoding);
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0),
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];

          var i = start;
          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence =
              firstByte > 0xef
                ? 4
                : firstByte > 0xdf
                  ? 3
                  : firstByte > 0xbf
                    ? 2
                    : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }
                  break;
                case 2:
                  secondByte = buf[i + 1];
                  if ((secondByte & 0xc0) === 0x80) {
                    tempCodePoint =
                      ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                    if (tempCodePoint > 0x7f) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  if (
                    (secondByte & 0xc0) === 0x80 &&
                    (thirdByte & 0xc0) === 0x80
                  ) {
                    tempCodePoint =
                      ((firstByte & 0xf) << 0xc) |
                      ((secondByte & 0x3f) << 0x6) |
                      (thirdByte & 0x3f);
                    if (
                      tempCodePoint > 0x7ff &&
                      (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                    ) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];
                  if (
                    (secondByte & 0xc0) === 0x80 &&
                    (thirdByte & 0xc0) === 0x80 &&
                    (fourthByte & 0xc0) === 0x80
                  ) {
                    tempCodePoint =
                      ((firstByte & 0xf) << 0x12) |
                      ((secondByte & 0x3f) << 0xc) |
                      ((thirdByte & 0x3f) << 0x6) |
                      (fourthByte & 0x3f);
                    if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }
              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xfffd;
              bytesPerSequence = 1;
            } else if (codePoint > 0xffff) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
              codePoint = 0xdc00 | (codePoint & 0x3ff);
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        }

        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;
          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          }

          // Decode in chunks to avoid "call stack size exceeded".
          var res = "";
          var i = 0;
          while (i < len) {
            res += String.fromCharCode.apply(
              String,
              codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
            );
          }
          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = "";
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7f);
          }
          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = "";
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }
          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;

          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;

          var out = "";
          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }
          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = "";
          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }
          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;

          var newBuf;
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            newBuf = this.subarray(start, end);
            newBuf.__proto__ = Buffer.prototype;
          } else {
            var sliceLen = end - start;
            newBuf = new Buffer(sliceLen, undefined);
            for (var i = 0; i < sliceLen; ++i) {
              newBuf[i] = this[i + start];
            }
          }

          return newBuf;
        };

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0)
            throw new RangeError("offset is not uint");
          if (offset + ext > length)
            throw new RangeError("Trying to access beyond buffer length");
        }

        Buffer.prototype.readUIntLE = function readUIntLE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          var val = this[offset];
          var mul = 1;
          var i = 0;
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;
          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | (this[offset + 1] << 8);
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return (this[offset] << 8) | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            (this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16)) +
            this[offset + 3] * 0x1000000
          );
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            this[offset] * 0x1000000 +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
          );
        };

        Buffer.prototype.readIntLE = function readIntLE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          var val = this[offset];
          var mul = 1;
          var i = 0;
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }
          mul *= 0x80;

          if (val >= mul) val -= Math.pow(2, 8 * byteLength);

          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];
          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }
          mul *= 0x80;

          if (val >= mul) val -= Math.pow(2, 8 * byteLength);

          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | (this[offset + 1] << 8);
          return val & 0x8000 ? val | 0xffff0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | (this[offset] << 8);
          return val & 0x8000 ? val | 0xffff0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            this[offset] |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
          );
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            this[offset + 3]
          );
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min)
            throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length)
            throw new RangeError("Index out of range");
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xff;
          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xff;
          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffff + value + 1;
          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
            buf[offset + i] =
              (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
              ((littleEndian ? i : 1 - i) * 8);
          }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }
          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }
          return offset + 2;
        };

        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffffffff + value + 1;
          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
            buf[offset + i] =
              (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
          }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }
          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }
          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);

            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xff;
          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }
            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);

            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xff;
          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }
            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }
          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }
          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert)
            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }
          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert)
            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }
          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length)
            throw new RangeError("Index out of range");
          if (offset < 0) throw new RangeError("Index out of range");
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(
              buf,
              value,
              offset,
              4,
              3.4028234663852886e38,
              -3.4028234663852886e38
            );
          }
          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(
          value,
          offset,
          noAssert
        ) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(
          value,
          offset,
          noAssert
        ) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(
              buf,
              value,
              offset,
              8,
              1.7976931348623157e308,
              -1.7976931348623157e308
            );
          }
          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(
          value,
          offset,
          noAssert
        ) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(
          value,
          offset,
          noAssert
        ) {
          return writeDouble(this, value, offset, false, noAssert);
        };

        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start;

          // Copy 0 bytes; we're done
          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0;

          // Fatal error conditions
          if (targetStart < 0) {
            throw new RangeError("targetStart out of bounds");
          }
          if (start < 0 || start >= this.length)
            throw new RangeError("sourceStart out of bounds");
          if (end < 0) throw new RangeError("sourceEnd out of bounds");

          // Are we oob?
          if (end > this.length) end = this.length;
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(
              target,
              this.subarray(start, start + len),
              targetStart
            );
          }

          return len;
        };

        // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === "string") {
            if (typeof start === "string") {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === "string") {
              encoding = end;
              end = this.length;
            }
            if (val.length === 1) {
              var code = val.charCodeAt(0);
              if (code < 256) {
                val = code;
              }
            }
            if (encoding !== undefined && typeof encoding !== "string") {
              throw new TypeError("encoding must be a string");
            }
            if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
              throw new TypeError("Unknown encoding: " + encoding);
            }
          } else if (typeof val === "number") {
            val = val & 255;
          }

          // Invalid ranges are not set to a default, so can range check early.
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError("Out of range index");
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;

          if (!val) val = 0;

          var i;
          if (typeof val === "number") {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val)
              ? val
              : utf8ToBytes(new Buffer(val, encoding).toString());
            var len = bytes.length;
            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        };

        // HELPER FUNCTIONS
        // ================

        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = stringtrim(str).replace(INVALID_BASE64_RE, "");
          // Node converts strings with length < 2 to ''
          if (str.length < 2) return "";
          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
          while (str.length % 4 !== 0) {
            str = str + "=";
          }
          return str;
        }

        function stringtrim(str) {
          if (str.trim) return str.trim();
          return str.replace(/^\s+|\s+$/g, "");
        }

        function toHex(n) {
          if (n < 16) return "0" + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i);

            // is surrogate component
            if (codePoint > 0xd7ff && codePoint < 0xe000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xdbff) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  continue;
                }

                // valid lead
                leadSurrogate = codePoint;

                continue;
              }

              // 2 leads in a row
              if (codePoint < 0xdc00) {
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                leadSurrogate = codePoint;
                continue;
              }

              // valid surrogate pair
              codePoint =
                (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
            }

            leadSurrogate = null;

            // encode utf8
            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(
                (codePoint >> 0xc) | 0xe0,
                ((codePoint >> 0x6) & 0x3f) | 0x80,
                (codePoint & 0x3f) | 0x80
              );
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(
                (codePoint >> 0x12) | 0xf0,
                ((codePoint >> 0xc) & 0x3f) | 0x80,
                ((codePoint >> 0x6) & 0x3f) | 0x80,
                (codePoint & 0x3f) | 0x80
              );
            } else {
              throw new Error("Invalid code point");
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];
          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xff);
          }
          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];
          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;

            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }
          return i;
        }

        function isnan(val) {
          return val !== val; // eslint-disable-line no-self-compare
        }

        /***/
      },

    /***/ "./node_modules/firebase/analytics/dist/index.esm.js":
      /*!***********************************************************!*\
  !*** ./node_modules/firebase/analytics/dist/index.esm.js ***!
  \***********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ getAnalytics: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.getAnalytics,
          /* harmony export */ initializeAnalytics: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.initializeAnalytics,
          /* harmony export */ isSupported: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.isSupported,
          /* harmony export */ logEvent: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.logEvent,
          /* harmony export */ setAnalyticsCollectionEnabled: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setAnalyticsCollectionEnabled,
          /* harmony export */ setConsent: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setConsent,
          /* harmony export */ setCurrentScreen: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setCurrentScreen,
          /* harmony export */ setDefaultEventParameters: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setDefaultEventParameters,
          /* harmony export */ setUserId: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setUserId,
          /* harmony export */ setUserProperties: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setUserProperties,
          /* harmony export */ settings: () =>
            /* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.settings,
          /* harmony export */
        });
        /* harmony import */ var _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/analytics */ "./node_modules/@firebase/analytics/dist/esm/index.esm2017.js"
          );

        //# sourceMappingURL=index.esm.js.map

        /***/
      },

    /***/ "./node_modules/firebase/app/dist/index.esm.js":
      /*!*****************************************************!*\
  !*** ./node_modules/firebase/app/dist/index.esm.js ***!
  \*****************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ FirebaseError: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.FirebaseError,
          /* harmony export */ SDK_VERSION: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION,
          /* harmony export */ _DEFAULT_ENTRY_NAME: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._DEFAULT_ENTRY_NAME,
          /* harmony export */ _addComponent: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addComponent,
          /* harmony export */ _addOrOverwriteComponent: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addOrOverwriteComponent,
          /* harmony export */ _apps: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._apps,
          /* harmony export */ _clearComponents: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._clearComponents,
          /* harmony export */ _components: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._components,
          /* harmony export */ _getProvider: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider,
          /* harmony export */ _registerComponent: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent,
          /* harmony export */ _removeServiceInstance: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._removeServiceInstance,
          /* harmony export */ deleteApp: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.deleteApp,
          /* harmony export */ getApp: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp,
          /* harmony export */ getApps: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps,
          /* harmony export */ initializeApp: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp,
          /* harmony export */ onLog: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.onLog,
          /* harmony export */ registerVersion: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion,
          /* harmony export */ setLogLevel: () =>
            /* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.setLogLevel,
          /* harmony export */
        });
        /* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js"
          );

        var name = "firebase";
        var version = "9.14.0";

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
          name,
          version,
          "app"
        );
        //# sourceMappingURL=index.esm.js.map

        /***/
      },

    /***/ "./node_modules/firebase/database/dist/index.esm.js":
      /*!**********************************************************!*\
  !*** ./node_modules/firebase/database/dist/index.esm.js ***!
  \**********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ DataSnapshot: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.DataSnapshot,
          /* harmony export */ Database: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.Database,
          /* harmony export */ OnDisconnect: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.OnDisconnect,
          /* harmony export */ QueryConstraint: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.QueryConstraint,
          /* harmony export */ TransactionResult: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.TransactionResult,
          /* harmony export */ _QueryImpl: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._QueryImpl,
          /* harmony export */ _QueryParams: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._QueryParams,
          /* harmony export */ _ReferenceImpl: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._ReferenceImpl,
          /* harmony export */ _TEST_ACCESS_forceRestClient: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._TEST_ACCESS_forceRestClient,
          /* harmony export */ _TEST_ACCESS_hijackHash: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._TEST_ACCESS_hijackHash,
          /* harmony export */ _repoManagerDatabaseFromApp: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._repoManagerDatabaseFromApp,
          /* harmony export */ _setSDKVersion: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._setSDKVersion,
          /* harmony export */ _validatePathString: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._validatePathString,
          /* harmony export */ _validateWritablePath: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._validateWritablePath,
          /* harmony export */ child: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.child,
          /* harmony export */ connectDatabaseEmulator: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.connectDatabaseEmulator,
          /* harmony export */ enableLogging: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.enableLogging,
          /* harmony export */ endAt: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.endAt,
          /* harmony export */ endBefore: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.endBefore,
          /* harmony export */ equalTo: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.equalTo,
          /* harmony export */ forceLongPolling: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.forceLongPolling,
          /* harmony export */ forceWebSockets: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.forceWebSockets,
          /* harmony export */ get: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.get,
          /* harmony export */ getDatabase: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.getDatabase,
          /* harmony export */ goOffline: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.goOffline,
          /* harmony export */ goOnline: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.goOnline,
          /* harmony export */ increment: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.increment,
          /* harmony export */ limitToFirst: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.limitToFirst,
          /* harmony export */ limitToLast: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.limitToLast,
          /* harmony export */ off: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.off,
          /* harmony export */ onChildAdded: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildAdded,
          /* harmony export */ onChildChanged: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildChanged,
          /* harmony export */ onChildMoved: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildMoved,
          /* harmony export */ onChildRemoved: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildRemoved,
          /* harmony export */ onDisconnect: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onDisconnect,
          /* harmony export */ onValue: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onValue,
          /* harmony export */ orderByChild: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByChild,
          /* harmony export */ orderByKey: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByKey,
          /* harmony export */ orderByPriority: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByPriority,
          /* harmony export */ orderByValue: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByValue,
          /* harmony export */ push: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.push,
          /* harmony export */ query: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.query,
          /* harmony export */ ref: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref,
          /* harmony export */ refFromURL: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.refFromURL,
          /* harmony export */ remove: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.remove,
          /* harmony export */ runTransaction: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.runTransaction,
          /* harmony export */ serverTimestamp: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp,
          /* harmony export */ set: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.set,
          /* harmony export */ setPriority: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.setPriority,
          /* harmony export */ setWithPriority: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.setWithPriority,
          /* harmony export */ startAfter: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.startAfter,
          /* harmony export */ startAt: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.startAt,
          /* harmony export */ update: () =>
            /* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.update,
          /* harmony export */
        });
        /* harmony import */ var _firebase_database__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/database */ "./node_modules/@firebase/database/dist/index.esm2017.js"
          );

        //# sourceMappingURL=index.esm.js.map

        /***/
      },

    /***/ "./node_modules/firebase/messaging/dist/index.esm.js":
      /*!***********************************************************!*\
  !*** ./node_modules/firebase/messaging/dist/index.esm.js ***!
  \***********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ deleteToken: () =>
            /* reexport safe */ _firebase_messaging__WEBPACK_IMPORTED_MODULE_0__.deleteToken,
          /* harmony export */ getMessaging: () =>
            /* reexport safe */ _firebase_messaging__WEBPACK_IMPORTED_MODULE_0__.getMessaging,
          /* harmony export */ getToken: () =>
            /* reexport safe */ _firebase_messaging__WEBPACK_IMPORTED_MODULE_0__.getToken,
          /* harmony export */ isSupported: () =>
            /* reexport safe */ _firebase_messaging__WEBPACK_IMPORTED_MODULE_0__.isSupported,
          /* harmony export */ onMessage: () =>
            /* reexport safe */ _firebase_messaging__WEBPACK_IMPORTED_MODULE_0__.onMessage,
          /* harmony export */
        });
        /* harmony import */ var _firebase_messaging__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/messaging */ "./node_modules/@firebase/messaging/dist/esm/index.esm2017.js"
          );

        //# sourceMappingURL=index.esm.js.map

        /***/
      },

    /***/ "./node_modules/firebase/storage/dist/index.esm.js":
      /*!*********************************************************!*\
  !*** ./node_modules/firebase/storage/dist/index.esm.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ StringFormat: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.StringFormat,
          /* harmony export */ _FbsBlob: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._FbsBlob,
          /* harmony export */ _Location: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._Location,
          /* harmony export */ _TaskEvent: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._TaskEvent,
          /* harmony export */ _TaskState: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._TaskState,
          /* harmony export */ _UploadTask: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._UploadTask,
          /* harmony export */ _dataFromString: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._dataFromString,
          /* harmony export */ _getChild: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._getChild,
          /* harmony export */ _invalidArgument: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._invalidArgument,
          /* harmony export */ _invalidRootOperation: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._invalidRootOperation,
          /* harmony export */ connectStorageEmulator: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.connectStorageEmulator,
          /* harmony export */ deleteObject: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.deleteObject,
          /* harmony export */ getBlob: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getBlob,
          /* harmony export */ getBytes: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getBytes,
          /* harmony export */ getDownloadURL: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getDownloadURL,
          /* harmony export */ getMetadata: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getMetadata,
          /* harmony export */ getStorage: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage,
          /* harmony export */ getStream: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStream,
          /* harmony export */ list: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.list,
          /* harmony export */ listAll: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.listAll,
          /* harmony export */ ref: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref,
          /* harmony export */ updateMetadata: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.updateMetadata,
          /* harmony export */ uploadBytes: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadBytes,
          /* harmony export */ uploadBytesResumable: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadBytesResumable,
          /* harmony export */ uploadString: () =>
            /* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadString,
          /* harmony export */
        });
        /* harmony import */ var _firebase_storage__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/storage */ "./node_modules/@firebase/storage/dist/index.esm2017.js"
          );

        //# sourceMappingURL=index.esm.js.map

        /***/
      },

    /***/ "./node_modules/howler/dist/howler.js":
      /*!********************************************!*\
  !*** ./node_modules/howler/dist/howler.js ***!
  \********************************************/
      /***/ (module, exports, __webpack_require__) => {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
         *  howler.js v2.2.3
         *  howlerjs.com
         *
         *  (c) 2013-2020, James Simpson of GoldFire Studios
         *  goldfirestudios.com
         *
         *  MIT License
         */

        (function () {
          "use strict";

          /** Global Methods **/
          /***************************************************************************/

          /**
           * Create the global controller. All contained methods and properties apply
           * to all sounds that are currently playing or will be in the future.
           */
          var HowlerGlobal = function () {
            this.init();
          };
          HowlerGlobal.prototype = {
            /**
             * Initialize the global Howler object.
             * @return {Howler}
             */
            init: function () {
              var self = this || Howler;

              // Create a global ID counter.
              self._counter = 1000;

              // Pool of unlocked HTML5 Audio objects.
              self._html5AudioPool = [];
              self.html5PoolSize = 10;

              // Internal properties.
              self._codecs = {};
              self._howls = [];
              self._muted = false;
              self._volume = 1;
              self._canPlayEvent = "canplaythrough";
              self._navigator =
                typeof window !== "undefined" && window.navigator
                  ? window.navigator
                  : null;

              // Public properties.
              self.masterGain = null;
              self.noAudio = false;
              self.usingWebAudio = true;
              self.autoSuspend = true;
              self.ctx = null;

              // Set to false to disable the auto audio unlocker.
              self.autoUnlock = true;

              // Setup the various state values for global tracking.
              self._setup();

              return self;
            },

            /**
             * Get/set the global volume for all sounds.
             * @param  {Float} vol Volume from 0.0 to 1.0.
             * @return {Howler/Float}     Returns self or current volume.
             */
            volume: function (vol) {
              var self = this || Howler;
              vol = parseFloat(vol);

              // If we don't have an AudioContext created yet, run the setup.
              if (!self.ctx) {
                setupAudioContext();
              }

              if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
                self._volume = vol;

                // Don't update any of the nodes if we are muted.
                if (self._muted) {
                  return self;
                }

                // When using Web Audio, we just need to adjust the master gain.
                if (self.usingWebAudio) {
                  self.masterGain.gain.setValueAtTime(
                    vol,
                    Howler.ctx.currentTime
                  );
                }

                // Loop through and change volume for all HTML5 audio nodes.
                for (var i = 0; i < self._howls.length; i++) {
                  if (!self._howls[i]._webAudio) {
                    // Get all of the sounds in this Howl group.
                    var ids = self._howls[i]._getSoundIds();

                    // Loop through all sounds and change the volumes.
                    for (var j = 0; j < ids.length; j++) {
                      var sound = self._howls[i]._soundById(ids[j]);

                      if (sound && sound._node) {
                        sound._node.volume = sound._volume * vol;
                      }
                    }
                  }
                }

                return self;
              }

              return self._volume;
            },

            /**
             * Handle muting and unmuting globally.
             * @param  {Boolean} muted Is muted or not.
             */
            mute: function (muted) {
              var self = this || Howler;

              // If we don't have an AudioContext created yet, run the setup.
              if (!self.ctx) {
                setupAudioContext();
              }

              self._muted = muted;

              // With Web Audio, we just need to mute the master gain.
              if (self.usingWebAudio) {
                self.masterGain.gain.setValueAtTime(
                  muted ? 0 : self._volume,
                  Howler.ctx.currentTime
                );
              }

              // Loop through and mute all HTML5 Audio nodes.
              for (var i = 0; i < self._howls.length; i++) {
                if (!self._howls[i]._webAudio) {
                  // Get all of the sounds in this Howl group.
                  var ids = self._howls[i]._getSoundIds();

                  // Loop through all sounds and mark the audio node as muted.
                  for (var j = 0; j < ids.length; j++) {
                    var sound = self._howls[i]._soundById(ids[j]);

                    if (sound && sound._node) {
                      sound._node.muted = muted ? true : sound._muted;
                    }
                  }
                }
              }

              return self;
            },

            /**
             * Handle stopping all sounds globally.
             */
            stop: function () {
              var self = this || Howler;

              // Loop through all Howls and stop them.
              for (var i = 0; i < self._howls.length; i++) {
                self._howls[i].stop();
              }

              return self;
            },

            /**
             * Unload and destroy all currently loaded Howl objects.
             * @return {Howler}
             */
            unload: function () {
              var self = this || Howler;

              for (var i = self._howls.length - 1; i >= 0; i--) {
                self._howls[i].unload();
              }

              // Create a new AudioContext to make sure it is fully reset.
              if (
                self.usingWebAudio &&
                self.ctx &&
                typeof self.ctx.close !== "undefined"
              ) {
                self.ctx.close();
                self.ctx = null;
                setupAudioContext();
              }

              return self;
            },

            /**
             * Check for codec support of specific extension.
             * @param  {String} ext Audio file extention.
             * @return {Boolean}
             */
            codecs: function (ext) {
              return (this || Howler)._codecs[ext.replace(/^x-/, "")];
            },

            /**
             * Setup various state values for global tracking.
             * @return {Howler}
             */
            _setup: function () {
              var self = this || Howler;

              // Keeps track of the suspend/resume state of the AudioContext.
              self.state = self.ctx
                ? self.ctx.state || "suspended"
                : "suspended";

              // Automatically begin the 30-second suspend process
              self._autoSuspend();

              // Check if audio is available.
              if (!self.usingWebAudio) {
                // No audio is available on this system if noAudio is set to true.
                if (typeof Audio !== "undefined") {
                  try {
                    var test = new Audio();

                    // Check if the canplaythrough event is available.
                    if (typeof test.oncanplaythrough === "undefined") {
                      self._canPlayEvent = "canplay";
                    }
                  } catch (e) {
                    self.noAudio = true;
                  }
                } else {
                  self.noAudio = true;
                }
              }

              // Test to make sure audio isn't disabled in Internet Explorer.
              try {
                var test = new Audio();
                if (test.muted) {
                  self.noAudio = true;
                }
              } catch (e) { }

              // Check for supported codecs.
              if (!self.noAudio) {
                self._setupCodecs();
              }

              return self;
            },

            /**
             * Check for browser support for various codecs and cache the results.
             * @return {Howler}
             */
            _setupCodecs: function () {
              var self = this || Howler;
              var audioTest = null;

              // Must wrap in a try/catch because IE11 in server mode throws an error.
              try {
                audioTest = typeof Audio !== "undefined" ? new Audio() : null;
              } catch (err) {
                return self;
              }

              if (!audioTest || typeof audioTest.canPlayType !== "function") {
                return self;
              }

              var mpegTest = audioTest
                .canPlayType("audio/mpeg;")
                .replace(/^no$/, "");

              // Opera version <33 has mixed MP3 support, so we need to check for and block it.
              var ua = self._navigator ? self._navigator.userAgent : "";
              var checkOpera = ua.match(/OPR\/([0-6].)/g);
              var isOldOpera =
                checkOpera && parseInt(checkOpera[0].split("/")[1], 10) < 33;
              var checkSafari =
                ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
              var safariVersion = ua.match(/Version\/(.*?) /);
              var isOldSafari =
                checkSafari &&
                safariVersion &&
                parseInt(safariVersion[1], 10) < 15;

              self._codecs = {
                mp3: !!(
                  !isOldOpera &&
                  (mpegTest ||
                    audioTest.canPlayType("audio/mp3;").replace(/^no$/, ""))
                ),
                mpeg: !!mpegTest,
                opus: !!audioTest
                  .canPlayType('audio/ogg; codecs="opus"')
                  .replace(/^no$/, ""),
                ogg: !!audioTest
                  .canPlayType('audio/ogg; codecs="vorbis"')
                  .replace(/^no$/, ""),
                oga: !!audioTest
                  .canPlayType('audio/ogg; codecs="vorbis"')
                  .replace(/^no$/, ""),
                wav: !!(
                  audioTest.canPlayType('audio/wav; codecs="1"') ||
                  audioTest.canPlayType("audio/wav")
                ).replace(/^no$/, ""),
                aac: !!audioTest.canPlayType("audio/aac;").replace(/^no$/, ""),
                caf: !!audioTest
                  .canPlayType("audio/x-caf;")
                  .replace(/^no$/, ""),
                m4a: !!(
                  audioTest.canPlayType("audio/x-m4a;") ||
                  audioTest.canPlayType("audio/m4a;") ||
                  audioTest.canPlayType("audio/aac;")
                ).replace(/^no$/, ""),
                m4b: !!(
                  audioTest.canPlayType("audio/x-m4b;") ||
                  audioTest.canPlayType("audio/m4b;") ||
                  audioTest.canPlayType("audio/aac;")
                ).replace(/^no$/, ""),
                mp4: !!(
                  audioTest.canPlayType("audio/x-mp4;") ||
                  audioTest.canPlayType("audio/mp4;") ||
                  audioTest.canPlayType("audio/aac;")
                ).replace(/^no$/, ""),
                weba: !!(
                  !isOldSafari &&
                  audioTest
                    .canPlayType('audio/webm; codecs="vorbis"')
                    .replace(/^no$/, "")
                ),
                webm: !!(
                  !isOldSafari &&
                  audioTest
                    .canPlayType('audio/webm; codecs="vorbis"')
                    .replace(/^no$/, "")
                ),
                dolby: !!audioTest
                  .canPlayType('audio/mp4; codecs="ec-3"')
                  .replace(/^no$/, ""),
                flac: !!(
                  audioTest.canPlayType("audio/x-flac;") ||
                  audioTest.canPlayType("audio/flac;")
                ).replace(/^no$/, ""),
              };

              return self;
            },

            /**
             * Some browsers/devices will only allow audio to be played after a user interaction.
             * Attempt to automatically unlock audio on the first user interaction.
             * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
             * @return {Howler}
             */
            _unlockAudio: function () {
              var self = this || Howler;

              // Only run this if Web Audio is supported and it hasn't already been unlocked.
              if (self._audioUnlocked || !self.ctx) {
                return;
              }

              self._audioUnlocked = false;
              self.autoUnlock = false;

              // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
              // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
              // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
              if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
                self._mobileUnloaded = true;
                self.unload();
              }

              // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
              // http://stackoverflow.com/questions/24119684
              self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

              // Call this method on touch start to create and play a buffer,
              // then check if the audio actually played to determine if
              // audio has now been unlocked on iOS, Android, etc.
              var unlock = function (e) {
                // Create a pool of unlocked HTML5 Audio objects that can
                // be used for playing sounds without user interaction. HTML5
                // Audio objects must be individually unlocked, as opposed
                // to the WebAudio API which only needs a single activation.
                // This must occur before WebAudio setup or the source.onended
                // event will not fire.
                while (self._html5AudioPool.length < self.html5PoolSize) {
                  try {
                    var audioNode = new Audio();

                    // Mark this Audio object as unlocked to ensure it can get returned
                    // to the unlocked pool when released.
                    audioNode._unlocked = true;

                    // Add the audio node to the pool.
                    self._releaseHtml5Audio(audioNode);
                  } catch (e) {
                    self.noAudio = true;
                    break;
                  }
                }

                // Loop through any assigned audio nodes and unlock them.
                for (var i = 0; i < self._howls.length; i++) {
                  if (!self._howls[i]._webAudio) {
                    // Get all of the sounds in this Howl group.
                    var ids = self._howls[i]._getSoundIds();

                    // Loop through all sounds and unlock the audio nodes.
                    for (var j = 0; j < ids.length; j++) {
                      var sound = self._howls[i]._soundById(ids[j]);

                      if (sound && sound._node && !sound._node._unlocked) {
                        sound._node._unlocked = true;
                        sound._node.load();
                      }
                    }
                  }
                }

                // Fix Android can not play in suspend state.
                self._autoResume();

                // Create an empty buffer.
                var source = self.ctx.createBufferSource();
                source.buffer = self._scratchBuffer;
                source.connect(self.ctx.destination);

                // Play the empty buffer.
                if (typeof source.start === "undefined") {
                  source.noteOn(0);
                } else {
                  source.start(0);
                }

                // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
                if (typeof self.ctx.resume === "function") {
                  self.ctx.resume();
                }

                // Setup a timeout to check that we are unlocked on the next event loop.
                source.onended = function () {
                  source.disconnect(0);

                  // Update the unlocked state and prevent this check from happening again.
                  self._audioUnlocked = true;

                  // Remove the touch start listener.
                  document.removeEventListener("touchstart", unlock, true);
                  document.removeEventListener("touchend", unlock, true);
                  document.removeEventListener("click", unlock, true);
                  document.removeEventListener("keydown", unlock, true);

                  // Let all sounds know that audio has been unlocked.
                  for (var i = 0; i < self._howls.length; i++) {
                    self._howls[i]._emit("unlock");
                  }
                };
              };

              // Setup a touch start listener to attempt an unlock in.
              document.addEventListener("touchstart", unlock, true);
              document.addEventListener("touchend", unlock, true);
              document.addEventListener("click", unlock, true);
              document.addEventListener("keydown", unlock, true);

              return self;
            },

            /**
             * Get an unlocked HTML5 Audio object from the pool. If none are left,
             * return a new Audio object and throw a warning.
             * @return {Audio} HTML5 Audio object.
             */
            _obtainHtml5Audio: function () {
              var self = this || Howler;

              // Return the next object from the pool if one exists.
              if (self._html5AudioPool.length) {
                return self._html5AudioPool.pop();
              }

              //.Check if the audio is locked and throw a warning.
              var testPlay = new Audio().play();
              if (
                testPlay &&
                typeof Promise !== "undefined" &&
                (testPlay instanceof Promise ||
                  typeof testPlay.then === "function")
              ) {
                testPlay.catch(function () {
                  console.warn(
                    "HTML5 Audio pool exhausted, returning potentially locked audio object."
                  );
                });
              }

              return new Audio();
            },

            /**
             * Return an activated HTML5 Audio object to the pool.
             * @return {Howler}
             */
            _releaseHtml5Audio: function (audio) {
              var self = this || Howler;

              // Don't add audio to the pool if we don't know if it has been unlocked.
              if (audio._unlocked) {
                self._html5AudioPool.push(audio);
              }

              return self;
            },

            /**
             * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
             * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
             * @return {Howler}
             */
            _autoSuspend: function () {
              var self = this;

              if (
                !self.autoSuspend ||
                !self.ctx ||
                typeof self.ctx.suspend === "undefined" ||
                !Howler.usingWebAudio
              ) {
                return;
              }

              // Check if any sounds are playing.
              for (var i = 0; i < self._howls.length; i++) {
                if (self._howls[i]._webAudio) {
                  for (var j = 0; j < self._howls[i]._sounds.length; j++) {
                    if (!self._howls[i]._sounds[j]._paused) {
                      return self;
                    }
                  }
                }
              }

              if (self._suspendTimer) {
                clearTimeout(self._suspendTimer);
              }

              // If no sound has played after 30 seconds, suspend the context.
              self._suspendTimer = setTimeout(function () {
                if (!self.autoSuspend) {
                  return;
                }

                self._suspendTimer = null;
                self.state = "suspending";

                // Handle updating the state of the audio context after suspending.
                var handleSuspension = function () {
                  self.state = "suspended";

                  if (self._resumeAfterSuspend) {
                    delete self._resumeAfterSuspend;
                    self._autoResume();
                  }
                };

                // Either the state gets suspended or it is interrupted.
                // Either way, we need to update the state to suspended.
                self.ctx.suspend().then(handleSuspension, handleSuspension);
              }, 30000);

              return self;
            },

            /**
             * Automatically resume the Web Audio AudioContext when a new sound is played.
             * @return {Howler}
             */
            _autoResume: function () {
              var self = this;

              if (
                !self.ctx ||
                typeof self.ctx.resume === "undefined" ||
                !Howler.usingWebAudio
              ) {
                return;
              }

              if (
                self.state === "running" &&
                self.ctx.state !== "interrupted" &&
                self._suspendTimer
              ) {
                clearTimeout(self._suspendTimer);
                self._suspendTimer = null;
              } else if (
                self.state === "suspended" ||
                (self.state === "running" && self.ctx.state === "interrupted")
              ) {
                self.ctx.resume().then(function () {
                  self.state = "running";

                  // Emit to all Howls that the audio has resumed.
                  for (var i = 0; i < self._howls.length; i++) {
                    self._howls[i]._emit("resume");
                  }
                });

                if (self._suspendTimer) {
                  clearTimeout(self._suspendTimer);
                  self._suspendTimer = null;
                }
              } else if (self.state === "suspending") {
                self._resumeAfterSuspend = true;
              }

              return self;
            },
          };

          // Setup the global audio controller.
          var Howler = new HowlerGlobal();

          /** Group Methods **/
          /***************************************************************************/

          /**
           * Create an audio group controller.
           * @param {Object} o Passed in properties for this group.
           */
          var Howl = function (o) {
            var self = this;

            // Throw an error if no source is provided.
            if (!o.src || o.src.length === 0) {
              console.error(
                "An array of source files must be passed with any new Howl."
              );
              return;
            }

            self.init(o);
          };
          Howl.prototype = {
            /**
             * Initialize a new Howl group object.
             * @param  {Object} o Passed in properties for this group.
             * @return {Howl}
             */
            init: function (o) {
              var self = this;

              // If we don't have an AudioContext created yet, run the setup.
              if (!Howler.ctx) {
                setupAudioContext();
              }

              // Setup user-defined default properties.
              self._autoplay = o.autoplay || false;
              self._format =
                typeof o.format !== "string" ? o.format : [o.format];
              self._html5 = o.html5 || false;
              self._muted = o.mute || false;
              self._loop = o.loop || false;
              self._pool = o.pool || 5;
              self._preload =
                typeof o.preload === "boolean" || o.preload === "metadata"
                  ? o.preload
                  : true;
              self._rate = o.rate || 1;
              self._sprite = o.sprite || {};
              self._src = typeof o.src !== "string" ? o.src : [o.src];
              self._volume = o.volume !== undefined ? o.volume : 1;
              self._xhr = {
                method: o.xhr && o.xhr.method ? o.xhr.method : "GET",
                headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
                withCredentials:
                  o.xhr && o.xhr.withCredentials
                    ? o.xhr.withCredentials
                    : false,
              };

              // Setup all other default properties.
              self._duration = 0;
              self._state = "unloaded";
              self._sounds = [];
              self._endTimers = {};
              self._queue = [];
              self._playLock = false;

              // Setup event listeners.
              self._onend = o.onend ? [{ fn: o.onend }] : [];
              self._onfade = o.onfade ? [{ fn: o.onfade }] : [];
              self._onload = o.onload ? [{ fn: o.onload }] : [];
              self._onloaderror = o.onloaderror ? [{ fn: o.onloaderror }] : [];
              self._onplayerror = o.onplayerror ? [{ fn: o.onplayerror }] : [];
              self._onpause = o.onpause ? [{ fn: o.onpause }] : [];
              self._onplay = o.onplay ? [{ fn: o.onplay }] : [];
              self._onstop = o.onstop ? [{ fn: o.onstop }] : [];
              self._onmute = o.onmute ? [{ fn: o.onmute }] : [];
              self._onvolume = o.onvolume ? [{ fn: o.onvolume }] : [];
              self._onrate = o.onrate ? [{ fn: o.onrate }] : [];
              self._onseek = o.onseek ? [{ fn: o.onseek }] : [];
              self._onunlock = o.onunlock ? [{ fn: o.onunlock }] : [];
              self._onresume = [];

              // Web Audio or HTML5 Audio?
              self._webAudio = Howler.usingWebAudio && !self._html5;

              // Automatically try to enable audio.
              if (
                typeof Howler.ctx !== "undefined" &&
                Howler.ctx &&
                Howler.autoUnlock
              ) {
                Howler._unlockAudio();
              }

              // Keep track of this Howl group in the global controller.
              Howler._howls.push(self);

              // If they selected autoplay, add a play event to the load queue.
              if (self._autoplay) {
                self._queue.push({
                  event: "play",
                  action: function () {
                    self.play();
                  },
                });
              }

              // Load the source file unless otherwise specified.
              if (self._preload && self._preload !== "none") {
                self.load();
              }

              return self;
            },

            /**
             * Load the audio file.
             * @return {Howler}
             */
            load: function () {
              var self = this;
              var url = null;

              // If no audio is available, quit immediately.
              if (Howler.noAudio) {
                self._emit("loaderror", null, "No audio support.");
                return;
              }

              // Make sure our source is in an array.
              if (typeof self._src === "string") {
                self._src = [self._src];
              }

              // Loop through the sources and pick the first one that is compatible.
              for (var i = 0; i < self._src.length; i++) {
                var ext, str;

                if (self._format && self._format[i]) {
                  // If an extension was specified, use that instead.
                  ext = self._format[i];
                } else {
                  // Make sure the source is a string.
                  str = self._src[i];
                  if (typeof str !== "string") {
                    self._emit(
                      "loaderror",
                      null,
                      "Non-string found in selected audio sources - ignoring."
                    );
                    continue;
                  }

                  // Extract the file extension from the URL or base64 data URI.
                  ext = /^data:audio\/([^;,]+);/i.exec(str);
                  if (!ext) {
                    ext = /\.([^.]+)$/.exec(str.split("?", 1)[0]);
                  }

                  if (ext) {
                    ext = ext[1].toLowerCase();
                  }
                }

                // Log a warning if no extension was found.
                if (!ext) {
                  console.warn(
                    'No file extension was found. Consider using the "format" property or specify an extension.'
                  );
                }

                // Check if this extension is available.
                if (ext && Howler.codecs(ext)) {
                  url = self._src[i];
                  break;
                }
              }

              if (!url) {
                self._emit(
                  "loaderror",
                  null,
                  "No codec support for selected audio sources."
                );
                return;
              }

              self._src = url;
              self._state = "loading";

              // If the hosting page is HTTPS and the source isn't,
              // drop down to HTML5 Audio to avoid Mixed Content errors.
              if (
                window.location.protocol === "https:" &&
                url.slice(0, 5) === "http:"
              ) {
                self._html5 = true;
                self._webAudio = false;
              }

              // Create a new sound object and add it to the pool.
              new Sound(self);

              // Load and decode the audio data for playback.
              if (self._webAudio) {
                loadBuffer(self);
              }

              return self;
            },

            /**
             * Play a sound or resume previous playback.
             * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
             * @param  {Boolean} internal Internal Use: true prevents event firing.
             * @return {Number}          Sound ID.
             */
            play: function (sprite, internal) {
              var self = this;
              var id = null;

              // Determine if a sprite, sound id or nothing was passed
              if (typeof sprite === "number") {
                id = sprite;
                sprite = null;
              } else if (
                typeof sprite === "string" &&
                self._state === "loaded" &&
                !self._sprite[sprite]
              ) {
                // If the passed sprite doesn't exist, do nothing.
                return null;
              } else if (typeof sprite === "undefined") {
                // Use the default sound sprite (plays the full audio length).
                sprite = "__default";

                // Check if there is a single paused sound that isn't ended.
                // If there is, play that sound. If not, continue as usual.
                if (!self._playLock) {
                  var num = 0;
                  for (var i = 0; i < self._sounds.length; i++) {
                    if (self._sounds[i]._paused && !self._sounds[i]._ended) {
                      num++;
                      id = self._sounds[i]._id;
                    }
                  }

                  if (num === 1) {
                    sprite = null;
                  } else {
                    id = null;
                  }
                }
              }

              // Get the selected node, or get one from the pool.
              var sound = id ? self._soundById(id) : self._inactiveSound();

              // If the sound doesn't exist, do nothing.
              if (!sound) {
                return null;
              }

              // Select the sprite definition.
              if (id && !sprite) {
                sprite = sound._sprite || "__default";
              }

              // If the sound hasn't loaded, we must wait to get the audio's duration.
              // We also need to wait to make sure we don't run into race conditions with
              // the order of function calls.
              if (self._state !== "loaded") {
                // Set the sprite value on this sound.
                sound._sprite = sprite;

                // Mark this sound as not ended in case another sound is played before this one loads.
                sound._ended = false;

                // Add the sound to the queue to be played on load.
                var soundId = sound._id;
                self._queue.push({
                  event: "play",
                  action: function () {
                    self.play(soundId);
                  },
                });

                return soundId;
              }

              // Don't play the sound if an id was passed and it is already playing.
              if (id && !sound._paused) {
                // Trigger the play event, in order to keep iterating through queue.
                if (!internal) {
                  self._loadQueue("play");
                }

                return sound._id;
              }

              // Make sure the AudioContext isn't suspended, and resume it if it is.
              if (self._webAudio) {
                Howler._autoResume();
              }

              // Determine how long to play for and where to start playing.
              var seek = Math.max(
                0,
                sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000
              );
              var duration = Math.max(
                0,
                (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 -
                seek
              );
              var timeout = (duration * 1000) / Math.abs(sound._rate);
              var start = self._sprite[sprite][0] / 1000;
              var stop =
                (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
              sound._sprite = sprite;

              // Mark the sound as ended instantly so that this async playback
              // doesn't get grabbed by another call to play while this one waits to start.
              sound._ended = false;

              // Update the parameters of the sound.
              var setParams = function () {
                sound._paused = false;
                sound._seek = seek;
                sound._start = start;
                sound._stop = stop;
                sound._loop = !!(sound._loop || self._sprite[sprite][2]);
              };

              // End the sound instantly if seek is at the end.
              if (seek >= stop) {
                self._ended(sound);
                return;
              }

              // Begin the actual playback.
              var node = sound._node;
              if (self._webAudio) {
                // Fire this when the sound is ready to play to begin Web Audio playback.
                var playWebAudio = function () {
                  self._playLock = false;
                  setParams();
                  self._refreshBuffer(sound);

                  // Setup the playback params.
                  var vol = sound._muted || self._muted ? 0 : sound._volume;
                  node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
                  sound._playStart = Howler.ctx.currentTime;

                  // Play the sound using the supported method.
                  if (typeof node.bufferSource.start === "undefined") {
                    sound._loop
                      ? node.bufferSource.noteGrainOn(0, seek, 86400)
                      : node.bufferSource.noteGrainOn(0, seek, duration);
                  } else {
                    sound._loop
                      ? node.bufferSource.start(0, seek, 86400)
                      : node.bufferSource.start(0, seek, duration);
                  }

                  // Start a new timer if none is present.
                  if (timeout !== Infinity) {
                    self._endTimers[sound._id] = setTimeout(
                      self._ended.bind(self, sound),
                      timeout
                    );
                  }

                  if (!internal) {
                    setTimeout(function () {
                      self._emit("play", sound._id);
                      self._loadQueue();
                    }, 0);
                  }
                };

                if (
                  Howler.state === "running" &&
                  Howler.ctx.state !== "interrupted"
                ) {
                  playWebAudio();
                } else {
                  self._playLock = true;

                  // Wait for the audio context to resume before playing.
                  self.once("resume", playWebAudio);

                  // Cancel the end timer.
                  self._clearTimer(sound._id);
                }
              } else {
                // Fire this when the sound is ready to play to begin HTML5 Audio playback.
                var playHtml5 = function () {
                  node.currentTime = seek;
                  node.muted =
                    sound._muted || self._muted || Howler._muted || node.muted;
                  node.volume = sound._volume * Howler.volume();
                  node.playbackRate = sound._rate;

                  // Some browsers will throw an error if this is called without user interaction.
                  try {
                    var play = node.play();

                    // Support older browsers that don't support promises, and thus don't have this issue.
                    if (
                      play &&
                      typeof Promise !== "undefined" &&
                      (play instanceof Promise ||
                        typeof play.then === "function")
                    ) {
                      // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
                      self._playLock = true;

                      // Set param values immediately.
                      setParams();

                      // Releases the lock and executes queued actions.
                      play
                        .then(function () {
                          self._playLock = false;
                          node._unlocked = true;
                          if (!internal) {
                            self._emit("play", sound._id);
                          } else {
                            self._loadQueue();
                          }
                        })
                        .catch(function () {
                          self._playLock = false;
                          self._emit(
                            "playerror",
                            sound._id,
                            "Playback was unable to start. This is most commonly an issue " +
                            "on mobile devices and Chrome where playback was not within a user interaction."
                          );

                          // Reset the ended and paused values.
                          sound._ended = true;
                          sound._paused = true;
                        });
                    } else if (!internal) {
                      self._playLock = false;
                      setParams();
                      self._emit("play", sound._id);
                    }

                    // Setting rate before playing won't work in IE, so we set it again here.
                    node.playbackRate = sound._rate;

                    // If the node is still paused, then we can assume there was a playback issue.
                    if (node.paused) {
                      self._emit(
                        "playerror",
                        sound._id,
                        "Playback was unable to start. This is most commonly an issue " +
                        "on mobile devices and Chrome where playback was not within a user interaction."
                      );
                      return;
                    }

                    // Setup the end timer on sprites or listen for the ended event.
                    if (sprite !== "__default" || sound._loop) {
                      self._endTimers[sound._id] = setTimeout(
                        self._ended.bind(self, sound),
                        timeout
                      );
                    } else {
                      self._endTimers[sound._id] = function () {
                        // Fire ended on this audio node.
                        self._ended(sound);

                        // Clear this listener.
                        node.removeEventListener(
                          "ended",
                          self._endTimers[sound._id],
                          false
                        );
                      };
                      node.addEventListener(
                        "ended",
                        self._endTimers[sound._id],
                        false
                      );
                    }
                  } catch (err) {
                    self._emit("playerror", sound._id, err);
                  }
                };

                // If this is streaming audio, make sure the src is set and load again.
                if (
                  node.src ===
                  "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"
                ) {
                  node.src = self._src;
                  node.load();
                }

                // Play immediately if ready, or wait for the 'canplaythrough'e vent.
                var loadedNoReadyState =
                  (window && window.ejecta) ||
                  (!node.readyState && Howler._navigator.isCocoonJS);
                if (node.readyState >= 3 || loadedNoReadyState) {
                  playHtml5();
                } else {
                  self._playLock = true;
                  self._state = "loading";

                  var listener = function () {
                    self._state = "loaded";

                    // Begin playback.
                    playHtml5();

                    // Clear this listener.
                    node.removeEventListener(
                      Howler._canPlayEvent,
                      listener,
                      false
                    );
                  };
                  node.addEventListener(Howler._canPlayEvent, listener, false);

                  // Cancel the end timer.
                  self._clearTimer(sound._id);
                }
              }

              return sound._id;
            },

            /**
             * Pause playback and save current position.
             * @param  {Number} id The sound ID (empty to pause all in group).
             * @return {Howl}
             */
            pause: function (id) {
              var self = this;

              // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
              if (self._state !== "loaded" || self._playLock) {
                self._queue.push({
                  event: "pause",
                  action: function () {
                    self.pause(id);
                  },
                });

                return self;
              }

              // If no id is passed, get all ID's to be paused.
              var ids = self._getSoundIds(id);

              for (var i = 0; i < ids.length; i++) {
                // Clear the end timer.
                self._clearTimer(ids[i]);

                // Get the sound.
                var sound = self._soundById(ids[i]);

                if (sound && !sound._paused) {
                  // Reset the seek position.
                  sound._seek = self.seek(ids[i]);
                  sound._rateSeek = 0;
                  sound._paused = true;

                  // Stop currently running fades.
                  self._stopFade(ids[i]);

                  if (sound._node) {
                    if (self._webAudio) {
                      // Make sure the sound has been created.
                      if (!sound._node.bufferSource) {
                        continue;
                      }

                      if (
                        typeof sound._node.bufferSource.stop === "undefined"
                      ) {
                        sound._node.bufferSource.noteOff(0);
                      } else {
                        sound._node.bufferSource.stop(0);
                      }

                      // Clean up the buffer source.
                      self._cleanBuffer(sound._node);
                    } else if (
                      !isNaN(sound._node.duration) ||
                      sound._node.duration === Infinity
                    ) {
                      sound._node.pause();
                    }
                  }
                }

                // Fire the pause event, unless `true` is passed as the 2nd argument.
                if (!arguments[1]) {
                  self._emit("pause", sound ? sound._id : null);
                }
              }

              return self;
            },

            /**
             * Stop playback and reset to start.
             * @param  {Number} id The sound ID (empty to stop all in group).
             * @param  {Boolean} internal Internal Use: true prevents event firing.
             * @return {Howl}
             */
            stop: function (id, internal) {
              var self = this;

              // If the sound hasn't loaded, add it to the load queue to stop when capable.
              if (self._state !== "loaded" || self._playLock) {
                self._queue.push({
                  event: "stop",
                  action: function () {
                    self.stop(id);
                  },
                });

                return self;
              }

              // If no id is passed, get all ID's to be stopped.
              var ids = self._getSoundIds(id);

              for (var i = 0; i < ids.length; i++) {
                // Clear the end timer.
                self._clearTimer(ids[i]);

                // Get the sound.
                var sound = self._soundById(ids[i]);

                if (sound) {
                  // Reset the seek position.
                  sound._seek = sound._start || 0;
                  sound._rateSeek = 0;
                  sound._paused = true;
                  sound._ended = true;

                  // Stop currently running fades.
                  self._stopFade(ids[i]);

                  if (sound._node) {
                    if (self._webAudio) {
                      // Make sure the sound's AudioBufferSourceNode has been created.
                      if (sound._node.bufferSource) {
                        if (
                          typeof sound._node.bufferSource.stop === "undefined"
                        ) {
                          sound._node.bufferSource.noteOff(0);
                        } else {
                          sound._node.bufferSource.stop(0);
                        }

                        // Clean up the buffer source.
                        self._cleanBuffer(sound._node);
                      }
                    } else if (
                      !isNaN(sound._node.duration) ||
                      sound._node.duration === Infinity
                    ) {
                      sound._node.currentTime = sound._start || 0;
                      sound._node.pause();

                      // If this is a live stream, stop download once the audio is stopped.
                      if (sound._node.duration === Infinity) {
                        self._clearSound(sound._node);
                      }
                    }
                  }

                  if (!internal) {
                    self._emit("stop", sound._id);
                  }
                }
              }

              return self;
            },

            /**
             * Mute/unmute a single sound or all sounds in this Howl group.
             * @param  {Boolean} muted Set to true to mute and false to unmute.
             * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
             * @return {Howl}
             */
            mute: function (muted, id) {
              var self = this;

              // If the sound hasn't loaded, add it to the load queue to mute when capable.
              if (self._state !== "loaded" || self._playLock) {
                self._queue.push({
                  event: "mute",
                  action: function () {
                    self.mute(muted, id);
                  },
                });

                return self;
              }

              // If applying mute/unmute to all sounds, update the group's value.
              if (typeof id === "undefined") {
                if (typeof muted === "boolean") {
                  self._muted = muted;
                } else {
                  return self._muted;
                }
              }

              // If no id is passed, get all ID's to be muted.
              var ids = self._getSoundIds(id);

              for (var i = 0; i < ids.length; i++) {
                // Get the sound.
                var sound = self._soundById(ids[i]);

                if (sound) {
                  sound._muted = muted;

                  // Cancel active fade and set the volume to the end value.
                  if (sound._interval) {
                    self._stopFade(sound._id);
                  }

                  if (self._webAudio && sound._node) {
                    sound._node.gain.setValueAtTime(
                      muted ? 0 : sound._volume,
                      Howler.ctx.currentTime
                    );
                  } else if (sound._node) {
                    sound._node.muted = Howler._muted ? true : muted;
                  }

                  self._emit("mute", sound._id);
                }
              }

              return self;
            },

            /**
             * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
             *   volume() -> Returns the group's volume value.
             *   volume(id) -> Returns the sound id's current volume.
             *   volume(vol) -> Sets the volume of all sounds in this Howl group.
             *   volume(vol, id) -> Sets the volume of passed sound id.
             * @return {Howl/Number} Returns self or current volume.
             */
            volume: function () {
              var self = this;
              var args = arguments;
              var vol, id;

              // Determine the values based on arguments.
              if (args.length === 0) {
                // Return the value of the groups' volume.
                return self._volume;
              } else if (
                args.length === 1 ||
                (args.length === 2 && typeof args[1] === "undefined")
              ) {
                // First check if this is an ID, and if not, assume it is a new volume.
                var ids = self._getSoundIds();
                var index = ids.indexOf(args[0]);
                if (index >= 0) {
                  id = parseInt(args[0], 10);
                } else {
                  vol = parseFloat(args[0]);
                }
              } else if (args.length >= 2) {
                vol = parseFloat(args[0]);
                id = parseInt(args[1], 10);
              }

              // Update the volume or return the current volume.
              var sound;
              if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
                // If the sound hasn't loaded, add it to the load queue to change volume when capable.
                if (self._state !== "loaded" || self._playLock) {
                  self._queue.push({
                    event: "volume",
                    action: function () {
                      self.volume.apply(self, args);
                    },
                  });

                  return self;
                }

                // Set the group volume.
                if (typeof id === "undefined") {
                  self._volume = vol;
                }

                // Update one or all volumes.
                id = self._getSoundIds(id);
                for (var i = 0; i < id.length; i++) {
                  // Get the sound.
                  sound = self._soundById(id[i]);

                  if (sound) {
                    sound._volume = vol;

                    // Stop currently running fades.
                    if (!args[2]) {
                      self._stopFade(id[i]);
                    }

                    if (self._webAudio && sound._node && !sound._muted) {
                      sound._node.gain.setValueAtTime(
                        vol,
                        Howler.ctx.currentTime
                      );
                    } else if (sound._node && !sound._muted) {
                      sound._node.volume = vol * Howler.volume();
                    }

                    self._emit("volume", sound._id);
                  }
                }
              } else {
                sound = id ? self._soundById(id) : self._sounds[0];
                return sound ? sound._volume : 0;
              }

              return self;
            },

            /**
             * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).
             * @param  {Number} from The value to fade from (0.0 to 1.0).
             * @param  {Number} to   The volume to fade to (0.0 to 1.0).
             * @param  {Number} len  Time in milliseconds to fade.
             * @param  {Number} id   The sound id (omit to fade all sounds).
             * @return {Howl}
             */
            fade: function (from, to, len, id) {
              var self = this;

              // If the sound hasn't loaded, add it to the load queue to fade when capable.
              if (self._state !== "loaded" || self._playLock) {
                self._queue.push({
                  event: "fade",
                  action: function () {
                    self.fade(from, to, len, id);
                  },
                });

                return self;
              }

              // Make sure the to/from/len values are numbers.
              from = Math.min(Math.max(0, parseFloat(from)), 1);
              to = Math.min(Math.max(0, parseFloat(to)), 1);
              len = parseFloat(len);

              // Set the volume to the start position.
              self.volume(from, id);

              // Fade the volume of one or all sounds.
              var ids = self._getSoundIds(id);
              for (var i = 0; i < ids.length; i++) {
                // Get the sound.
                var sound = self._soundById(ids[i]);

                // Create a linear fade or fall back to timeouts with HTML5 Audio.
                if (sound) {
                  // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
                  if (!id) {
                    self._stopFade(ids[i]);
                  }

                  // If we are using Web Audio, let the native methods do the actual fade.
                  if (self._webAudio && !sound._muted) {
                    var currentTime = Howler.ctx.currentTime;
                    var end = currentTime + len / 1000;
                    sound._volume = from;
                    sound._node.gain.setValueAtTime(from, currentTime);
                    sound._node.gain.linearRampToValueAtTime(to, end);
                  }

                  self._startFadeInterval(
                    sound,
                    from,
                    to,
                    len,
                    ids[i],
                    typeof id === "undefined"
                  );
                }
              }

              return self;
            },

            /**
             * Starts the internal interval to fade a sound.
             * @param  {Object} sound Reference to sound to fade.
             * @param  {Number} from The value to fade from (0.0 to 1.0).
             * @param  {Number} to   The volume to fade to (0.0 to 1.0).
             * @param  {Number} len  Time in milliseconds to fade.
             * @param  {Number} id   The sound id to fade.
             * @param  {Boolean} isGroup   If true, set the volume on the group.
             */
            _startFadeInterval: function (sound, from, to, len, id, isGroup) {
              var self = this;
              var vol = from;
              var diff = to - from;
              var steps = Math.abs(diff / 0.01);
              var stepLen = Math.max(4, steps > 0 ? len / steps : len);
              var lastTick = Date.now();

              // Store the value being faded to.
              sound._fadeTo = to;

              // Update the volume value on each interval tick.
              sound._interval = setInterval(function () {
                // Update the volume based on the time since the last tick.
                var tick = (Date.now() - lastTick) / len;
                lastTick = Date.now();
                vol += diff * tick;

                // Round to within 2 decimal points.
                vol = Math.round(vol * 100) / 100;

                // Make sure the volume is in the right bounds.
                if (diff < 0) {
                  vol = Math.max(to, vol);
                } else {
                  vol = Math.min(to, vol);
                }

                // Change the volume.
                if (self._webAudio) {
                  sound._volume = vol;
                } else {
                  self.volume(vol, sound._id, true);
                }

                // Set the group's volume.
                if (isGroup) {
                  self._volume = vol;
                }

                // When the fade is complete, stop it and fire event.
                if ((to < from && vol <= to) || (to > from && vol >= to)) {
                  clearInterval(sound._interval);
                  sound._interval = null;
                  sound._fadeTo = null;
                  self.volume(to, sound._id);
                  self._emit("fade", sound._id);
                }
              }, stepLen);
            },

            /**
             * Internal method that stops the currently playing fade when
             * a new fade starts, volume is changed or the sound is stopped.
             * @param  {Number} id The sound id.
             * @return {Howl}
             */
            _stopFade: function (id) {
              var self = this;
              var sound = self._soundById(id);

              if (sound && sound._interval) {
                if (self._webAudio) {
                  sound._node.gain.cancelScheduledValues(
                    Howler.ctx.currentTime
                  );
                }

                clearInterval(sound._interval);
                sound._interval = null;
                self.volume(sound._fadeTo, id);
                sound._fadeTo = null;
                self._emit("fade", id);
              }

              return self;
            },

            /**
             * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
             *   loop() -> Returns the group's loop value.
             *   loop(id) -> Returns the sound id's loop value.
             *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
             *   loop(loop, id) -> Sets the loop value of passed sound id.
             * @return {Howl/Boolean} Returns self or current loop value.
             */
            loop: function () {
              var self = this;
              var args = arguments;
              var loop, id, sound;

              // Determine the values for loop and id.
              if (args.length === 0) {
                // Return the grou's loop value.
                return self._loop;
              } else if (args.length === 1) {
                if (typeof args[0] === "boolean") {
                  loop = args[0];
                  self._loop = loop;
                } else {
                  // Return this sound's loop value.
                  sound = self._soundById(parseInt(args[0], 10));
                  return sound ? sound._loop : false;
                }
              } else if (args.length === 2) {
                loop = args[0];
                id = parseInt(args[1], 10);
              }

              // If no id is passed, get all ID's to be looped.
              var ids = self._getSoundIds(id);
              for (var i = 0; i < ids.length; i++) {
                sound = self._soundById(ids[i]);

                if (sound) {
                  sound._loop = loop;
                  if (
                    self._webAudio &&
                    sound._node &&
                    sound._node.bufferSource
                  ) {
                    sound._node.bufferSource.loop = loop;
                    if (loop) {
                      sound._node.bufferSource.loopStart = sound._start || 0;
                      sound._node.bufferSource.loopEnd = sound._stop;

                      // If playing, restart playback to ensure looping updates.
                      if (self.playing(ids[i])) {
                        self.pause(ids[i], true);
                        self.play(ids[i], true);
                      }
                    }
                  }
                }
              }

              return self;
            },

            /**
             * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
             *   rate() -> Returns the first sound node's current playback rate.
             *   rate(id) -> Returns the sound id's current playback rate.
             *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
             *   rate(rate, id) -> Sets the playback rate of passed sound id.
             * @return {Howl/Number} Returns self or the current playback rate.
             */
            rate: function () {
              var self = this;
              var args = arguments;
              var rate, id;

              // Determine the values based on arguments.
              if (args.length === 0) {
                // We will simply return the current rate of the first node.
                id = self._sounds[0]._id;
              } else if (args.length === 1) {
                // First check if this is an ID, and if not, assume it is a new rate value.
                var ids = self._getSoundIds();
                var index = ids.indexOf(args[0]);
                if (index >= 0) {
                  id = parseInt(args[0], 10);
                } else {
                  rate = parseFloat(args[0]);
                }
              } else if (args.length === 2) {
                rate = parseFloat(args[0]);
                id = parseInt(args[1], 10);
              }

              // Update the playback rate or return the current value.
              var sound;
              if (typeof rate === "number") {
                // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
                if (self._state !== "loaded" || self._playLock) {
                  self._queue.push({
                    event: "rate",
                    action: function () {
                      self.rate.apply(self, args);
                    },
                  });

                  return self;
                }

                // Set the group rate.
                if (typeof id === "undefined") {
                  self._rate = rate;
                }

                // Update one or all volumes.
                id = self._getSoundIds(id);
                for (var i = 0; i < id.length; i++) {
                  // Get the sound.
                  sound = self._soundById(id[i]);

                  if (sound) {
                    // Keep track of our position when the rate changed and update the playback
                    // start position so we can properly adjust the seek position for time elapsed.
                    if (self.playing(id[i])) {
                      sound._rateSeek = self.seek(id[i]);
                      sound._playStart = self._webAudio
                        ? Howler.ctx.currentTime
                        : sound._playStart;
                    }
                    sound._rate = rate;

                    // Change the playback rate.
                    if (
                      self._webAudio &&
                      sound._node &&
                      sound._node.bufferSource
                    ) {
                      sound._node.bufferSource.playbackRate.setValueAtTime(
                        rate,
                        Howler.ctx.currentTime
                      );
                    } else if (sound._node) {
                      sound._node.playbackRate = rate;
                    }

                    // Reset the timers.
                    var seek = self.seek(id[i]);
                    var duration =
                      (self._sprite[sound._sprite][0] +
                        self._sprite[sound._sprite][1]) /
                      1000 -
                      seek;
                    var timeout = (duration * 1000) / Math.abs(sound._rate);

                    // Start a new end timer if sound is already playing.
                    if (self._endTimers[id[i]] || !sound._paused) {
                      self._clearTimer(id[i]);
                      self._endTimers[id[i]] = setTimeout(
                        self._ended.bind(self, sound),
                        timeout
                      );
                    }

                    self._emit("rate", sound._id);
                  }
                }
              } else {
                sound = self._soundById(id);
                return sound ? sound._rate : self._rate;
              }

              return self;
            },

            /**
             * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
             *   seek() -> Returns the first sound node's current seek position.
             *   seek(id) -> Returns the sound id's current seek position.
             *   seek(seek) -> Sets the seek position of the first sound node.
             *   seek(seek, id) -> Sets the seek position of passed sound id.
             * @return {Howl/Number} Returns self or the current seek position.
             */
            seek: function () {
              var self = this;
              var args = arguments;
              var seek, id;

              // Determine the values based on arguments.
              if (args.length === 0) {
                // We will simply return the current position of the first node.
                if (self._sounds.length) {
                  id = self._sounds[0]._id;
                }
              } else if (args.length === 1) {
                // First check if this is an ID, and if not, assume it is a new seek position.
                var ids = self._getSoundIds();
                var index = ids.indexOf(args[0]);
                if (index >= 0) {
                  id = parseInt(args[0], 10);
                } else if (self._sounds.length) {
                  id = self._sounds[0]._id;
                  seek = parseFloat(args[0]);
                }
              } else if (args.length === 2) {
                seek = parseFloat(args[0]);
                id = parseInt(args[1], 10);
              }

              // If there is no ID, bail out.
              if (typeof id === "undefined") {
                return 0;
              }

              // If the sound hasn't loaded, add it to the load queue to seek when capable.
              if (
                typeof seek === "number" &&
                (self._state !== "loaded" || self._playLock)
              ) {
                self._queue.push({
                  event: "seek",
                  action: function () {
                    self.seek.apply(self, args);
                  },
                });

                return self;
              }

              // Get the sound.
              var sound = self._soundById(id);

              if (sound) {
                if (typeof seek === "number" && seek >= 0) {
                  // Pause the sound and update position for restarting playback.
                  var playing = self.playing(id);
                  if (playing) {
                    self.pause(id, true);
                  }

                  // Move the position of the track and cancel timer.
                  sound._seek = seek;
                  sound._ended = false;
                  self._clearTimer(id);

                  // Update the seek position for HTML5 Audio.
                  if (
                    !self._webAudio &&
                    sound._node &&
                    !isNaN(sound._node.duration)
                  ) {
                    sound._node.currentTime = seek;
                  }

                  // Seek and emit when ready.
                  var seekAndEmit = function () {
                    // Restart the playback if the sound was playing.
                    if (playing) {
                      self.play(id, true);
                    }

                    self._emit("seek", id);
                  };

                  // Wait for the play lock to be unset before emitting (HTML5 Audio).
                  if (playing && !self._webAudio) {
                    var emitSeek = function () {
                      if (!self._playLock) {
                        seekAndEmit();
                      } else {
                        setTimeout(emitSeek, 0);
                      }
                    };
                    setTimeout(emitSeek, 0);
                  } else {
                    seekAndEmit();
                  }
                } else {
                  if (self._webAudio) {
                    var realTime = self.playing(id)
                      ? Howler.ctx.currentTime - sound._playStart
                      : 0;
                    var rateSeek = sound._rateSeek
                      ? sound._rateSeek - sound._seek
                      : 0;
                    return (
                      sound._seek +
                      (rateSeek + realTime * Math.abs(sound._rate))
                    );
                  } else {
                    return sound._node.currentTime;
                  }
                }
              }

              return self;
            },

            /**
             * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
             * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
             * @return {Boolean} True if playing and false if not.
             */
            playing: function (id) {
              var self = this;

              // Check the passed sound ID (if any).
              if (typeof id === "number") {
                var sound = self._soundById(id);
                return sound ? !sound._paused : false;
              }

              // Otherwise, loop through all sounds and check if any are playing.
              for (var i = 0; i < self._sounds.length; i++) {
                if (!self._sounds[i]._paused) {
                  return true;
                }
              }

              return false;
            },

            /**
             * Get the duration of this sound. Passing a sound id will return the sprite duration.
             * @param  {Number} id The sound id to check. If none is passed, return full source duration.
             * @return {Number} Audio duration in seconds.
             */
            duration: function (id) {
              var self = this;
              var duration = self._duration;

              // If we pass an ID, get the sound and return the sprite length.
              var sound = self._soundById(id);
              if (sound) {
                duration = self._sprite[sound._sprite][1] / 1000;
              }

              return duration;
            },

            /**
             * Returns the current loaded state of this Howl.
             * @return {String} 'unloaded', 'loading', 'loaded'
             */
            state: function () {
              return this._state;
            },

            /**
             * Unload and destroy the current Howl object.
             * This will immediately stop all sound instances attached to this group.
             */
            unload: function () {
              var self = this;

              // Stop playing any active sounds.
              var sounds = self._sounds;
              for (var i = 0; i < sounds.length; i++) {
                // Stop the sound if it is currently playing.
                if (!sounds[i]._paused) {
                  self.stop(sounds[i]._id);
                }

                // Remove the source or disconnect.
                if (!self._webAudio) {
                  // Set the source to 0-second silence to stop any downloading (except in IE).
                  self._clearSound(sounds[i]._node);

                  // Remove any event listeners.
                  sounds[i]._node.removeEventListener(
                    "error",
                    sounds[i]._errorFn,
                    false
                  );
                  sounds[i]._node.removeEventListener(
                    Howler._canPlayEvent,
                    sounds[i]._loadFn,
                    false
                  );
                  sounds[i]._node.removeEventListener(
                    "ended",
                    sounds[i]._endFn,
                    false
                  );

                  // Release the Audio object back to the pool.
                  Howler._releaseHtml5Audio(sounds[i]._node);
                }

                // Empty out all of the nodes.
                delete sounds[i]._node;

                // Make sure all timers are cleared out.
                self._clearTimer(sounds[i]._id);
              }

              // Remove the references in the global Howler object.
              var index = Howler._howls.indexOf(self);
              if (index >= 0) {
                Howler._howls.splice(index, 1);
              }

              // Delete this sound from the cache (if no other Howl is using it).
              var remCache = true;
              for (i = 0; i < Howler._howls.length; i++) {
                if (
                  Howler._howls[i]._src === self._src ||
                  self._src.indexOf(Howler._howls[i]._src) >= 0
                ) {
                  remCache = false;
                  break;
                }
              }

              if (cache && remCache) {
                delete cache[self._src];
              }

              // Clear global errors.
              Howler.noAudio = false;

              // Clear out `self`.
              self._state = "unloaded";
              self._sounds = [];
              self = null;

              return null;
            },

            /**
             * Listen to a custom event.
             * @param  {String}   event Event name.
             * @param  {Function} fn    Listener to call.
             * @param  {Number}   id    (optional) Only listen to events for this sound.
             * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
             * @return {Howl}
             */
            on: function (event, fn, id, once) {
              var self = this;
              var events = self["_on" + event];

              if (typeof fn === "function") {
                events.push(
                  once ? { id: id, fn: fn, once: once } : { id: id, fn: fn }
                );
              }

              return self;
            },

            /**
             * Remove a custom event. Call without parameters to remove all events.
             * @param  {String}   event Event name.
             * @param  {Function} fn    Listener to remove. Leave empty to remove all.
             * @param  {Number}   id    (optional) Only remove events for this sound.
             * @return {Howl}
             */
            off: function (event, fn, id) {
              var self = this;
              var events = self["_on" + event];
              var i = 0;

              // Allow passing just an event and ID.
              if (typeof fn === "number") {
                id = fn;
                fn = null;
              }

              if (fn || id) {
                // Loop through event store and remove the passed function.
                for (i = 0; i < events.length; i++) {
                  var isId = id === events[i].id;
                  if ((fn === events[i].fn && isId) || (!fn && isId)) {
                    events.splice(i, 1);
                    break;
                  }
                }
              } else if (event) {
                // Clear out all events of this type.
                self["_on" + event] = [];
              } else {
                // Clear out all events of every type.
                var keys = Object.keys(self);
                for (i = 0; i < keys.length; i++) {
                  if (
                    keys[i].indexOf("_on") === 0 &&
                    Array.isArray(self[keys[i]])
                  ) {
                    self[keys[i]] = [];
                  }
                }
              }

              return self;
            },

            /**
             * Listen to a custom event and remove it once fired.
             * @param  {String}   event Event name.
             * @param  {Function} fn    Listener to call.
             * @param  {Number}   id    (optional) Only listen to events for this sound.
             * @return {Howl}
             */
            once: function (event, fn, id) {
              var self = this;

              // Setup the event listener.
              self.on(event, fn, id, 1);

              return self;
            },

            /**
             * Emit all events of a specific type and pass the sound id.
             * @param  {String} event Event name.
             * @param  {Number} id    Sound ID.
             * @param  {Number} msg   Message to go with event.
             * @return {Howl}
             */
            _emit: function (event, id, msg) {
              var self = this;
              var events = self["_on" + event];

              // Loop through event store and fire all functions.
              for (var i = events.length - 1; i >= 0; i--) {
                // Only fire the listener if the correct ID is used.
                if (!events[i].id || events[i].id === id || event === "load") {
                  setTimeout(
                    function (fn) {
                      fn.call(this, id, msg);
                    }.bind(self, events[i].fn),
                    0
                  );

                  // If this event was setup with `once`, remove it.
                  if (events[i].once) {
                    self.off(event, events[i].fn, events[i].id);
                  }
                }
              }

              // Pass the event type into load queue so that it can continue stepping.
              self._loadQueue(event);

              return self;
            },

            /**
             * Queue of actions initiated before the sound has loaded.
             * These will be called in sequence, with the next only firing
             * after the previous has finished executing (even if async like play).
             * @return {Howl}
             */
            _loadQueue: function (event) {
              var self = this;

              if (self._queue.length > 0) {
                var task = self._queue[0];

                // Remove this task if a matching event was passed.
                if (task.event === event) {
                  self._queue.shift();
                  self._loadQueue();
                }

                // Run the task if no event type is passed.
                if (!event) {
                  task.action();
                }
              }

              return self;
            },

            /**
             * Fired when playback ends at the end of the duration.
             * @param  {Sound} sound The sound object to work with.
             * @return {Howl}
             */
            _ended: function (sound) {
              var self = this;
              var sprite = sound._sprite;

              // If we are using IE and there was network latency we may be clipping
              // audio before it completes playing. Lets check the node to make sure it
              // believes it has completed, before ending the playback.
              if (
                !self._webAudio &&
                sound._node &&
                !sound._node.paused &&
                !sound._node.ended &&
                sound._node.currentTime < sound._stop
              ) {
                setTimeout(self._ended.bind(self, sound), 100);
                return self;
              }

              // Should this sound loop?
              var loop = !!(sound._loop || self._sprite[sprite][2]);

              // Fire the ended event.
              self._emit("end", sound._id);

              // Restart the playback for HTML5 Audio loop.
              if (!self._webAudio && loop) {
                self.stop(sound._id, true).play(sound._id);
              }

              // Restart this timer if on a Web Audio loop.
              if (self._webAudio && loop) {
                self._emit("play", sound._id);
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                sound._playStart = Howler.ctx.currentTime;

                var timeout =
                  ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
                self._endTimers[sound._id] = setTimeout(
                  self._ended.bind(self, sound),
                  timeout
                );
              }

              // Mark the node as paused.
              if (self._webAudio && !loop) {
                sound._paused = true;
                sound._ended = true;
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                self._clearTimer(sound._id);

                // Clean up the buffer source.
                self._cleanBuffer(sound._node);

                // Attempt to auto-suspend AudioContext if no sounds are still playing.
                Howler._autoSuspend();
              }

              // When using a sprite, end the track.
              if (!self._webAudio && !loop) {
                self.stop(sound._id, true);
              }

              return self;
            },

            /**
             * Clear the end timer for a sound playback.
             * @param  {Number} id The sound ID.
             * @return {Howl}
             */
            _clearTimer: function (id) {
              var self = this;

              if (self._endTimers[id]) {
                // Clear the timeout or remove the ended listener.
                if (typeof self._endTimers[id] !== "function") {
                  clearTimeout(self._endTimers[id]);
                } else {
                  var sound = self._soundById(id);
                  if (sound && sound._node) {
                    sound._node.removeEventListener(
                      "ended",
                      self._endTimers[id],
                      false
                    );
                  }
                }

                delete self._endTimers[id];
              }

              return self;
            },

            /**
             * Return the sound identified by this ID, or return null.
             * @param  {Number} id Sound ID
             * @return {Object}    Sound object or null.
             */
            _soundById: function (id) {
              var self = this;

              // Loop through all sounds and find the one with this ID.
              for (var i = 0; i < self._sounds.length; i++) {
                if (id === self._sounds[i]._id) {
                  return self._sounds[i];
                }
              }

              return null;
            },

            /**
             * Return an inactive sound from the pool or create a new one.
             * @return {Sound} Sound playback object.
             */
            _inactiveSound: function () {
              var self = this;

              self._drain();

              // Find the first inactive node to recycle.
              for (var i = 0; i < self._sounds.length; i++) {
                if (self._sounds[i]._ended) {
                  return self._sounds[i].reset();
                }
              }

              // If no inactive node was found, create a new one.
              return new Sound(self);
            },

            /**
             * Drain excess inactive sounds from the pool.
             */
            _drain: function () {
              var self = this;
              var limit = self._pool;
              var cnt = 0;
              var i = 0;

              // If there are less sounds than the max pool size, we are done.
              if (self._sounds.length < limit) {
                return;
              }

              // Count the number of inactive sounds.
              for (i = 0; i < self._sounds.length; i++) {
                if (self._sounds[i]._ended) {
                  cnt++;
                }
              }

              // Remove excess inactive sounds, going in reverse order.
              for (i = self._sounds.length - 1; i >= 0; i--) {
                if (cnt <= limit) {
                  return;
                }

                if (self._sounds[i]._ended) {
                  // Disconnect the audio source when using Web Audio.
                  if (self._webAudio && self._sounds[i]._node) {
                    self._sounds[i]._node.disconnect(0);
                  }

                  // Remove sounds until we have the pool size.
                  self._sounds.splice(i, 1);
                  cnt--;
                }
              }
            },

            /**
             * Get all ID's from the sounds pool.
             * @param  {Number} id Only return one ID if one is passed.
             * @return {Array}    Array of IDs.
             */
            _getSoundIds: function (id) {
              var self = this;

              if (typeof id === "undefined") {
                var ids = [];
                for (var i = 0; i < self._sounds.length; i++) {
                  ids.push(self._sounds[i]._id);
                }

                return ids;
              } else {
                return [id];
              }
            },

            /**
             * Load the sound back into the buffer source.
             * @param  {Sound} sound The sound object to work with.
             * @return {Howl}
             */
            _refreshBuffer: function (sound) {
              var self = this;

              // Setup the buffer source for playback.
              sound._node.bufferSource = Howler.ctx.createBufferSource();
              sound._node.bufferSource.buffer = cache[self._src];

              // Connect to the correct node.
              if (sound._panner) {
                sound._node.bufferSource.connect(sound._panner);
              } else {
                sound._node.bufferSource.connect(sound._node);
              }

              // Setup looping and playback rate.
              sound._node.bufferSource.loop = sound._loop;
              if (sound._loop) {
                sound._node.bufferSource.loopStart = sound._start || 0;
                sound._node.bufferSource.loopEnd = sound._stop || 0;
              }
              sound._node.bufferSource.playbackRate.setValueAtTime(
                sound._rate,
                Howler.ctx.currentTime
              );

              return self;
            },

            /**
             * Prevent memory leaks by cleaning up the buffer source after playback.
             * @param  {Object} node Sound's audio node containing the buffer source.
             * @return {Howl}
             */
            _cleanBuffer: function (node) {
              var self = this;
              var isIOS =
                Howler._navigator &&
                Howler._navigator.vendor.indexOf("Apple") >= 0;

              if (Howler._scratchBuffer && node.bufferSource) {
                node.bufferSource.onended = null;
                node.bufferSource.disconnect(0);
                if (isIOS) {
                  try {
                    node.bufferSource.buffer = Howler._scratchBuffer;
                  } catch (e) { }
                }
              }
              node.bufferSource = null;

              return self;
            },

            /**
             * Set the source to a 0-second silence to stop any downloading (except in IE).
             * @param  {Object} node Audio node to clear.
             */
            _clearSound: function (node) {
              var checkIE = /MSIE |Trident\//.test(
                Howler._navigator && Howler._navigator.userAgent
              );
              if (!checkIE) {
                node.src =
                  "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
              }
            },
          };

          /** Single Sound Methods **/
          /***************************************************************************/

          /**
           * Setup the sound object, which each node attached to a Howl group is contained in.
           * @param {Object} howl The Howl parent group.
           */
          var Sound = function (howl) {
            this._parent = howl;
            this.init();
          };
          Sound.prototype = {
            /**
             * Initialize a new Sound object.
             * @return {Sound}
             */
            init: function () {
              var self = this;
              var parent = self._parent;

              // Setup the default parameters.
              self._muted = parent._muted;
              self._loop = parent._loop;
              self._volume = parent._volume;
              self._rate = parent._rate;
              self._seek = 0;
              self._paused = true;
              self._ended = true;
              self._sprite = "__default";

              // Generate a unique ID for this sound.
              self._id = ++Howler._counter;

              // Add itself to the parent's pool.
              parent._sounds.push(self);

              // Create the new node.
              self.create();

              return self;
            },

            /**
             * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
             * @return {Sound}
             */
            create: function () {
              var self = this;
              var parent = self._parent;
              var volume =
                Howler._muted || self._muted || self._parent._muted
                  ? 0
                  : self._volume;

              if (parent._webAudio) {
                // Create the gain node for controlling volume (the source will connect to this).
                self._node =
                  typeof Howler.ctx.createGain === "undefined"
                    ? Howler.ctx.createGainNode()
                    : Howler.ctx.createGain();
                self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
                self._node.paused = true;
                self._node.connect(Howler.masterGain);
              } else if (!Howler.noAudio) {
                // Get an unlocked Audio object from the pool.
                self._node = Howler._obtainHtml5Audio();

                // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
                self._errorFn = self._errorListener.bind(self);
                self._node.addEventListener("error", self._errorFn, false);

                // Listen for 'canplaythrough' event to let us know the sound is ready.
                self._loadFn = self._loadListener.bind(self);
                self._node.addEventListener(
                  Howler._canPlayEvent,
                  self._loadFn,
                  false
                );

                // Listen for the 'ended' event on the sound to account for edge-case where
                // a finite sound has a duration of Infinity.
                self._endFn = self._endListener.bind(self);
                self._node.addEventListener("ended", self._endFn, false);

                // Setup the new audio node.
                self._node.src = parent._src;
                self._node.preload =
                  parent._preload === true ? "auto" : parent._preload;
                self._node.volume = volume * Howler.volume();

                // Begin loading the source.
                self._node.load();
              }

              return self;
            },

            /**
             * Reset the parameters of this sound to the original state (for recycle).
             * @return {Sound}
             */
            reset: function () {
              var self = this;
              var parent = self._parent;

              // Reset all of the parameters of this sound.
              self._muted = parent._muted;
              self._loop = parent._loop;
              self._volume = parent._volume;
              self._rate = parent._rate;
              self._seek = 0;
              self._rateSeek = 0;
              self._paused = true;
              self._ended = true;
              self._sprite = "__default";

              // Generate a new ID so that it isn't confused with the previous sound.
              self._id = ++Howler._counter;

              return self;
            },

            /**
             * HTML5 Audio error listener callback.
             */
            _errorListener: function () {
              var self = this;

              // Fire an error event and pass back the code.
              self._parent._emit(
                "loaderror",
                self._id,
                self._node.error ? self._node.error.code : 0
              );

              // Clear the event listener.
              self._node.removeEventListener("error", self._errorFn, false);
            },

            /**
             * HTML5 Audio canplaythrough listener callback.
             */
            _loadListener: function () {
              var self = this;
              var parent = self._parent;

              // Round up the duration to account for the lower precision in HTML5 Audio.
              parent._duration = Math.ceil(self._node.duration * 10) / 10;

              // Setup a sprite if none is defined.
              if (Object.keys(parent._sprite).length === 0) {
                parent._sprite = { __default: [0, parent._duration * 1000] };
              }

              if (parent._state !== "loaded") {
                parent._state = "loaded";
                parent._emit("load");
                parent._loadQueue();
              }

              // Clear the event listener.
              self._node.removeEventListener(
                Howler._canPlayEvent,
                self._loadFn,
                false
              );
            },

            /**
             * HTML5 Audio ended listener callback.
             */
            _endListener: function () {
              var self = this;
              var parent = self._parent;

              // Only handle the `ended`` event if the duration is Infinity.
              if (parent._duration === Infinity) {
                // Update the parent duration to match the real audio duration.
                // Round up the duration to account for the lower precision in HTML5 Audio.
                parent._duration = Math.ceil(self._node.duration * 10) / 10;

                // Update the sprite that corresponds to the real duration.
                if (parent._sprite.__default[1] === Infinity) {
                  parent._sprite.__default[1] = parent._duration * 1000;
                }

                // Run the regular ended method.
                parent._ended(self);
              }

              // Clear the event listener since the duration is now correct.
              self._node.removeEventListener("ended", self._endFn, false);
            },
          };

          /** Helper Methods **/
          /***************************************************************************/

          var cache = {};

          /**
           * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
           * @param  {Howl} self
           */
          var loadBuffer = function (self) {
            var url = self._src;

            // Check if the buffer has already been cached and use it instead.
            if (cache[url]) {
              // Set the duration from the cache.
              self._duration = cache[url].duration;

              // Load the sound into this Howl.
              loadSound(self);

              return;
            }

            if (/^data:[^;]+;base64,/.test(url)) {
              // Decode the base64 data URI without XHR, since some browsers don't support it.
              var data = atob(url.split(",")[1]);
              var dataView = new Uint8Array(data.length);
              for (var i = 0; i < data.length; ++i) {
                dataView[i] = data.charCodeAt(i);
              }

              decodeAudioData(dataView.buffer, self);
            } else {
              // Load the buffer from the URL.
              var xhr = new XMLHttpRequest();
              xhr.open(self._xhr.method, url, true);
              xhr.withCredentials = self._xhr.withCredentials;
              xhr.responseType = "arraybuffer";

              // Apply any custom headers to the request.
              if (self._xhr.headers) {
                Object.keys(self._xhr.headers).forEach(function (key) {
                  xhr.setRequestHeader(key, self._xhr.headers[key]);
                });
              }

              xhr.onload = function () {
                // Make sure we get a successful response back.
                var code = (xhr.status + "")[0];
                if (code !== "0" && code !== "2" && code !== "3") {
                  self._emit(
                    "loaderror",
                    null,
                    "Failed loading audio file with status: " + xhr.status + "."
                  );
                  return;
                }

                decodeAudioData(xhr.response, self);
              };
              xhr.onerror = function () {
                // If there is an error, switch to HTML5 Audio.
                if (self._webAudio) {
                  self._html5 = true;
                  self._webAudio = false;
                  self._sounds = [];
                  delete cache[url];
                  self.load();
                }
              };
              safeXhrSend(xhr);
            }
          };

          /**
           * Send the XHR request wrapped in a try/catch.
           * @param  {Object} xhr XHR to send.
           */
          var safeXhrSend = function (xhr) {
            try {
              xhr.send();
            } catch (e) {
              xhr.onerror();
            }
          };

          /**
           * Decode audio data from an array buffer.
           * @param  {ArrayBuffer} arraybuffer The audio data.
           * @param  {Howl}        self
           */
          var decodeAudioData = function (arraybuffer, self) {
            // Fire a load error if something broke.
            var error = function () {
              self._emit("loaderror", null, "Decoding audio data failed.");
            };

            // Load the sound on success.
            var success = function (buffer) {
              if (buffer && self._sounds.length > 0) {
                cache[self._src] = buffer;
                loadSound(self, buffer);
              } else {
                error();
              }
            };

            // Decode the buffer into an audio source.
            if (
              typeof Promise !== "undefined" &&
              Howler.ctx.decodeAudioData.length === 1
            ) {
              Howler.ctx
                .decodeAudioData(arraybuffer)
                .then(success)
                .catch(error);
            } else {
              Howler.ctx.decodeAudioData(arraybuffer, success, error);
            }
          };

          /**
           * Sound is now loaded, so finish setting everything up and fire the loaded event.
           * @param  {Howl} self
           * @param  {Object} buffer The decoded buffer sound source.
           */
          var loadSound = function (self, buffer) {
            // Set the duration.
            if (buffer && !self._duration) {
              self._duration = buffer.duration;
            }

            // Setup a sprite if none is defined.
            if (Object.keys(self._sprite).length === 0) {
              self._sprite = { __default: [0, self._duration * 1000] };
            }

            // Fire the loaded event.
            if (self._state !== "loaded") {
              self._state = "loaded";
              self._emit("load");
              self._loadQueue();
            }
          };

          /**
           * Setup the audio context when available, or switch to HTML5 Audio mode.
           */
          var setupAudioContext = function () {
            // If we have already detected that Web Audio isn't supported, don't run this step again.
            if (!Howler.usingWebAudio) {
              return;
            }

            // Check if we are using Web Audio and setup the AudioContext if we are.
            try {
              if (typeof AudioContext !== "undefined") {
                Howler.ctx = new AudioContext();
              } else if (typeof webkitAudioContext !== "undefined") {
                Howler.ctx = new webkitAudioContext();
              } else {
                Howler.usingWebAudio = false;
              }
            } catch (e) {
              Howler.usingWebAudio = false;
            }

            // If the audio context creation still failed, set using web audio to false.
            if (!Howler.ctx) {
              Howler.usingWebAudio = false;
            }

            // Check if a webview is being used on iOS8 or earlier (rather than the browser).
            // If it is, disable Web Audio as it causes crashing.
            var iOS = /iP(hone|od|ad)/.test(
              Howler._navigator && Howler._navigator.platform
            );
            var appVersion =
              Howler._navigator &&
              Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var version = appVersion ? parseInt(appVersion[1], 10) : null;
            if (iOS && version && version < 9) {
              var safari = /safari/.test(
                Howler._navigator && Howler._navigator.userAgent.toLowerCase()
              );
              if (Howler._navigator && !safari) {
                Howler.usingWebAudio = false;
              }
            }

            // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
            if (Howler.usingWebAudio) {
              Howler.masterGain =
                typeof Howler.ctx.createGain === "undefined"
                  ? Howler.ctx.createGainNode()
                  : Howler.ctx.createGain();
              Howler.masterGain.gain.setValueAtTime(
                Howler._muted ? 0 : Howler._volume,
                Howler.ctx.currentTime
              );
              Howler.masterGain.connect(Howler.ctx.destination);
            }

            // Re-run the setup on Howler.
            Howler._setup();
          };

          // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
          if (true) {
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
              (__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return {
                  Howler: Howler,
                  Howl: Howl,
                };
              }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }

          // Add support for CommonJS libraries such as browserify.
          if (true) {
            exports.Howler = Howler;
            exports.Howl = Howl;
          }

          // Add to global in Node.js (for testing, etc).
          if (typeof __webpack_require__.g !== "undefined") {
            __webpack_require__.g.HowlerGlobal = HowlerGlobal;
            __webpack_require__.g.Howler = Howler;
            __webpack_require__.g.Howl = Howl;
            __webpack_require__.g.Sound = Sound;
          } else if (typeof window !== "undefined") {
            // Define globally in case AMD is not available or unused.
            window.HowlerGlobal = HowlerGlobal;
            window.Howler = Howler;
            window.Howl = Howl;
            window.Sound = Sound;
          }
        })();

        /*!
         *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
         *
         *  howler.js v2.2.3
         *  howlerjs.com
         *
         *  (c) 2013-2020, James Simpson of GoldFire Studios
         *  goldfirestudios.com
         *
         *  MIT License
         */

        (function () {
          "use strict";

          // Setup default properties.
          HowlerGlobal.prototype._pos = [0, 0, 0];
          HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

          /** Global Methods **/
          /***************************************************************************/

          /**
           * Helper method to update the stereo panning position of all current Howls.
           * Future Howls will not use this value unless explicitly set.
           * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
           * @return {Howler/Number}     Self or current stereo panning value.
           */
          HowlerGlobal.prototype.stereo = function (pan) {
            var self = this;

            // Stop right here if not using Web Audio.
            if (!self.ctx || !self.ctx.listener) {
              return self;
            }

            // Loop through all Howls and update their stereo panning.
            for (var i = self._howls.length - 1; i >= 0; i--) {
              self._howls[i].stereo(pan);
            }

            return self;
          };

          /**
           * Get/set the position of the listener in 3D cartesian space. Sounds using
           * 3D position will be relative to the listener's position.
           * @param  {Number} x The x-position of the listener.
           * @param  {Number} y The y-position of the listener.
           * @param  {Number} z The z-position of the listener.
           * @return {Howler/Array}   Self or current listener position.
           */
          HowlerGlobal.prototype.pos = function (x, y, z) {
            var self = this;

            // Stop right here if not using Web Audio.
            if (!self.ctx || !self.ctx.listener) {
              return self;
            }

            // Set the defaults for optional 'y' & 'z'.
            y = typeof y !== "number" ? self._pos[1] : y;
            z = typeof z !== "number" ? self._pos[2] : z;

            if (typeof x === "number") {
              self._pos = [x, y, z];

              if (typeof self.ctx.listener.positionX !== "undefined") {
                self.ctx.listener.positionX.setTargetAtTime(
                  self._pos[0],
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.positionY.setTargetAtTime(
                  self._pos[1],
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.positionZ.setTargetAtTime(
                  self._pos[2],
                  Howler.ctx.currentTime,
                  0.1
                );
              } else {
                self.ctx.listener.setPosition(
                  self._pos[0],
                  self._pos[1],
                  self._pos[2]
                );
              }
            } else {
              return self._pos;
            }

            return self;
          };

          /**
           * Get/set the direction the listener is pointing in the 3D cartesian space.
           * A front and up vector must be provided. The front is the direction the
           * face of the listener is pointing, and up is the direction the top of the
           * listener is pointing. Thus, these values are expected to be at right angles
           * from each other.
           * @param  {Number} x   The x-orientation of the listener.
           * @param  {Number} y   The y-orientation of the listener.
           * @param  {Number} z   The z-orientation of the listener.
           * @param  {Number} xUp The x-orientation of the top of the listener.
           * @param  {Number} yUp The y-orientation of the top of the listener.
           * @param  {Number} zUp The z-orientation of the top of the listener.
           * @return {Howler/Array}     Returns self or the current orientation vectors.
           */
          HowlerGlobal.prototype.orientation = function (
            x,
            y,
            z,
            xUp,
            yUp,
            zUp
          ) {
            var self = this;

            // Stop right here if not using Web Audio.
            if (!self.ctx || !self.ctx.listener) {
              return self;
            }

            // Set the defaults for optional 'y' & 'z'.
            var or = self._orientation;
            y = typeof y !== "number" ? or[1] : y;
            z = typeof z !== "number" ? or[2] : z;
            xUp = typeof xUp !== "number" ? or[3] : xUp;
            yUp = typeof yUp !== "number" ? or[4] : yUp;
            zUp = typeof zUp !== "number" ? or[5] : zUp;

            if (typeof x === "number") {
              self._orientation = [x, y, z, xUp, yUp, zUp];

              if (typeof self.ctx.listener.forwardX !== "undefined") {
                self.ctx.listener.forwardX.setTargetAtTime(
                  x,
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.forwardY.setTargetAtTime(
                  y,
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.forwardZ.setTargetAtTime(
                  z,
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.upX.setTargetAtTime(
                  xUp,
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.upY.setTargetAtTime(
                  yUp,
                  Howler.ctx.currentTime,
                  0.1
                );
                self.ctx.listener.upZ.setTargetAtTime(
                  zUp,
                  Howler.ctx.currentTime,
                  0.1
                );
              } else {
                self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
              }
            } else {
              return or;
            }

            return self;
          };

          /** Group Methods **/
          /***************************************************************************/

          /**
           * Add new properties to the core init.
           * @param  {Function} _super Core init method.
           * @return {Howl}
           */
          Howl.prototype.init = (function (_super) {
            return function (o) {
              var self = this;

              // Setup user-defined default properties.
              self._orientation = o.orientation || [1, 0, 0];
              self._stereo = o.stereo || null;
              self._pos = o.pos || null;
              self._pannerAttr = {
                coneInnerAngle:
                  typeof o.coneInnerAngle !== "undefined"
                    ? o.coneInnerAngle
                    : 360,
                coneOuterAngle:
                  typeof o.coneOuterAngle !== "undefined"
                    ? o.coneOuterAngle
                    : 360,
                coneOuterGain:
                  typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : 0,
                distanceModel:
                  typeof o.distanceModel !== "undefined"
                    ? o.distanceModel
                    : "inverse",
                maxDistance:
                  typeof o.maxDistance !== "undefined" ? o.maxDistance : 10000,
                panningModel:
                  typeof o.panningModel !== "undefined"
                    ? o.panningModel
                    : "HRTF",
                refDistance:
                  typeof o.refDistance !== "undefined" ? o.refDistance : 1,
                rolloffFactor:
                  typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : 1,
              };

              // Setup event listeners.
              self._onstereo = o.onstereo ? [{ fn: o.onstereo }] : [];
              self._onpos = o.onpos ? [{ fn: o.onpos }] : [];
              self._onorientation = o.onorientation
                ? [{ fn: o.onorientation }]
                : [];

              // Complete initilization with howler.js core's init function.
              return _super.call(this, o);
            };
          })(Howl.prototype.init);

          /**
           * Get/set the stereo panning of the audio source for this sound or all in the group.
           * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
           * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
           * @return {Howl/Number}    Returns self or the current stereo panning value.
           */
          Howl.prototype.stereo = function (pan, id) {
            var self = this;

            // Stop right here if not using Web Audio.
            if (!self._webAudio) {
              return self;
            }

            // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
            if (self._state !== "loaded") {
              self._queue.push({
                event: "stereo",
                action: function () {
                  self.stereo(pan, id);
                },
              });

              return self;
            }

            // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
            var pannerType =
              typeof Howler.ctx.createStereoPanner === "undefined"
                ? "spatial"
                : "stereo";

            // Setup the group's stereo panning if no ID is passed.
            if (typeof id === "undefined") {
              // Return the group's stereo panning if no parameters are passed.
              if (typeof pan === "number") {
                self._stereo = pan;
                self._pos = [pan, 0, 0];
              } else {
                return self._stereo;
              }
            }

            // Change the streo panning of one or all sounds in group.
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              // Get the sound.
              var sound = self._soundById(ids[i]);

              if (sound) {
                if (typeof pan === "number") {
                  sound._stereo = pan;
                  sound._pos = [pan, 0, 0];

                  if (sound._node) {
                    // If we are falling back, make sure the panningModel is equalpower.
                    sound._pannerAttr.panningModel = "equalpower";

                    // Check if there is a panner setup and create a new one if not.
                    if (!sound._panner || !sound._panner.pan) {
                      setupPanner(sound, pannerType);
                    }

                    if (pannerType === "spatial") {
                      if (typeof sound._panner.positionX !== "undefined") {
                        sound._panner.positionX.setValueAtTime(
                          pan,
                          Howler.ctx.currentTime
                        );
                        sound._panner.positionY.setValueAtTime(
                          0,
                          Howler.ctx.currentTime
                        );
                        sound._panner.positionZ.setValueAtTime(
                          0,
                          Howler.ctx.currentTime
                        );
                      } else {
                        sound._panner.setPosition(pan, 0, 0);
                      }
                    } else {
                      sound._panner.pan.setValueAtTime(
                        pan,
                        Howler.ctx.currentTime
                      );
                    }
                  }

                  self._emit("stereo", sound._id);
                } else {
                  return sound._stereo;
                }
              }
            }

            return self;
          };

          /**
           * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
           * @param  {Number} x  The x-position of the audio source.
           * @param  {Number} y  The y-position of the audio source.
           * @param  {Number} z  The z-position of the audio source.
           * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
           * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
           */
          Howl.prototype.pos = function (x, y, z, id) {
            var self = this;

            // Stop right here if not using Web Audio.
            if (!self._webAudio) {
              return self;
            }

            // If the sound hasn't loaded, add it to the load queue to change position when capable.
            if (self._state !== "loaded") {
              self._queue.push({
                event: "pos",
                action: function () {
                  self.pos(x, y, z, id);
                },
              });

              return self;
            }

            // Set the defaults for optional 'y' & 'z'.
            y = typeof y !== "number" ? 0 : y;
            z = typeof z !== "number" ? -0.5 : z;

            // Setup the group's spatial position if no ID is passed.
            if (typeof id === "undefined") {
              // Return the group's spatial position if no parameters are passed.
              if (typeof x === "number") {
                self._pos = [x, y, z];
              } else {
                return self._pos;
              }
            }

            // Change the spatial position of one or all sounds in group.
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              // Get the sound.
              var sound = self._soundById(ids[i]);

              if (sound) {
                if (typeof x === "number") {
                  sound._pos = [x, y, z];

                  if (sound._node) {
                    // Check if there is a panner setup and create a new one if not.
                    if (!sound._panner || sound._panner.pan) {
                      setupPanner(sound, "spatial");
                    }

                    if (typeof sound._panner.positionX !== "undefined") {
                      sound._panner.positionX.setValueAtTime(
                        x,
                        Howler.ctx.currentTime
                      );
                      sound._panner.positionY.setValueAtTime(
                        y,
                        Howler.ctx.currentTime
                      );
                      sound._panner.positionZ.setValueAtTime(
                        z,
                        Howler.ctx.currentTime
                      );
                    } else {
                      sound._panner.setPosition(x, y, z);
                    }
                  }

                  self._emit("pos", sound._id);
                } else {
                  return sound._pos;
                }
              }
            }

            return self;
          };

          /**
           * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
           * space. Depending on how direction the sound is, based on the `cone` attributes,
           * a sound pointing away from the listener can be quiet or silent.
           * @param  {Number} x  The x-orientation of the source.
           * @param  {Number} y  The y-orientation of the source.
           * @param  {Number} z  The z-orientation of the source.
           * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
           * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
           */
          Howl.prototype.orientation = function (x, y, z, id) {
            var self = this;

            // Stop right here if not using Web Audio.
            if (!self._webAudio) {
              return self;
            }

            // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
            if (self._state !== "loaded") {
              self._queue.push({
                event: "orientation",
                action: function () {
                  self.orientation(x, y, z, id);
                },
              });

              return self;
            }

            // Set the defaults for optional 'y' & 'z'.
            y = typeof y !== "number" ? self._orientation[1] : y;
            z = typeof z !== "number" ? self._orientation[2] : z;

            // Setup the group's spatial orientation if no ID is passed.
            if (typeof id === "undefined") {
              // Return the group's spatial orientation if no parameters are passed.
              if (typeof x === "number") {
                self._orientation = [x, y, z];
              } else {
                return self._orientation;
              }
            }

            // Change the spatial orientation of one or all sounds in group.
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              // Get the sound.
              var sound = self._soundById(ids[i]);

              if (sound) {
                if (typeof x === "number") {
                  sound._orientation = [x, y, z];

                  if (sound._node) {
                    // Check if there is a panner setup and create a new one if not.
                    if (!sound._panner) {
                      // Make sure we have a position to setup the node with.
                      if (!sound._pos) {
                        sound._pos = self._pos || [0, 0, -0.5];
                      }

                      setupPanner(sound, "spatial");
                    }

                    if (typeof sound._panner.orientationX !== "undefined") {
                      sound._panner.orientationX.setValueAtTime(
                        x,
                        Howler.ctx.currentTime
                      );
                      sound._panner.orientationY.setValueAtTime(
                        y,
                        Howler.ctx.currentTime
                      );
                      sound._panner.orientationZ.setValueAtTime(
                        z,
                        Howler.ctx.currentTime
                      );
                    } else {
                      sound._panner.setOrientation(x, y, z);
                    }
                  }

                  self._emit("orientation", sound._id);
                } else {
                  return sound._orientation;
                }
              }
            }

            return self;
          };

          /**
           * Get/set the panner node's attributes for a sound or group of sounds.
           * This method can optionall take 0, 1 or 2 arguments.
           *   pannerAttr() -> Returns the group's values.
           *   pannerAttr(id) -> Returns the sound id's values.
           *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
           *   pannerAttr(o, id) -> Set's the values of passed sound id.
           *
           *   Attributes:
           *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
           *                      inside of which there will be no volume reduction.
           *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
           *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
           *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
           *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
           *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
           *                     listener. Can be `linear`, `inverse` or `exponential.
           *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
           *                   will not be reduced any further.
           *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
           *                   This is simply a variable of the distance model and has a different effect depending on which model
           *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
           *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
           *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
           *                     with `inverse` and `exponential`.
           *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
           *                     Can be `HRTF` or `equalpower`.
           *
           * @return {Howl/Object} Returns self or current panner attributes.
           */
          Howl.prototype.pannerAttr = function () {
            var self = this;
            var args = arguments;
            var o, id, sound;

            // Stop right here if not using Web Audio.
            if (!self._webAudio) {
              return self;
            }

            // Determine the values based on arguments.
            if (args.length === 0) {
              // Return the group's panner attribute values.
              return self._pannerAttr;
            } else if (args.length === 1) {
              if (typeof args[0] === "object") {
                o = args[0];

                // Set the grou's panner attribute values.
                if (typeof id === "undefined") {
                  if (!o.pannerAttr) {
                    o.pannerAttr = {
                      coneInnerAngle: o.coneInnerAngle,
                      coneOuterAngle: o.coneOuterAngle,
                      coneOuterGain: o.coneOuterGain,
                      distanceModel: o.distanceModel,
                      maxDistance: o.maxDistance,
                      refDistance: o.refDistance,
                      rolloffFactor: o.rolloffFactor,
                      panningModel: o.panningModel,
                    };
                  }

                  self._pannerAttr = {
                    coneInnerAngle:
                      typeof o.pannerAttr.coneInnerAngle !== "undefined"
                        ? o.pannerAttr.coneInnerAngle
                        : self._coneInnerAngle,
                    coneOuterAngle:
                      typeof o.pannerAttr.coneOuterAngle !== "undefined"
                        ? o.pannerAttr.coneOuterAngle
                        : self._coneOuterAngle,
                    coneOuterGain:
                      typeof o.pannerAttr.coneOuterGain !== "undefined"
                        ? o.pannerAttr.coneOuterGain
                        : self._coneOuterGain,
                    distanceModel:
                      typeof o.pannerAttr.distanceModel !== "undefined"
                        ? o.pannerAttr.distanceModel
                        : self._distanceModel,
                    maxDistance:
                      typeof o.pannerAttr.maxDistance !== "undefined"
                        ? o.pannerAttr.maxDistance
                        : self._maxDistance,
                    refDistance:
                      typeof o.pannerAttr.refDistance !== "undefined"
                        ? o.pannerAttr.refDistance
                        : self._refDistance,
                    rolloffFactor:
                      typeof o.pannerAttr.rolloffFactor !== "undefined"
                        ? o.pannerAttr.rolloffFactor
                        : self._rolloffFactor,
                    panningModel:
                      typeof o.pannerAttr.panningModel !== "undefined"
                        ? o.pannerAttr.panningModel
                        : self._panningModel,
                  };
                }
              } else {
                // Return this sound's panner attribute values.
                sound = self._soundById(parseInt(args[0], 10));
                return sound ? sound._pannerAttr : self._pannerAttr;
              }
            } else if (args.length === 2) {
              o = args[0];
              id = parseInt(args[1], 10);
            }

            // Update the values of the specified sounds.
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              sound = self._soundById(ids[i]);

              if (sound) {
                // Merge the new values into the sound.
                var pa = sound._pannerAttr;
                pa = {
                  coneInnerAngle:
                    typeof o.coneInnerAngle !== "undefined"
                      ? o.coneInnerAngle
                      : pa.coneInnerAngle,
                  coneOuterAngle:
                    typeof o.coneOuterAngle !== "undefined"
                      ? o.coneOuterAngle
                      : pa.coneOuterAngle,
                  coneOuterGain:
                    typeof o.coneOuterGain !== "undefined"
                      ? o.coneOuterGain
                      : pa.coneOuterGain,
                  distanceModel:
                    typeof o.distanceModel !== "undefined"
                      ? o.distanceModel
                      : pa.distanceModel,
                  maxDistance:
                    typeof o.maxDistance !== "undefined"
                      ? o.maxDistance
                      : pa.maxDistance,
                  refDistance:
                    typeof o.refDistance !== "undefined"
                      ? o.refDistance
                      : pa.refDistance,
                  rolloffFactor:
                    typeof o.rolloffFactor !== "undefined"
                      ? o.rolloffFactor
                      : pa.rolloffFactor,
                  panningModel:
                    typeof o.panningModel !== "undefined"
                      ? o.panningModel
                      : pa.panningModel,
                };

                // Update the panner values or create a new panner if none exists.
                var panner = sound._panner;
                if (panner) {
                  panner.coneInnerAngle = pa.coneInnerAngle;
                  panner.coneOuterAngle = pa.coneOuterAngle;
                  panner.coneOuterGain = pa.coneOuterGain;
                  panner.distanceModel = pa.distanceModel;
                  panner.maxDistance = pa.maxDistance;
                  panner.refDistance = pa.refDistance;
                  panner.rolloffFactor = pa.rolloffFactor;
                  panner.panningModel = pa.panningModel;
                } else {
                  // Make sure we have a position to setup the node with.
                  if (!sound._pos) {
                    sound._pos = self._pos || [0, 0, -0.5];
                  }

                  // Create a new panner node.
                  setupPanner(sound, "spatial");
                }
              }
            }

            return self;
          };

          /** Single Sound Methods **/
          /***************************************************************************/

          /**
           * Add new properties to the core Sound init.
           * @param  {Function} _super Core Sound init method.
           * @return {Sound}
           */
          Sound.prototype.init = (function (_super) {
            return function () {
              var self = this;
              var parent = self._parent;

              // Setup user-defined default properties.
              self._orientation = parent._orientation;
              self._stereo = parent._stereo;
              self._pos = parent._pos;
              self._pannerAttr = parent._pannerAttr;

              // Complete initilization with howler.js core Sound's init function.
              _super.call(this);

              // If a stereo or position was specified, set it up.
              if (self._stereo) {
                parent.stereo(self._stereo);
              } else if (self._pos) {
                parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
              }
            };
          })(Sound.prototype.init);

          /**
           * Override the Sound.reset method to clean up properties from the spatial plugin.
           * @param  {Function} _super Sound reset method.
           * @return {Sound}
           */
          Sound.prototype.reset = (function (_super) {
            return function () {
              var self = this;
              var parent = self._parent;

              // Reset all spatial plugin properties on this sound.
              self._orientation = parent._orientation;
              self._stereo = parent._stereo;
              self._pos = parent._pos;
              self._pannerAttr = parent._pannerAttr;

              // If a stereo or position was specified, set it up.
              if (self._stereo) {
                parent.stereo(self._stereo);
              } else if (self._pos) {
                parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
              } else if (self._panner) {
                // Disconnect the panner.
                self._panner.disconnect(0);
                self._panner = undefined;
                parent._refreshBuffer(self);
              }

              // Complete resetting of the sound.
              return _super.call(this);
            };
          })(Sound.prototype.reset);

          /** Helper Methods **/
          /***************************************************************************/

          /**
           * Create a new panner node and save it on the sound.
           * @param  {Sound} sound Specific sound to setup panning on.
           * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
           */
          var setupPanner = function (sound, type) {
            type = type || "spatial";

            // Create the new panner node.
            if (type === "spatial") {
              sound._panner = Howler.ctx.createPanner();
              sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
              sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
              sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
              sound._panner.distanceModel = sound._pannerAttr.distanceModel;
              sound._panner.maxDistance = sound._pannerAttr.maxDistance;
              sound._panner.refDistance = sound._pannerAttr.refDistance;
              sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
              sound._panner.panningModel = sound._pannerAttr.panningModel;

              if (typeof sound._panner.positionX !== "undefined") {
                sound._panner.positionX.setValueAtTime(
                  sound._pos[0],
                  Howler.ctx.currentTime
                );
                sound._panner.positionY.setValueAtTime(
                  sound._pos[1],
                  Howler.ctx.currentTime
                );
                sound._panner.positionZ.setValueAtTime(
                  sound._pos[2],
                  Howler.ctx.currentTime
                );
              } else {
                sound._panner.setPosition(
                  sound._pos[0],
                  sound._pos[1],
                  sound._pos[2]
                );
              }

              if (typeof sound._panner.orientationX !== "undefined") {
                sound._panner.orientationX.setValueAtTime(
                  sound._orientation[0],
                  Howler.ctx.currentTime
                );
                sound._panner.orientationY.setValueAtTime(
                  sound._orientation[1],
                  Howler.ctx.currentTime
                );
                sound._panner.orientationZ.setValueAtTime(
                  sound._orientation[2],
                  Howler.ctx.currentTime
                );
              } else {
                sound._panner.setOrientation(
                  sound._orientation[0],
                  sound._orientation[1],
                  sound._orientation[2]
                );
              }
            } else {
              sound._panner = Howler.ctx.createStereoPanner();
              sound._panner.pan.setValueAtTime(
                sound._stereo,
                Howler.ctx.currentTime
              );
            }

            sound._panner.connect(sound._node);

            // Update the connections.
            if (!sound._paused) {
              sound._parent.pause(sound._id, true).play(sound._id, true);
            }
          };
        })();

        /***/
      },

    /***/ "./node_modules/ieee754/index.js":
      /*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
      /***/ (__unused_webpack_module, exports) => {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];

          i += d;

          e = s & ((1 << -nBits) - 1);
          s >>= -nBits;
          nBits += eLen;
          for (
            ;
            nBits > 0;
            e = e * 256 + buffer[offset + i], i += d, nBits -= 8
          ) { }

          m = e & ((1 << -nBits) - 1);
          e >>= -nBits;
          nBits += mLen;
          for (
            ;
            nBits > 0;
            m = m * 256 + buffer[offset + i], i += d, nBits -= 8
          ) { }

          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }

            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }

          for (
            ;
            mLen >= 8;
            buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
          ) { }

          e = (e << mLen) | m;
          eLen += mLen;
          for (
            ;
            eLen > 0;
            buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
          ) { }

          buffer[offset + i - d] |= s * 128;
        };

        /***/
      },

    /***/ "./node_modules/isarray/index.js":
      /*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
      /***/ (module) => {
        var toString = {}.toString;

        module.exports =
          Array.isArray ||
          function (arr) {
            return toString.call(arr) == "[object Array]";
          };

        /***/
      },

    /***/ "./node_modules/jquery/dist/jquery.js":
      /*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
      /***/ function (module, exports) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
         * jQuery JavaScript Library v3.6.1
         * https://jquery.com/
         *
         * Includes Sizzle.js
         * https://sizzlejs.com/
         *
         * Copyright OpenJS Foundation and other contributors
         * Released under the MIT license
         * https://jquery.org/license
         *
         * Date: 2022-08-26T17:52Z
         */
        (function (global, factory) {
          "use strict";

          if (true && typeof module.exports === "object") {
            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket trac-14549 for more info.
            module.exports = global.document
              ? factory(global, true)
              : function (w) {
                if (!w.document) {
                  throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
              };
          } else {
            factory(global);
          }

          // Pass this if window is not defined yet
        })(
          typeof window !== "undefined" ? window : this,
          function (window, noGlobal) {
            // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
            // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
            // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
            // enough that all such attempts are guarded in a try block.
            "use strict";

            var arr = [];

            var getProto = Object.getPrototypeOf;

            var slice = arr.slice;

            var flat = arr.flat
              ? function (array) {
                return arr.flat.call(array);
              }
              : function (array) {
                return arr.concat.apply([], array);
              };

            var push = arr.push;

            var indexOf = arr.indexOf;

            var class2type = {};

            var toString = class2type.toString;

            var hasOwn = class2type.hasOwnProperty;

            var fnToString = hasOwn.toString;

            var ObjectFunctionString = fnToString.call(Object);

            var support = {};

            var isFunction = function isFunction(obj) {
              // Support: Chrome <=57, Firefox <=52
              // In some browsers, typeof returns "function" for HTML <object> elements
              // (i.e., `typeof document.createElement( "object" ) === "function"`).
              // We don't want to classify *any* DOM node as a function.
              // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
              // Plus for old WebKit, typeof returns "function" for HTML collections
              // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
              return (
                typeof obj === "function" &&
                typeof obj.nodeType !== "number" &&
                typeof obj.item !== "function"
              );
            };

            var isWindow = function isWindow(obj) {
              return obj != null && obj === obj.window;
            };

            var document = window.document;

            var preservedScriptAttributes = {
              type: true,
              src: true,
              nonce: true,
              noModule: true,
            };

            function DOMEval(code, node, doc) {
              doc = doc || document;

              var i,
                val,
                script = doc.createElement("script");

              script.text = code;
              if (node) {
                for (i in preservedScriptAttributes) {
                  // Support: Firefox 64+, Edge 18+
                  // Some browsers don't support the "nonce" property on scripts.
                  // On the other hand, just using `getAttribute` is not enough as
                  // the `nonce` attribute is reset to an empty string whenever it
                  // becomes browsing-context connected.
                  // See https://github.com/whatwg/html/issues/2369
                  // See https://html.spec.whatwg.org/#nonce-attributes
                  // The `node.getAttribute` check was added for the sake of
                  // `jQuery.globalEval` so that it can fake a nonce-containing node
                  // via an object.
                  val = node[i] || (node.getAttribute && node.getAttribute(i));
                  if (val) {
                    script.setAttribute(i, val);
                  }
                }
              }
              doc.head.appendChild(script).parentNode.removeChild(script);
            }

            function toType(obj) {
              if (obj == null) {
                return obj + "";
              }

              // Support: Android <=2.3 only (functionish RegExp)
              return typeof obj === "object" || typeof obj === "function"
                ? class2type[toString.call(obj)] || "object"
                : typeof obj;
            }
            /* global Symbol */
            // Defining this global in .eslintrc.json would create a danger of using the global
            // unguarded in another place, it seems safer to define global only for this module

            var version = "3.6.1",
              // Define a local copy of jQuery
              jQuery = function (selector, context) {
                // The jQuery object is actually just the init constructor 'enhanced'
                // Need init if jQuery is called (just allow error to be thrown if not included)
                return new jQuery.fn.init(selector, context);
              };

            jQuery.fn = jQuery.prototype = {
              // The current version of jQuery being used
              jquery: version,

              constructor: jQuery,

              // The default length of a jQuery object is 0
              length: 0,

              toArray: function () {
                return slice.call(this);
              },

              // Get the Nth element in the matched element set OR
              // Get the whole matched element set as a clean array
              get: function (num) {
                // Return all the elements in a clean array
                if (num == null) {
                  return slice.call(this);
                }

                // Return just the one element from the set
                return num < 0 ? this[num + this.length] : this[num];
              },

              // Take an array of elements and push it onto the stack
              // (returning the new matched element set)
              pushStack: function (elems) {
                // Build a new jQuery matched element set
                var ret = jQuery.merge(this.constructor(), elems);

                // Add the old object onto the stack (as a reference)
                ret.prevObject = this;

                // Return the newly-formed element set
                return ret;
              },

              // Execute a callback for every element in the matched set.
              each: function (callback) {
                return jQuery.each(this, callback);
              },

              map: function (callback) {
                return this.pushStack(
                  jQuery.map(this, function (elem, i) {
                    return callback.call(elem, i, elem);
                  })
                );
              },

              slice: function () {
                return this.pushStack(slice.apply(this, arguments));
              },

              first: function () {
                return this.eq(0);
              },

              last: function () {
                return this.eq(-1);
              },

              even: function () {
                return this.pushStack(
                  jQuery.grep(this, function (_elem, i) {
                    return (i + 1) % 2;
                  })
                );
              },

              odd: function () {
                return this.pushStack(
                  jQuery.grep(this, function (_elem, i) {
                    return i % 2;
                  })
                );
              },

              eq: function (i) {
                var len = this.length,
                  j = +i + (i < 0 ? len : 0);
                return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
              },

              end: function () {
                return this.prevObject || this.constructor();
              },

              // For internal use only.
              // Behaves like an Array's method, not like a jQuery method.
              push: push,
              sort: arr.sort,
              splice: arr.splice,
            };

            jQuery.extend = jQuery.fn.extend = function () {
              var options,
                name,
                src,
                copy,
                copyIsArray,
                clone,
                target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

              // Handle a deep copy situation
              if (typeof target === "boolean") {
                deep = target;

                // Skip the boolean and the target
                target = arguments[i] || {};
                i++;
              }

              // Handle case when target is a string or something (possible in deep copy)
              if (typeof target !== "object" && !isFunction(target)) {
                target = {};
              }

              // Extend jQuery itself if only one argument is passed
              if (i === length) {
                target = this;
                i--;
              }

              for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null) {
                  // Extend the base object
                  for (name in options) {
                    copy = options[name];

                    // Prevent Object.prototype pollution
                    // Prevent never-ending loop
                    if (name === "__proto__" || target === copy) {
                      continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (
                      deep &&
                      copy &&
                      (jQuery.isPlainObject(copy) ||
                        (copyIsArray = Array.isArray(copy)))
                    ) {
                      src = target[name];

                      // Ensure proper type for the source value
                      if (copyIsArray && !Array.isArray(src)) {
                        clone = [];
                      } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                        clone = {};
                      } else {
                        clone = src;
                      }
                      copyIsArray = false;

                      // Never move original objects, clone them
                      target[name] = jQuery.extend(deep, clone, copy);

                      // Don't bring in undefined values
                    } else if (copy !== undefined) {
                      target[name] = copy;
                    }
                  }
                }
              }

              // Return the modified object
              return target;
            };

            jQuery.extend({
              // Unique for each copy of jQuery on the page
              expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

              // Assume jQuery is ready without the ready module
              isReady: true,

              error: function (msg) {
                throw new Error(msg);
              },

              noop: function () { },

              isPlainObject: function (obj) {
                var proto, Ctor;

                // Detect obvious negatives
                // Use toString instead of jQuery.type to catch host objects
                if (!obj || toString.call(obj) !== "[object Object]") {
                  return false;
                }

                proto = getProto(obj);

                // Objects with no prototype (e.g., `Object.create( null )`) are plain
                if (!proto) {
                  return true;
                }

                // Objects with prototype are plain iff they were constructed by a global Object function
                Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
                return (
                  typeof Ctor === "function" &&
                  fnToString.call(Ctor) === ObjectFunctionString
                );
              },

              isEmptyObject: function (obj) {
                var name;

                for (name in obj) {
                  return false;
                }
                return true;
              },

              // Evaluates a script in a provided context; falls back to the global one
              // if not specified.
              globalEval: function (code, options, doc) {
                DOMEval(code, { nonce: options && options.nonce }, doc);
              },

              each: function (obj, callback) {
                var length,
                  i = 0;

                if (isArrayLike(obj)) {
                  length = obj.length;
                  for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                      break;
                    }
                  }
                } else {
                  for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                      break;
                    }
                  }
                }

                return obj;
              },

              // results is for internal usage only
              makeArray: function (arr, results) {
                var ret = results || [];

                if (arr != null) {
                  if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                  } else {
                    push.call(ret, arr);
                  }
                }

                return ret;
              },

              inArray: function (elem, arr, i) {
                return arr == null ? -1 : indexOf.call(arr, elem, i);
              },

              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              merge: function (first, second) {
                var len = +second.length,
                  j = 0,
                  i = first.length;

                for (; j < len; j++) {
                  first[i++] = second[j];
                }

                first.length = i;

                return first;
              },

              grep: function (elems, callback, invert) {
                var callbackInverse,
                  matches = [],
                  i = 0,
                  length = elems.length,
                  callbackExpect = !invert;

                // Go through the array, only saving the items
                // that pass the validator function
                for (; i < length; i++) {
                  callbackInverse = !callback(elems[i], i);
                  if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                  }
                }

                return matches;
              },

              // arg is for internal usage only
              map: function (elems, callback, arg) {
                var length,
                  value,
                  i = 0,
                  ret = [];

                // Go through the array, translating each of the items to their new values
                if (isArrayLike(elems)) {
                  length = elems.length;
                  for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                      ret.push(value);
                    }
                  }

                  // Go through every key on the object,
                } else {
                  for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                      ret.push(value);
                    }
                  }
                }

                // Flatten any nested arrays
                return flat(ret);
              },

              // A global GUID counter for objects
              guid: 1,

              // jQuery.support is not used in Core but other projects attach their
              // properties to it so it needs to exist.
              support: support,
            });

            if (typeof Symbol === "function") {
              jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
            }

            // Populate the class2type map
            jQuery.each(
              "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
                " "
              ),
              function (_i, name) {
                class2type["[object " + name + "]"] = name.toLowerCase();
              }
            );

            function isArrayLike(obj) {
              // Support: real iOS 8.2 only (not reproducible in simulator)
              // `in` check used to prevent JIT error (gh-2145)
              // hasOwn isn't used here due to false negatives
              // regarding Nodelist length in IE
              var length = !!obj && "length" in obj && obj.length,
                type = toType(obj);

              if (isFunction(obj) || isWindow(obj)) {
                return false;
              }

              return (
                type === "array" ||
                length === 0 ||
                (typeof length === "number" && length > 0 && length - 1 in obj)
              );
            }
            var Sizzle =
              /*!
               * Sizzle CSS Selector Engine v2.3.6
               * https://sizzlejs.com/
               *
               * Copyright JS Foundation and other contributors
               * Released under the MIT license
               * https://js.foundation/
               *
               * Date: 2021-02-16
               */
              (function (window) {
                var i,
                  support,
                  Expr,
                  getText,
                  isXML,
                  tokenize,
                  compile,
                  select,
                  outermostContext,
                  sortInput,
                  hasDuplicate,
                  // Local document vars
                  setDocument,
                  document,
                  docElem,
                  documentIsHTML,
                  rbuggyQSA,
                  rbuggyMatches,
                  matches,
                  contains,
                  // Instance-specific data
                  expando = "sizzle" + 1 * new Date(),
                  preferredDoc = window.document,
                  dirruns = 0,
                  done = 0,
                  classCache = createCache(),
                  tokenCache = createCache(),
                  compilerCache = createCache(),
                  nonnativeSelectorCache = createCache(),
                  sortOrder = function (a, b) {
                    if (a === b) {
                      hasDuplicate = true;
                    }
                    return 0;
                  },
                  // Instance methods
                  hasOwn = {}.hasOwnProperty,
                  arr = [],
                  pop = arr.pop,
                  pushNative = arr.push,
                  push = arr.push,
                  slice = arr.slice,
                  // Use a stripped-down indexOf as it's faster than native
                  // https://jsperf.com/thor-indexof-vs-for/5
                  indexOf = function (list, elem) {
                    var i = 0,
                      len = list.length;
                    for (; i < len; i++) {
                      if (list[i] === elem) {
                        return i;
                      }
                    }
                    return -1;
                  },
                  booleans =
                    "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
                    "ismap|loop|multiple|open|readonly|required|scoped",
                  // Regular expressions

                  // http://www.w3.org/TR/css3-selectors/#whitespace
                  whitespace = "[\\x20\\t\\r\\n\\f]",
                  // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
                  identifier =
                    "(?:\\\\[\\da-fA-F]{1,6}" +
                    whitespace +
                    "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
                  // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                  attributes =
                    "\\[" +
                    whitespace +
                    "*(" +
                    identifier +
                    ")(?:" +
                    whitespace +
                    // Operator (capture 2)
                    "*([*^$|!~]?=)" +
                    whitespace +
                    // "Attribute values must be CSS identifiers [capture 5]
                    // or strings [capture 3 or capture 4]"
                    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
                    identifier +
                    "))|)" +
                    whitespace +
                    "*\\]",
                  pseudos =
                    ":(" +
                    identifier +
                    ")(?:\\((" +
                    // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                    // 1. quoted (capture 3; capture 4 or capture 5)
                    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                    // 2. simple (capture 6)
                    "((?:\\\\.|[^\\\\()[\\]]|" +
                    attributes +
                    ")*)|" +
                    // 3. anything else (capture 2)
                    ".*" +
                    ")\\)|)",
                  // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                  rwhitespace = new RegExp(whitespace + "+", "g"),
                  rtrim = new RegExp(
                    "^" +
                    whitespace +
                    "+|((?:^|[^\\\\])(?:\\\\.)*)" +
                    whitespace +
                    "+$",
                    "g"
                  ),
                  rcomma = new RegExp(
                    "^" + whitespace + "*," + whitespace + "*"
                  ),
                  rcombinators = new RegExp(
                    "^" +
                    whitespace +
                    "*([>+~]|" +
                    whitespace +
                    ")" +
                    whitespace +
                    "*"
                  ),
                  rdescend = new RegExp(whitespace + "|>"),
                  rpseudo = new RegExp(pseudos),
                  ridentifier = new RegExp("^" + identifier + "$"),
                  matchExpr = {
                    ID: new RegExp("^#(" + identifier + ")"),
                    CLASS: new RegExp("^\\.(" + identifier + ")"),
                    TAG: new RegExp("^(" + identifier + "|[*])"),
                    ATTR: new RegExp("^" + attributes),
                    PSEUDO: new RegExp("^" + pseudos),
                    CHILD: new RegExp(
                      "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                      whitespace +
                      "*(even|odd|(([+-]|)(\\d*)n|)" +
                      whitespace +
                      "*(?:([+-]|)" +
                      whitespace +
                      "*(\\d+)|))" +
                      whitespace +
                      "*\\)|)",
                      "i"
                    ),
                    bool: new RegExp("^(?:" + booleans + ")$", "i"),

                    // For use in libraries implementing .is()
                    // We use this for POS matching in `select`
                    needsContext: new RegExp(
                      "^" +
                      whitespace +
                      "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                      whitespace +
                      "*((?:-\\d)?\\d*)" +
                      whitespace +
                      "*\\)|)(?=[^-]|$)",
                      "i"
                    ),
                  },
                  rhtml = /HTML$/i,
                  rinputs = /^(?:input|select|textarea|button)$/i,
                  rheader = /^h\d$/i,
                  rnative = /^[^{]+\{\s*\[native \w/,
                  // Easily-parseable/retrievable ID or TAG or CLASS selectors
                  rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                  rsibling = /[+~]/,
                  // CSS escapes
                  // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                  runescape = new RegExp(
                    "\\\\[\\da-fA-F]{1,6}" +
                    whitespace +
                    "?|\\\\([^\\r\\n\\f])",
                    "g"
                  ),
                  funescape = function (escape, nonHex) {
                    var high = "0x" + escape.slice(1) - 0x10000;

                    return nonHex
                      ? // Strip the backslash prefix from a non-hex escape sequence
                      nonHex
                      : // Replace a hexadecimal escape sequence with the encoded Unicode code point
                      // Support: IE <=11+
                      // For values outside the Basic Multilingual Plane (BMP), manually construct a
                      // surrogate pair
                      high < 0
                        ? String.fromCharCode(high + 0x10000)
                        : String.fromCharCode(
                          (high >> 10) | 0xd800,
                          (high & 0x3ff) | 0xdc00
                        );
                  },
                  // CSS string/identifier serialization
                  // https://drafts.csswg.org/cssom/#common-serializing-idioms
                  rcssescape =
                    /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                  fcssescape = function (ch, asCodePoint) {
                    if (asCodePoint) {
                      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                      if (ch === "\0") {
                        return "\uFFFD";
                      }

                      // Control characters and (dependent upon position) numbers get escaped as code points
                      return (
                        ch.slice(0, -1) +
                        "\\" +
                        ch.charCodeAt(ch.length - 1).toString(16) +
                        " "
                      );
                    }

                    // Other potentially-special ASCII characters get backslash-escaped
                    return "\\" + ch;
                  },
                  // Used for iframes
                  // See setDocument()
                  // Removing the function wrapper causes a "Permission Denied"
                  // error in IE
                  unloadHandler = function () {
                    setDocument();
                  },
                  inDisabledFieldset = addCombinator(
                    function (elem) {
                      return (
                        elem.disabled === true &&
                        elem.nodeName.toLowerCase() === "fieldset"
                      );
                    },
                    { dir: "parentNode", next: "legend" }
                  );

                // Optimize for push.apply( _, NodeList )
                try {
                  push.apply(
                    (arr = slice.call(preferredDoc.childNodes)),
                    preferredDoc.childNodes
                  );

                  // Support: Android<4.0
                  // Detect silently failing push.apply
                  // eslint-disable-next-line no-unused-expressions
                  arr[preferredDoc.childNodes.length].nodeType;
                } catch (e) {
                  push = {
                    apply: arr.length
                      ? // Leverage slice if possible
                      function (target, els) {
                        pushNative.apply(target, slice.call(els));
                      }
                      : // Support: IE<9
                      // Otherwise append directly
                      function (target, els) {
                        var j = target.length,
                          i = 0;

                        // Can't trust NodeList.length
                        while ((target[j++] = els[i++])) { }
                        target.length = j - 1;
                      },
                  };
                }

                function Sizzle(selector, context, results, seed) {
                  var m,
                    i,
                    elem,
                    nid,
                    match,
                    groups,
                    newSelector,
                    newContext = context && context.ownerDocument,
                    // nodeType defaults to 9, since context defaults to document
                    nodeType = context ? context.nodeType : 9;

                  results = results || [];

                  // Return early from calls with invalid selector or context
                  if (
                    typeof selector !== "string" ||
                    !selector ||
                    (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
                  ) {
                    return results;
                  }

                  // Try to shortcut find operations (as opposed to filters) in HTML documents
                  if (!seed) {
                    setDocument(context);
                    context = context || document;

                    if (documentIsHTML) {
                      // If the selector is sufficiently simple, try using a "get*By*" DOM method
                      // (excepting DocumentFragment context, where the methods don't exist)
                      if (
                        nodeType !== 11 &&
                        (match = rquickExpr.exec(selector))
                      ) {
                        // ID selector
                        if ((m = match[1])) {
                          // Document context
                          if (nodeType === 9) {
                            if ((elem = context.getElementById(m))) {
                              // Support: IE, Opera, Webkit
                              // TODO: identify versions
                              // getElementById can match elements by name instead of ID
                              if (elem.id === m) {
                                results.push(elem);
                                return results;
                              }
                            } else {
                              return results;
                            }

                            // Element context
                          } else {
                            // Support: IE, Opera, Webkit
                            // TODO: identify versions
                            // getElementById can match elements by name instead of ID
                            if (
                              newContext &&
                              (elem = newContext.getElementById(m)) &&
                              contains(context, elem) &&
                              elem.id === m
                            ) {
                              results.push(elem);
                              return results;
                            }
                          }

                          // Type selector
                        } else if (match[2]) {
                          push.apply(
                            results,
                            context.getElementsByTagName(selector)
                          );
                          return results;

                          // Class selector
                        } else if (
                          (m = match[3]) &&
                          support.getElementsByClassName &&
                          context.getElementsByClassName
                        ) {
                          push.apply(
                            results,
                            context.getElementsByClassName(m)
                          );
                          return results;
                        }
                      }

                      // Take advantage of querySelectorAll
                      if (
                        support.qsa &&
                        !nonnativeSelectorCache[selector + " "] &&
                        (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
                        // Support: IE 8 only
                        // Exclude object elements
                        (nodeType !== 1 ||
                          context.nodeName.toLowerCase() !== "object")
                      ) {
                        newSelector = selector;
                        newContext = context;

                        // qSA considers elements outside a scoping root when evaluating child or
                        // descendant combinators, which is not what we want.
                        // In such cases, we work around the behavior by prefixing every selector in the
                        // list with an ID selector referencing the scope context.
                        // The technique has to be used as well when a leading combinator is used
                        // as such selectors are not recognized by querySelectorAll.
                        // Thanks to Andrew Dupont for this technique.
                        if (
                          nodeType === 1 &&
                          (rdescend.test(selector) ||
                            rcombinators.test(selector))
                        ) {
                          // Expand context for sibling selectors
                          newContext =
                            (rsibling.test(selector) &&
                              testContext(context.parentNode)) ||
                            context;

                          // We can use :scope instead of the ID hack if the browser
                          // supports it & if we're not changing the context.
                          if (newContext !== context || !support.scope) {
                            // Capture the context ID, setting it first if necessary
                            if ((nid = context.getAttribute("id"))) {
                              nid = nid.replace(rcssescape, fcssescape);
                            } else {
                              context.setAttribute("id", (nid = expando));
                            }
                          }

                          // Prefix every selector in the list
                          groups = tokenize(selector);
                          i = groups.length;
                          while (i--) {
                            groups[i] =
                              (nid ? "#" + nid : ":scope") +
                              " " +
                              toSelector(groups[i]);
                          }
                          newSelector = groups.join(",");
                        }

                        try {
                          push.apply(
                            results,
                            newContext.querySelectorAll(newSelector)
                          );
                          return results;
                        } catch (qsaError) {
                          nonnativeSelectorCache(selector, true);
                        } finally {
                          if (nid === expando) {
                            context.removeAttribute("id");
                          }
                        }
                      }
                    }
                  }

                  // All others
                  return select(
                    selector.replace(rtrim, "$1"),
                    context,
                    results,
                    seed
                  );
                }

                /**
                 * Create key-value caches of limited size
                 * @returns {function(string, object)} Returns the Object data after storing it on itself with
                 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
                 *	deleting the oldest entry
                 */
                function createCache() {
                  var keys = [];

                  function cache(key, value) {
                    // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                    if (keys.push(key + " ") > Expr.cacheLength) {
                      // Only keep the most recent entries
                      delete cache[keys.shift()];
                    }
                    return (cache[key + " "] = value);
                  }
                  return cache;
                }

                /**
                 * Mark a function for special use by Sizzle
                 * @param {Function} fn The function to mark
                 */
                function markFunction(fn) {
                  fn[expando] = true;
                  return fn;
                }

                /**
                 * Support testing using an element
                 * @param {Function} fn Passed the created element and returns a boolean result
                 */
                function assert(fn) {
                  var el = document.createElement("fieldset");

                  try {
                    return !!fn(el);
                  } catch (e) {
                    return false;
                  } finally {
                    // Remove from its parent by default
                    if (el.parentNode) {
                      el.parentNode.removeChild(el);
                    }

                    // release memory in IE
                    el = null;
                  }
                }

                /**
                 * Adds the same handler for all of the specified attrs
                 * @param {String} attrs Pipe-separated list of attributes
                 * @param {Function} handler The method that will be applied
                 */
                function addHandle(attrs, handler) {
                  var arr = attrs.split("|"),
                    i = arr.length;

                  while (i--) {
                    Expr.attrHandle[arr[i]] = handler;
                  }
                }

                /**
                 * Checks document order of two siblings
                 * @param {Element} a
                 * @param {Element} b
                 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
                 */
                function siblingCheck(a, b) {
                  var cur = b && a,
                    diff =
                      cur &&
                      a.nodeType === 1 &&
                      b.nodeType === 1 &&
                      a.sourceIndex - b.sourceIndex;

                  // Use IE sourceIndex if available on both nodes
                  if (diff) {
                    return diff;
                  }

                  // Check if b follows a
                  if (cur) {
                    while ((cur = cur.nextSibling)) {
                      if (cur === b) {
                        return -1;
                      }
                    }
                  }

                  return a ? 1 : -1;
                }

                /**
                 * Returns a function to use in pseudos for input types
                 * @param {String} type
                 */
                function createInputPseudo(type) {
                  return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                  };
                }

                /**
                 * Returns a function to use in pseudos for buttons
                 * @param {String} type
                 */
                function createButtonPseudo(type) {
                  return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (
                      (name === "input" || name === "button") &&
                      elem.type === type
                    );
                  };
                }

                /**
                 * Returns a function to use in pseudos for :enabled/:disabled
                 * @param {Boolean} disabled true for :disabled; false for :enabled
                 */
                function createDisabledPseudo(disabled) {
                  // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                  return function (elem) {
                    // Only certain elements can match :enabled or :disabled
                    // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                    // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                    if ("form" in elem) {
                      // Check for inherited disabledness on relevant non-disabled elements:
                      // * listed form-associated elements in a disabled fieldset
                      //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                      //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                      // * option elements in a disabled optgroup
                      //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                      // All such elements have a "form" property.
                      if (elem.parentNode && elem.disabled === false) {
                        // Option elements defer to a parent optgroup if present
                        if ("label" in elem) {
                          if ("label" in elem.parentNode) {
                            return elem.parentNode.disabled === disabled;
                          } else {
                            return elem.disabled === disabled;
                          }
                        }

                        // Support: IE 6 - 11
                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                        return (
                          elem.isDisabled === disabled ||
                          // Where there is no isDisabled, check manually
                          /* jshint -W018 */
                          (elem.isDisabled !== !disabled &&
                            inDisabledFieldset(elem) === disabled)
                        );
                      }

                      return elem.disabled === disabled;

                      // Try to winnow out elements that can't be disabled before trusting the disabled property.
                      // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                      // even exist on them, let alone have a boolean value.
                    } else if ("label" in elem) {
                      return elem.disabled === disabled;
                    }

                    // Remaining elements are neither :enabled nor :disabled
                    return false;
                  };
                }

                /**
                 * Returns a function to use in pseudos for positionals
                 * @param {Function} fn
                 */
                function createPositionalPseudo(fn) {
                  return markFunction(function (argument) {
                    argument = +argument;
                    return markFunction(function (seed, matches) {
                      var j,
                        matchIndexes = fn([], seed.length, argument),
                        i = matchIndexes.length;

                      // Match elements found at the specified indexes
                      while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                          seed[j] = !(matches[j] = seed[j]);
                        }
                      }
                    });
                  });
                }

                /**
                 * Checks a node for validity as a Sizzle context
                 * @param {Element|Object=} context
                 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
                 */
                function testContext(context) {
                  return (
                    context &&
                    typeof context.getElementsByTagName !== "undefined" &&
                    context
                  );
                }

                // Expose support vars for convenience
                support = Sizzle.support = {};

                /**
                 * Detects XML nodes
                 * @param {Element|Object} elem An element or a document
                 * @returns {Boolean} True iff elem is a non-HTML XML node
                 */
                isXML = Sizzle.isXML = function (elem) {
                  var namespace = elem && elem.namespaceURI,
                    docElem =
                      elem && (elem.ownerDocument || elem).documentElement;

                  // Support: IE <=8
                  // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
                  // https://bugs.jquery.com/ticket/4833
                  return !rhtml.test(
                    namespace || (docElem && docElem.nodeName) || "HTML"
                  );
                };

                /**
                 * Sets document-related variables once based on the current document
                 * @param {Element|Object} [doc] An element or document object to use to set the document
                 * @returns {Object} Returns the current document
                 */
                setDocument = Sizzle.setDocument = function (node) {
                  var hasCompare,
                    subWindow,
                    doc = node ? node.ownerDocument || node : preferredDoc;

                  // Return early if doc is invalid or already selected
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  if (
                    doc == document ||
                    doc.nodeType !== 9 ||
                    !doc.documentElement
                  ) {
                    return document;
                  }

                  // Update global variables
                  document = doc;
                  docElem = document.documentElement;
                  documentIsHTML = !isXML(document);

                  // Support: IE 9 - 11+, Edge 12 - 18+
                  // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  if (
                    preferredDoc != document &&
                    (subWindow = document.defaultView) &&
                    subWindow.top !== subWindow
                  ) {
                    // Support: IE 11, Edge
                    if (subWindow.addEventListener) {
                      subWindow.addEventListener(
                        "unload",
                        unloadHandler,
                        false
                      );

                      // Support: IE 9 - 10 only
                    } else if (subWindow.attachEvent) {
                      subWindow.attachEvent("onunload", unloadHandler);
                    }
                  }

                  // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
                  // Safari 4 - 5 only, Opera <=11.6 - 12.x only
                  // IE/Edge & older browsers don't support the :scope pseudo-class.
                  // Support: Safari 6.0 only
                  // Safari 6.0 supports :scope but it's an alias of :root there.
                  support.scope = assert(function (el) {
                    docElem
                      .appendChild(el)
                      .appendChild(document.createElement("div"));
                    return (
                      typeof el.querySelectorAll !== "undefined" &&
                      !el.querySelectorAll(":scope fieldset div").length
                    );
                  });

                  /* Attributes
  ---------------------------------------------------------------------- */

                  // Support: IE<8
                  // Verify that getAttribute really returns attributes and not properties
                  // (excepting IE8 booleans)
                  support.attributes = assert(function (el) {
                    el.className = "i";
                    return !el.getAttribute("className");
                  });

                  /* getElement(s)By*
  ---------------------------------------------------------------------- */

                  // Check if getElementsByTagName("*") returns only elements
                  support.getElementsByTagName = assert(function (el) {
                    el.appendChild(document.createComment(""));
                    return !el.getElementsByTagName("*").length;
                  });

                  // Support: IE<9
                  support.getElementsByClassName = rnative.test(
                    document.getElementsByClassName
                  );

                  // Support: IE<10
                  // Check if getElementById returns elements by name
                  // The broken getElementById methods don't pick up programmatically-set names,
                  // so use a roundabout getElementsByName test
                  support.getById = assert(function (el) {
                    docElem.appendChild(el).id = expando;
                    return (
                      !document.getElementsByName ||
                      !document.getElementsByName(expando).length
                    );
                  });

                  // ID filter and find
                  if (support.getById) {
                    Expr.filter["ID"] = function (id) {
                      var attrId = id.replace(runescape, funescape);
                      return function (elem) {
                        return elem.getAttribute("id") === attrId;
                      };
                    };
                    Expr.find["ID"] = function (id, context) {
                      if (
                        typeof context.getElementById !== "undefined" &&
                        documentIsHTML
                      ) {
                        var elem = context.getElementById(id);
                        return elem ? [elem] : [];
                      }
                    };
                  } else {
                    Expr.filter["ID"] = function (id) {
                      var attrId = id.replace(runescape, funescape);
                      return function (elem) {
                        var node =
                          typeof elem.getAttributeNode !== "undefined" &&
                          elem.getAttributeNode("id");
                        return node && node.value === attrId;
                      };
                    };

                    // Support: IE 6 - 7 only
                    // getElementById is not reliable as a find shortcut
                    Expr.find["ID"] = function (id, context) {
                      if (
                        typeof context.getElementById !== "undefined" &&
                        documentIsHTML
                      ) {
                        var node,
                          i,
                          elems,
                          elem = context.getElementById(id);

                        if (elem) {
                          // Verify the id attribute
                          node = elem.getAttributeNode("id");
                          if (node && node.value === id) {
                            return [elem];
                          }

                          // Fall back on getElementsByName
                          elems = context.getElementsByName(id);
                          i = 0;
                          while ((elem = elems[i++])) {
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) {
                              return [elem];
                            }
                          }
                        }

                        return [];
                      }
                    };
                  }

                  // Tag
                  Expr.find["TAG"] = support.getElementsByTagName
                    ? function (tag, context) {
                      if (
                        typeof context.getElementsByTagName !== "undefined"
                      ) {
                        return context.getElementsByTagName(tag);

                        // DocumentFragment nodes don't have gEBTN
                      } else if (support.qsa) {
                        return context.querySelectorAll(tag);
                      }
                    }
                    : function (tag, context) {
                      var elem,
                        tmp = [],
                        i = 0,
                        // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                        results = context.getElementsByTagName(tag);

                      // Filter out possible comments
                      if (tag === "*") {
                        while ((elem = results[i++])) {
                          if (elem.nodeType === 1) {
                            tmp.push(elem);
                          }
                        }

                        return tmp;
                      }
                      return results;
                    };

                  // Class
                  Expr.find["CLASS"] =
                    support.getElementsByClassName &&
                    function (className, context) {
                      if (
                        typeof context.getElementsByClassName !== "undefined" &&
                        documentIsHTML
                      ) {
                        return context.getElementsByClassName(className);
                      }
                    };

                  /* QSA/matchesSelector
  ---------------------------------------------------------------------- */

                  // QSA and matchesSelector support

                  // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                  rbuggyMatches = [];

                  // qSa(:focus) reports false when true (Chrome 21)
                  // We allow this because of a bug in IE8/9 that throws an error
                  // whenever `document.activeElement` is accessed on an iframe
                  // So, we allow :focus to pass through QSA all the time to avoid the IE error
                  // See https://bugs.jquery.com/ticket/13378
                  rbuggyQSA = [];

                  if ((support.qsa = rnative.test(document.querySelectorAll))) {
                    // Build QSA regex
                    // Regex strategy adopted from Diego Perini
                    assert(function (el) {
                      var input;

                      // Select is set to empty string on purpose
                      // This is to test IE's treatment of not explicitly
                      // setting a boolean content attribute,
                      // since its presence should be enough
                      // https://bugs.jquery.com/ticket/12359
                      docElem.appendChild(el).innerHTML =
                        "<a id='" +
                        expando +
                        "'></a>" +
                        "<select id='" +
                        expando +
                        "-\r\\' msallowcapture=''>" +
                        "<option selected=''></option></select>";

                      // Support: IE8, Opera 11-12.16
                      // Nothing should be selected when empty strings follow ^= or $= or *=
                      // The test attribute must be unknown in Opera but "safe" for WinRT
                      // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                      if (el.querySelectorAll("[msallowcapture^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                      }

                      // Support: IE8
                      // Boolean attributes and "value" are not treated correctly
                      if (!el.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push(
                          "\\[" + whitespace + "*(?:value|" + booleans + ")"
                        );
                      }

                      // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                      if (
                        !el.querySelectorAll("[id~=" + expando + "-]").length
                      ) {
                        rbuggyQSA.push("~=");
                      }

                      // Support: IE 11+, Edge 15 - 18+
                      // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                      // Adding a temporary attribute to the document before the selection works
                      // around the issue.
                      // Interestingly, IE 10 & older don't seem to have the issue.
                      input = document.createElement("input");
                      input.setAttribute("name", "");
                      el.appendChild(input);
                      if (!el.querySelectorAll("[name='']").length) {
                        rbuggyQSA.push(
                          "\\[" +
                          whitespace +
                          "*name" +
                          whitespace +
                          "*=" +
                          whitespace +
                          "*(?:''|\"\")"
                        );
                      }

                      // Webkit/Opera - :checked should return selected option elements
                      // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                      // IE8 throws error here and will not see later tests
                      if (!el.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                      }

                      // Support: Safari 8+, iOS 8+
                      // https://bugs.webkit.org/show_bug.cgi?id=136851
                      // In-page `selector#id sibling-combinator selector` fails
                      if (!el.querySelectorAll("a#" + expando + "+*").length) {
                        rbuggyQSA.push(".#.+[+~]");
                      }

                      // Support: Firefox <=3.6 - 5 only
                      // Old Firefox doesn't throw on a badly-escaped identifier.
                      el.querySelectorAll("\\\f");
                      rbuggyQSA.push("[\\r\\n\\f]");
                    });

                    assert(function (el) {
                      el.innerHTML =
                        "<a href='' disabled='disabled'></a>" +
                        "<select disabled='disabled'><option/></select>";

                      // Support: Windows 8 Native Apps
                      // The type and name attributes are restricted during .innerHTML assignment
                      var input = document.createElement("input");
                      input.setAttribute("type", "hidden");
                      el.appendChild(input).setAttribute("name", "D");

                      // Support: IE8
                      // Enforce case-sensitivity of name attribute
                      if (el.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                      }

                      // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                      // IE8 throws error here and will not see later tests
                      if (el.querySelectorAll(":enabled").length !== 2) {
                        rbuggyQSA.push(":enabled", ":disabled");
                      }

                      // Support: IE9-11+
                      // IE's :disabled selector does not pick up the children of disabled fieldsets
                      docElem.appendChild(el).disabled = true;
                      if (el.querySelectorAll(":disabled").length !== 2) {
                        rbuggyQSA.push(":enabled", ":disabled");
                      }

                      // Support: Opera 10 - 11 only
                      // Opera 10-11 does not throw on post-comma invalid pseudos
                      el.querySelectorAll("*,:x");
                      rbuggyQSA.push(",.*:");
                    });
                  }

                  if (
                    (support.matchesSelector = rnative.test(
                      (matches =
                        docElem.matches ||
                        docElem.webkitMatchesSelector ||
                        docElem.mozMatchesSelector ||
                        docElem.oMatchesSelector ||
                        docElem.msMatchesSelector)
                    ))
                  ) {
                    assert(function (el) {
                      // Check to see if it's possible to do matchesSelector
                      // on a disconnected node (IE 9)
                      support.disconnectedMatch = matches.call(el, "*");

                      // This should fail with an exception
                      // Gecko does not error, returns false instead
                      matches.call(el, "[s!='']:x");
                      rbuggyMatches.push("!=", pseudos);
                    });
                  }

                  rbuggyQSA =
                    rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                  rbuggyMatches =
                    rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                  /* Contains
  ---------------------------------------------------------------------- */
                  hasCompare = rnative.test(docElem.compareDocumentPosition);

                  // Element contains another
                  // Purposefully self-exclusive
                  // As in, an element does not contain itself
                  contains =
                    hasCompare || rnative.test(docElem.contains)
                      ? function (a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                          bup = b && b.parentNode;
                        return (
                          a === bup ||
                          !!(
                            bup &&
                            bup.nodeType === 1 &&
                            (adown.contains
                              ? adown.contains(bup)
                              : a.compareDocumentPosition &&
                              a.compareDocumentPosition(bup) & 16)
                          )
                        );
                      }
                      : function (a, b) {
                        if (b) {
                          while ((b = b.parentNode)) {
                            if (b === a) {
                              return true;
                            }
                          }
                        }
                        return false;
                      };

                  /* Sorting
  ---------------------------------------------------------------------- */

                  // Document order sorting
                  sortOrder = hasCompare
                    ? function (a, b) {
                      // Flag for duplicate removal
                      if (a === b) {
                        hasDuplicate = true;
                        return 0;
                      }

                      // Sort on method existence if only one input has compareDocumentPosition
                      var compare =
                        !a.compareDocumentPosition -
                        !b.compareDocumentPosition;
                      if (compare) {
                        return compare;
                      }

                      // Calculate position if both inputs belong to the same document
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      compare =
                        (a.ownerDocument || a) == (b.ownerDocument || b)
                          ? a.compareDocumentPosition(b)
                          : // Otherwise we know they are disconnected
                          1;

                      // Disconnected nodes
                      if (
                        compare & 1 ||
                        (!support.sortDetached &&
                          b.compareDocumentPosition(a) === compare)
                      ) {
                        // Choose the first element that is related to our preferred document
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (
                          a == document ||
                          (a.ownerDocument == preferredDoc &&
                            contains(preferredDoc, a))
                        ) {
                          return -1;
                        }

                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (
                          b == document ||
                          (b.ownerDocument == preferredDoc &&
                            contains(preferredDoc, b))
                        ) {
                          return 1;
                        }

                        // Maintain original order
                        return sortInput
                          ? indexOf(sortInput, a) - indexOf(sortInput, b)
                          : 0;
                      }

                      return compare & 4 ? -1 : 1;
                    }
                    : function (a, b) {
                      // Exit early if the nodes are identical
                      if (a === b) {
                        hasDuplicate = true;
                        return 0;
                      }

                      var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [a],
                        bp = [b];

                      // Parentless nodes are either documents or disconnected
                      if (!aup || !bup) {
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        /* eslint-disable eqeqeq */
                        return a == document
                          ? -1
                          : b == document
                            ? 1
                            : /* eslint-enable eqeqeq */
                            aup
                              ? -1
                              : bup
                                ? 1
                                : sortInput
                                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                                  : 0;

                        // If the nodes are siblings, we can do a quick check
                      } else if (aup === bup) {
                        return siblingCheck(a, b);
                      }

                      // Otherwise we need full lists of their ancestors for comparison
                      cur = a;
                      while ((cur = cur.parentNode)) {
                        ap.unshift(cur);
                      }
                      cur = b;
                      while ((cur = cur.parentNode)) {
                        bp.unshift(cur);
                      }

                      // Walk down the tree looking for a discrepancy
                      while (ap[i] === bp[i]) {
                        i++;
                      }

                      return i
                        ? // Do a sibling check if the nodes have a common ancestor
                        siblingCheck(ap[i], bp[i])
                        : // Otherwise nodes in our document sort first
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        /* eslint-disable eqeqeq */
                        ap[i] == preferredDoc
                          ? -1
                          : bp[i] == preferredDoc
                            ? 1
                            : /* eslint-enable eqeqeq */
                            0;
                    };

                  return document;
                };

                Sizzle.matches = function (expr, elements) {
                  return Sizzle(expr, null, null, elements);
                };

                Sizzle.matchesSelector = function (elem, expr) {
                  setDocument(elem);

                  if (
                    support.matchesSelector &&
                    documentIsHTML &&
                    !nonnativeSelectorCache[expr + " "] &&
                    (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                    (!rbuggyQSA || !rbuggyQSA.test(expr))
                  ) {
                    try {
                      var ret = matches.call(elem, expr);

                      // IE 9's matchesSelector returns false on disconnected nodes
                      if (
                        ret ||
                        support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        (elem.document && elem.document.nodeType !== 11)
                      ) {
                        return ret;
                      }
                    } catch (e) {
                      nonnativeSelectorCache(expr, true);
                    }
                  }

                  return Sizzle(expr, document, null, [elem]).length > 0;
                };

                Sizzle.contains = function (context, elem) {
                  // Set document vars if needed
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  if ((context.ownerDocument || context) != document) {
                    setDocument(context);
                  }
                  return contains(context, elem);
                };

                Sizzle.attr = function (elem, name) {
                  // Set document vars if needed
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  if ((elem.ownerDocument || elem) != document) {
                    setDocument(elem);
                  }

                  var fn = Expr.attrHandle[name.toLowerCase()],
                    // Don't get fooled by Object.prototype properties (jQuery #13807)
                    val =
                      fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                        ? fn(elem, name, !documentIsHTML)
                        : undefined;

                  return val !== undefined
                    ? val
                    : support.attributes || !documentIsHTML
                      ? elem.getAttribute(name)
                      : (val = elem.getAttributeNode(name)) && val.specified
                        ? val.value
                        : null;
                };

                Sizzle.escape = function (sel) {
                  return (sel + "").replace(rcssescape, fcssescape);
                };

                Sizzle.error = function (msg) {
                  throw new Error(
                    "Syntax error, unrecognized expression: " + msg
                  );
                };

                /**
                 * Document sorting and removing duplicates
                 * @param {ArrayLike} results
                 */
                Sizzle.uniqueSort = function (results) {
                  var elem,
                    duplicates = [],
                    j = 0,
                    i = 0;

                  // Unless we *know* we can detect duplicates, assume their presence
                  hasDuplicate = !support.detectDuplicates;
                  sortInput = !support.sortStable && results.slice(0);
                  results.sort(sortOrder);

                  if (hasDuplicate) {
                    while ((elem = results[i++])) {
                      if (elem === results[i]) {
                        j = duplicates.push(i);
                      }
                    }
                    while (j--) {
                      results.splice(duplicates[j], 1);
                    }
                  }

                  // Clear input after sorting to release objects
                  // See https://github.com/jquery/sizzle/pull/225
                  sortInput = null;

                  return results;
                };

                /**
                 * Utility function for retrieving the text value of an array of DOM nodes
                 * @param {Array|Element} elem
                 */
                getText = Sizzle.getText = function (elem) {
                  var node,
                    ret = "",
                    i = 0,
                    nodeType = elem.nodeType;

                  if (!nodeType) {
                    // If no nodeType, this is expected to be an array
                    while ((node = elem[i++])) {
                      // Do not traverse comment nodes
                      ret += getText(node);
                    }
                  } else if (
                    nodeType === 1 ||
                    nodeType === 9 ||
                    nodeType === 11
                  ) {
                    // Use textContent for elements
                    // innerText usage removed for consistency of new lines (jQuery #11153)
                    if (typeof elem.textContent === "string") {
                      return elem.textContent;
                    } else {
                      // Traverse its children
                      for (
                        elem = elem.firstChild;
                        elem;
                        elem = elem.nextSibling
                      ) {
                        ret += getText(elem);
                      }
                    }
                  } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                  }

                  // Do not include comment or processing instruction nodes

                  return ret;
                };

                Expr = Sizzle.selectors = {
                  // Can be adjusted by the user
                  cacheLength: 50,

                  createPseudo: markFunction,

                  match: matchExpr,

                  attrHandle: {},

                  find: {},

                  relative: {
                    ">": { dir: "parentNode", first: true },
                    " ": { dir: "parentNode" },
                    "+": { dir: "previousSibling", first: true },
                    "~": { dir: "previousSibling" },
                  },

                  preFilter: {
                    ATTR: function (match) {
                      match[1] = match[1].replace(runescape, funescape);

                      // Move the given value to match[3] whether quoted or unquoted
                      match[3] = (
                        match[3] ||
                        match[4] ||
                        match[5] ||
                        ""
                      ).replace(runescape, funescape);

                      if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                      }

                      return match.slice(0, 4);
                    },

                    CHILD: function (match) {
                      /* matches from matchExpr["CHILD"]
        1 type (only|nth|...)
        2 what (child|of-type)
        3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
        4 xn-component of xn+y argument ([+-]?\d*n|)
        5 sign of xn-component
        6 x of xn-component
        7 sign of y-component
        8 y of y-component
      */
                      match[1] = match[1].toLowerCase();

                      if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) {
                          Sizzle.error(match[0]);
                        }

                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4]
                          ? match[5] + (match[6] || 1)
                          : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");

                        // other types prohibit arguments
                      } else if (match[3]) {
                        Sizzle.error(match[0]);
                      }

                      return match;
                    },

                    PSEUDO: function (match) {
                      var excess,
                        unquoted = !match[6] && match[2];

                      if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                      }

                      // Accept quoted arguments as-is
                      if (match[3]) {
                        match[2] = match[4] || match[5] || "";

                        // Strip excess characters from unquoted arguments
                      } else if (
                        unquoted &&
                        rpseudo.test(unquoted) &&
                        // Get excess from tokenize (recursively)
                        (excess = tokenize(unquoted, true)) &&
                        // advance to the next closing parenthesis
                        (excess =
                          unquoted.indexOf(")", unquoted.length - excess) -
                          unquoted.length)
                      ) {
                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                      }

                      // Return only captures needed by the pseudo filter method (type and argument)
                      return match.slice(0, 3);
                    },
                  },

                  filter: {
                    TAG: function (nodeNameSelector) {
                      var nodeName = nodeNameSelector
                        .replace(runescape, funescape)
                        .toLowerCase();
                      return nodeNameSelector === "*"
                        ? function () {
                          return true;
                        }
                        : function (elem) {
                          return (
                            elem.nodeName &&
                            elem.nodeName.toLowerCase() === nodeName
                          );
                        };
                    },

                    CLASS: function (className) {
                      var pattern = classCache[className + " "];

                      return (
                        pattern ||
                        ((pattern = new RegExp(
                          "(^|" +
                          whitespace +
                          ")" +
                          className +
                          "(" +
                          whitespace +
                          "|$)"
                        )) &&
                          classCache(className, function (elem) {
                            return pattern.test(
                              (typeof elem.className === "string" &&
                                elem.className) ||
                              (typeof elem.getAttribute !== "undefined" &&
                                elem.getAttribute("class")) ||
                              ""
                            );
                          }))
                      );
                    },

                    ATTR: function (name, operator, check) {
                      return function (elem) {
                        var result = Sizzle.attr(elem, name);

                        if (result == null) {
                          return operator === "!=";
                        }
                        if (!operator) {
                          return true;
                        }

                        result += "";

                        /* eslint-disable max-len */

                        return operator === "="
                          ? result === check
                          : operator === "!="
                            ? result !== check
                            : operator === "^="
                              ? check && result.indexOf(check) === 0
                              : operator === "*="
                                ? check && result.indexOf(check) > -1
                                : operator === "$="
                                  ? check && result.slice(-check.length) === check
                                  : operator === "~="
                                    ? (
                                      " " +
                                      result.replace(rwhitespace, " ") +
                                      " "
                                    ).indexOf(check) > -1
                                    : operator === "|="
                                      ? result === check ||
                                      result.slice(0, check.length + 1) === check + "-"
                                      : false;
                        /* eslint-enable max-len */
                      };
                    },

                    CHILD: function (type, what, _argument, first, last) {
                      var simple = type.slice(0, 3) !== "nth",
                        forward = type.slice(-4) !== "last",
                        ofType = what === "of-type";

                      return first === 1 && last === 0
                        ? // Shortcut for :nth-*(n)
                        function (elem) {
                          return !!elem.parentNode;
                        }
                        : function (elem, _context, xml) {
                          var cache,
                            uniqueCache,
                            outerCache,
                            node,
                            nodeIndex,
                            start,
                            dir =
                              simple !== forward
                                ? "nextSibling"
                                : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType,
                            diff = false;

                          if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                              while (dir) {
                                node = elem;
                                while ((node = node[dir])) {
                                  if (
                                    ofType
                                      ? node.nodeName.toLowerCase() === name
                                      : node.nodeType === 1
                                  ) {
                                    return false;
                                  }
                                }

                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir =
                                  type === "only" && !start && "nextSibling";
                              }
                              return true;
                            }

                            start = [
                              forward ? parent.firstChild : parent.lastChild,
                            ];

                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                              // Seek `elem` from a previously-cached index

                              // ...in a gzip-friendly way
                              node = parent;
                              outerCache =
                                node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache =
                                outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              cache = uniqueCache[type] || [];
                              nodeIndex = cache[0] === dirruns && cache[1];
                              diff = nodeIndex && cache[2];
                              node =
                                nodeIndex && parent.childNodes[nodeIndex];

                              while (
                                (node =
                                  (++nodeIndex && node && node[dir]) ||
                                  // Fallback to seeking `elem` from the start
                                  (diff = nodeIndex = 0) ||
                                  start.pop())
                              ) {
                                // When found, cache indexes on `parent` and break
                                if (
                                  node.nodeType === 1 &&
                                  ++diff &&
                                  node === elem
                                ) {
                                  uniqueCache[type] = [
                                    dirruns,
                                    nodeIndex,
                                    diff,
                                  ];
                                  break;
                                }
                              }
                            } else {
                              // Use previously-cached element index if available
                              if (useCache) {
                                // ...in a gzip-friendly way
                                node = elem;
                                outerCache =
                                  node[expando] || (node[expando] = {});

                                // Support: IE <9 only
                                // Defend against cloned attroperties (jQuery gh-1709)
                                uniqueCache =
                                  outerCache[node.uniqueID] ||
                                  (outerCache[node.uniqueID] = {});

                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex;
                              }

                              // xml :nth-child(...)
                              // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                              if (diff === false) {
                                // Use the same loop as above to seek `elem` from the start
                                while (
                                  (node =
                                    (++nodeIndex && node && node[dir]) ||
                                    (diff = nodeIndex = 0) ||
                                    start.pop())
                                ) {
                                  if (
                                    (ofType
                                      ? node.nodeName.toLowerCase() === name
                                      : node.nodeType === 1) &&
                                    ++diff
                                  ) {
                                    // Cache the index of each encountered element
                                    if (useCache) {
                                      outerCache =
                                        node[expando] || (node[expando] = {});

                                      // Support: IE <9 only
                                      // Defend against cloned attroperties (jQuery gh-1709)
                                      uniqueCache =
                                        outerCache[node.uniqueID] ||
                                        (outerCache[node.uniqueID] = {});

                                      uniqueCache[type] = [dirruns, diff];
                                    }

                                    if (node === elem) {
                                      break;
                                    }
                                  }
                                }
                              }
                            }

                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return (
                              diff === first ||
                              (diff % first === 0 && diff / first >= 0)
                            );
                          }
                        };
                    },

                    PSEUDO: function (pseudo, argument) {
                      // pseudo-class names are case-insensitive
                      // http://www.w3.org/TR/selectors/#pseudo-classes
                      // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                      // Remember that setFilters inherits from pseudos
                      var args,
                        fn =
                          Expr.pseudos[pseudo] ||
                          Expr.setFilters[pseudo.toLowerCase()] ||
                          Sizzle.error("unsupported pseudo: " + pseudo);

                      // The user may use createPseudo to indicate that
                      // arguments are needed to create the filter function
                      // just as Sizzle does
                      if (fn[expando]) {
                        return fn(argument);
                      }

                      // But maintain support for old signatures
                      if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(
                          pseudo.toLowerCase()
                        )
                          ? markFunction(function (seed, matches) {
                            var idx,
                              matched = fn(seed, argument),
                              i = matched.length;
                            while (i--) {
                              idx = indexOf(seed, matched[i]);
                              seed[idx] = !(matches[idx] = matched[i]);
                            }
                          })
                          : function (elem) {
                            return fn(elem, 0, args);
                          };
                      }

                      return fn;
                    },
                  },

                  pseudos: {
                    // Potentially complex pseudos
                    not: markFunction(function (selector) {
                      // Trim the selector passed to compile
                      // to avoid treating leading and trailing
                      // spaces as combinators
                      var input = [],
                        results = [],
                        matcher = compile(selector.replace(rtrim, "$1"));

                      return matcher[expando]
                        ? markFunction(function (seed, matches, _context, xml) {
                          var elem,
                            unmatched = matcher(seed, null, xml, []),
                            i = seed.length;

                          // Match elements unmatched by `matcher`
                          while (i--) {
                            if ((elem = unmatched[i])) {
                              seed[i] = !(matches[i] = elem);
                            }
                          }
                        })
                        : function (elem, _context, xml) {
                          input[0] = elem;
                          matcher(input, null, xml, results);

                          // Don't keep the element (issue #299)
                          input[0] = null;
                          return !results.pop();
                        };
                    }),

                    has: markFunction(function (selector) {
                      return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                      };
                    }),

                    contains: markFunction(function (text) {
                      text = text.replace(runescape, funescape);
                      return function (elem) {
                        return (
                          (elem.textContent || getText(elem)).indexOf(text) > -1
                        );
                      };
                    }),

                    // "Whether an element is represented by a :lang() selector
                    // is based solely on the element's language value
                    // being equal to the identifier C,
                    // or beginning with the identifier C immediately followed by "-".
                    // The matching of C against the element's language value is performed case-insensitively.
                    // The identifier C does not have to be a valid language name."
                    // http://www.w3.org/TR/selectors/#lang-pseudo
                    lang: markFunction(function (lang) {
                      // lang value must be a valid identifier
                      if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                      }
                      lang = lang.replace(runescape, funescape).toLowerCase();
                      return function (elem) {
                        var elemLang;
                        do {
                          if (
                            (elemLang = documentIsHTML
                              ? elem.lang
                              : elem.getAttribute("xml:lang") ||
                              elem.getAttribute("lang"))
                          ) {
                            elemLang = elemLang.toLowerCase();
                            return (
                              elemLang === lang ||
                              elemLang.indexOf(lang + "-") === 0
                            );
                          }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                      };
                    }),

                    // Miscellaneous
                    target: function (elem) {
                      var hash = window.location && window.location.hash;
                      return hash && hash.slice(1) === elem.id;
                    },

                    root: function (elem) {
                      return elem === docElem;
                    },

                    focus: function (elem) {
                      return (
                        elem === document.activeElement &&
                        (!document.hasFocus || document.hasFocus()) &&
                        !!(elem.type || elem.href || ~elem.tabIndex)
                      );
                    },

                    // Boolean properties
                    enabled: createDisabledPseudo(false),
                    disabled: createDisabledPseudo(true),

                    checked: function (elem) {
                      // In CSS3, :checked should return both checked and selected elements
                      // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                      var nodeName = elem.nodeName.toLowerCase();
                      return (
                        (nodeName === "input" && !!elem.checked) ||
                        (nodeName === "option" && !!elem.selected)
                      );
                    },

                    selected: function (elem) {
                      // Accessing this property makes selected-by-default
                      // options in Safari work properly
                      if (elem.parentNode) {
                        // eslint-disable-next-line no-unused-expressions
                        elem.parentNode.selectedIndex;
                      }

                      return elem.selected === true;
                    },

                    // Contents
                    empty: function (elem) {
                      // http://www.w3.org/TR/selectors/#empty-pseudo
                      // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                      //   but not by others (comment: 8; processing instruction: 7; etc.)
                      // nodeType < 6 works because attributes (2) do not appear as children
                      for (
                        elem = elem.firstChild;
                        elem;
                        elem = elem.nextSibling
                      ) {
                        if (elem.nodeType < 6) {
                          return false;
                        }
                      }
                      return true;
                    },

                    parent: function (elem) {
                      return !Expr.pseudos["empty"](elem);
                    },

                    // Element/input types
                    header: function (elem) {
                      return rheader.test(elem.nodeName);
                    },

                    input: function (elem) {
                      return rinputs.test(elem.nodeName);
                    },

                    button: function (elem) {
                      var name = elem.nodeName.toLowerCase();
                      return (
                        (name === "input" && elem.type === "button") ||
                        name === "button"
                      );
                    },

                    text: function (elem) {
                      var attr;
                      return (
                        elem.nodeName.toLowerCase() === "input" &&
                        elem.type === "text" &&
                        // Support: IE<8
                        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                        ((attr = elem.getAttribute("type")) == null ||
                          attr.toLowerCase() === "text")
                      );
                    },

                    // Position-in-collection
                    first: createPositionalPseudo(function () {
                      return [0];
                    }),

                    last: createPositionalPseudo(function (
                      _matchIndexes,
                      length
                    ) {
                      return [length - 1];
                    }),

                    eq: createPositionalPseudo(function (
                      _matchIndexes,
                      length,
                      argument
                    ) {
                      return [argument < 0 ? argument + length : argument];
                    }),

                    even: createPositionalPseudo(function (
                      matchIndexes,
                      length
                    ) {
                      var i = 0;
                      for (; i < length; i += 2) {
                        matchIndexes.push(i);
                      }
                      return matchIndexes;
                    }),

                    odd: createPositionalPseudo(function (
                      matchIndexes,
                      length
                    ) {
                      var i = 1;
                      for (; i < length; i += 2) {
                        matchIndexes.push(i);
                      }
                      return matchIndexes;
                    }),

                    lt: createPositionalPseudo(function (
                      matchIndexes,
                      length,
                      argument
                    ) {
                      var i =
                        argument < 0
                          ? argument + length
                          : argument > length
                            ? length
                            : argument;
                      for (; --i >= 0;) {
                        matchIndexes.push(i);
                      }
                      return matchIndexes;
                    }),

                    gt: createPositionalPseudo(function (
                      matchIndexes,
                      length,
                      argument
                    ) {
                      var i = argument < 0 ? argument + length : argument;
                      for (; ++i < length;) {
                        matchIndexes.push(i);
                      }
                      return matchIndexes;
                    }),
                  },
                };

                Expr.pseudos["nth"] = Expr.pseudos["eq"];

                // Add button/input type pseudos
                for (i in {
                  radio: true,
                  checkbox: true,
                  file: true,
                  password: true,
                  image: true,
                }) {
                  Expr.pseudos[i] = createInputPseudo(i);
                }
                for (i in { submit: true, reset: true }) {
                  Expr.pseudos[i] = createButtonPseudo(i);
                }

                // Easy API for creating new setFilters
                function setFilters() { }
                setFilters.prototype = Expr.filters = Expr.pseudos;
                Expr.setFilters = new setFilters();

                tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                  var matched,
                    match,
                    tokens,
                    type,
                    soFar,
                    groups,
                    preFilters,
                    cached = tokenCache[selector + " "];

                  if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                  }

                  soFar = selector;
                  groups = [];
                  preFilters = Expr.preFilter;

                  while (soFar) {
                    // Comma and first run
                    if (!matched || (match = rcomma.exec(soFar))) {
                      if (match) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice(match[0].length) || soFar;
                      }
                      groups.push((tokens = []));
                    }

                    matched = false;

                    // Combinators
                    if ((match = rcombinators.exec(soFar))) {
                      matched = match.shift();
                      tokens.push({
                        value: matched,

                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " "),
                      });
                      soFar = soFar.slice(matched.length);
                    }

                    // Filters
                    for (type in Expr.filter) {
                      if (
                        (match = matchExpr[type].exec(soFar)) &&
                        (!preFilters[type] || (match = preFilters[type](match)))
                      ) {
                        matched = match.shift();
                        tokens.push({
                          value: matched,
                          type: type,
                          matches: match,
                        });
                        soFar = soFar.slice(matched.length);
                      }
                    }

                    if (!matched) {
                      break;
                    }
                  }

                  // Return the length of the invalid excess
                  // if we're just parsing
                  // Otherwise, throw an error or return tokens
                  return parseOnly
                    ? soFar.length
                    : soFar
                      ? Sizzle.error(selector)
                      : // Cache the tokens
                      tokenCache(selector, groups).slice(0);
                };

                function toSelector(tokens) {
                  var i = 0,
                    len = tokens.length,
                    selector = "";
                  for (; i < len; i++) {
                    selector += tokens[i].value;
                  }
                  return selector;
                }

                function addCombinator(matcher, combinator, base) {
                  var dir = combinator.dir,
                    skip = combinator.next,
                    key = skip || dir,
                    checkNonElements = base && key === "parentNode",
                    doneName = done++;

                  return combinator.first
                    ? // Check against closest ancestor/preceding element
                    function (elem, context, xml) {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          return matcher(elem, context, xml);
                        }
                      }
                      return false;
                    }
                    : // Check against all ancestor/preceding elements
                    function (elem, context, xml) {
                      var oldCache,
                        uniqueCache,
                        outerCache,
                        newCache = [dirruns, doneName];

                      // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                      if (xml) {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                              return true;
                            }
                          }
                        }
                      } else {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            outerCache =
                              elem[expando] || (elem[expando] = {});

                            // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)
                            uniqueCache =
                              outerCache[elem.uniqueID] ||
                              (outerCache[elem.uniqueID] = {});

                            if (
                              skip &&
                              skip === elem.nodeName.toLowerCase()
                            ) {
                              elem = elem[dir] || elem;
                            } else if (
                              (oldCache = uniqueCache[key]) &&
                              oldCache[0] === dirruns &&
                              oldCache[1] === doneName
                            ) {
                              // Assign to newCache so results back-propagate to previous elements
                              return (newCache[2] = oldCache[2]);
                            } else {
                              // Reuse newcache so results back-propagate to previous elements
                              uniqueCache[key] = newCache;

                              // A match means we're done; a fail means we have to keep checking
                              if (
                                (newCache[2] = matcher(elem, context, xml))
                              ) {
                                return true;
                              }
                            }
                          }
                        }
                      }
                      return false;
                    };
                }

                function elementMatcher(matchers) {
                  return matchers.length > 1
                    ? function (elem, context, xml) {
                      var i = matchers.length;
                      while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                          return false;
                        }
                      }
                      return true;
                    }
                    : matchers[0];
                }

                function multipleContexts(selector, contexts, results) {
                  var i = 0,
                    len = contexts.length;
                  for (; i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                  }
                  return results;
                }

                function condense(unmatched, map, filter, context, xml) {
                  var elem,
                    newUnmatched = [],
                    i = 0,
                    len = unmatched.length,
                    mapped = map != null;

                  for (; i < len; i++) {
                    if ((elem = unmatched[i])) {
                      if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                          map.push(i);
                        }
                      }
                    }
                  }

                  return newUnmatched;
                }

                function setMatcher(
                  preFilter,
                  selector,
                  matcher,
                  postFilter,
                  postFinder,
                  postSelector
                ) {
                  if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                  }
                  if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                  }
                  return markFunction(function (seed, results, context, xml) {
                    var temp,
                      i,
                      elem,
                      preMap = [],
                      postMap = [],
                      preexisting = results.length,
                      // Get initial elements from seed or context
                      elems =
                        seed ||
                        multipleContexts(
                          selector || "*",
                          context.nodeType ? [context] : context,
                          []
                        ),
                      // Prefilter to get matcher input, preserving a map for seed-results synchronization
                      matcherIn =
                        preFilter && (seed || !selector)
                          ? condense(elems, preMap, preFilter, context, xml)
                          : elems,
                      matcherOut = matcher
                        ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                        postFinder ||
                          (seed ? preFilter : preexisting || postFilter)
                          ? // ...intermediate processing is necessary
                          []
                          : // ...otherwise use results directly
                          results
                        : matcherIn;

                    // Find primary matches
                    if (matcher) {
                      matcher(matcherIn, matcherOut, context, xml);
                    }

                    // Apply postFilter
                    if (postFilter) {
                      temp = condense(matcherOut, postMap);
                      postFilter(temp, [], context, xml);

                      // Un-match failing elements by moving them back to matcherIn
                      i = temp.length;
                      while (i--) {
                        if ((elem = temp[i])) {
                          matcherOut[postMap[i]] = !(matcherIn[postMap[i]] =
                            elem);
                        }
                      }
                    }

                    if (seed) {
                      if (postFinder || preFilter) {
                        if (postFinder) {
                          // Get the final matcherOut by condensing this intermediate into postFinder contexts
                          temp = [];
                          i = matcherOut.length;
                          while (i--) {
                            if ((elem = matcherOut[i])) {
                              // Restore matcherIn since elem is not yet a final match
                              temp.push((matcherIn[i] = elem));
                            }
                          }
                          postFinder(null, (matcherOut = []), temp, xml);
                        }

                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while (i--) {
                          if (
                            (elem = matcherOut[i]) &&
                            (temp = postFinder
                              ? indexOf(seed, elem)
                              : preMap[i]) > -1
                          ) {
                            seed[temp] = !(results[temp] = elem);
                          }
                        }
                      }

                      // Add elements to results, through postFinder if defined
                    } else {
                      matcherOut = condense(
                        matcherOut === results
                          ? matcherOut.splice(preexisting, matcherOut.length)
                          : matcherOut
                      );
                      if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                      } else {
                        push.apply(results, matcherOut);
                      }
                    }
                  });
                }

                function matcherFromTokens(tokens) {
                  var checkContext,
                    matcher,
                    j,
                    len = tokens.length,
                    leadingRelative = Expr.relative[tokens[0].type],
                    implicitRelative = leadingRelative || Expr.relative[" "],
                    i = leadingRelative ? 1 : 0,
                    // The foundational matcher ensures that elements are reachable from top-level context(s)
                    matchContext = addCombinator(
                      function (elem) {
                        return elem === checkContext;
                      },
                      implicitRelative,
                      true
                    ),
                    matchAnyContext = addCombinator(
                      function (elem) {
                        return indexOf(checkContext, elem) > -1;
                      },
                      implicitRelative,
                      true
                    ),
                    matchers = [
                      function (elem, context, xml) {
                        var ret =
                          (!leadingRelative &&
                            (xml || context !== outermostContext)) ||
                          ((checkContext = context).nodeType
                            ? matchContext(elem, context, xml)
                            : matchAnyContext(elem, context, xml));

                        // Avoid hanging onto element (issue #299)
                        checkContext = null;
                        return ret;
                      },
                    ];

                  for (; i < len; i++) {
                    if ((matcher = Expr.relative[tokens[i].type])) {
                      matchers = [
                        addCombinator(elementMatcher(matchers), matcher),
                      ];
                    } else {
                      matcher = Expr.filter[tokens[i].type].apply(
                        null,
                        tokens[i].matches
                      );

                      // Return special upon seeing a positional matcher
                      if (matcher[expando]) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for (; j < len; j++) {
                          if (Expr.relative[tokens[j].type]) {
                            break;
                          }
                        }
                        return setMatcher(
                          i > 1 && elementMatcher(matchers),
                          i > 1 &&
                          toSelector(
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens
                              .slice(0, i - 1)
                              .concat({
                                value: tokens[i - 2].type === " " ? "*" : "",
                              })
                          ).replace(rtrim, "$1"),
                          matcher,
                          i < j && matcherFromTokens(tokens.slice(i, j)),
                          j < len &&
                          matcherFromTokens((tokens = tokens.slice(j))),
                          j < len && toSelector(tokens)
                        );
                      }
                      matchers.push(matcher);
                    }
                  }

                  return elementMatcher(matchers);
                }

                function matcherFromGroupMatchers(
                  elementMatchers,
                  setMatchers
                ) {
                  var bySet = setMatchers.length > 0,
                    byElement = elementMatchers.length > 0,
                    superMatcher = function (
                      seed,
                      context,
                      xml,
                      results,
                      outermost
                    ) {
                      var elem,
                        j,
                        matcher,
                        matchedCount = 0,
                        i = "0",
                        unmatched = seed && [],
                        setMatched = [],
                        contextBackup = outermostContext,
                        // We must always have either seed elements or outermost context
                        elems =
                          seed ||
                          (byElement && Expr.find["TAG"]("*", outermost)),
                        // Use integer dirruns iff this is the outermost matcher
                        dirrunsUnique = (dirruns +=
                          contextBackup == null ? 1 : Math.random() || 0.1),
                        len = elems.length;

                      if (outermost) {
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        outermostContext =
                          context == document || context || outermost;
                      }

                      // Add elements passing elementMatchers directly to results
                      // Support: IE<9, Safari
                      // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                      for (; i !== len && (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                          j = 0;

                          // Support: IE 11+, Edge 17 - 18+
                          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                          // two documents; shallow comparisons work.
                          // eslint-disable-next-line eqeqeq
                          if (!context && elem.ownerDocument != document) {
                            setDocument(elem);
                            xml = !documentIsHTML;
                          }
                          while ((matcher = elementMatchers[j++])) {
                            if (matcher(elem, context || document, xml)) {
                              results.push(elem);
                              break;
                            }
                          }
                          if (outermost) {
                            dirruns = dirrunsUnique;
                          }
                        }

                        // Track unmatched elements for set filters
                        if (bySet) {
                          // They will have gone through all possible matchers
                          if ((elem = !matcher && elem)) {
                            matchedCount--;
                          }

                          // Lengthen the array for every element, matched or not
                          if (seed) {
                            unmatched.push(elem);
                          }
                        }
                      }

                      // `i` is now the count of elements visited above, and adding it to `matchedCount`
                      // makes the latter nonnegative.
                      matchedCount += i;

                      // Apply set filters to unmatched elements
                      // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                      // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                      // no element matchers and no seed.
                      // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                      // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                      // numerically zero.
                      if (bySet && i !== matchedCount) {
                        j = 0;
                        while ((matcher = setMatchers[j++])) {
                          matcher(unmatched, setMatched, context, xml);
                        }

                        if (seed) {
                          // Reintegrate element matches to eliminate the need for sorting
                          if (matchedCount > 0) {
                            while (i--) {
                              if (!(unmatched[i] || setMatched[i])) {
                                setMatched[i] = pop.call(results);
                              }
                            }
                          }

                          // Discard index placeholder values to get only actual matches
                          setMatched = condense(setMatched);
                        }

                        // Add matches to results
                        push.apply(results, setMatched);

                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                        if (
                          outermost &&
                          !seed &&
                          setMatched.length > 0 &&
                          matchedCount + setMatchers.length > 1
                        ) {
                          Sizzle.uniqueSort(results);
                        }
                      }

                      // Override manipulation of globals by nested matchers
                      if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                      }

                      return unmatched;
                    };

                  return bySet ? markFunction(superMatcher) : superMatcher;
                }

                compile = Sizzle.compile = function (
                  selector,
                  match /* Internal Use Only */
                ) {
                  var i,
                    setMatchers = [],
                    elementMatchers = [],
                    cached = compilerCache[selector + " "];

                  if (!cached) {
                    // Generate a function of recursive functions that can be used to check each element
                    if (!match) {
                      match = tokenize(selector);
                    }
                    i = match.length;
                    while (i--) {
                      cached = matcherFromTokens(match[i]);
                      if (cached[expando]) {
                        setMatchers.push(cached);
                      } else {
                        elementMatchers.push(cached);
                      }
                    }

                    // Cache the compiled function
                    cached = compilerCache(
                      selector,
                      matcherFromGroupMatchers(elementMatchers, setMatchers)
                    );

                    // Save selector and tokenization
                    cached.selector = selector;
                  }
                  return cached;
                };

                /**
                 * A low-level selection function that works with Sizzle's compiled
                 *  selector functions
                 * @param {String|Function} selector A selector or a pre-compiled
                 *  selector function built with Sizzle.compile
                 * @param {Element} context
                 * @param {Array} [results]
                 * @param {Array} [seed] A set of elements to match against
                 */
                select = Sizzle.select = function (
                  selector,
                  context,
                  results,
                  seed
                ) {
                  var i,
                    tokens,
                    token,
                    type,
                    find,
                    compiled = typeof selector === "function" && selector,
                    match =
                      !seed &&
                      tokenize((selector = compiled.selector || selector));

                  results = results || [];

                  // Try to minimize operations if there is only one selector in the list and no seed
                  // (the latter of which guarantees us context)
                  if (match.length === 1) {
                    // Reduce context if the leading compound selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (
                      tokens.length > 2 &&
                      (token = tokens[0]).type === "ID" &&
                      context.nodeType === 9 &&
                      documentIsHTML &&
                      Expr.relative[tokens[1].type]
                    ) {
                      context = (Expr.find["ID"](
                        token.matches[0].replace(runescape, funescape),
                        context
                      ) || [])[0];
                      if (!context) {
                        return results;

                        // Precompiled matchers will still verify ancestry, so step up a level
                      } else if (compiled) {
                        context = context.parentNode;
                      }

                      selector = selector.slice(tokens.shift().value.length);
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector)
                      ? 0
                      : tokens.length;
                    while (i--) {
                      token = tokens[i];

                      // Abort if we hit a combinator
                      if (Expr.relative[(type = token.type)]) {
                        break;
                      }
                      if ((find = Expr.find[type])) {
                        // Search, expanding context for leading sibling combinators
                        if (
                          (seed = find(
                            token.matches[0].replace(runescape, funescape),
                            (rsibling.test(tokens[0].type) &&
                              testContext(context.parentNode)) ||
                            context
                          ))
                        ) {
                          // If seed is empty or no tokens remain, we can return early
                          tokens.splice(i, 1);
                          selector = seed.length && toSelector(tokens);
                          if (!selector) {
                            push.apply(results, seed);
                            return results;
                          }

                          break;
                        }
                      }
                    }
                  }

                  // Compile and execute a filtering function if one is not provided
                  // Provide `match` to avoid retokenization if we modified the selector above
                  (compiled || compile(selector, match))(
                    seed,
                    context,
                    !documentIsHTML,
                    results,
                    !context ||
                    (rsibling.test(selector) &&
                      testContext(context.parentNode)) ||
                    context
                  );
                  return results;
                };

                // One-time assignments

                // Sort stability
                support.sortStable =
                  expando.split("").sort(sortOrder).join("") === expando;

                // Support: Chrome 14-35+
                // Always assume duplicates if they aren't passed to the comparison function
                support.detectDuplicates = !!hasDuplicate;

                // Initialize against the default document
                setDocument();

                // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
                // Detached nodes confoundingly follow *each other*
                support.sortDetached = assert(function (el) {
                  // Should return 1, but returns 4 (following)
                  return (
                    el.compareDocumentPosition(
                      document.createElement("fieldset")
                    ) & 1
                  );
                });

                // Support: IE<8
                // Prevent attribute/property "interpolation"
                // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
                if (
                  !assert(function (el) {
                    el.innerHTML = "<a href='#'></a>";
                    return el.firstChild.getAttribute("href") === "#";
                  })
                ) {
                  addHandle(
                    "type|href|height|width",
                    function (elem, name, isXML) {
                      if (!isXML) {
                        return elem.getAttribute(
                          name,
                          name.toLowerCase() === "type" ? 1 : 2
                        );
                      }
                    }
                  );
                }

                // Support: IE<9
                // Use defaultValue in place of getAttribute("value")
                if (
                  !support.attributes ||
                  !assert(function (el) {
                    el.innerHTML = "<input/>";
                    el.firstChild.setAttribute("value", "");
                    return el.firstChild.getAttribute("value") === "";
                  })
                ) {
                  addHandle("value", function (elem, _name, isXML) {
                    if (!isXML && elem.nodeName.toLowerCase() === "input") {
                      return elem.defaultValue;
                    }
                  });
                }

                // Support: IE<9
                // Use getAttributeNode to fetch booleans when getAttribute lies
                if (
                  !assert(function (el) {
                    return el.getAttribute("disabled") == null;
                  })
                ) {
                  addHandle(booleans, function (elem, name, isXML) {
                    var val;
                    if (!isXML) {
                      return elem[name] === true
                        ? name.toLowerCase()
                        : (val = elem.getAttributeNode(name)) && val.specified
                          ? val.value
                          : null;
                    }
                  });
                }

                return Sizzle;
              })(window);

            jQuery.find = Sizzle;
            jQuery.expr = Sizzle.selectors;

            // Deprecated
            jQuery.expr[":"] = jQuery.expr.pseudos;
            jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
            jQuery.text = Sizzle.getText;
            jQuery.isXMLDoc = Sizzle.isXML;
            jQuery.contains = Sizzle.contains;
            jQuery.escapeSelector = Sizzle.escape;

            var dir = function (elem, dir, until) {
              var matched = [],
                truncate = until !== undefined;

              while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                  if (truncate && jQuery(elem).is(until)) {
                    break;
                  }
                  matched.push(elem);
                }
              }
              return matched;
            };

            var siblings = function (n, elem) {
              var matched = [];

              for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                  matched.push(n);
                }
              }

              return matched;
            };

            var rneedsContext = jQuery.expr.match.needsContext;

            function nodeName(elem, name) {
              return (
                elem.nodeName &&
                elem.nodeName.toLowerCase() === name.toLowerCase()
              );
            }
            var rsingleTag =
              /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

            // Implement the identical functionality for filter and not
            function winnow(elements, qualifier, not) {
              if (isFunction(qualifier)) {
                return jQuery.grep(elements, function (elem, i) {
                  return !!qualifier.call(elem, i, elem) !== not;
                });
              }

              // Single element
              if (qualifier.nodeType) {
                return jQuery.grep(elements, function (elem) {
                  return (elem === qualifier) !== not;
                });
              }

              // Arraylike of elements (jQuery, arguments, Array)
              if (typeof qualifier !== "string") {
                return jQuery.grep(elements, function (elem) {
                  return indexOf.call(qualifier, elem) > -1 !== not;
                });
              }

              // Filtered directly for both simple and complex selectors
              return jQuery.filter(qualifier, elements, not);
            }

            jQuery.filter = function (expr, elems, not) {
              var elem = elems[0];

              if (not) {
                expr = ":not(" + expr + ")";
              }

              if (elems.length === 1 && elem.nodeType === 1) {
                return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
              }

              return jQuery.find.matches(
                expr,
                jQuery.grep(elems, function (elem) {
                  return elem.nodeType === 1;
                })
              );
            };

            jQuery.fn.extend({
              find: function (selector) {
                var i,
                  ret,
                  len = this.length,
                  self = this;

                if (typeof selector !== "string") {
                  return this.pushStack(
                    jQuery(selector).filter(function () {
                      for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                          return true;
                        }
                      }
                    })
                  );
                }

                ret = this.pushStack([]);

                for (i = 0; i < len; i++) {
                  jQuery.find(selector, self[i], ret);
                }

                return len > 1 ? jQuery.uniqueSort(ret) : ret;
              },
              filter: function (selector) {
                return this.pushStack(winnow(this, selector || [], false));
              },
              not: function (selector) {
                return this.pushStack(winnow(this, selector || [], true));
              },
              is: function (selector) {
                return !!winnow(
                  this,

                  // If this is a positional/relative selector, check membership in the returned set
                  // so $("p:first").is("p:last") won't return true for a doc with two "p".
                  typeof selector === "string" && rneedsContext.test(selector)
                    ? jQuery(selector)
                    : selector || [],
                  false
                ).length;
              },
            });

            // Initialize a jQuery object

            // A central reference to the root jQuery(document)
            var rootjQuery,
              // A simple way to check for HTML strings
              // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
              // Strict HTML recognition (trac-11290: must start with <)
              // Shortcut simple #id case for speed
              rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
              init = (jQuery.fn.init = function (selector, context, root) {
                var match, elem;

                // HANDLE: $(""), $(null), $(undefined), $(false)
                if (!selector) {
                  return this;
                }

                // Method init() accepts an alternate rootjQuery
                // so migrate can support jQuery.sub (gh-2101)
                root = root || rootjQuery;

                // Handle HTML strings
                if (typeof selector === "string") {
                  if (
                    selector[0] === "<" &&
                    selector[selector.length - 1] === ">" &&
                    selector.length >= 3
                  ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];
                  } else {
                    match = rquickExpr.exec(selector);
                  }

                  // Match html or make sure no context is specified for #id
                  if (match && (match[1] || !context)) {
                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                      context =
                        context instanceof jQuery ? context[0] : context;

                      // Option to run scripts is true for back-compat
                      // Intentionally let the error be thrown if parseHTML is not present
                      jQuery.merge(
                        this,
                        jQuery.parseHTML(
                          match[1],
                          context && context.nodeType
                            ? context.ownerDocument || context
                            : document,
                          true
                        )
                      );

                      // HANDLE: $(html, props)
                      if (
                        rsingleTag.test(match[1]) &&
                        jQuery.isPlainObject(context)
                      ) {
                        for (match in context) {
                          // Properties of context are called as methods if possible
                          if (isFunction(this[match])) {
                            this[match](context[match]);

                            // ...and otherwise set as attributes
                          } else {
                            this.attr(match, context[match]);
                          }
                        }
                      }

                      return this;

                      // HANDLE: $(#id)
                    } else {
                      elem = document.getElementById(match[2]);

                      if (elem) {
                        // Inject the element directly into the jQuery object
                        this[0] = elem;
                        this.length = 1;
                      }
                      return this;
                    }

                    // HANDLE: $(expr, $(...))
                  } else if (!context || context.jquery) {
                    return (context || root).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                  } else {
                    return this.constructor(context).find(selector);
                  }

                  // HANDLE: $(DOMElement)
                } else if (selector.nodeType) {
                  this[0] = selector;
                  this.length = 1;
                  return this;

                  // HANDLE: $(function)
                  // Shortcut for document ready
                } else if (isFunction(selector)) {
                  return root.ready !== undefined
                    ? root.ready(selector)
                    : // Execute immediately if ready is not present
                    selector(jQuery);
                }

                return jQuery.makeArray(selector, this);
              });

            // Give the init function the jQuery prototype for later instantiation
            init.prototype = jQuery.fn;

            // Initialize central reference
            rootjQuery = jQuery(document);

            var rparentsprev = /^(?:parents|prev(?:Until|All))/,
              // Methods guaranteed to produce a unique set when starting from a unique set
              guaranteedUnique = {
                children: true,
                contents: true,
                next: true,
                prev: true,
              };

            jQuery.fn.extend({
              has: function (target) {
                var targets = jQuery(target, this),
                  l = targets.length;

                return this.filter(function () {
                  var i = 0;
                  for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                      return true;
                    }
                  }
                });
              },

              closest: function (selectors, context) {
                var cur,
                  i = 0,
                  l = this.length,
                  matched = [],
                  targets = typeof selectors !== "string" && jQuery(selectors);

                // Positional selectors never match, since there's no _selection_ context
                if (!rneedsContext.test(selectors)) {
                  for (; i < l; i++) {
                    for (
                      cur = this[i];
                      cur && cur !== context;
                      cur = cur.parentNode
                    ) {
                      // Always skip document fragments
                      if (
                        cur.nodeType < 11 &&
                        (targets
                          ? targets.index(cur) > -1
                          : // Don't pass non-elements to Sizzle
                          cur.nodeType === 1 &&
                          jQuery.find.matchesSelector(cur, selectors))
                      ) {
                        matched.push(cur);
                        break;
                      }
                    }
                  }
                }

                return this.pushStack(
                  matched.length > 1 ? jQuery.uniqueSort(matched) : matched
                );
              },

              // Determine the position of an element within the set
              index: function (elem) {
                // No argument, return index in parent
                if (!elem) {
                  return this[0] && this[0].parentNode
                    ? this.first().prevAll().length
                    : -1;
                }

                // Index in selector
                if (typeof elem === "string") {
                  return indexOf.call(jQuery(elem), this[0]);
                }

                // Locate the position of the desired element
                return indexOf.call(
                  this,

                  // If it receives a jQuery object, the first element is used
                  elem.jquery ? elem[0] : elem
                );
              },

              add: function (selector, context) {
                return this.pushStack(
                  jQuery.uniqueSort(
                    jQuery.merge(this.get(), jQuery(selector, context))
                  )
                );
              },

              addBack: function (selector) {
                return this.add(
                  selector == null
                    ? this.prevObject
                    : this.prevObject.filter(selector)
                );
              },
            });

            function sibling(cur, dir) {
              while ((cur = cur[dir]) && cur.nodeType !== 1) { }
              return cur;
            }

            jQuery.each(
              {
                parent: function (elem) {
                  var parent = elem.parentNode;
                  return parent && parent.nodeType !== 11 ? parent : null;
                },
                parents: function (elem) {
                  return dir(elem, "parentNode");
                },
                parentsUntil: function (elem, _i, until) {
                  return dir(elem, "parentNode", until);
                },
                next: function (elem) {
                  return sibling(elem, "nextSibling");
                },
                prev: function (elem) {
                  return sibling(elem, "previousSibling");
                },
                nextAll: function (elem) {
                  return dir(elem, "nextSibling");
                },
                prevAll: function (elem) {
                  return dir(elem, "previousSibling");
                },
                nextUntil: function (elem, _i, until) {
                  return dir(elem, "nextSibling", until);
                },
                prevUntil: function (elem, _i, until) {
                  return dir(elem, "previousSibling", until);
                },
                siblings: function (elem) {
                  return siblings((elem.parentNode || {}).firstChild, elem);
                },
                children: function (elem) {
                  return siblings(elem.firstChild);
                },
                contents: function (elem) {
                  if (
                    elem.contentDocument != null &&
                    // Support: IE 11+
                    // <object> elements with no `data` attribute has an object
                    // `contentDocument` with a `null` prototype.
                    getProto(elem.contentDocument)
                  ) {
                    return elem.contentDocument;
                  }

                  // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                  // Treat the template element as a regular one in browsers that
                  // don't support it.
                  if (nodeName(elem, "template")) {
                    elem = elem.content || elem;
                  }

                  return jQuery.merge([], elem.childNodes);
                },
              },
              function (name, fn) {
                jQuery.fn[name] = function (until, selector) {
                  var matched = jQuery.map(this, fn, until);

                  if (name.slice(-5) !== "Until") {
                    selector = until;
                  }

                  if (selector && typeof selector === "string") {
                    matched = jQuery.filter(selector, matched);
                  }

                  if (this.length > 1) {
                    // Remove duplicates
                    if (!guaranteedUnique[name]) {
                      jQuery.uniqueSort(matched);
                    }

                    // Reverse order for parents* and prev-derivatives
                    if (rparentsprev.test(name)) {
                      matched.reverse();
                    }
                  }

                  return this.pushStack(matched);
                };
              }
            );
            var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

            // Convert String-formatted options into Object-formatted ones
            function createOptions(options) {
              var object = {};
              jQuery.each(
                options.match(rnothtmlwhite) || [],
                function (_, flag) {
                  object[flag] = true;
                }
              );
              return object;
            }

            /*
             * Create a callback list using the following parameters:
             *
             *	options: an optional list of space-separated options that will change how
             *			the callback list behaves or a more traditional option object
             *
             * By default a callback list will act like an event callback list and can be
             * "fired" multiple times.
             *
             * Possible options:
             *
             *	once:			will ensure the callback list can only be fired once (like a Deferred)
             *
             *	memory:			will keep track of previous values and will call any callback added
             *					after the list has been fired right away with the latest "memorized"
             *					values (like a Deferred)
             *
             *	unique:			will ensure a callback can only be added once (no duplicate in the list)
             *
             *	stopOnFalse:	interrupt callings when a callback returns false
             *
             */
            jQuery.Callbacks = function (options) {
              // Convert options from String-formatted to Object-formatted if needed
              // (we check in cache first)
              options =
                typeof options === "string"
                  ? createOptions(options)
                  : jQuery.extend({}, options);

              var // Flag to know if list is currently firing
                firing,
                // Last fire value for non-forgettable lists
                memory,
                // Flag to know if list was already fired
                fired,
                // Flag to prevent firing
                locked,
                // Actual callback list
                list = [],
                // Queue of execution data for repeatable lists
                queue = [],
                // Index of currently firing callback (modified by add/remove as needed)
                firingIndex = -1,
                // Fire callbacks
                fire = function () {
                  // Enforce single-firing
                  locked = locked || options.once;

                  // Execute callbacks for all pending executions,
                  // respecting firingIndex overrides and runtime changes
                  fired = firing = true;
                  for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                      // Run callback and check for early termination
                      if (
                        list[firingIndex].apply(memory[0], memory[1]) ===
                        false &&
                        options.stopOnFalse
                      ) {
                        // Jump to end and forget the data so .add doesn't re-fire
                        firingIndex = list.length;
                        memory = false;
                      }
                    }
                  }

                  // Forget the data if we're done with it
                  if (!options.memory) {
                    memory = false;
                  }

                  firing = false;

                  // Clean up if we're done firing for good
                  if (locked) {
                    // Keep an empty list if we have data for future add calls
                    if (memory) {
                      list = [];

                      // Otherwise, this object is spent
                    } else {
                      list = "";
                    }
                  }
                },
                // Actual Callbacks object
                self = {
                  // Add a callback or a collection of callbacks to the list
                  add: function () {
                    if (list) {
                      // If we have memory from a past run, we should fire after adding
                      if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                      }

                      (function add(args) {
                        jQuery.each(args, function (_, arg) {
                          if (isFunction(arg)) {
                            if (!options.unique || !self.has(arg)) {
                              list.push(arg);
                            }
                          } else if (
                            arg &&
                            arg.length &&
                            toType(arg) !== "string"
                          ) {
                            // Inspect recursively
                            add(arg);
                          }
                        });
                      })(arguments);

                      if (memory && !firing) {
                        fire();
                      }
                    }
                    return this;
                  },

                  // Remove a callback from the list
                  remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                      var index;
                      while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);

                        // Handle firing indexes
                        if (index <= firingIndex) {
                          firingIndex--;
                        }
                      }
                    });
                    return this;
                  },

                  // Check if a given callback is in the list.
                  // If no argument is given, return whether or not list has callbacks attached.
                  has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                  },

                  // Remove all callbacks from the list
                  empty: function () {
                    if (list) {
                      list = [];
                    }
                    return this;
                  },

                  // Disable .fire and .add
                  // Abort any current/pending executions
                  // Clear all callbacks and values
                  disable: function () {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                  },
                  disabled: function () {
                    return !list;
                  },

                  // Disable .fire
                  // Also disable .add unless we have memory (since it would have no effect)
                  // Abort any pending executions
                  lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                      list = memory = "";
                    }
                    return this;
                  },
                  locked: function () {
                    return !!locked;
                  },

                  // Call all callbacks with the given context and arguments
                  fireWith: function (context, args) {
                    if (!locked) {
                      args = args || [];
                      args = [context, args.slice ? args.slice() : args];
                      queue.push(args);
                      if (!firing) {
                        fire();
                      }
                    }
                    return this;
                  },

                  // Call all the callbacks with the given arguments
                  fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                  },

                  // To know if the callbacks have already been called at least once
                  fired: function () {
                    return !!fired;
                  },
                };

              return self;
            };

            function Identity(v) {
              return v;
            }
            function Thrower(ex) {
              throw ex;
            }

            function adoptValue(value, resolve, reject, noValue) {
              var method;

              try {
                // Check for promise aspect first to privilege synchronous behavior
                if (value && isFunction((method = value.promise))) {
                  method.call(value).done(resolve).fail(reject);

                  // Other thenables
                } else if (value && isFunction((method = value.then))) {
                  method.call(value, resolve, reject);

                  // Other non-thenables
                } else {
                  // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                  // * false: [ value ].slice( 0 ) => resolve( value )
                  // * true: [ value ].slice( 1 ) => resolve()
                  resolve.apply(undefined, [value].slice(noValue));
                }

                // For Promises/A+, convert exceptions into rejections
                // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
                // Deferred#then to conditionally suppress rejection.
              } catch (value) {
                // Support: Android 4.0 only
                // Strict mode functions invoked without .call/.apply get global-object context
                reject.apply(undefined, [value]);
              }
            }

            jQuery.extend({
              Deferred: function (func) {
                var tuples = [
                  // action, add listener, callbacks,
                  // ... .then handlers, argument index, [final state]
                  [
                    "notify",
                    "progress",
                    jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"),
                    2,
                  ],
                  [
                    "resolve",
                    "done",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    0,
                    "resolved",
                  ],
                  [
                    "reject",
                    "fail",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    1,
                    "rejected",
                  ],
                ],
                  state = "pending",
                  promise = {
                    state: function () {
                      return state;
                    },
                    always: function () {
                      deferred.done(arguments).fail(arguments);
                      return this;
                    },
                    catch: function (fn) {
                      return promise.then(null, fn);
                    },

                    // Keep pipe for back-compat
                    pipe: function (/* fnDone, fnFail, fnProgress */) {
                      var fns = arguments;

                      return jQuery
                        .Deferred(function (newDefer) {
                          jQuery.each(tuples, function (_i, tuple) {
                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                            deferred[tuple[1]](function () {
                              var returned = fn && fn.apply(this, arguments);
                              if (returned && isFunction(returned.promise)) {
                                returned
                                  .promise()
                                  .progress(newDefer.notify)
                                  .done(newDefer.resolve)
                                  .fail(newDefer.reject);
                              } else {
                                newDefer[tuple[0] + "With"](
                                  this,
                                  fn ? [returned] : arguments
                                );
                              }
                            });
                          });
                          fns = null;
                        })
                        .promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                      var maxDepth = 0;
                      function resolve(depth, deferred, handler, special) {
                        return function () {
                          var that = this,
                            args = arguments,
                            mightThrow = function () {
                              var returned, then;

                              // Support: Promises/A+ section 2.3.3.3.3
                              // https://promisesaplus.com/#point-59
                              // Ignore double-resolution attempts
                              if (depth < maxDepth) {
                                return;
                              }

                              returned = handler.apply(that, args);

                              // Support: Promises/A+ section 2.3.1
                              // https://promisesaplus.com/#point-48
                              if (returned === deferred.promise()) {
                                throw new TypeError("Thenable self-resolution");
                              }

                              // Support: Promises/A+ sections 2.3.3.1, 3.5
                              // https://promisesaplus.com/#point-54
                              // https://promisesaplus.com/#point-75
                              // Retrieve `then` only once
                              then =
                                returned &&
                                // Support: Promises/A+ section 2.3.4
                                // https://promisesaplus.com/#point-64
                                // Only check objects and functions for thenability
                                (typeof returned === "object" ||
                                  typeof returned === "function") &&
                                returned.then;

                              // Handle a returned thenable
                              if (isFunction(then)) {
                                // Special processors (notify) just wait for resolution
                                if (special) {
                                  then.call(
                                    returned,
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Thrower,
                                      special
                                    )
                                  );

                                  // Normal processors (resolve) also hook into progress
                                } else {
                                  // ...and disregard older resolution values
                                  maxDepth++;

                                  then.call(
                                    returned,
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Thrower,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      deferred.notifyWith
                                    )
                                  );
                                }

                                // Handle all other returned values
                              } else {
                                // Only substitute handlers pass on context
                                // and multiple values (non-spec behavior)
                                if (handler !== Identity) {
                                  that = undefined;
                                  args = [returned];
                                }

                                // Process the value(s)
                                // Default process is resolve
                                (special || deferred.resolveWith)(that, args);
                              }
                            },
                            // Only normal processors (resolve) catch and reject exceptions
                            process = special
                              ? mightThrow
                              : function () {
                                try {
                                  mightThrow();
                                } catch (e) {
                                  if (jQuery.Deferred.exceptionHook) {
                                    jQuery.Deferred.exceptionHook(
                                      e,
                                      process.stackTrace
                                    );
                                  }

                                  // Support: Promises/A+ section 2.3.3.3.4.1
                                  // https://promisesaplus.com/#point-61
                                  // Ignore post-resolution exceptions
                                  if (depth + 1 >= maxDepth) {
                                    // Only substitute handlers pass on context
                                    // and multiple values (non-spec behavior)
                                    if (handler !== Thrower) {
                                      that = undefined;
                                      args = [e];
                                    }

                                    deferred.rejectWith(that, args);
                                  }
                                }
                              };

                          // Support: Promises/A+ section 2.3.3.3.1
                          // https://promisesaplus.com/#point-57
                          // Re-resolve promises immediately to dodge false rejection from
                          // subsequent errors
                          if (depth) {
                            process();
                          } else {
                            // Call an optional hook to record the stack, in case of exception
                            // since it's otherwise lost when execution goes async
                            if (jQuery.Deferred.getStackHook) {
                              process.stackTrace =
                                jQuery.Deferred.getStackHook();
                            }
                            window.setTimeout(process);
                          }
                        };
                      }

                      return jQuery
                        .Deferred(function (newDefer) {
                          // progress_handlers.add( ... )
                          tuples[0][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onProgress) ? onProgress : Identity,
                              newDefer.notifyWith
                            )
                          );

                          // fulfilled_handlers.add( ... )
                          tuples[1][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onFulfilled) ? onFulfilled : Identity
                            )
                          );

                          // rejected_handlers.add( ... )
                          tuples[2][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onRejected) ? onRejected : Thrower
                            )
                          );
                        })
                        .promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function (obj) {
                      return obj != null
                        ? jQuery.extend(obj, promise)
                        : promise;
                    },
                  },
                  deferred = {};

                // Add list-specific methods
                jQuery.each(tuples, function (i, tuple) {
                  var list = tuple[2],
                    stateString = tuple[5];

                  // promise.progress = list.add
                  // promise.done = list.add
                  // promise.fail = list.add
                  promise[tuple[1]] = list.add;

                  // Handle state
                  if (stateString) {
                    list.add(
                      function () {
                        // state = "resolved" (i.e., fulfilled)
                        // state = "rejected"
                        state = stateString;
                      },

                      // rejected_callbacks.disable
                      // fulfilled_callbacks.disable
                      tuples[3 - i][2].disable,

                      // rejected_handlers.disable
                      // fulfilled_handlers.disable
                      tuples[3 - i][3].disable,

                      // progress_callbacks.lock
                      tuples[0][2].lock,

                      // progress_handlers.lock
                      tuples[0][3].lock
                    );
                  }

                  // progress_handlers.fire
                  // fulfilled_handlers.fire
                  // rejected_handlers.fire
                  list.add(tuple[3].fire);

                  // deferred.notify = function() { deferred.notifyWith(...) }
                  // deferred.resolve = function() { deferred.resolveWith(...) }
                  // deferred.reject = function() { deferred.rejectWith(...) }
                  deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](
                      this === deferred ? undefined : this,
                      arguments
                    );
                    return this;
                  };

                  // deferred.notifyWith = list.fireWith
                  // deferred.resolveWith = list.fireWith
                  // deferred.rejectWith = list.fireWith
                  deferred[tuple[0] + "With"] = list.fireWith;
                });

                // Make the deferred a promise
                promise.promise(deferred);

                // Call given func if any
                if (func) {
                  func.call(deferred, deferred);
                }

                // All done!
                return deferred;
              },

              // Deferred helper
              when: function (singleValue) {
                var // count of uncompleted subordinates
                  remaining = arguments.length,
                  // count of unprocessed arguments
                  i = remaining,
                  // subordinate fulfillment data
                  resolveContexts = Array(i),
                  resolveValues = slice.call(arguments),
                  // the primary Deferred
                  primary = jQuery.Deferred(),
                  // subordinate callback factory
                  updateFunc = function (i) {
                    return function (value) {
                      resolveContexts[i] = this;
                      resolveValues[i] =
                        arguments.length > 1 ? slice.call(arguments) : value;
                      if (!--remaining) {
                        primary.resolveWith(resolveContexts, resolveValues);
                      }
                    };
                  };

                // Single- and empty arguments are adopted like Promise.resolve
                if (remaining <= 1) {
                  adoptValue(
                    singleValue,
                    primary.done(updateFunc(i)).resolve,
                    primary.reject,
                    !remaining
                  );

                  // Use .then() to unwrap secondary thenables (cf. gh-3000)
                  if (
                    primary.state() === "pending" ||
                    isFunction(resolveValues[i] && resolveValues[i].then)
                  ) {
                    return primary.then();
                  }
                }

                // Multiple arguments are aggregated like Promise.all array elements
                while (i--) {
                  adoptValue(resolveValues[i], updateFunc(i), primary.reject);
                }

                return primary.promise();
              },
            });

            // These usually indicate a programmer mistake during development,
            // warn about them ASAP rather than swallowing them by default.
            var rerrorNames =
              /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

            jQuery.Deferred.exceptionHook = function (error, stack) {
              // Support: IE 8 - 9 only
              // Console exists when dev tools are open, which can happen at any time
              if (
                window.console &&
                window.console.warn &&
                error &&
                rerrorNames.test(error.name)
              ) {
                window.console.warn(
                  "jQuery.Deferred exception: " + error.message,
                  error.stack,
                  stack
                );
              }
            };

            jQuery.readyException = function (error) {
              window.setTimeout(function () {
                throw error;
              });
            };

            // The deferred used on DOM ready
            var readyList = jQuery.Deferred();

            jQuery.fn.ready = function (fn) {
              readyList
                .then(fn)

                // Wrap jQuery.readyException in a function so that the lookup
                // happens at the time of error handling instead of callback
                // registration.
                .catch(function (error) {
                  jQuery.readyException(error);
                });

              return this;
            };

            jQuery.extend({
              // Is the DOM ready to be used? Set to true once it occurs.
              isReady: false,

              // A counter to track how many items to wait for before
              // the ready event fires. See trac-6781
              readyWait: 1,

              // Handle when the DOM is ready
              ready: function (wait) {
                // Abort if there are pending holds or we're already ready
                if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                  return;
                }

                // Remember that the DOM is ready
                jQuery.isReady = true;

                // If a normal DOM Ready event fired, decrement, and wait if need be
                if (wait !== true && --jQuery.readyWait > 0) {
                  return;
                }

                // If there are functions bound, to execute
                readyList.resolveWith(document, [jQuery]);
              },
            });

            jQuery.ready.then = readyList.then;

            // The ready event handler and self cleanup method
            function completed() {
              document.removeEventListener("DOMContentLoaded", completed);
              window.removeEventListener("load", completed);
              jQuery.ready();
            }

            // Catch cases where $(document).ready() is called
            // after the browser event has already occurred.
            // Support: IE <=9 - 10 only
            // Older IE sometimes signals "interactive" too soon
            if (
              document.readyState === "complete" ||
              (document.readyState !== "loading" &&
                !document.documentElement.doScroll)
            ) {
              // Handle it asynchronously to allow scripts the opportunity to delay ready
              window.setTimeout(jQuery.ready);
            } else {
              // Use the handy event callback
              document.addEventListener("DOMContentLoaded", completed);

              // A fallback to window.onload, that will always work
              window.addEventListener("load", completed);
            }

            // Multifunctional method to get and set values of a collection
            // The value/s can optionally be executed if it's a function
            var access = function (
              elems,
              fn,
              key,
              value,
              chainable,
              emptyGet,
              raw
            ) {
              var i = 0,
                len = elems.length,
                bulk = key == null;

              // Sets many values
              if (toType(key) === "object") {
                chainable = true;
                for (i in key) {
                  access(elems, fn, i, key[i], true, emptyGet, raw);
                }

                // Sets one value
              } else if (value !== undefined) {
                chainable = true;

                if (!isFunction(value)) {
                  raw = true;
                }

                if (bulk) {
                  // Bulk operations run against the entire set
                  if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                  } else {
                    bulk = fn;
                    fn = function (elem, _key, value) {
                      return bulk.call(jQuery(elem), value);
                    };
                  }
                }

                if (fn) {
                  for (; i < len; i++) {
                    fn(
                      elems[i],
                      key,
                      raw ? value : value.call(elems[i], i, fn(elems[i], key))
                    );
                  }
                }
              }

              if (chainable) {
                return elems;
              }

              // Gets
              if (bulk) {
                return fn.call(elems);
              }

              return len ? fn(elems[0], key) : emptyGet;
            };

            // Matches dashed string for camelizing
            var rmsPrefix = /^-ms-/,
              rdashAlpha = /-([a-z])/g;

            // Used by camelCase as callback to replace()
            function fcamelCase(_all, letter) {
              return letter.toUpperCase();
            }

            // Convert dashed to camelCase; used by the css and data modules
            // Support: IE <=9 - 11, Edge 12 - 15
            // Microsoft forgot to hump their vendor prefix (trac-9572)
            function camelCase(string) {
              return string
                .replace(rmsPrefix, "ms-")
                .replace(rdashAlpha, fcamelCase);
            }
            var acceptData = function (owner) {
              // Accepts only:
              //  - Node
              //    - Node.ELEMENT_NODE
              //    - Node.DOCUMENT_NODE
              //  - Object
              //    - Any
              return (
                owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
              );
            };

            function Data() {
              this.expando = jQuery.expando + Data.uid++;
            }

            Data.uid = 1;

            Data.prototype = {
              cache: function (owner) {
                // Check if the owner object already has a cache
                var value = owner[this.expando];

                // If not, create one
                if (!value) {
                  value = {};

                  // We can accept data for non-element nodes in modern browsers,
                  // but we should not, see trac-8335.
                  // Always return an empty object.
                  if (acceptData(owner)) {
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) {
                      owner[this.expando] = value;

                      // Otherwise secure it in a non-enumerable property
                      // configurable must be true to allow the property to be
                      // deleted when data is removed
                    } else {
                      Object.defineProperty(owner, this.expando, {
                        value: value,
                        configurable: true,
                      });
                    }
                  }
                }

                return value;
              },
              set: function (owner, data, value) {
                var prop,
                  cache = this.cache(owner);

                // Handle: [ owner, key, value ] args
                // Always use camelCase key (gh-2257)
                if (typeof data === "string") {
                  cache[camelCase(data)] = value;

                  // Handle: [ owner, { properties } ] args
                } else {
                  // Copy the properties one-by-one to the cache object
                  for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                  }
                }
                return cache;
              },
              get: function (owner, key) {
                return key === undefined
                  ? this.cache(owner)
                  : // Always use camelCase key (gh-2257)
                  owner[this.expando] && owner[this.expando][camelCase(key)];
              },
              access: function (owner, key, value) {
                // In cases where either:
                //
                //   1. No key was specified
                //   2. A string key was specified, but no value provided
                //
                // Take the "read" path and allow the get method to determine
                // which value to return, respectively either:
                //
                //   1. The entire cache object
                //   2. The data stored at the key
                //
                if (
                  key === undefined ||
                  (key && typeof key === "string" && value === undefined)
                ) {
                  return this.get(owner, key);
                }

                // When the key is not a string, or both a key and value
                // are specified, set or extend (existing objects) with either:
                //
                //   1. An object of properties
                //   2. A key and value
                //
                this.set(owner, key, value);

                // Since the "set" path can have two possible entry points
                // return the expected data based on which path was taken[*]
                return value !== undefined ? value : key;
              },
              remove: function (owner, key) {
                var i,
                  cache = owner[this.expando];

                if (cache === undefined) {
                  return;
                }

                if (key !== undefined) {
                  // Support array or space separated string of keys
                  if (Array.isArray(key)) {
                    // If key is an array of keys...
                    // We always set camelCase keys, so remove that.
                    key = key.map(camelCase);
                  } else {
                    key = camelCase(key);

                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                  }

                  i = key.length;

                  while (i--) {
                    delete cache[key[i]];
                  }
                }

                // Remove the expando if there's no more data
                if (key === undefined || jQuery.isEmptyObject(cache)) {
                  // Support: Chrome <=35 - 45
                  // Webkit & Blink performance suffers when deleting properties
                  // from DOM nodes, so set to undefined instead
                  // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                  if (owner.nodeType) {
                    owner[this.expando] = undefined;
                  } else {
                    delete owner[this.expando];
                  }
                }
              },
              hasData: function (owner) {
                var cache = owner[this.expando];
                return cache !== undefined && !jQuery.isEmptyObject(cache);
              },
            };
            var dataPriv = new Data();

            var dataUser = new Data();

            //	Implementation Summary
            //
            //	1. Enforce API surface and semantic compatibility with 1.9.x branch
            //	2. Improve the module's maintainability by reducing the storage
            //		paths to a single mechanism.
            //	3. Use the same single mechanism to support "private" and "user" data.
            //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
            //	5. Avoid exposing implementation details on user objects (eg. expando properties)
            //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

            var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
              rmultiDash = /[A-Z]/g;

            function getData(data) {
              if (data === "true") {
                return true;
              }

              if (data === "false") {
                return false;
              }

              if (data === "null") {
                return null;
              }

              // Only convert to a number if it doesn't change the string
              if (data === +data + "") {
                return +data;
              }

              if (rbrace.test(data)) {
                return JSON.parse(data);
              }

              return data;
            }

            function dataAttr(elem, key, data) {
              var name;

              // If nothing was found internally, try to fetch any
              // data from the HTML5 data-* attribute
              if (data === undefined && elem.nodeType === 1) {
                name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
                data = elem.getAttribute(name);

                if (typeof data === "string") {
                  try {
                    data = getData(data);
                  } catch (e) { }

                  // Make sure we set the data so it isn't changed later
                  dataUser.set(elem, key, data);
                } else {
                  data = undefined;
                }
              }
              return data;
            }

            jQuery.extend({
              hasData: function (elem) {
                return dataUser.hasData(elem) || dataPriv.hasData(elem);
              },

              data: function (elem, name, data) {
                return dataUser.access(elem, name, data);
              },

              removeData: function (elem, name) {
                dataUser.remove(elem, name);
              },

              // TODO: Now that all calls to _data and _removeData have been replaced
              // with direct calls to dataPriv methods, these can be deprecated.
              _data: function (elem, name, data) {
                return dataPriv.access(elem, name, data);
              },

              _removeData: function (elem, name) {
                dataPriv.remove(elem, name);
              },
            });

            jQuery.fn.extend({
              data: function (key, value) {
                var i,
                  name,
                  data,
                  elem = this[0],
                  attrs = elem && elem.attributes;

                // Gets all values
                if (key === undefined) {
                  if (this.length) {
                    data = dataUser.get(elem);

                    if (
                      elem.nodeType === 1 &&
                      !dataPriv.get(elem, "hasDataAttrs")
                    ) {
                      i = attrs.length;
                      while (i--) {
                        // Support: IE 11 only
                        // The attrs elements can be null (trac-14894)
                        if (attrs[i]) {
                          name = attrs[i].name;
                          if (name.indexOf("data-") === 0) {
                            name = camelCase(name.slice(5));
                            dataAttr(elem, name, data[name]);
                          }
                        }
                      }
                      dataPriv.set(elem, "hasDataAttrs", true);
                    }
                  }

                  return data;
                }

                // Sets multiple values
                if (typeof key === "object") {
                  return this.each(function () {
                    dataUser.set(this, key);
                  });
                }

                return access(
                  this,
                  function (value) {
                    var data;

                    // The calling jQuery object (element matches) is not empty
                    // (and therefore has an element appears at this[ 0 ]) and the
                    // `value` parameter was not undefined. An empty jQuery object
                    // will result in `undefined` for elem = this[ 0 ] which will
                    // throw an exception if an attempt to read a data cache is made.
                    if (elem && value === undefined) {
                      // Attempt to get data from the cache
                      // The key will always be camelCased in Data
                      data = dataUser.get(elem, key);
                      if (data !== undefined) {
                        return data;
                      }

                      // Attempt to "discover" the data in
                      // HTML5 custom data-* attrs
                      data = dataAttr(elem, key);
                      if (data !== undefined) {
                        return data;
                      }

                      // We tried really hard, but the data doesn't exist.
                      return;
                    }

                    // Set the data...
                    this.each(function () {
                      // We always store the camelCased key
                      dataUser.set(this, key, value);
                    });
                  },
                  null,
                  value,
                  arguments.length > 1,
                  null,
                  true
                );
              },

              removeData: function (key) {
                return this.each(function () {
                  dataUser.remove(this, key);
                });
              },
            });

            jQuery.extend({
              queue: function (elem, type, data) {
                var queue;

                if (elem) {
                  type = (type || "fx") + "queue";
                  queue = dataPriv.get(elem, type);

                  // Speed up dequeue by getting out quickly if this is just a lookup
                  if (data) {
                    if (!queue || Array.isArray(data)) {
                      queue = dataPriv.access(
                        elem,
                        type,
                        jQuery.makeArray(data)
                      );
                    } else {
                      queue.push(data);
                    }
                  }
                  return queue || [];
                }
              },

              dequeue: function (elem, type) {
                type = type || "fx";

                var queue = jQuery.queue(elem, type),
                  startLength = queue.length,
                  fn = queue.shift(),
                  hooks = jQuery._queueHooks(elem, type),
                  next = function () {
                    jQuery.dequeue(elem, type);
                  };

                // If the fx queue is dequeued, always remove the progress sentinel
                if (fn === "inprogress") {
                  fn = queue.shift();
                  startLength--;
                }

                if (fn) {
                  // Add a progress sentinel to prevent the fx queue from being
                  // automatically dequeued
                  if (type === "fx") {
                    queue.unshift("inprogress");
                  }

                  // Clear up the last queue stop function
                  delete hooks.stop;
                  fn.call(elem, next, hooks);
                }

                if (!startLength && hooks) {
                  hooks.empty.fire();
                }
              },

              // Not public - generate a queueHooks object, or return the current one
              _queueHooks: function (elem, type) {
                var key = type + "queueHooks";
                return (
                  dataPriv.get(elem, key) ||
                  dataPriv.access(elem, key, {
                    empty: jQuery.Callbacks("once memory").add(function () {
                      dataPriv.remove(elem, [type + "queue", key]);
                    }),
                  })
                );
              },
            });

            jQuery.fn.extend({
              queue: function (type, data) {
                var setter = 2;

                if (typeof type !== "string") {
                  data = type;
                  type = "fx";
                  setter--;
                }

                if (arguments.length < setter) {
                  return jQuery.queue(this[0], type);
                }

                return data === undefined
                  ? this
                  : this.each(function () {
                    var queue = jQuery.queue(this, type, data);

                    // Ensure a hooks for this queue
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                      jQuery.dequeue(this, type);
                    }
                  });
              },
              dequeue: function (type) {
                return this.each(function () {
                  jQuery.dequeue(this, type);
                });
              },
              clearQueue: function (type) {
                return this.queue(type || "fx", []);
              },

              // Get a promise resolved when queues of a certain type
              // are emptied (fx is the type by default)
              promise: function (type, obj) {
                var tmp,
                  count = 1,
                  defer = jQuery.Deferred(),
                  elements = this,
                  i = this.length,
                  resolve = function () {
                    if (!--count) {
                      defer.resolveWith(elements, [elements]);
                    }
                  };

                if (typeof type !== "string") {
                  obj = type;
                  type = undefined;
                }
                type = type || "fx";

                while (i--) {
                  tmp = dataPriv.get(elements[i], type + "queueHooks");
                  if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                  }
                }
                resolve();
                return defer.promise(obj);
              },
            });
            var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

            var rcssNum = new RegExp(
              "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$",
              "i"
            );

            var cssExpand = ["Top", "Right", "Bottom", "Left"];

            var documentElement = document.documentElement;

            var isAttached = function (elem) {
              return jQuery.contains(elem.ownerDocument, elem);
            },
              composed = { composed: true };

            // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
            // Check attachment across shadow DOM boundaries when possible (gh-3504)
            // Support: iOS 10.0-10.2 only
            // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
            // leading to errors. We need to check for `getRootNode`.
            if (documentElement.getRootNode) {
              isAttached = function (elem) {
                return (
                  jQuery.contains(elem.ownerDocument, elem) ||
                  elem.getRootNode(composed) === elem.ownerDocument
                );
              };
            }
            var isHiddenWithinTree = function (elem, el) {
              // isHiddenWithinTree might be called from jQuery#filter function;
              // in that case, element will be second argument
              elem = el || elem;

              // Inline style trumps all
              return (
                elem.style.display === "none" ||
                (elem.style.display === "" &&
                  // Otherwise, check computed style
                  // Support: Firefox <=43 - 45
                  // Disconnected elements can have computed display: none, so first confirm that elem is
                  // in the document.
                  isAttached(elem) &&
                  jQuery.css(elem, "display") === "none")
              );
            };

            function adjustCSS(elem, prop, valueParts, tween) {
              var adjusted,
                scale,
                maxIterations = 20,
                currentValue = tween
                  ? function () {
                    return tween.cur();
                  }
                  : function () {
                    return jQuery.css(elem, prop, "");
                  },
                initial = currentValue(),
                unit =
                  (valueParts && valueParts[3]) ||
                  (jQuery.cssNumber[prop] ? "" : "px"),
                // Starting value computation is required for potential unit mismatches
                initialInUnit =
                  elem.nodeType &&
                  (jQuery.cssNumber[prop] || (unit !== "px" && +initial)) &&
                  rcssNum.exec(jQuery.css(elem, prop));

              if (initialInUnit && initialInUnit[3] !== unit) {
                // Support: Firefox <=54
                // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
                initial = initial / 2;

                // Trust units reported by jQuery.css
                unit = unit || initialInUnit[3];

                // Iteratively approximate from a nonzero starting point
                initialInUnit = +initial || 1;

                while (maxIterations--) {
                  // Evaluate and update our best guess (doubling guesses that zero out).
                  // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                  jQuery.style(elem, prop, initialInUnit + unit);
                  if (
                    (1 - scale) *
                    (1 - (scale = currentValue() / initial || 0.5)) <=
                    0
                  ) {
                    maxIterations = 0;
                  }
                  initialInUnit = initialInUnit / scale;
                }

                initialInUnit = initialInUnit * 2;
                jQuery.style(elem, prop, initialInUnit + unit);

                // Make sure we update the tween properties later on
                valueParts = valueParts || [];
              }

              if (valueParts) {
                initialInUnit = +initialInUnit || +initial || 0;

                // Apply relative offset (+=/-=) if specified
                adjusted = valueParts[1]
                  ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
                  : +valueParts[2];
                if (tween) {
                  tween.unit = unit;
                  tween.start = initialInUnit;
                  tween.end = adjusted;
                }
              }
              return adjusted;
            }

            var defaultDisplayMap = {};

            function getDefaultDisplay(elem) {
              var temp,
                doc = elem.ownerDocument,
                nodeName = elem.nodeName,
                display = defaultDisplayMap[nodeName];

              if (display) {
                return display;
              }

              temp = doc.body.appendChild(doc.createElement(nodeName));
              display = jQuery.css(temp, "display");

              temp.parentNode.removeChild(temp);

              if (display === "none") {
                display = "block";
              }
              defaultDisplayMap[nodeName] = display;

              return display;
            }

            function showHide(elements, show) {
              var display,
                elem,
                values = [],
                index = 0,
                length = elements.length;

              // Determine new display value for elements that need to change
              for (; index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                  continue;
                }

                display = elem.style.display;
                if (show) {
                  // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                  // check is required in this first loop unless we have a nonempty display value (either
                  // inline or about-to-be-restored)
                  if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) {
                      elem.style.display = "";
                    }
                  }
                  if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                  }
                } else {
                  if (display !== "none") {
                    values[index] = "none";

                    // Remember what we're overwriting
                    dataPriv.set(elem, "display", display);
                  }
                }
              }

              // Set the display of the elements in a second loop to avoid constant reflow
              for (index = 0; index < length; index++) {
                if (values[index] != null) {
                  elements[index].style.display = values[index];
                }
              }

              return elements;
            }

            jQuery.fn.extend({
              show: function () {
                return showHide(this, true);
              },
              hide: function () {
                return showHide(this);
              },
              toggle: function (state) {
                if (typeof state === "boolean") {
                  return state ? this.show() : this.hide();
                }

                return this.each(function () {
                  if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                  } else {
                    jQuery(this).hide();
                  }
                });
              },
            });
            var rcheckableType = /^(?:checkbox|radio)$/i;

            var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

            var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

            (function () {
              var fragment = document.createDocumentFragment(),
                div = fragment.appendChild(document.createElement("div")),
                input = document.createElement("input");

              // Support: Android 4.0 - 4.3 only
              // Check state lost if the name is set (trac-11217)
              // Support: Windows Web Apps (WWA)
              // `name` and `type` must use .setAttribute for WWA (trac-14901)
              input.setAttribute("type", "radio");
              input.setAttribute("checked", "checked");
              input.setAttribute("name", "t");

              div.appendChild(input);

              // Support: Android <=4.1 only
              // Older WebKit doesn't clone checked state correctly in fragments
              support.checkClone = div
                .cloneNode(true)
                .cloneNode(true).lastChild.checked;

              // Support: IE <=11 only
              // Make sure textarea (and checkbox) defaultValue is properly cloned
              div.innerHTML = "<textarea>x</textarea>";
              support.noCloneChecked =
                !!div.cloneNode(true).lastChild.defaultValue;

              // Support: IE <=9 only
              // IE <=9 replaces <option> tags with their contents when inserted outside of
              // the select element.
              div.innerHTML = "<option></option>";
              support.option = !!div.lastChild;
            })();

            // We have to close these tags to support XHTML (trac-13200)
            var wrapMap = {
              // XHTML parsers do not magically insert elements in the
              // same way that tag soup parsers do. So we cannot shorten
              // this by omitting <tbody> or other required elements.
              thead: [1, "<table>", "</table>"],
              col: [2, "<table><colgroup>", "</colgroup></table>"],
              tr: [2, "<table><tbody>", "</tbody></table>"],
              td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

              _default: [0, "", ""],
            };

            wrapMap.tbody =
              wrapMap.tfoot =
              wrapMap.colgroup =
              wrapMap.caption =
              wrapMap.thead;
            wrapMap.th = wrapMap.td;

            // Support: IE <=9 only
            if (!support.option) {
              wrapMap.optgroup = wrapMap.option = [
                1,
                "<select multiple='multiple'>",
                "</select>",
              ];
            }

            function getAll(context, tag) {
              // Support: IE <=9 - 11 only
              // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
              var ret;

              if (typeof context.getElementsByTagName !== "undefined") {
                ret = context.getElementsByTagName(tag || "*");
              } else if (typeof context.querySelectorAll !== "undefined") {
                ret = context.querySelectorAll(tag || "*");
              } else {
                ret = [];
              }

              if (tag === undefined || (tag && nodeName(context, tag))) {
                return jQuery.merge([context], ret);
              }

              return ret;
            }

            // Mark scripts as having already been evaluated
            function setGlobalEval(elems, refElements) {
              var i = 0,
                l = elems.length;

              for (; i < l; i++) {
                dataPriv.set(
                  elems[i],
                  "globalEval",
                  !refElements || dataPriv.get(refElements[i], "globalEval")
                );
              }
            }

            var rhtml = /<|&#?\w+;/;

            function buildFragment(
              elems,
              context,
              scripts,
              selection,
              ignored
            ) {
              var elem,
                tmp,
                tag,
                wrap,
                attached,
                j,
                fragment = context.createDocumentFragment(),
                nodes = [],
                i = 0,
                l = elems.length;

              for (; i < l; i++) {
                elem = elems[i];

                if (elem || elem === 0) {
                  // Add nodes directly
                  if (toType(elem) === "object") {
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                    // Convert non-html into a text node
                  } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));

                    // Convert html into DOM nodes
                  } else {
                    tmp =
                      tmp || fragment.appendChild(context.createElement("div"));

                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML =
                      wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while (j--) {
                      tmp = tmp.lastChild;
                    }

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (trac-12392)
                    tmp.textContent = "";
                  }
                }
              }

              // Remove wrapper from fragment
              fragment.textContent = "";

              i = 0;
              while ((elem = nodes[i++])) {
                // Skip elements already in the context collection (trac-4087)
                if (selection && jQuery.inArray(elem, selection) > -1) {
                  if (ignored) {
                    ignored.push(elem);
                  }
                  continue;
                }

                attached = isAttached(elem);

                // Append to fragment
                tmp = getAll(fragment.appendChild(elem), "script");

                // Preserve script evaluation history
                if (attached) {
                  setGlobalEval(tmp);
                }

                // Capture executables
                if (scripts) {
                  j = 0;
                  while ((elem = tmp[j++])) {
                    if (rscriptType.test(elem.type || "")) {
                      scripts.push(elem);
                    }
                  }
                }
              }

              return fragment;
            }

            var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

            function returnTrue() {
              return true;
            }

            function returnFalse() {
              return false;
            }

            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous, except when they are no-op.
            // So expect focus to be synchronous when the element is already active,
            // and blur to be synchronous when the element is not already active.
            // (focus and blur are always synchronous in other supported browsers,
            // this just defines when we can count on it).
            function expectSync(elem, type) {
              return (elem === safeActiveElement()) === (type === "focus");
            }

            // Support: IE <=9 only
            // Accessing document.activeElement can throw unexpectedly
            // https://bugs.jquery.com/ticket/13393
            function safeActiveElement() {
              try {
                return document.activeElement;
              } catch (err) { }
            }

            function on(elem, types, selector, data, fn, one) {
              var origFn, type;

              // Types can be a map of types/handlers
              if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                  // ( types-Object, data )
                  data = data || selector;
                  selector = undefined;
                }
                for (type in types) {
                  on(elem, type, selector, data, types[type], one);
                }
                return elem;
              }

              if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
              } else if (fn == null) {
                if (typeof selector === "string") {
                  // ( types, selector, fn )
                  fn = data;
                  data = undefined;
                } else {
                  // ( types, data, fn )
                  fn = data;
                  data = selector;
                  selector = undefined;
                }
              }
              if (fn === false) {
                fn = returnFalse;
              } else if (!fn) {
                return elem;
              }

              if (one === 1) {
                origFn = fn;
                fn = function (event) {
                  // Can use an empty set, since event contains the info
                  jQuery().off(event);
                  return origFn.apply(this, arguments);
                };

                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
              }
              return elem.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
              });
            }

            /*
             * Helper functions for managing events -- not part of the public interface.
             * Props to Dean Edwards' addEvent library for many of the ideas.
             */
            jQuery.event = {
              global: {},

              add: function (elem, types, handler, data, selector) {
                var handleObjIn,
                  eventHandle,
                  tmp,
                  events,
                  t,
                  handleObj,
                  special,
                  handlers,
                  type,
                  namespaces,
                  origType,
                  elemData = dataPriv.get(elem);

                // Only attach events to objects that accept data
                if (!acceptData(elem)) {
                  return;
                }

                // Caller can pass in an object of custom data in lieu of the handler
                if (handler.handler) {
                  handleObjIn = handler;
                  handler = handleObjIn.handler;
                  selector = handleObjIn.selector;
                }

                // Ensure that invalid selectors throw exceptions at attach time
                // Evaluate against documentElement in case elem is a non-element node (e.g., document)
                if (selector) {
                  jQuery.find.matchesSelector(documentElement, selector);
                }

                // Make sure that the handler has a unique ID, used to find/remove it later
                if (!handler.guid) {
                  handler.guid = jQuery.guid++;
                }

                // Init the element's event structure and main handler, if this is the first
                if (!(events = elemData.events)) {
                  events = elemData.events = Object.create(null);
                }
                if (!(eventHandle = elemData.handle)) {
                  eventHandle = elemData.handle = function (e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" &&
                      jQuery.event.triggered !== e.type
                      ? jQuery.event.dispatch.apply(elem, arguments)
                      : undefined;
                  };
                }

                // Handle multiple events separated by a space
                types = (types || "").match(rnothtmlwhite) || [""];
                t = types.length;
                while (t--) {
                  tmp = rtypenamespace.exec(types[t]) || [];
                  type = origType = tmp[1];
                  namespaces = (tmp[2] || "").split(".").sort();

                  // There *must* be a type, no attaching namespace-only handlers
                  if (!type) {
                    continue;
                  }

                  // If event changes its type, use the special event handlers for the changed type
                  special = jQuery.event.special[type] || {};

                  // If selector defined, determine special event api type, otherwise given type
                  type =
                    (selector ? special.delegateType : special.bindType) ||
                    type;

                  // Update special based on newly reset type
                  special = jQuery.event.special[type] || {};

                  // handleObj is passed to all event handlers
                  handleObj = jQuery.extend(
                    {
                      type: type,
                      origType: origType,
                      data: data,
                      handler: handler,
                      guid: handler.guid,
                      selector: selector,
                      needsContext:
                        selector &&
                        jQuery.expr.match.needsContext.test(selector),
                      namespace: namespaces.join("."),
                    },
                    handleObjIn
                  );

                  // Init the event handler queue if we're the first
                  if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (
                      !special.setup ||
                      special.setup.call(
                        elem,
                        data,
                        namespaces,
                        eventHandle
                      ) === false
                    ) {
                      if (elem.addEventListener) {
                        elem.addEventListener(type, eventHandle);
                      }
                    }
                  }

                  if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                      handleObj.handler.guid = handler.guid;
                    }
                  }

                  // Add to the element's handler list, delegates in front
                  if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                  } else {
                    handlers.push(handleObj);
                  }

                  // Keep track of which events have ever been used, for event optimization
                  jQuery.event.global[type] = true;
                }
              },

              // Detach an event or set of events from an element
              remove: function (elem, types, handler, selector, mappedTypes) {
                var j,
                  origCount,
                  tmp,
                  events,
                  t,
                  handleObj,
                  special,
                  handlers,
                  type,
                  namespaces,
                  origType,
                  elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

                if (!elemData || !(events = elemData.events)) {
                  return;
                }

                // Once for each type.namespace in types; type may be omitted
                types = (types || "").match(rnothtmlwhite) || [""];
                t = types.length;
                while (t--) {
                  tmp = rtypenamespace.exec(types[t]) || [];
                  type = origType = tmp[1];
                  namespaces = (tmp[2] || "").split(".").sort();

                  // Unbind all events (on this namespace, if provided) for the element
                  if (!type) {
                    for (type in events) {
                      jQuery.event.remove(
                        elem,
                        type + types[t],
                        handler,
                        selector,
                        true
                      );
                    }
                    continue;
                  }

                  special = jQuery.event.special[type] || {};
                  type =
                    (selector ? special.delegateType : special.bindType) ||
                    type;
                  handlers = events[type] || [];
                  tmp =
                    tmp[2] &&
                    new RegExp(
                      "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                    );

                  // Remove matching events
                  origCount = j = handlers.length;
                  while (j--) {
                    handleObj = handlers[j];

                    if (
                      (mappedTypes || origType === handleObj.origType) &&
                      (!handler || handler.guid === handleObj.guid) &&
                      (!tmp || tmp.test(handleObj.namespace)) &&
                      (!selector ||
                        selector === handleObj.selector ||
                        (selector === "**" && handleObj.selector))
                    ) {
                      handlers.splice(j, 1);

                      if (handleObj.selector) {
                        handlers.delegateCount--;
                      }
                      if (special.remove) {
                        special.remove.call(elem, handleObj);
                      }
                    }
                  }

                  // Remove generic event handler if we removed something and no more handlers exist
                  // (avoids potential for endless recursion during removal of special event handlers)
                  if (origCount && !handlers.length) {
                    if (
                      !special.teardown ||
                      special.teardown.call(
                        elem,
                        namespaces,
                        elemData.handle
                      ) === false
                    ) {
                      jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                  }
                }

                // Remove data and the expando if it's no longer used
                if (jQuery.isEmptyObject(events)) {
                  dataPriv.remove(elem, "handle events");
                }
              },

              dispatch: function (nativeEvent) {
                var i,
                  j,
                  ret,
                  matched,
                  handleObj,
                  handlerQueue,
                  args = new Array(arguments.length),
                  // Make a writable jQuery.Event from the native event object
                  event = jQuery.event.fix(nativeEvent),
                  handlers =
                    (dataPriv.get(this, "events") || Object.create(null))[
                    event.type
                    ] || [],
                  special = jQuery.event.special[event.type] || {};

                // Use the fix-ed jQuery.Event rather than the (read-only) native event
                args[0] = event;

                for (i = 1; i < arguments.length; i++) {
                  args[i] = arguments[i];
                }

                event.delegateTarget = this;

                // Call the preDispatch hook for the mapped type, and let it bail if desired
                if (
                  special.preDispatch &&
                  special.preDispatch.call(this, event) === false
                ) {
                  return;
                }

                // Determine handlers
                handlerQueue = jQuery.event.handlers.call(
                  this,
                  event,
                  handlers
                );

                // Run delegates first; they may want to stop propagation beneath us
                i = 0;
                while (
                  (matched = handlerQueue[i++]) &&
                  !event.isPropagationStopped()
                ) {
                  event.currentTarget = matched.elem;

                  j = 0;
                  while (
                    (handleObj = matched.handlers[j++]) &&
                    !event.isImmediatePropagationStopped()
                  ) {
                    // If the event is namespaced, then each handler is only invoked if it is
                    // specially universal or its namespaces are a superset of the event's.
                    if (
                      !event.rnamespace ||
                      handleObj.namespace === false ||
                      event.rnamespace.test(handleObj.namespace)
                    ) {
                      event.handleObj = handleObj;
                      event.data = handleObj.data;

                      ret = (
                        (jQuery.event.special[handleObj.origType] || {})
                          .handle || handleObj.handler
                      ).apply(matched.elem, args);

                      if (ret !== undefined) {
                        if ((event.result = ret) === false) {
                          event.preventDefault();
                          event.stopPropagation();
                        }
                      }
                    }
                  }
                }

                // Call the postDispatch hook for the mapped type
                if (special.postDispatch) {
                  special.postDispatch.call(this, event);
                }

                return event.result;
              },

              handlers: function (event, handlers) {
                var i,
                  handleObj,
                  sel,
                  matchedHandlers,
                  matchedSelectors,
                  handlerQueue = [],
                  delegateCount = handlers.delegateCount,
                  cur = event.target;

                // Find delegate handlers
                if (
                  delegateCount &&
                  // Support: IE <=9
                  // Black-hole SVG <use> instance trees (trac-13180)
                  cur.nodeType &&
                  // Support: Firefox <=42
                  // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                  // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                  // Support: IE 11 only
                  // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                  !(event.type === "click" && event.button >= 1)
                ) {
                  for (; cur !== this; cur = cur.parentNode || this) {
                    // Don't check non-elements (trac-13208)
                    // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                    if (
                      cur.nodeType === 1 &&
                      !(event.type === "click" && cur.disabled === true)
                    ) {
                      matchedHandlers = [];
                      matchedSelectors = {};
                      for (i = 0; i < delegateCount; i++) {
                        handleObj = handlers[i];

                        // Don't conflict with Object.prototype properties (trac-13203)
                        sel = handleObj.selector + " ";

                        if (matchedSelectors[sel] === undefined) {
                          matchedSelectors[sel] = handleObj.needsContext
                            ? jQuery(sel, this).index(cur) > -1
                            : jQuery.find(sel, this, null, [cur]).length;
                        }
                        if (matchedSelectors[sel]) {
                          matchedHandlers.push(handleObj);
                        }
                      }
                      if (matchedHandlers.length) {
                        handlerQueue.push({
                          elem: cur,
                          handlers: matchedHandlers,
                        });
                      }
                    }
                  }
                }

                // Add the remaining (directly-bound) handlers
                cur = this;
                if (delegateCount < handlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount),
                  });
                }

                return handlerQueue;
              },

              addProp: function (name, hook) {
                Object.defineProperty(jQuery.Event.prototype, name, {
                  enumerable: true,
                  configurable: true,

                  get: isFunction(hook)
                    ? function () {
                      if (this.originalEvent) {
                        return hook(this.originalEvent);
                      }
                    }
                    : function () {
                      if (this.originalEvent) {
                        return this.originalEvent[name];
                      }
                    },

                  set: function (value) {
                    Object.defineProperty(this, name, {
                      enumerable: true,
                      configurable: true,
                      writable: true,
                      value: value,
                    });
                  },
                });
              },

              fix: function (originalEvent) {
                return originalEvent[jQuery.expando]
                  ? originalEvent
                  : new jQuery.Event(originalEvent);
              },

              special: {
                load: {
                  // Prevent triggered image.load events from bubbling to window.load
                  noBubble: true,
                },
                click: {
                  // Utilize native event to ensure correct state for checkable inputs
                  setup: function (data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Claim the first handler
                    if (
                      rcheckableType.test(el.type) &&
                      el.click &&
                      nodeName(el, "input")
                    ) {
                      // dataPriv.set( el, "click", ... )
                      leverageNative(el, "click", returnTrue);
                    }

                    // Return false to allow normal processing in the caller
                    return false;
                  },
                  trigger: function (data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Force setup before triggering a click
                    if (
                      rcheckableType.test(el.type) &&
                      el.click &&
                      nodeName(el, "input")
                    ) {
                      leverageNative(el, "click");
                    }

                    // Return non-false to allow normal event-path propagation
                    return true;
                  },

                  // For cross-browser consistency, suppress native .click() on links
                  // Also prevent it if we're currently inside a leveraged native-event stack
                  _default: function (event) {
                    var target = event.target;
                    return (
                      (rcheckableType.test(target.type) &&
                        target.click &&
                        nodeName(target, "input") &&
                        dataPriv.get(target, "click")) ||
                      nodeName(target, "a")
                    );
                  },
                },

                beforeunload: {
                  postDispatch: function (event) {
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                      event.originalEvent.returnValue = event.result;
                    }
                  },
                },
              },
            };

            // Ensure the presence of an event listener that handles manually-triggered
            // synthetic events by interrupting progress until reinvoked in response to
            // *native* events that it fires directly, ensuring that state changes have
            // already occurred before other listeners are invoked.
            function leverageNative(el, type, expectSync) {
              // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
              if (!expectSync) {
                if (dataPriv.get(el, type) === undefined) {
                  jQuery.event.add(el, type, returnTrue);
                }
                return;
              }

              // Register the controller as a special universal handler for all event namespaces
              dataPriv.set(el, type, false);
              jQuery.event.add(el, type, {
                namespace: false,
                handler: function (event) {
                  var notAsync,
                    result,
                    saved = dataPriv.get(this, type);

                  if (event.isTrigger & 1 && this[type]) {
                    // Interrupt processing of the outer synthetic .trigger()ed event
                    // Saved data should be false in such cases, but might be a leftover capture object
                    // from an async native handler (gh-4350)
                    if (!saved.length) {
                      // Store arguments for use when handling the inner native event
                      // There will always be at least one argument (an event object), so this array
                      // will not be confused with a leftover capture object.
                      saved = slice.call(arguments);
                      dataPriv.set(this, type, saved);

                      // Trigger the native event and capture its result
                      // Support: IE <=9 - 11+
                      // focus() and blur() are asynchronous
                      notAsync = expectSync(this, type);
                      this[type]();
                      result = dataPriv.get(this, type);
                      if (saved !== result || notAsync) {
                        dataPriv.set(this, type, false);
                      } else {
                        result = {};
                      }
                      if (saved !== result) {
                        // Cancel the outer synthetic event
                        event.stopImmediatePropagation();
                        event.preventDefault();

                        // Support: Chrome 86+
                        // In Chrome, if an element having a focusout handler is blurred by
                        // clicking outside of it, it invokes the handler synchronously. If
                        // that handler calls `.remove()` on the element, the data is cleared,
                        // leaving `result` undefined. We need to guard against this.
                        return result && result.value;
                      }

                      // If this is an inner synthetic event for an event with a bubbling surrogate
                      // (focus or blur), assume that the surrogate already propagated from triggering the
                      // native event and prevent that from happening again here.
                      // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                      // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                      // less bad than duplication.
                    } else if (
                      (jQuery.event.special[type] || {}).delegateType
                    ) {
                      event.stopPropagation();
                    }

                    // If this is a native event triggered above, everything is now in order
                    // Fire an inner synthetic event with the original arguments
                  } else if (saved.length) {
                    // ...and capture the result
                    dataPriv.set(this, type, {
                      value: jQuery.event.trigger(
                        // Support: IE <=9 - 11+
                        // Extend with the prototype to reset the above stopImmediatePropagation()
                        jQuery.extend(saved[0], jQuery.Event.prototype),
                        saved.slice(1),
                        this
                      ),
                    });

                    // Abort handling of the native event
                    event.stopImmediatePropagation();
                  }
                },
              });
            }

            jQuery.removeEvent = function (elem, type, handle) {
              // This "if" is needed for plain objects
              if (elem.removeEventListener) {
                elem.removeEventListener(type, handle);
              }
            };

            jQuery.Event = function (src, props) {
              // Allow instantiation without the 'new' keyword
              if (!(this instanceof jQuery.Event)) {
                return new jQuery.Event(src, props);
              }

              // Event object
              if (src && src.type) {
                this.originalEvent = src;
                this.type = src.type;

                // Events bubbling up the document may have been marked as prevented
                // by a handler lower down the tree; reflect the correct value.
                this.isDefaultPrevented =
                  src.defaultPrevented ||
                    (src.defaultPrevented === undefined &&
                      // Support: Android <=2.3 only
                      src.returnValue === false)
                    ? returnTrue
                    : returnFalse;

                // Create target properties
                // Support: Safari <=6 - 7 only
                // Target should not be a text node (trac-504, trac-13143)
                this.target =
                  src.target && src.target.nodeType === 3
                    ? src.target.parentNode
                    : src.target;

                this.currentTarget = src.currentTarget;
                this.relatedTarget = src.relatedTarget;

                // Event type
              } else {
                this.type = src;
              }

              // Put explicitly provided properties onto the event object
              if (props) {
                jQuery.extend(this, props);
              }

              // Create a timestamp if incoming event doesn't have one
              this.timeStamp = (src && src.timeStamp) || Date.now();

              // Mark it as fixed
              this[jQuery.expando] = true;
            };

            // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
            // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
            jQuery.Event.prototype = {
              constructor: jQuery.Event,
              isDefaultPrevented: returnFalse,
              isPropagationStopped: returnFalse,
              isImmediatePropagationStopped: returnFalse,
              isSimulated: false,

              preventDefault: function () {
                var e = this.originalEvent;

                this.isDefaultPrevented = returnTrue;

                if (e && !this.isSimulated) {
                  e.preventDefault();
                }
              },
              stopPropagation: function () {
                var e = this.originalEvent;

                this.isPropagationStopped = returnTrue;

                if (e && !this.isSimulated) {
                  e.stopPropagation();
                }
              },
              stopImmediatePropagation: function () {
                var e = this.originalEvent;

                this.isImmediatePropagationStopped = returnTrue;

                if (e && !this.isSimulated) {
                  e.stopImmediatePropagation();
                }

                this.stopPropagation();
              },
            };

            // Includes all common event props including KeyEvent and MouseEvent specific props
            jQuery.each(
              {
                altKey: true,
                bubbles: true,
                cancelable: true,
                changedTouches: true,
                ctrlKey: true,
                detail: true,
                eventPhase: true,
                metaKey: true,
                pageX: true,
                pageY: true,
                shiftKey: true,
                view: true,
                char: true,
                code: true,
                charCode: true,
                key: true,
                keyCode: true,
                button: true,
                buttons: true,
                clientX: true,
                clientY: true,
                offsetX: true,
                offsetY: true,
                pointerId: true,
                pointerType: true,
                screenX: true,
                screenY: true,
                targetTouches: true,
                toElement: true,
                touches: true,
                which: true,
              },
              jQuery.event.addProp
            );

            jQuery.each(
              { focus: "focusin", blur: "focusout" },
              function (type, delegateType) {
                jQuery.event.special[type] = {
                  // Utilize native event if possible so blur/focus sequence is correct
                  setup: function () {
                    // Claim the first handler
                    // dataPriv.set( this, "focus", ... )
                    // dataPriv.set( this, "blur", ... )
                    leverageNative(this, type, expectSync);

                    // Return false to allow normal processing in the caller
                    return false;
                  },
                  trigger: function () {
                    // Force setup before trigger
                    leverageNative(this, type);

                    // Return non-false to allow normal event-path propagation
                    return true;
                  },

                  // Suppress native focus or blur if we're currently inside
                  // a leveraged native-event stack
                  _default: function (event) {
                    return dataPriv.get(event.target, type);
                  },

                  delegateType: delegateType,
                };
              }
            );

            // Create mouseenter/leave events using mouseover/out and event-time checks
            // so that event delegation works in jQuery.
            // Do the same for pointerenter/pointerleave and pointerover/pointerout
            //
            // Support: Safari 7 only
            // Safari sends mouseenter too often; see:
            // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
            // for the description of the bug (it existed in older Chrome versions as well).
            jQuery.each(
              {
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout",
              },
              function (orig, fix) {
                jQuery.event.special[orig] = {
                  delegateType: fix,
                  bindType: fix,

                  handle: function (event) {
                    var ret,
                      target = this,
                      related = event.relatedTarget,
                      handleObj = event.handleObj;

                    // For mouseenter/leave call the handler if related is outside the target.
                    // NB: No relatedTarget if the mouse left/entered the browser window
                    if (
                      !related ||
                      (related !== target && !jQuery.contains(target, related))
                    ) {
                      event.type = handleObj.origType;
                      ret = handleObj.handler.apply(this, arguments);
                      event.type = fix;
                    }
                    return ret;
                  },
                };
              }
            );

            jQuery.fn.extend({
              on: function (types, selector, data, fn) {
                return on(this, types, selector, data, fn);
              },
              one: function (types, selector, data, fn) {
                return on(this, types, selector, data, fn, 1);
              },
              off: function (types, selector, fn) {
                var handleObj, type;
                if (types && types.preventDefault && types.handleObj) {
                  // ( event )  dispatched jQuery.Event
                  handleObj = types.handleObj;
                  jQuery(types.delegateTarget).off(
                    handleObj.namespace
                      ? handleObj.origType + "." + handleObj.namespace
                      : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                  );
                  return this;
                }
                if (typeof types === "object") {
                  // ( types-object [, selector] )
                  for (type in types) {
                    this.off(type, selector, types[type]);
                  }
                  return this;
                }
                if (selector === false || typeof selector === "function") {
                  // ( types [, fn] )
                  fn = selector;
                  selector = undefined;
                }
                if (fn === false) {
                  fn = returnFalse;
                }
                return this.each(function () {
                  jQuery.event.remove(this, types, fn, selector);
                });
              },
            });

            var // Support: IE <=10 - 11, Edge 12 - 13 only
              // In IE/Edge using regex groups here causes severe slowdowns.
              // See https://connect.microsoft.com/IE/feedback/details/1736512/
              rnoInnerhtml = /<script|<style|<link/i,
              // checked="checked" or checked
              rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
              rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

            // Prefer a tbody over its parent table for containing new rows
            function manipulationTarget(elem, content) {
              if (
                nodeName(elem, "table") &&
                nodeName(
                  content.nodeType !== 11 ? content : content.firstChild,
                  "tr"
                )
              ) {
                return jQuery(elem).children("tbody")[0] || elem;
              }

              return elem;
            }

            // Replace/restore the type attribute of script elements for safe DOM manipulation
            function disableScript(elem) {
              elem.type =
                (elem.getAttribute("type") !== null) + "/" + elem.type;
              return elem;
            }
            function restoreScript(elem) {
              if ((elem.type || "").slice(0, 5) === "true/") {
                elem.type = elem.type.slice(5);
              } else {
                elem.removeAttribute("type");
              }

              return elem;
            }

            function cloneCopyEvent(src, dest) {
              var i, l, type, pdataOld, udataOld, udataCur, events;

              if (dest.nodeType !== 1) {
                return;
              }

              // 1. Copy private data: events, handlers, etc.
              if (dataPriv.hasData(src)) {
                pdataOld = dataPriv.get(src);
                events = pdataOld.events;

                if (events) {
                  dataPriv.remove(dest, "handle events");

                  for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                      jQuery.event.add(dest, type, events[type][i]);
                    }
                  }
                }
              }

              // 2. Copy user data
              if (dataUser.hasData(src)) {
                udataOld = dataUser.access(src);
                udataCur = jQuery.extend({}, udataOld);

                dataUser.set(dest, udataCur);
              }
            }

            // Fix IE bugs, see support tests
            function fixInput(src, dest) {
              var nodeName = dest.nodeName.toLowerCase();

              // Fails to persist the checked state of a cloned checkbox or radio button.
              if (nodeName === "input" && rcheckableType.test(src.type)) {
                dest.checked = src.checked;

                // Fails to return the selected option to the default selected state when cloning options
              } else if (nodeName === "input" || nodeName === "textarea") {
                dest.defaultValue = src.defaultValue;
              }
            }

            function domManip(collection, args, callback, ignored) {
              // Flatten any nested arrays
              args = flat(args);

              var fragment,
                first,
                scripts,
                hasScripts,
                node,
                doc,
                i = 0,
                l = collection.length,
                iNoClone = l - 1,
                value = args[0],
                valueIsFunction = isFunction(value);

              // We can't cloneNode fragments that contain checked, in WebKit
              if (
                valueIsFunction ||
                (l > 1 &&
                  typeof value === "string" &&
                  !support.checkClone &&
                  rchecked.test(value))
              ) {
                return collection.each(function (index) {
                  var self = collection.eq(index);
                  if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                  }
                  domManip(self, args, callback, ignored);
                });
              }

              if (l) {
                fragment = buildFragment(
                  args,
                  collection[0].ownerDocument,
                  false,
                  collection,
                  ignored
                );
                first = fragment.firstChild;

                if (fragment.childNodes.length === 1) {
                  fragment = first;
                }

                // Require either new content or an interest in ignored elements to invoke the callback
                if (first || ignored) {
                  scripts = jQuery.map(
                    getAll(fragment, "script"),
                    disableScript
                  );
                  hasScripts = scripts.length;

                  // Use the original fragment for the last item
                  // instead of the first because it can end up
                  // being emptied incorrectly in certain situations (trac-8070).
                  for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                      node = jQuery.clone(node, true, true);

                      // Keep references to cloned scripts for later restoration
                      if (hasScripts) {
                        // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(scripts, getAll(node, "script"));
                      }
                    }

                    callback.call(collection[i], node, i);
                  }

                  if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);

                    // Evaluate executable scripts on first document insertion
                    for (i = 0; i < hasScripts; i++) {
                      node = scripts[i];
                      if (
                        rscriptType.test(node.type || "") &&
                        !dataPriv.access(node, "globalEval") &&
                        jQuery.contains(doc, node)
                      ) {
                        if (
                          node.src &&
                          (node.type || "").toLowerCase() !== "module"
                        ) {
                          // Optional AJAX dependency, but won't run scripts if not present
                          if (jQuery._evalUrl && !node.noModule) {
                            jQuery._evalUrl(
                              node.src,
                              {
                                nonce: node.nonce || node.getAttribute("nonce"),
                              },
                              doc
                            );
                          }
                        } else {
                          // Unwrap a CDATA section containing script contents. This shouldn't be
                          // needed as in XML documents they're already not visible when
                          // inspecting element contents and in HTML documents they have no
                          // meaning but we're preserving that logic for backwards compatibility.
                          // This will be removed completely in 4.0. See gh-4904.
                          DOMEval(
                            node.textContent.replace(rcleanScript, ""),
                            node,
                            doc
                          );
                        }
                      }
                    }
                  }
                }
              }

              return collection;
            }

            function remove(elem, selector, keepData) {
              var node,
                nodes = selector ? jQuery.filter(selector, elem) : elem,
                i = 0;

              for (; (node = nodes[i]) != null; i++) {
                if (!keepData && node.nodeType === 1) {
                  jQuery.cleanData(getAll(node));
                }

                if (node.parentNode) {
                  if (keepData && isAttached(node)) {
                    setGlobalEval(getAll(node, "script"));
                  }
                  node.parentNode.removeChild(node);
                }
              }

              return elem;
            }

            jQuery.extend({
              htmlPrefilter: function (html) {
                return html;
              },

              clone: function (elem, dataAndEvents, deepDataAndEvents) {
                var i,
                  l,
                  srcElements,
                  destElements,
                  clone = elem.cloneNode(true),
                  inPage = isAttached(elem);

                // Fix IE cloning issues
                if (
                  !support.noCloneChecked &&
                  (elem.nodeType === 1 || elem.nodeType === 11) &&
                  !jQuery.isXMLDoc(elem)
                ) {
                  // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                  destElements = getAll(clone);
                  srcElements = getAll(elem);

                  for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                  }
                }

                // Copy the events from the original to the clone
                if (dataAndEvents) {
                  if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0, l = srcElements.length; i < l; i++) {
                      cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                  } else {
                    cloneCopyEvent(elem, clone);
                  }
                }

                // Preserve script evaluation history
                destElements = getAll(clone, "script");
                if (destElements.length > 0) {
                  setGlobalEval(
                    destElements,
                    !inPage && getAll(elem, "script")
                  );
                }

                // Return the cloned set
                return clone;
              },

              cleanData: function (elems) {
                var data,
                  elem,
                  type,
                  special = jQuery.event.special,
                  i = 0;

                for (; (elem = elems[i]) !== undefined; i++) {
                  if (acceptData(elem)) {
                    if ((data = elem[dataPriv.expando])) {
                      if (data.events) {
                        for (type in data.events) {
                          if (special[type]) {
                            jQuery.event.remove(elem, type);

                            // This is a shortcut to avoid jQuery.event.remove's overhead
                          } else {
                            jQuery.removeEvent(elem, type, data.handle);
                          }
                        }
                      }

                      // Support: Chrome <=35 - 45+
                      // Assign undefined instead of using delete, see Data#remove
                      elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                      // Support: Chrome <=35 - 45+
                      // Assign undefined instead of using delete, see Data#remove
                      elem[dataUser.expando] = undefined;
                    }
                  }
                }
              },
            });

            jQuery.fn.extend({
              detach: function (selector) {
                return remove(this, selector, true);
              },

              remove: function (selector) {
                return remove(this, selector);
              },

              text: function (value) {
                return access(
                  this,
                  function (value) {
                    return value === undefined
                      ? jQuery.text(this)
                      : this.empty().each(function () {
                        if (
                          this.nodeType === 1 ||
                          this.nodeType === 11 ||
                          this.nodeType === 9
                        ) {
                          this.textContent = value;
                        }
                      });
                  },
                  null,
                  value,
                  arguments.length
                );
              },

              append: function () {
                return domManip(this, arguments, function (elem) {
                  if (
                    this.nodeType === 1 ||
                    this.nodeType === 11 ||
                    this.nodeType === 9
                  ) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                  }
                });
              },

              prepend: function () {
                return domManip(this, arguments, function (elem) {
                  if (
                    this.nodeType === 1 ||
                    this.nodeType === 11 ||
                    this.nodeType === 9
                  ) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                  }
                });
              },

              before: function () {
                return domManip(this, arguments, function (elem) {
                  if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                  }
                });
              },

              after: function () {
                return domManip(this, arguments, function (elem) {
                  if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                  }
                });
              },

              empty: function () {
                var elem,
                  i = 0;

                for (; (elem = this[i]) != null; i++) {
                  if (elem.nodeType === 1) {
                    // Prevent memory leaks
                    jQuery.cleanData(getAll(elem, false));

                    // Remove any remaining nodes
                    elem.textContent = "";
                  }
                }

                return this;
              },

              clone: function (dataAndEvents, deepDataAndEvents) {
                dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                deepDataAndEvents =
                  deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                return this.map(function () {
                  return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                });
              },

              html: function (value) {
                return access(
                  this,
                  function (value) {
                    var elem = this[0] || {},
                      i = 0,
                      l = this.length;

                    if (value === undefined && elem.nodeType === 1) {
                      return elem.innerHTML;
                    }

                    // See if we can take a shortcut and just use innerHTML
                    if (
                      typeof value === "string" &&
                      !rnoInnerhtml.test(value) &&
                      !wrapMap[
                      (rtagName.exec(value) || ["", ""])[1].toLowerCase()
                      ]
                    ) {
                      value = jQuery.htmlPrefilter(value);

                      try {
                        for (; i < l; i++) {
                          elem = this[i] || {};

                          // Remove element nodes and prevent memory leaks
                          if (elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem, false));
                            elem.innerHTML = value;
                          }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                      } catch (e) { }
                    }

                    if (elem) {
                      this.empty().append(value);
                    }
                  },
                  null,
                  value,
                  arguments.length
                );
              },

              replaceWith: function () {
                var ignored = [];

                // Make the changes, replacing each non-ignored context element with the new content
                return domManip(
                  this,
                  arguments,
                  function (elem) {
                    var parent = this.parentNode;

                    if (jQuery.inArray(this, ignored) < 0) {
                      jQuery.cleanData(getAll(this));
                      if (parent) {
                        parent.replaceChild(elem, this);
                      }
                    }

                    // Force callback invocation
                  },
                  ignored
                );
              },
            });

            jQuery.each(
              {
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith",
              },
              function (name, original) {
                jQuery.fn[name] = function (selector) {
                  var elems,
                    ret = [],
                    insert = jQuery(selector),
                    last = insert.length - 1,
                    i = 0;

                  for (; i <= last; i++) {
                    elems = i === last ? this : this.clone(true);
                    jQuery(insert[i])[original](elems);

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // .get() because push.apply(_, arraylike) throws on ancient WebKit
                    push.apply(ret, elems.get());
                  }

                  return this.pushStack(ret);
                };
              }
            );
            var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

            var rcustomProp = /^--/;

            var getStyles = function (elem) {
              // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
              // IE throws on elements created in popups
              // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
              var view = elem.ownerDocument.defaultView;

              if (!view || !view.opener) {
                view = window;
              }

              return view.getComputedStyle(elem);
            };

            var swap = function (elem, options, callback) {
              var ret,
                name,
                old = {};

              // Remember the old values, and insert the new ones
              for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
              }

              ret = callback.call(elem);

              // Revert the old values
              for (name in options) {
                elem.style[name] = old[name];
              }

              return ret;
            };

            var rboxStyle = new RegExp(cssExpand.join("|"), "i");

            var whitespace = "[\\x20\\t\\r\\n\\f]";

            var rtrimCSS = new RegExp(
              "^" +
              whitespace +
              "+|((?:^|[^\\\\])(?:\\\\.)*)" +
              whitespace +
              "+$",
              "g"
            );

            (function () {
              // Executing both pixelPosition & boxSizingReliable tests require only one layout
              // so they're executed at the same time to save the second computation.
              function computeStyleTests() {
                // This is a singleton, we need to execute it only once
                if (!div) {
                  return;
                }

                container.style.cssText =
                  "position:absolute;left:-11111px;width:60px;" +
                  "margin-top:1px;padding:0;border:0";
                div.style.cssText =
                  "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                  "margin:auto;border:1px;padding:1px;" +
                  "width:60%;top:1%";
                documentElement.appendChild(container).appendChild(div);

                var divStyle = window.getComputedStyle(div);
                pixelPositionVal = divStyle.top !== "1%";

                // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
                reliableMarginLeftVal =
                  roundPixelMeasures(divStyle.marginLeft) === 12;

                // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
                // Some styles come back with percentage values, even though they shouldn't
                div.style.right = "60%";
                pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

                // Support: IE 9 - 11 only
                // Detect misreporting of content dimensions for box-sizing:border-box elements
                boxSizingReliableVal =
                  roundPixelMeasures(divStyle.width) === 36;

                // Support: IE 9 only
                // Detect overflow:scroll screwiness (gh-3699)
                // Support: Chrome <=64
                // Don't get tricked when zoom affects offsetWidth (gh-4029)
                div.style.position = "absolute";
                scrollboxSizeVal =
                  roundPixelMeasures(div.offsetWidth / 3) === 12;

                documentElement.removeChild(container);

                // Nullify the div so it wouldn't be stored in the memory and
                // it will also be a sign that checks already performed
                div = null;
              }

              function roundPixelMeasures(measure) {
                return Math.round(parseFloat(measure));
              }

              var pixelPositionVal,
                boxSizingReliableVal,
                scrollboxSizeVal,
                pixelBoxStylesVal,
                reliableTrDimensionsVal,
                reliableMarginLeftVal,
                container = document.createElement("div"),
                div = document.createElement("div");

              // Finish early in limited (non-browser) environments
              if (!div.style) {
                return;
              }

              // Support: IE <=9 - 11 only
              // Style of cloned element affects source element cloned (trac-8908)
              div.style.backgroundClip = "content-box";
              div.cloneNode(true).style.backgroundClip = "";
              support.clearCloneStyle =
                div.style.backgroundClip === "content-box";

              jQuery.extend(support, {
                boxSizingReliable: function () {
                  computeStyleTests();
                  return boxSizingReliableVal;
                },
                pixelBoxStyles: function () {
                  computeStyleTests();
                  return pixelBoxStylesVal;
                },
                pixelPosition: function () {
                  computeStyleTests();
                  return pixelPositionVal;
                },
                reliableMarginLeft: function () {
                  computeStyleTests();
                  return reliableMarginLeftVal;
                },
                scrollboxSize: function () {
                  computeStyleTests();
                  return scrollboxSizeVal;
                },

                // Support: IE 9 - 11+, Edge 15 - 18+
                // IE/Edge misreport `getComputedStyle` of table rows with width/height
                // set in CSS while `offset*` properties report correct values.
                // Behavior in IE 9 is more subtle than in newer versions & it passes
                // some versions of this test; make sure not to make it pass there!
                //
                // Support: Firefox 70+
                // Only Firefox includes border widths
                // in computed dimensions. (gh-4529)
                reliableTrDimensions: function () {
                  var table, tr, trChild, trStyle;
                  if (reliableTrDimensionsVal == null) {
                    table = document.createElement("table");
                    tr = document.createElement("tr");
                    trChild = document.createElement("div");

                    table.style.cssText =
                      "position:absolute;left:-11111px;border-collapse:separate";
                    tr.style.cssText = "border:1px solid";

                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = "1px";
                    trChild.style.height = "9px";

                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is display: block
                    // gets around this issue.
                    trChild.style.display = "block";

                    documentElement
                      .appendChild(table)
                      .appendChild(tr)
                      .appendChild(trChild);

                    trStyle = window.getComputedStyle(tr);
                    reliableTrDimensionsVal =
                      parseInt(trStyle.height, 10) +
                      parseInt(trStyle.borderTopWidth, 10) +
                      parseInt(trStyle.borderBottomWidth, 10) ===
                      tr.offsetHeight;

                    documentElement.removeChild(table);
                  }
                  return reliableTrDimensionsVal;
                },
              });
            })();

            function curCSS(elem, name, computed) {
              var width,
                minWidth,
                maxWidth,
                ret,
                isCustomProp = rcustomProp.test(name),
                // Support: Firefox 51+
                // Retrieving style before computed somehow
                // fixes an issue with getting wrong values
                // on detached elements
                style = elem.style;

              computed = computed || getStyles(elem);

              // getPropertyValue is needed for:
              //   .css('filter') (IE 9 only, trac-12537)
              //   .css('--customProperty) (gh-3144)
              if (computed) {
                ret = computed.getPropertyValue(name) || computed[name];

                // trim whitespace for custom property (issue gh-4926)
                if (isCustomProp) {
                  // rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED
                  // as whitespace while CSS does not, but this is not a problem
                  // because CSS preprocessing replaces them with U+000A LINE FEED
                  // (which *is* CSS whitespace)
                  // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
                  ret = ret.replace(rtrimCSS, "$1");
                }

                if (ret === "" && !isAttached(elem)) {
                  ret = jQuery.style(elem, name);
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Android Browser returns percentage for some values,
                // but width seems to be reliably pixels.
                // This is against the CSSOM draft spec:
                // https://drafts.csswg.org/cssom/#resolved-values
                if (
                  !support.pixelBoxStyles() &&
                  rnumnonpx.test(ret) &&
                  rboxStyle.test(name)
                ) {
                  // Remember the original values
                  width = style.width;
                  minWidth = style.minWidth;
                  maxWidth = style.maxWidth;

                  // Put in the new values to get a computed value out
                  style.minWidth = style.maxWidth = style.width = ret;
                  ret = computed.width;

                  // Revert the changed values
                  style.width = width;
                  style.minWidth = minWidth;
                  style.maxWidth = maxWidth;
                }
              }

              return ret !== undefined
                ? // Support: IE <=9 - 11 only
                // IE returns zIndex value as an integer.
                ret + ""
                : ret;
            }

            function addGetHookIf(conditionFn, hookFn) {
              // Define the hook, we'll check on the first run if it's really needed.
              return {
                get: function () {
                  if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                  }

                  // Hook needed; redefine it so that the support test is not executed again.
                  return (this.get = hookFn).apply(this, arguments);
                },
              };
            }

            var cssPrefixes = ["Webkit", "Moz", "ms"],
              emptyStyle = document.createElement("div").style,
              vendorProps = {};

            // Return a vendor-prefixed property or undefined
            function vendorPropName(name) {
              // Check for vendor prefixed names
              var capName = name[0].toUpperCase() + name.slice(1),
                i = cssPrefixes.length;

              while (i--) {
                name = cssPrefixes[i] + capName;
                if (name in emptyStyle) {
                  return name;
                }
              }
            }

            // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
            function finalPropName(name) {
              var final = jQuery.cssProps[name] || vendorProps[name];

              if (final) {
                return final;
              }
              if (name in emptyStyle) {
                return name;
              }
              return (vendorProps[name] = vendorPropName(name) || name);
            }

            var // Swappable if display is none or starts with table
              // except "table", "table-cell", or "table-caption"
              // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
              rdisplayswap = /^(none|table(?!-c[ea]).+)/,
              cssShow = {
                position: "absolute",
                visibility: "hidden",
                display: "block",
              },
              cssNormalTransform = {
                letterSpacing: "0",
                fontWeight: "400",
              };

            function setPositiveNumber(_elem, value, subtract) {
              // Any relative (+/-) values have already been
              // normalized at this point
              var matches = rcssNum.exec(value);
              return matches
                ? // Guard against undefined "subtract", e.g., when used as in cssHooks
                Math.max(0, matches[2] - (subtract || 0)) +
                (matches[3] || "px")
                : value;
            }

            function boxModelAdjustment(
              elem,
              dimension,
              box,
              isBorderBox,
              styles,
              computedVal
            ) {
              var i = dimension === "width" ? 1 : 0,
                extra = 0,
                delta = 0;

              // Adjustment may not be necessary
              if (box === (isBorderBox ? "border" : "content")) {
                return 0;
              }

              for (; i < 4; i += 2) {
                // Both box models exclude margin
                if (box === "margin") {
                  delta += jQuery.css(elem, box + cssExpand[i], true, styles);
                }

                // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
                if (!isBorderBox) {
                  // Add padding
                  delta += jQuery.css(
                    elem,
                    "padding" + cssExpand[i],
                    true,
                    styles
                  );

                  // For "border" or "margin", add border
                  if (box !== "padding") {
                    delta += jQuery.css(
                      elem,
                      "border" + cssExpand[i] + "Width",
                      true,
                      styles
                    );

                    // But still keep track of it otherwise
                  } else {
                    extra += jQuery.css(
                      elem,
                      "border" + cssExpand[i] + "Width",
                      true,
                      styles
                    );
                  }

                  // If we get here with a border-box (content + padding + border), we're seeking "content" or
                  // "padding" or "margin"
                } else {
                  // For "content", subtract padding
                  if (box === "content") {
                    delta -= jQuery.css(
                      elem,
                      "padding" + cssExpand[i],
                      true,
                      styles
                    );
                  }

                  // For "content" or "padding", subtract border
                  if (box !== "margin") {
                    delta -= jQuery.css(
                      elem,
                      "border" + cssExpand[i] + "Width",
                      true,
                      styles
                    );
                  }
                }
              }

              // Account for positive content-box scroll gutter when requested by providing computedVal
              if (!isBorderBox && computedVal >= 0) {
                // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
                // Assuming integer scroll gutter, subtract the rest and round down
                delta +=
                  Math.max(
                    0,
                    Math.ceil(
                      elem[
                      "offset" +
                      dimension[0].toUpperCase() +
                      dimension.slice(1)
                      ] -
                      computedVal -
                      delta -
                      extra -
                      0.5

                      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                      // Use an explicit zero to avoid NaN (gh-3964)
                    )
                  ) || 0;
              }

              return delta;
            }

            function getWidthOrHeight(elem, dimension, extra) {
              // Start with computed style
              var styles = getStyles(elem),
                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
                // Fake content-box until we know it's needed to know the true value.
                boxSizingNeeded = !support.boxSizingReliable() || extra,
                isBorderBox =
                  boxSizingNeeded &&
                  jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                valueIsBorderBox = isBorderBox,
                val = curCSS(elem, dimension, styles),
                offsetProp =
                  "offset" + dimension[0].toUpperCase() + dimension.slice(1);

              // Support: Firefox <=54
              // Return a confounding non-pixel value or feign ignorance, as appropriate.
              if (rnumnonpx.test(val)) {
                if (!extra) {
                  return val;
                }
                val = "auto";
              }

              // Support: IE 9 - 11 only
              // Use offsetWidth/offsetHeight for when box sizing is unreliable.
              // In those cases, the computed value can be trusted to be border-box.
              if (
                ((!support.boxSizingReliable() && isBorderBox) ||
                  // Support: IE 10 - 11+, Edge 15 - 18+
                  // IE/Edge misreport `getComputedStyle` of table rows with width/height
                  // set in CSS while `offset*` properties report correct values.
                  // Interestingly, in some cases IE 9 doesn't suffer from this issue.
                  (!support.reliableTrDimensions() && nodeName(elem, "tr")) ||
                  // Fall back to offsetWidth/offsetHeight when value is "auto"
                  // This happens for inline elements with no explicit setting (gh-3571)
                  val === "auto" ||
                  // Support: Android <=4.1 - 4.3 only
                  // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                  (!parseFloat(val) &&
                    jQuery.css(elem, "display", false, styles) === "inline")) &&
                // Make sure the element is visible & connected
                elem.getClientRects().length
              ) {
                isBorderBox =
                  jQuery.css(elem, "boxSizing", false, styles) === "border-box";

                // Where available, offsetWidth/offsetHeight approximate border box dimensions.
                // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
                // retrieved value as a content box dimension.
                valueIsBorderBox = offsetProp in elem;
                if (valueIsBorderBox) {
                  val = elem[offsetProp];
                }
              }

              // Normalize "" and auto
              val = parseFloat(val) || 0;

              // Adjust for the element's box model
              return (
                val +
                boxModelAdjustment(
                  elem,
                  dimension,
                  extra || (isBorderBox ? "border" : "content"),
                  valueIsBorderBox,
                  styles,

                  // Provide the current computed size to request scroll gutter calculation (gh-3589)
                  val
                ) +
                "px"
              );
            }

            jQuery.extend({
              // Add in style property hooks for overriding the default
              // behavior of getting and setting a style property
              cssHooks: {
                opacity: {
                  get: function (elem, computed) {
                    if (computed) {
                      // We should always get a number back from opacity
                      var ret = curCSS(elem, "opacity");
                      return ret === "" ? "1" : ret;
                    }
                  },
                },
              },

              // Don't automatically add "px" to these possibly-unitless properties
              cssNumber: {
                animationIterationCount: true,
                columnCount: true,
                fillOpacity: true,
                flexGrow: true,
                flexShrink: true,
                fontWeight: true,
                gridArea: true,
                gridColumn: true,
                gridColumnEnd: true,
                gridColumnStart: true,
                gridRow: true,
                gridRowEnd: true,
                gridRowStart: true,
                lineHeight: true,
                opacity: true,
                order: true,
                orphans: true,
                widows: true,
                zIndex: true,
                zoom: true,
              },

              // Add in properties whose names you wish to fix before
              // setting or getting the value
              cssProps: {},

              // Get and set the style property on a DOM Node
              style: function (elem, name, value, extra) {
                // Don't set styles on text and comment nodes
                if (
                  !elem ||
                  elem.nodeType === 3 ||
                  elem.nodeType === 8 ||
                  !elem.style
                ) {
                  return;
                }

                // Make sure that we're working with the right name
                var ret,
                  type,
                  hooks,
                  origName = camelCase(name),
                  isCustomProp = rcustomProp.test(name),
                  style = elem.style;

                // Make sure that we're working with the right name. We don't
                // want to query the value if it is a CSS custom property
                // since they are user-defined.
                if (!isCustomProp) {
                  name = finalPropName(origName);
                }

                // Gets hook for the prefixed version, then unprefixed version
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                // Check if we're setting a value
                if (value !== undefined) {
                  type = typeof value;

                  // Convert "+=" or "-=" to relative numbers (trac-7345)
                  if (
                    type === "string" &&
                    (ret = rcssNum.exec(value)) &&
                    ret[1]
                  ) {
                    value = adjustCSS(elem, name, ret);

                    // Fixes bug trac-9237
                    type = "number";
                  }

                  // Make sure that null and NaN values aren't set (trac-7116)
                  if (value == null || value !== value) {
                    return;
                  }

                  // If a number was passed in, add the unit (except for certain CSS properties)
                  // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                  // "px" to a few hardcoded values.
                  if (type === "number" && !isCustomProp) {
                    value +=
                      (ret && ret[3]) ||
                      (jQuery.cssNumber[origName] ? "" : "px");
                  }

                  // background-* props affect original clone's values
                  if (
                    !support.clearCloneStyle &&
                    value === "" &&
                    name.indexOf("background") === 0
                  ) {
                    style[name] = "inherit";
                  }

                  // If a hook was provided, use that value, otherwise just set the specified value
                  if (
                    !hooks ||
                    !("set" in hooks) ||
                    (value = hooks.set(elem, value, extra)) !== undefined
                  ) {
                    if (isCustomProp) {
                      style.setProperty(name, value);
                    } else {
                      style[name] = value;
                    }
                  }
                } else {
                  // If a hook was provided get the non-computed value from there
                  if (
                    hooks &&
                    "get" in hooks &&
                    (ret = hooks.get(elem, false, extra)) !== undefined
                  ) {
                    return ret;
                  }

                  // Otherwise just get the value from the style object
                  return style[name];
                }
              },

              css: function (elem, name, extra, styles) {
                var val,
                  num,
                  hooks,
                  origName = camelCase(name),
                  isCustomProp = rcustomProp.test(name);

                // Make sure that we're working with the right name. We don't
                // want to modify the value if it is a CSS custom property
                // since they are user-defined.
                if (!isCustomProp) {
                  name = finalPropName(origName);
                }

                // Try prefixed name followed by the unprefixed name
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                // If a hook was provided get the computed value from there
                if (hooks && "get" in hooks) {
                  val = hooks.get(elem, true, extra);
                }

                // Otherwise, if a way to get the computed value exists, use that
                if (val === undefined) {
                  val = curCSS(elem, name, styles);
                }

                // Convert "normal" to computed value
                if (val === "normal" && name in cssNormalTransform) {
                  val = cssNormalTransform[name];
                }

                // Make numeric if forced or a qualifier was provided and val looks numeric
                if (extra === "" || extra) {
                  num = parseFloat(val);
                  return extra === true || isFinite(num) ? num || 0 : val;
                }

                return val;
              },
            });

            jQuery.each(["height", "width"], function (_i, dimension) {
              jQuery.cssHooks[dimension] = {
                get: function (elem, computed, extra) {
                  if (computed) {
                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test(jQuery.css(elem, "display")) &&
                      // Support: Safari 8+
                      // Table columns in Safari have non-zero offsetWidth & zero
                      // getBoundingClientRect().width unless display is changed.
                      // Support: IE <=11 only
                      // Running getBoundingClientRect on a disconnected node
                      // in IE throws an error.
                      (!elem.getClientRects().length ||
                        !elem.getBoundingClientRect().width)
                      ? swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, dimension, extra);
                      })
                      : getWidthOrHeight(elem, dimension, extra);
                  }
                },

                set: function (elem, value, extra) {
                  var matches,
                    styles = getStyles(elem),
                    // Only read styles.position if the test has a chance to fail
                    // to avoid forcing a reflow.
                    scrollboxSizeBuggy =
                      !support.scrollboxSize() &&
                      styles.position === "absolute",
                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                    isBorderBox =
                      boxSizingNeeded &&
                      jQuery.css(elem, "boxSizing", false, styles) ===
                      "border-box",
                    subtract = extra
                      ? boxModelAdjustment(
                        elem,
                        dimension,
                        extra,
                        isBorderBox,
                        styles
                      )
                      : 0;

                  // Account for unreliable border-box dimensions by comparing offset* to computed and
                  // faking a content-box to get border and padding (gh-3699)
                  if (isBorderBox && scrollboxSizeBuggy) {
                    subtract -= Math.ceil(
                      elem[
                      "offset" +
                      dimension[0].toUpperCase() +
                      dimension.slice(1)
                      ] -
                      parseFloat(styles[dimension]) -
                      boxModelAdjustment(
                        elem,
                        dimension,
                        "border",
                        false,
                        styles
                      ) -
                      0.5
                    );
                  }

                  // Convert to pixels if value adjustment is needed
                  if (
                    subtract &&
                    (matches = rcssNum.exec(value)) &&
                    (matches[3] || "px") !== "px"
                  ) {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                  }

                  return setPositiveNumber(elem, value, subtract);
                },
              };
            });

            jQuery.cssHooks.marginLeft = addGetHookIf(
              support.reliableMarginLeft,
              function (elem, computed) {
                if (computed) {
                  return (
                    (parseFloat(curCSS(elem, "marginLeft")) ||
                      elem.getBoundingClientRect().left -
                      swap(elem, { marginLeft: 0 }, function () {
                        return elem.getBoundingClientRect().left;
                      })) + "px"
                  );
                }
              }
            );

            // These hooks are used by animate to expand properties
            jQuery.each(
              {
                margin: "",
                padding: "",
                border: "Width",
              },
              function (prefix, suffix) {
                jQuery.cssHooks[prefix + suffix] = {
                  expand: function (value) {
                    var i = 0,
                      expanded = {},
                      // Assumes a single number if not a string
                      parts =
                        typeof value === "string" ? value.split(" ") : [value];

                    for (; i < 4; i++) {
                      expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                    }

                    return expanded;
                  },
                };

                if (prefix !== "margin") {
                  jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
                }
              }
            );

            jQuery.fn.extend({
              css: function (name, value) {
                return access(
                  this,
                  function (elem, name, value) {
                    var styles,
                      len,
                      map = {},
                      i = 0;

                    if (Array.isArray(name)) {
                      styles = getStyles(elem);
                      len = name.length;

                      for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                      }

                      return map;
                    }

                    return value !== undefined
                      ? jQuery.style(elem, name, value)
                      : jQuery.css(elem, name);
                  },
                  name,
                  value,
                  arguments.length > 1
                );
              },
            });

            function Tween(elem, options, prop, end, easing) {
              return new Tween.prototype.init(elem, options, prop, end, easing);
            }
            jQuery.Tween = Tween;

            Tween.prototype = {
              constructor: Tween,
              init: function (elem, options, prop, end, easing, unit) {
                this.elem = elem;
                this.prop = prop;
                this.easing = easing || jQuery.easing._default;
                this.options = options;
                this.start = this.now = this.cur();
                this.end = end;
                this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
              },
              cur: function () {
                var hooks = Tween.propHooks[this.prop];

                return hooks && hooks.get
                  ? hooks.get(this)
                  : Tween.propHooks._default.get(this);
              },
              run: function (percent) {
                var eased,
                  hooks = Tween.propHooks[this.prop];

                if (this.options.duration) {
                  this.pos = eased = jQuery.easing[this.easing](
                    percent,
                    this.options.duration * percent,
                    0,
                    1,
                    this.options.duration
                  );
                } else {
                  this.pos = eased = percent;
                }
                this.now = (this.end - this.start) * eased + this.start;

                if (this.options.step) {
                  this.options.step.call(this.elem, this.now, this);
                }

                if (hooks && hooks.set) {
                  hooks.set(this);
                } else {
                  Tween.propHooks._default.set(this);
                }
                return this;
              },
            };

            Tween.prototype.init.prototype = Tween.prototype;

            Tween.propHooks = {
              _default: {
                get: function (tween) {
                  var result;

                  // Use a property on the element directly when it is not a DOM element,
                  // or when there is no matching style property that exists.
                  if (
                    tween.elem.nodeType !== 1 ||
                    (tween.elem[tween.prop] != null &&
                      tween.elem.style[tween.prop] == null)
                  ) {
                    return tween.elem[tween.prop];
                  }

                  // Passing an empty string as a 3rd parameter to .css will automatically
                  // attempt a parseFloat and fallback to a string if the parse fails.
                  // Simple values such as "10px" are parsed to Float;
                  // complex values such as "rotate(1rad)" are returned as-is.
                  result = jQuery.css(tween.elem, tween.prop, "");

                  // Empty strings, null, undefined and "auto" are converted to 0.
                  return !result || result === "auto" ? 0 : result;
                },
                set: function (tween) {
                  // Use step hook for back compat.
                  // Use cssHook if its there.
                  // Use .style if available and use plain properties where available.
                  if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                  } else if (
                    tween.elem.nodeType === 1 &&
                    (jQuery.cssHooks[tween.prop] ||
                      tween.elem.style[finalPropName(tween.prop)] != null)
                  ) {
                    jQuery.style(
                      tween.elem,
                      tween.prop,
                      tween.now + tween.unit
                    );
                  } else {
                    tween.elem[tween.prop] = tween.now;
                  }
                },
              },
            };

            // Support: IE <=9 only
            // Panic based approach to setting things on disconnected nodes
            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
              set: function (tween) {
                if (tween.elem.nodeType && tween.elem.parentNode) {
                  tween.elem[tween.prop] = tween.now;
                }
              },
            };

            jQuery.easing = {
              linear: function (p) {
                return p;
              },
              swing: function (p) {
                return 0.5 - Math.cos(p * Math.PI) / 2;
              },
              _default: "swing",
            };

            jQuery.fx = Tween.prototype.init;

            // Back compat <1.8 extension point
            jQuery.fx.step = {};

            var fxNow,
              inProgress,
              rfxtypes = /^(?:toggle|show|hide)$/,
              rrun = /queueHooks$/;

            function schedule() {
              if (inProgress) {
                if (document.hidden === false && window.requestAnimationFrame) {
                  window.requestAnimationFrame(schedule);
                } else {
                  window.setTimeout(schedule, jQuery.fx.interval);
                }

                jQuery.fx.tick();
              }
            }

            // Animations created synchronously will run synchronously
            function createFxNow() {
              window.setTimeout(function () {
                fxNow = undefined;
              });
              return (fxNow = Date.now());
            }

            // Generate parameters to create a standard animation
            function genFx(type, includeWidth) {
              var which,
                i = 0,
                attrs = { height: type };

              // If we include width, step value is 1 to do all cssExpand values,
              // otherwise step value is 2 to skip over Left and Right
              includeWidth = includeWidth ? 1 : 0;
              for (; i < 4; i += 2 - includeWidth) {
                which = cssExpand[i];
                attrs["margin" + which] = attrs["padding" + which] = type;
              }

              if (includeWidth) {
                attrs.opacity = attrs.width = type;
              }

              return attrs;
            }

            function createTween(value, prop, animation) {
              var tween,
                collection = (Animation.tweeners[prop] || []).concat(
                  Animation.tweeners["*"]
                ),
                index = 0,
                length = collection.length;
              for (; index < length; index++) {
                if ((tween = collection[index].call(animation, prop, value))) {
                  // We're done with this property
                  return tween;
                }
              }
            }

            function defaultPrefilter(elem, props, opts) {
              var prop,
                value,
                toggle,
                hooks,
                oldfire,
                propTween,
                restoreDisplay,
                display,
                isBox = "width" in props || "height" in props,
                anim = this,
                orig = {},
                style = elem.style,
                hidden = elem.nodeType && isHiddenWithinTree(elem),
                dataShow = dataPriv.get(elem, "fxshow");

              // Queue-skipping animations hijack the fx hooks
              if (!opts.queue) {
                hooks = jQuery._queueHooks(elem, "fx");
                if (hooks.unqueued == null) {
                  hooks.unqueued = 0;
                  oldfire = hooks.empty.fire;
                  hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                      oldfire();
                    }
                  };
                }
                hooks.unqueued++;

                anim.always(function () {
                  // Ensure the complete handler is called before this completes
                  anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                      hooks.empty.fire();
                    }
                  });
                });
              }

              // Detect show/hide animations
              for (prop in props) {
                value = props[prop];
                if (rfxtypes.test(value)) {
                  delete props[prop];
                  toggle = toggle || value === "toggle";
                  if (value === (hidden ? "hide" : "show")) {
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (
                      value === "show" &&
                      dataShow &&
                      dataShow[prop] !== undefined
                    ) {
                      hidden = true;

                      // Ignore all other no-op show/hide data
                    } else {
                      continue;
                    }
                  }
                  orig[prop] =
                    (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
                }
              }

              // Bail out if this is a no-op like .hide().hide()
              propTween = !jQuery.isEmptyObject(props);
              if (!propTween && jQuery.isEmptyObject(orig)) {
                return;
              }

              // Restrict "overflow" and "display" styles during box animations
              if (isBox && elem.nodeType === 1) {
                // Support: IE <=9 - 11, Edge 12 - 15
                // Record all 3 overflow attributes because IE does not infer the shorthand
                // from identically-valued overflowX and overflowY and Edge just mirrors
                // the overflowX value there.
                opts.overflow = [
                  style.overflow,
                  style.overflowX,
                  style.overflowY,
                ];

                // Identify a display type, preferring old show/hide data over the CSS cascade
                restoreDisplay = dataShow && dataShow.display;
                if (restoreDisplay == null) {
                  restoreDisplay = dataPriv.get(elem, "display");
                }
                display = jQuery.css(elem, "display");
                if (display === "none") {
                  if (restoreDisplay) {
                    display = restoreDisplay;
                  } else {
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([elem]);
                  }
                }

                // Animate inline elements as inline-block
                if (
                  display === "inline" ||
                  (display === "inline-block" && restoreDisplay != null)
                ) {
                  if (jQuery.css(elem, "float") === "none") {
                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                      anim.done(function () {
                        style.display = restoreDisplay;
                      });
                      if (restoreDisplay == null) {
                        display = style.display;
                        restoreDisplay = display === "none" ? "" : display;
                      }
                    }
                    style.display = "inline-block";
                  }
                }
              }

              if (opts.overflow) {
                style.overflow = "hidden";
                anim.always(function () {
                  style.overflow = opts.overflow[0];
                  style.overflowX = opts.overflow[1];
                  style.overflowY = opts.overflow[2];
                });
              }

              // Implement show/hide animations
              propTween = false;
              for (prop in orig) {
                // General show/hide setup for this element animation
                if (!propTween) {
                  if (dataShow) {
                    if ("hidden" in dataShow) {
                      hidden = dataShow.hidden;
                    }
                  } else {
                    dataShow = dataPriv.access(elem, "fxshow", {
                      display: restoreDisplay,
                    });
                  }

                  // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                  if (toggle) {
                    dataShow.hidden = !hidden;
                  }

                  // Show elements before animating them
                  if (hidden) {
                    showHide([elem], true);
                  }

                  /* eslint-disable no-loop-func */

                  anim.done(function () {
                    /* eslint-enable no-loop-func */

                    // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) {
                      showHide([elem]);
                    }
                    dataPriv.remove(elem, "fxshow");
                    for (prop in orig) {
                      jQuery.style(elem, prop, orig[prop]);
                    }
                  });
                }

                // Per-property setup
                propTween = createTween(
                  hidden ? dataShow[prop] : 0,
                  prop,
                  anim
                );
                if (!(prop in dataShow)) {
                  dataShow[prop] = propTween.start;
                  if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                  }
                }
              }
            }

            function propFilter(props, specialEasing) {
              var index, name, easing, value, hooks;

              // camelCase, specialEasing and expand cssHook pass
              for (index in props) {
                name = camelCase(index);
                easing = specialEasing[name];
                value = props[index];
                if (Array.isArray(value)) {
                  easing = value[1];
                  value = props[index] = value[0];
                }

                if (index !== name) {
                  props[name] = value;
                  delete props[index];
                }

                hooks = jQuery.cssHooks[name];
                if (hooks && "expand" in hooks) {
                  value = hooks.expand(value);
                  delete props[name];

                  // Not quite $.extend, this won't overwrite existing keys.
                  // Reusing 'index' because we have the correct "name"
                  for (index in value) {
                    if (!(index in props)) {
                      props[index] = value[index];
                      specialEasing[index] = easing;
                    }
                  }
                } else {
                  specialEasing[name] = easing;
                }
              }
            }

            function Animation(elem, properties, options) {
              var result,
                stopped,
                index = 0,
                length = Animation.prefilters.length,
                deferred = jQuery.Deferred().always(function () {
                  // Don't match elem in the :animated selector
                  delete tick.elem;
                }),
                tick = function () {
                  if (stopped) {
                    return false;
                  }
                  var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(
                      0,
                      animation.startTime + animation.duration - currentTime
                    ),
                    // Support: Android 2.3 only
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                  for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                  }

                  deferred.notifyWith(elem, [animation, percent, remaining]);

                  // If there's more to do, yield
                  if (percent < 1 && length) {
                    return remaining;
                  }

                  // If this was an empty animation, synthesize a final progress notification
                  if (!length) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                  }

                  // Resolve the animation and report its conclusion
                  deferred.resolveWith(elem, [animation]);
                  return false;
                },
                animation = deferred.promise({
                  elem: elem,
                  props: jQuery.extend({}, properties),
                  opts: jQuery.extend(
                    true,
                    {
                      specialEasing: {},
                      easing: jQuery.easing._default,
                    },
                    options
                  ),
                  originalProperties: properties,
                  originalOptions: options,
                  startTime: fxNow || createFxNow(),
                  duration: options.duration,
                  tweens: [],
                  createTween: function (prop, end) {
                    var tween = jQuery.Tween(
                      elem,
                      animation.opts,
                      prop,
                      end,
                      animation.opts.specialEasing[prop] ||
                      animation.opts.easing
                    );
                    animation.tweens.push(tween);
                    return tween;
                  },
                  stop: function (gotoEnd) {
                    var index = 0,
                      // If we are going to the end, we want to run all the tweens
                      // otherwise we skip this part
                      length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                      return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                      animation.tweens[index].run(1);
                    }

                    // Resolve when we played the last frame; otherwise, reject
                    if (gotoEnd) {
                      deferred.notifyWith(elem, [animation, 1, 0]);
                      deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                      deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                  },
                }),
                props = animation.props;

              propFilter(props, animation.opts.specialEasing);

              for (; index < length; index++) {
                result = Animation.prefilters[index].call(
                  animation,
                  elem,
                  props,
                  animation.opts
                );
                if (result) {
                  if (isFunction(result.stop)) {
                    jQuery._queueHooks(
                      animation.elem,
                      animation.opts.queue
                    ).stop = result.stop.bind(result);
                  }
                  return result;
                }
              }

              jQuery.map(props, createTween, animation);

              if (isFunction(animation.opts.start)) {
                animation.opts.start.call(elem, animation);
              }

              // Attach callbacks from options
              animation
                .progress(animation.opts.progress)
                .done(animation.opts.done, animation.opts.complete)
                .fail(animation.opts.fail)
                .always(animation.opts.always);

              jQuery.fx.timer(
                jQuery.extend(tick, {
                  elem: elem,
                  anim: animation,
                  queue: animation.opts.queue,
                })
              );

              return animation;
            }

            jQuery.Animation = jQuery.extend(Animation, {
              tweeners: {
                "*": [
                  function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                  },
                ],
              },

              tweener: function (props, callback) {
                if (isFunction(props)) {
                  callback = props;
                  props = ["*"];
                } else {
                  props = props.match(rnothtmlwhite);
                }

                var prop,
                  index = 0,
                  length = props.length;

                for (; index < length; index++) {
                  prop = props[index];
                  Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                  Animation.tweeners[prop].unshift(callback);
                }
              },

              prefilters: [defaultPrefilter],

              prefilter: function (callback, prepend) {
                if (prepend) {
                  Animation.prefilters.unshift(callback);
                } else {
                  Animation.prefilters.push(callback);
                }
              },
            });

            jQuery.speed = function (speed, easing, fn) {
              var opt =
                speed && typeof speed === "object"
                  ? jQuery.extend({}, speed)
                  : {
                    complete:
                      fn || (!fn && easing) || (isFunction(speed) && speed),
                    duration: speed,
                    easing:
                      (fn && easing) ||
                      (easing && !isFunction(easing) && easing),
                  };

              // Go to the end state if fx are off
              if (jQuery.fx.off) {
                opt.duration = 0;
              } else {
                if (typeof opt.duration !== "number") {
                  if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                  } else {
                    opt.duration = jQuery.fx.speeds._default;
                  }
                }
              }

              // Normalize opt.queue - true/undefined/null -> "fx"
              if (opt.queue == null || opt.queue === true) {
                opt.queue = "fx";
              }

              // Queueing
              opt.old = opt.complete;

              opt.complete = function () {
                if (isFunction(opt.old)) {
                  opt.old.call(this);
                }

                if (opt.queue) {
                  jQuery.dequeue(this, opt.queue);
                }
              };

              return opt;
            };

            jQuery.fn.extend({
              fadeTo: function (speed, to, easing, callback) {
                // Show any hidden elements after setting opacity to 0
                return (
                  this.filter(isHiddenWithinTree)
                    .css("opacity", 0)
                    .show()

                    // Animate to the value specified
                    .end()
                    .animate({ opacity: to }, speed, easing, callback)
                );
              },
              animate: function (prop, speed, easing, callback) {
                var empty = jQuery.isEmptyObject(prop),
                  optall = jQuery.speed(speed, easing, callback),
                  doAnimation = function () {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    // Empty animations, or finishing resolves immediately
                    if (empty || dataPriv.get(this, "finish")) {
                      anim.stop(true);
                    }
                  };

                doAnimation.finish = doAnimation;

                return empty || optall.queue === false
                  ? this.each(doAnimation)
                  : this.queue(optall.queue, doAnimation);
              },
              stop: function (type, clearQueue, gotoEnd) {
                var stopQueue = function (hooks) {
                  var stop = hooks.stop;
                  delete hooks.stop;
                  stop(gotoEnd);
                };

                if (typeof type !== "string") {
                  gotoEnd = clearQueue;
                  clearQueue = type;
                  type = undefined;
                }
                if (clearQueue) {
                  this.queue(type || "fx", []);
                }

                return this.each(function () {
                  var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get(this);

                  if (index) {
                    if (data[index] && data[index].stop) {
                      stopQueue(data[index]);
                    }
                  } else {
                    for (index in data) {
                      if (data[index] && data[index].stop && rrun.test(index)) {
                        stopQueue(data[index]);
                      }
                    }
                  }

                  for (index = timers.length; index--;) {
                    if (
                      timers[index].elem === this &&
                      (type == null || timers[index].queue === type)
                    ) {
                      timers[index].anim.stop(gotoEnd);
                      dequeue = false;
                      timers.splice(index, 1);
                    }
                  }

                  // Start the next in the queue if the last step wasn't forced.
                  // Timers currently will call their complete callbacks, which
                  // will dequeue but only if they were gotoEnd.
                  if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                  }
                });
              },
              finish: function (type) {
                if (type !== false) {
                  type = type || "fx";
                }
                return this.each(function () {
                  var index,
                    data = dataPriv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                  // Enable finishing flag on private data
                  data.finish = true;

                  // Empty the queue first
                  jQuery.queue(this, type, []);

                  if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                  }

                  // Look for any active animations, and finish them
                  for (index = timers.length; index--;) {
                    if (
                      timers[index].elem === this &&
                      timers[index].queue === type
                    ) {
                      timers[index].anim.stop(true);
                      timers.splice(index, 1);
                    }
                  }

                  // Look for any animations in the old queue and finish them
                  for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                      queue[index].finish.call(this);
                    }
                  }

                  // Turn off finishing flag
                  delete data.finish;
                });
              },
            });

            jQuery.each(["toggle", "show", "hide"], function (_i, name) {
              var cssFn = jQuery.fn[name];
              jQuery.fn[name] = function (speed, easing, callback) {
                return speed == null || typeof speed === "boolean"
                  ? cssFn.apply(this, arguments)
                  : this.animate(genFx(name, true), speed, easing, callback);
              };
            });

            // Generate shortcuts for custom animations
            jQuery.each(
              {
                slideDown: genFx("show"),
                slideUp: genFx("hide"),
                slideToggle: genFx("toggle"),
                fadeIn: { opacity: "show" },
                fadeOut: { opacity: "hide" },
                fadeToggle: { opacity: "toggle" },
              },
              function (name, props) {
                jQuery.fn[name] = function (speed, easing, callback) {
                  return this.animate(props, speed, easing, callback);
                };
              }
            );

            jQuery.timers = [];
            jQuery.fx.tick = function () {
              var timer,
                i = 0,
                timers = jQuery.timers;

              fxNow = Date.now();

              for (; i < timers.length; i++) {
                timer = timers[i];

                // Run the timer and safely remove it when done (allowing for external removal)
                if (!timer() && timers[i] === timer) {
                  timers.splice(i--, 1);
                }
              }

              if (!timers.length) {
                jQuery.fx.stop();
              }
              fxNow = undefined;
            };

            jQuery.fx.timer = function (timer) {
              jQuery.timers.push(timer);
              jQuery.fx.start();
            };

            jQuery.fx.interval = 13;
            jQuery.fx.start = function () {
              if (inProgress) {
                return;
              }

              inProgress = true;
              schedule();
            };

            jQuery.fx.stop = function () {
              inProgress = null;
            };

            jQuery.fx.speeds = {
              slow: 600,
              fast: 200,

              // Default speed
              _default: 400,
            };

            // Based off of the plugin by Clint Helfers, with permission.
            jQuery.fn.delay = function (time, type) {
              time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
              type = type || "fx";

              return this.queue(type, function (next, hooks) {
                var timeout = window.setTimeout(next, time);
                hooks.stop = function () {
                  window.clearTimeout(timeout);
                };
              });
            };

            (function () {
              var input = document.createElement("input"),
                select = document.createElement("select"),
                opt = select.appendChild(document.createElement("option"));

              input.type = "checkbox";

              // Support: Android <=4.3 only
              // Default value for a checkbox should be "on"
              support.checkOn = input.value !== "";

              // Support: IE <=11 only
              // Must access selectedIndex to make default options select
              support.optSelected = opt.selected;

              // Support: IE <=11 only
              // An input loses its value after becoming a radio
              input = document.createElement("input");
              input.value = "t";
              input.type = "radio";
              support.radioValue = input.value === "t";
            })();

            var boolHook,
              attrHandle = jQuery.expr.attrHandle;

            jQuery.fn.extend({
              attr: function (name, value) {
                return access(
                  this,
                  jQuery.attr,
                  name,
                  value,
                  arguments.length > 1
                );
              },

              removeAttr: function (name) {
                return this.each(function () {
                  jQuery.removeAttr(this, name);
                });
              },
            });

            jQuery.extend({
              attr: function (elem, name, value) {
                var ret,
                  hooks,
                  nType = elem.nodeType;

                // Don't get/set attributes on text, comment and attribute nodes
                if (nType === 3 || nType === 8 || nType === 2) {
                  return;
                }

                // Fallback to prop when attributes are not supported
                if (typeof elem.getAttribute === "undefined") {
                  return jQuery.prop(elem, name, value);
                }

                // Attribute hooks are determined by the lowercase version
                // Grab necessary hook if one is defined
                if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                  hooks =
                    jQuery.attrHooks[name.toLowerCase()] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
                }

                if (value !== undefined) {
                  if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                  }

                  if (
                    hooks &&
                    "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined
                  ) {
                    return ret;
                  }

                  elem.setAttribute(name, value + "");
                  return value;
                }

                if (
                  hooks &&
                  "get" in hooks &&
                  (ret = hooks.get(elem, name)) !== null
                ) {
                  return ret;
                }

                ret = jQuery.find.attr(elem, name);

                // Non-existent attributes return null, we normalize to undefined
                return ret == null ? undefined : ret;
              },

              attrHooks: {
                type: {
                  set: function (elem, value) {
                    if (
                      !support.radioValue &&
                      value === "radio" &&
                      nodeName(elem, "input")
                    ) {
                      var val = elem.value;
                      elem.setAttribute("type", value);
                      if (val) {
                        elem.value = val;
                      }
                      return value;
                    }
                  },
                },
              },

              removeAttr: function (elem, value) {
                var name,
                  i = 0,
                  // Attribute names can contain non-HTML whitespace characters
                  // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                  attrNames = value && value.match(rnothtmlwhite);

                if (attrNames && elem.nodeType === 1) {
                  while ((name = attrNames[i++])) {
                    elem.removeAttribute(name);
                  }
                }
              },
            });

            // Hooks for boolean attributes
            boolHook = {
              set: function (elem, value, name) {
                if (value === false) {
                  // Remove boolean attributes when set to false
                  jQuery.removeAttr(elem, name);
                } else {
                  elem.setAttribute(name, name);
                }
                return name;
              },
            };

            jQuery.each(
              jQuery.expr.match.bool.source.match(/\w+/g),
              function (_i, name) {
                var getter = attrHandle[name] || jQuery.find.attr;

                attrHandle[name] = function (elem, name, isXML) {
                  var ret,
                    handle,
                    lowercaseName = name.toLowerCase();

                  if (!isXML) {
                    // Avoid an infinite loop by temporarily removing this function from the getter
                    handle = attrHandle[lowercaseName];
                    attrHandle[lowercaseName] = ret;
                    ret =
                      getter(elem, name, isXML) != null ? lowercaseName : null;
                    attrHandle[lowercaseName] = handle;
                  }
                  return ret;
                };
              }
            );

            var rfocusable = /^(?:input|select|textarea|button)$/i,
              rclickable = /^(?:a|area)$/i;

            jQuery.fn.extend({
              prop: function (name, value) {
                return access(
                  this,
                  jQuery.prop,
                  name,
                  value,
                  arguments.length > 1
                );
              },

              removeProp: function (name) {
                return this.each(function () {
                  delete this[jQuery.propFix[name] || name];
                });
              },
            });

            jQuery.extend({
              prop: function (elem, name, value) {
                var ret,
                  hooks,
                  nType = elem.nodeType;

                // Don't get/set properties on text, comment and attribute nodes
                if (nType === 3 || nType === 8 || nType === 2) {
                  return;
                }

                if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                  // Fix name and attach hooks
                  name = jQuery.propFix[name] || name;
                  hooks = jQuery.propHooks[name];
                }

                if (value !== undefined) {
                  if (
                    hooks &&
                    "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined
                  ) {
                    return ret;
                  }

                  return (elem[name] = value);
                }

                if (
                  hooks &&
                  "get" in hooks &&
                  (ret = hooks.get(elem, name)) !== null
                ) {
                  return ret;
                }

                return elem[name];
              },

              propHooks: {
                tabIndex: {
                  get: function (elem) {
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // Use proper attribute retrieval (trac-12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");

                    if (tabindex) {
                      return parseInt(tabindex, 10);
                    }

                    if (
                      rfocusable.test(elem.nodeName) ||
                      (rclickable.test(elem.nodeName) && elem.href)
                    ) {
                      return 0;
                    }

                    return -1;
                  },
                },
              },

              propFix: {
                for: "htmlFor",
                class: "className",
              },
            });

            // Support: IE <=11 only
            // Accessing the selectedIndex property
            // forces the browser to respect setting selected
            // on the option
            // The getter ensures a default option is selected
            // when in an optgroup
            // eslint rule "no-unused-expressions" is disabled for this code
            // since it considers such accessions noop
            if (!support.optSelected) {
              jQuery.propHooks.selected = {
                get: function (elem) {
                  /* eslint no-unused-expressions: "off" */

                  var parent = elem.parentNode;
                  if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                  }
                  return null;
                },
                set: function (elem) {
                  /* eslint no-unused-expressions: "off" */

                  var parent = elem.parentNode;
                  if (parent) {
                    parent.selectedIndex;

                    if (parent.parentNode) {
                      parent.parentNode.selectedIndex;
                    }
                  }
                },
              };
            }

            jQuery.each(
              [
                "tabIndex",
                "readOnly",
                "maxLength",
                "cellSpacing",
                "cellPadding",
                "rowSpan",
                "colSpan",
                "useMap",
                "frameBorder",
                "contentEditable",
              ],
              function () {
                jQuery.propFix[this.toLowerCase()] = this;
              }
            );

            // Strip and collapse whitespace according to HTML spec
            // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
            function stripAndCollapse(value) {
              var tokens = value.match(rnothtmlwhite) || [];
              return tokens.join(" ");
            }

            function getClass(elem) {
              return (elem.getAttribute && elem.getAttribute("class")) || "";
            }

            function classesToArray(value) {
              if (Array.isArray(value)) {
                return value;
              }
              if (typeof value === "string") {
                return value.match(rnothtmlwhite) || [];
              }
              return [];
            }

            jQuery.fn.extend({
              addClass: function (value) {
                var classNames, cur, curValue, className, i, finalValue;

                if (isFunction(value)) {
                  return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                  });
                }

                classNames = classesToArray(value);

                if (classNames.length) {
                  return this.each(function () {
                    curValue = getClass(this);
                    cur =
                      this.nodeType === 1 &&
                      " " + stripAndCollapse(curValue) + " ";

                    if (cur) {
                      for (i = 0; i < classNames.length; i++) {
                        className = classNames[i];
                        if (cur.indexOf(" " + className + " ") < 0) {
                          cur += className + " ";
                        }
                      }

                      // Only assign if different to avoid unneeded rendering.
                      finalValue = stripAndCollapse(cur);
                      if (curValue !== finalValue) {
                        this.setAttribute("class", finalValue);
                      }
                    }
                  });
                }

                return this;
              },

              removeClass: function (value) {
                var classNames, cur, curValue, className, i, finalValue;

                if (isFunction(value)) {
                  return this.each(function (j) {
                    jQuery(this).removeClass(
                      value.call(this, j, getClass(this))
                    );
                  });
                }

                if (!arguments.length) {
                  return this.attr("class", "");
                }

                classNames = classesToArray(value);

                if (classNames.length) {
                  return this.each(function () {
                    curValue = getClass(this);

                    // This expression is here for better compressibility (see addClass)
                    cur =
                      this.nodeType === 1 &&
                      " " + stripAndCollapse(curValue) + " ";

                    if (cur) {
                      for (i = 0; i < classNames.length; i++) {
                        className = classNames[i];

                        // Remove *all* instances
                        while (cur.indexOf(" " + className + " ") > -1) {
                          cur = cur.replace(" " + className + " ", " ");
                        }
                      }

                      // Only assign if different to avoid unneeded rendering.
                      finalValue = stripAndCollapse(cur);
                      if (curValue !== finalValue) {
                        this.setAttribute("class", finalValue);
                      }
                    }
                  });
                }

                return this;
              },

              toggleClass: function (value, stateVal) {
                var classNames,
                  className,
                  i,
                  self,
                  type = typeof value,
                  isValidValue = type === "string" || Array.isArray(value);

                if (isFunction(value)) {
                  return this.each(function (i) {
                    jQuery(this).toggleClass(
                      value.call(this, i, getClass(this), stateVal),
                      stateVal
                    );
                  });
                }

                if (typeof stateVal === "boolean" && isValidValue) {
                  return stateVal
                    ? this.addClass(value)
                    : this.removeClass(value);
                }

                classNames = classesToArray(value);

                return this.each(function () {
                  if (isValidValue) {
                    // Toggle individual class names
                    self = jQuery(this);

                    for (i = 0; i < classNames.length; i++) {
                      className = classNames[i];

                      // Check each className given, space separated list
                      if (self.hasClass(className)) {
                        self.removeClass(className);
                      } else {
                        self.addClass(className);
                      }
                    }

                    // Toggle whole class name
                  } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {
                      // Store className if set
                      dataPriv.set(this, "__className__", className);
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) {
                      this.setAttribute(
                        "class",
                        className || value === false
                          ? ""
                          : dataPriv.get(this, "__className__") || ""
                      );
                    }
                  }
                });
              },

              hasClass: function (selector) {
                var className,
                  elem,
                  i = 0;

                className = " " + selector + " ";
                while ((elem = this[i++])) {
                  if (
                    elem.nodeType === 1 &&
                    (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(
                      className
                    ) > -1
                  ) {
                    return true;
                  }
                }

                return false;
              },
            });

            var rreturn = /\r/g;

            jQuery.fn.extend({
              val: function (value) {
                var hooks,
                  ret,
                  valueIsFunction,
                  elem = this[0];

                if (!arguments.length) {
                  if (elem) {
                    hooks =
                      jQuery.valHooks[elem.type] ||
                      jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (
                      hooks &&
                      "get" in hooks &&
                      (ret = hooks.get(elem, "value")) !== undefined
                    ) {
                      return ret;
                    }

                    ret = elem.value;

                    // Handle most common string cases
                    if (typeof ret === "string") {
                      return ret.replace(rreturn, "");
                    }

                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                  }

                  return;
                }

                valueIsFunction = isFunction(value);

                return this.each(function (i) {
                  var val;

                  if (this.nodeType !== 1) {
                    return;
                  }

                  if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                  } else {
                    val = value;
                  }

                  // Treat null/undefined as ""; convert numbers to string
                  if (val == null) {
                    val = "";
                  } else if (typeof val === "number") {
                    val += "";
                  } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                      return value == null ? "" : value + "";
                    });
                  }

                  hooks =
                    jQuery.valHooks[this.type] ||
                    jQuery.valHooks[this.nodeName.toLowerCase()];

                  // If set returns undefined, fall back to normal setting
                  if (
                    !hooks ||
                    !("set" in hooks) ||
                    hooks.set(this, val, "value") === undefined
                  ) {
                    this.value = val;
                  }
                });
              },
            });

            jQuery.extend({
              valHooks: {
                option: {
                  get: function (elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null
                      ? val
                      : // Support: IE <=10 - 11 only
                      // option.text throws exceptions (trac-14686, trac-14858)
                      // Strip and collapse whitespace
                      // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                      stripAndCollapse(jQuery.text(elem));
                  },
                },
                select: {
                  get: function (elem) {
                    var value,
                      option,
                      i,
                      options = elem.options,
                      index = elem.selectedIndex,
                      one = elem.type === "select-one",
                      values = one ? null : [],
                      max = one ? index + 1 : options.length;

                    if (index < 0) {
                      i = max;
                    } else {
                      i = one ? index : 0;
                    }

                    // Loop through all the selected options
                    for (; i < max; i++) {
                      option = options[i];

                      // Support: IE <=9 only
                      // IE8-9 doesn't update selected after form reset (trac-2551)
                      if (
                        (option.selected || i === index) &&
                        // Don't return options that are disabled or in a disabled optgroup
                        !option.disabled &&
                        (!option.parentNode.disabled ||
                          !nodeName(option.parentNode, "optgroup"))
                      ) {
                        // Get the specific value for the option
                        value = jQuery(option).val();

                        // We don't need an array for one selects
                        if (one) {
                          return value;
                        }

                        // Multi-Selects return an array
                        values.push(value);
                      }
                    }

                    return values;
                  },

                  set: function (elem, value) {
                    var optionSet,
                      option,
                      options = elem.options,
                      values = jQuery.makeArray(value),
                      i = options.length;

                    while (i--) {
                      option = options[i];

                      /* eslint-disable no-cond-assign */

                      if (
                        (option.selected =
                          jQuery.inArray(
                            jQuery.valHooks.option.get(option),
                            values
                          ) > -1)
                      ) {
                        optionSet = true;
                      }

                      /* eslint-enable no-cond-assign */
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                      elem.selectedIndex = -1;
                    }
                    return values;
                  },
                },
              },
            });

            // Radios and checkboxes getter/setter
            jQuery.each(["radio", "checkbox"], function () {
              jQuery.valHooks[this] = {
                set: function (elem, value) {
                  if (Array.isArray(value)) {
                    return (elem.checked =
                      jQuery.inArray(jQuery(elem).val(), value) > -1);
                  }
                },
              };
              if (!support.checkOn) {
                jQuery.valHooks[this].get = function (elem) {
                  return elem.getAttribute("value") === null
                    ? "on"
                    : elem.value;
                };
              }
            });

            // Return jQuery for attributes-only inclusion

            support.focusin = "onfocusin" in window;

            var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
              stopPropagationCallback = function (e) {
                e.stopPropagation();
              };

            jQuery.extend(jQuery.event, {
              trigger: function (event, data, elem, onlyHandlers) {
                var i,
                  cur,
                  tmp,
                  bubbleType,
                  ontype,
                  handle,
                  special,
                  lastElement,
                  eventPath = [elem || document],
                  type = hasOwn.call(event, "type") ? event.type : event,
                  namespaces = hasOwn.call(event, "namespace")
                    ? event.namespace.split(".")
                    : [];

                cur = lastElement = tmp = elem = elem || document;

                // Don't do events on text and comment nodes
                if (elem.nodeType === 3 || elem.nodeType === 8) {
                  return;
                }

                // focus/blur morphs to focusin/out; ensure we're not firing them right now
                if (rfocusMorph.test(type + jQuery.event.triggered)) {
                  return;
                }

                if (type.indexOf(".") > -1) {
                  // Namespaced trigger; create a regexp to match event type in handle()
                  namespaces = type.split(".");
                  type = namespaces.shift();
                  namespaces.sort();
                }
                ontype = type.indexOf(":") < 0 && "on" + type;

                // Caller can pass in a jQuery.Event object, Object, or just an event type string
                event = event[jQuery.expando]
                  ? event
                  : new jQuery.Event(type, typeof event === "object" && event);

                // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
                event.isTrigger = onlyHandlers ? 2 : 3;
                event.namespace = namespaces.join(".");
                event.rnamespace = event.namespace
                  ? new RegExp(
                    "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                  )
                  : null;

                // Clean up the event in case it is being reused
                event.result = undefined;
                if (!event.target) {
                  event.target = elem;
                }

                // Clone any incoming data and prepend the event, creating the handler arg list
                data = data == null ? [event] : jQuery.makeArray(data, [event]);

                // Allow special events to draw outside the lines
                special = jQuery.event.special[type] || {};
                if (
                  !onlyHandlers &&
                  special.trigger &&
                  special.trigger.apply(elem, data) === false
                ) {
                  return;
                }

                // Determine event propagation path in advance, per W3C events spec (trac-9951)
                // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
                if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                  bubbleType = special.delegateType || type;
                  if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                  }
                  for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                  }

                  // Only add window if we got to document (e.g., not plain obj or detached DOM)
                  if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(
                      tmp.defaultView || tmp.parentWindow || window
                    );
                  }
                }

                // Fire handlers on the event path
                i = 0;
                while (
                  (cur = eventPath[i++]) &&
                  !event.isPropagationStopped()
                ) {
                  lastElement = cur;
                  event.type = i > 1 ? bubbleType : special.bindType || type;

                  // jQuery handler
                  handle =
                    (dataPriv.get(cur, "events") || Object.create(null))[
                    event.type
                    ] && dataPriv.get(cur, "handle");
                  if (handle) {
                    handle.apply(cur, data);
                  }

                  // Native handler
                  handle = ontype && cur[ontype];
                  if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                      event.preventDefault();
                    }
                  }
                }
                event.type = type;

                // If nobody prevented the default action, do it now
                if (!onlyHandlers && !event.isDefaultPrevented()) {
                  if (
                    (!special._default ||
                      special._default.apply(eventPath.pop(), data) ===
                      false) &&
                    acceptData(elem)
                  ) {
                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (trac-6170)
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                      // Don't re-trigger an onFOO event when we call its FOO() method
                      tmp = elem[ontype];

                      if (tmp) {
                        elem[ontype] = null;
                      }

                      // Prevent re-triggering of the same event, since we already bubbled it above
                      jQuery.event.triggered = type;

                      if (event.isPropagationStopped()) {
                        lastElement.addEventListener(
                          type,
                          stopPropagationCallback
                        );
                      }

                      elem[type]();

                      if (event.isPropagationStopped()) {
                        lastElement.removeEventListener(
                          type,
                          stopPropagationCallback
                        );
                      }

                      jQuery.event.triggered = undefined;

                      if (tmp) {
                        elem[ontype] = tmp;
                      }
                    }
                  }
                }

                return event.result;
              },

              // Piggyback on a donor event to simulate a different one
              // Used only for `focus(in | out)` events
              simulate: function (type, elem, event) {
                var e = jQuery.extend(new jQuery.Event(), event, {
                  type: type,
                  isSimulated: true,
                });

                jQuery.event.trigger(e, null, elem);
              },
            });

            jQuery.fn.extend({
              trigger: function (type, data) {
                return this.each(function () {
                  jQuery.event.trigger(type, data, this);
                });
              },
              triggerHandler: function (type, data) {
                var elem = this[0];
                if (elem) {
                  return jQuery.event.trigger(type, data, elem, true);
                }
              },
            });

            // Support: Firefox <=44
            // Firefox doesn't have focus(in | out) events
            // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
            //
            // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
            // focus(in | out) events fire after focus & blur events,
            // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
            // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
            if (!support.focusin) {
              jQuery.each(
                { focus: "focusin", blur: "focusout" },
                function (orig, fix) {
                  // Attach a single capturing handler on the document while someone wants focusin/focusout
                  var handler = function (event) {
                    jQuery.event.simulate(
                      fix,
                      event.target,
                      jQuery.event.fix(event)
                    );
                  };

                  jQuery.event.special[fix] = {
                    setup: function () {
                      // Handle: regular nodes (via `this.ownerDocument`), window
                      // (via `this.document`) & document (via `this`).
                      var doc = this.ownerDocument || this.document || this,
                        attaches = dataPriv.access(doc, fix);

                      if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                      }
                      dataPriv.access(doc, fix, (attaches || 0) + 1);
                    },
                    teardown: function () {
                      var doc = this.ownerDocument || this.document || this,
                        attaches = dataPriv.access(doc, fix) - 1;

                      if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                      } else {
                        dataPriv.access(doc, fix, attaches);
                      }
                    },
                  };
                }
              );
            }
            var location = window.location;

            var nonce = { guid: Date.now() };

            var rquery = /\?/;

            // Cross-browser xml parsing
            jQuery.parseXML = function (data) {
              var xml, parserErrorElem;
              if (!data || typeof data !== "string") {
                return null;
              }

              // Support: IE 9 - 11 only
              // IE throws on parseFromString with invalid input.
              try {
                xml = new window.DOMParser().parseFromString(data, "text/xml");
              } catch (e) { }

              parserErrorElem =
                xml && xml.getElementsByTagName("parsererror")[0];
              if (!xml || parserErrorElem) {
                jQuery.error(
                  "Invalid XML: " +
                  (parserErrorElem
                    ? jQuery
                      .map(parserErrorElem.childNodes, function (el) {
                        return el.textContent;
                      })
                      .join("\n")
                    : data)
                );
              }
              return xml;
            };

            var rbracket = /\[\]$/,
              rCRLF = /\r?\n/g,
              rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
              rsubmittable = /^(?:input|select|textarea|keygen)/i;

            function buildParams(prefix, obj, traditional, add) {
              var name;

              if (Array.isArray(obj)) {
                // Serialize array item.
                jQuery.each(obj, function (i, v) {
                  if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);
                  } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                      prefix +
                      "[" +
                      (typeof v === "object" && v != null ? i : "") +
                      "]",
                      v,
                      traditional,
                      add
                    );
                  }
                });
              } else if (!traditional && toType(obj) === "object") {
                // Serialize object item.
                for (name in obj) {
                  buildParams(
                    prefix + "[" + name + "]",
                    obj[name],
                    traditional,
                    add
                  );
                }
              } else {
                // Serialize scalar item.
                add(prefix, obj);
              }
            }

            // Serialize an array of form elements or a set of
            // key/values into a query string
            jQuery.param = function (a, traditional) {
              var prefix,
                s = [],
                add = function (key, valueOrFunction) {
                  // If value is a function, invoke it and use its return value
                  var value = isFunction(valueOrFunction)
                    ? valueOrFunction()
                    : valueOrFunction;

                  s[s.length] =
                    encodeURIComponent(key) +
                    "=" +
                    encodeURIComponent(value == null ? "" : value);
                };

              if (a == null) {
                return "";
              }

              // If an array was passed in, assume that it is an array of form elements.
              if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
                // Serialize the form elements
                jQuery.each(a, function () {
                  add(this.name, this.value);
                });
              } else {
                // If traditional, encode the "old" way (the way 1.3.2 or older
                // did it), otherwise encode params recursively.
                for (prefix in a) {
                  buildParams(prefix, a[prefix], traditional, add);
                }
              }

              // Return the resulting serialization
              return s.join("&");
            };

            jQuery.fn.extend({
              serialize: function () {
                return jQuery.param(this.serializeArray());
              },
              serializeArray: function () {
                return this.map(function () {
                  // Can add propHook for "elements" to filter or add form elements
                  var elements = jQuery.prop(this, "elements");
                  return elements ? jQuery.makeArray(elements) : this;
                })
                  .filter(function () {
                    var type = this.type;

                    // Use .is( ":disabled" ) so that fieldset[disabled] works
                    return (
                      this.name &&
                      !jQuery(this).is(":disabled") &&
                      rsubmittable.test(this.nodeName) &&
                      !rsubmitterTypes.test(type) &&
                      (this.checked || !rcheckableType.test(type))
                    );
                  })
                  .map(function (_i, elem) {
                    var val = jQuery(this).val();

                    if (val == null) {
                      return null;
                    }

                    if (Array.isArray(val)) {
                      return jQuery.map(val, function (val) {
                        return {
                          name: elem.name,
                          value: val.replace(rCRLF, "\r\n"),
                        };
                      });
                    }

                    return {
                      name: elem.name,
                      value: val.replace(rCRLF, "\r\n"),
                    };
                  })
                  .get();
              },
            });

            var r20 = /%20/g,
              rhash = /#.*$/,
              rantiCache = /([?&])_=[^&]*/,
              rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
              // trac-7653, trac-8125, trac-8152: local protocol detection
              rlocalProtocol =
                /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
              rnoContent = /^(?:GET|HEAD)$/,
              rprotocol = /^\/\//,
              /* Prefilters
               * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
               * 2) These are called:
               *    - BEFORE asking for a transport
               *    - AFTER param serialization (s.data is a string if s.processData is true)
               * 3) key is the dataType
               * 4) the catchall symbol "*" can be used
               * 5) execution will start with transport dataType and THEN continue down to "*" if needed
               */
              prefilters = {},
              /* Transports bindings
               * 1) key is the dataType
               * 2) the catchall symbol "*" can be used
               * 3) selection will start with transport dataType and THEN go to "*" if needed
               */
              transports = {},
              // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
              allTypes = "*/".concat("*"),
              // Anchor tag for parsing the document origin
              originAnchor = document.createElement("a");

            originAnchor.href = location.href;

            // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
            function addToPrefiltersOrTransports(structure) {
              // dataTypeExpression is optional and defaults to "*"
              return function (dataTypeExpression, func) {
                if (typeof dataTypeExpression !== "string") {
                  func = dataTypeExpression;
                  dataTypeExpression = "*";
                }

                var dataType,
                  i = 0,
                  dataTypes =
                    dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

                if (isFunction(func)) {
                  // For each dataType in the dataTypeExpression
                  while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                      dataType = dataType.slice(1) || "*";
                      (structure[dataType] = structure[dataType] || []).unshift(
                        func
                      );

                      // Otherwise append
                    } else {
                      (structure[dataType] = structure[dataType] || []).push(
                        func
                      );
                    }
                  }
                }
              };
            }

            // Base inspection function for prefilters and transports
            function inspectPrefiltersOrTransports(
              structure,
              options,
              originalOptions,
              jqXHR
            ) {
              var inspected = {},
                seekingTransport = structure === transports;

              function inspect(dataType) {
                var selected;
                inspected[dataType] = true;
                jQuery.each(
                  structure[dataType] || [],
                  function (_, prefilterOrFactory) {
                    var dataTypeOrTransport = prefilterOrFactory(
                      options,
                      originalOptions,
                      jqXHR
                    );
                    if (
                      typeof dataTypeOrTransport === "string" &&
                      !seekingTransport &&
                      !inspected[dataTypeOrTransport]
                    ) {
                      options.dataTypes.unshift(dataTypeOrTransport);
                      inspect(dataTypeOrTransport);
                      return false;
                    } else if (seekingTransport) {
                      return !(selected = dataTypeOrTransport);
                    }
                  }
                );
                return selected;
              }

              return (
                inspect(options.dataTypes[0]) ||
                (!inspected["*"] && inspect("*"))
              );
            }

            // A special extend for ajax options
            // that takes "flat" options (not to be deep extended)
            // Fixes trac-9887
            function ajaxExtend(target, src) {
              var key,
                deep,
                flatOptions = jQuery.ajaxSettings.flatOptions || {};

              for (key in src) {
                if (src[key] !== undefined) {
                  (flatOptions[key] ? target : deep || (deep = {}))[key] =
                    src[key];
                }
              }
              if (deep) {
                jQuery.extend(true, target, deep);
              }

              return target;
            }

            /* Handles responses to an ajax request:
             * - finds the right dataType (mediates between content-type and expected dataType)
             * - returns the corresponding response
             */
            function ajaxHandleResponses(s, jqXHR, responses) {
              var ct,
                type,
                finalDataType,
                firstDataType,
                contents = s.contents,
                dataTypes = s.dataTypes;

              // Remove auto dataType and get content-type in the process
              while (dataTypes[0] === "*") {
                dataTypes.shift();
                if (ct === undefined) {
                  ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
                }
              }

              // Check if we're dealing with a known content-type
              if (ct) {
                for (type in contents) {
                  if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                  }
                }
              }

              // Check to see if we have a response for the expected dataType
              if (dataTypes[0] in responses) {
                finalDataType = dataTypes[0];
              } else {
                // Try convertible dataTypes
                for (type in responses) {
                  if (
                    !dataTypes[0] ||
                    s.converters[type + " " + dataTypes[0]]
                  ) {
                    finalDataType = type;
                    break;
                  }
                  if (!firstDataType) {
                    firstDataType = type;
                  }
                }

                // Or just use first one
                finalDataType = finalDataType || firstDataType;
              }

              // If we found a dataType
              // We add the dataType to the list if needed
              // and return the corresponding response
              if (finalDataType) {
                if (finalDataType !== dataTypes[0]) {
                  dataTypes.unshift(finalDataType);
                }
                return responses[finalDataType];
              }
            }

            /* Chain conversions given the request and the original response
             * Also sets the responseXXX fields on the jqXHR instance
             */
            function ajaxConvert(s, response, jqXHR, isSuccess) {
              var conv2,
                current,
                conv,
                tmp,
                prev,
                converters = {},
                // Work with a copy of dataTypes in case we need to modify it for conversion
                dataTypes = s.dataTypes.slice();

              // Create converters map with lowercased keys
              if (dataTypes[1]) {
                for (conv in s.converters) {
                  converters[conv.toLowerCase()] = s.converters[conv];
                }
              }

              current = dataTypes.shift();

              // Convert to each sequential dataType
              while (current) {
                if (s.responseFields[current]) {
                  jqXHR[s.responseFields[current]] = response;
                }

                // Apply the dataFilter if provided
                if (!prev && isSuccess && s.dataFilter) {
                  response = s.dataFilter(response, s.dataType);
                }

                prev = current;
                current = dataTypes.shift();

                if (current) {
                  // There's only work to do if current dataType is non-auto
                  if (current === "*") {
                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                  } else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv =
                      converters[prev + " " + current] ||
                      converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                      for (conv2 in converters) {
                        // If conv2 outputs current
                        tmp = conv2.split(" ");
                        if (tmp[1] === current) {
                          // If prev can be converted to accepted input
                          conv =
                            converters[prev + " " + tmp[0]] ||
                            converters["* " + tmp[0]];
                          if (conv) {
                            // Condense equivalence converters
                            if (conv === true) {
                              conv = converters[conv2];

                              // Otherwise, insert the intermediate dataType
                            } else if (converters[conv2] !== true) {
                              current = tmp[0];
                              dataTypes.unshift(tmp[1]);
                            }
                            break;
                          }
                        }
                      }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                      // Unless errors are allowed to bubble, catch and return them
                      if (conv && s.throws) {
                        response = conv(response);
                      } else {
                        try {
                          response = conv(response);
                        } catch (e) {
                          return {
                            state: "parsererror",
                            error: conv
                              ? e
                              : "No conversion from " + prev + " to " + current,
                          };
                        }
                      }
                    }
                  }
                }
              }

              return { state: "success", data: response };
            }

            jQuery.extend({
              // Counter for holding the number of active queries
              active: 0,

              // Last-Modified header cache for next request
              lastModified: {},
              etag: {},

              ajaxSettings: {
                url: location.href,
                type: "GET",
                isLocal: rlocalProtocol.test(location.protocol),
                global: true,
                processData: true,
                async: true,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",

                /*
    timeout: 0,
    data: null,
    dataType: null,
    username: null,
    password: null,
    cache: null,
    throws: false,
    traditional: false,
    headers: {},
    */

                accepts: {
                  "*": allTypes,
                  text: "text/plain",
                  html: "text/html",
                  xml: "application/xml, text/xml",
                  json: "application/json, text/javascript",
                },

                contents: {
                  xml: /\bxml\b/,
                  html: /\bhtml/,
                  json: /\bjson\b/,
                },

                responseFields: {
                  xml: "responseXML",
                  text: "responseText",
                  json: "responseJSON",
                },

                // Data converters
                // Keys separate source (or catchall "*") and destination types with a single space
                converters: {
                  // Convert anything to text
                  "* text": String,

                  // Text to html (true = no transformation)
                  "text html": true,

                  // Evaluate text as a json expression
                  "text json": JSON.parse,

                  // Parse text as xml
                  "text xml": jQuery.parseXML,
                },

                // For options that shouldn't be deep extended:
                // you can add your own custom options here if
                // and when you create one that shouldn't be
                // deep extended (see ajaxExtend)
                flatOptions: {
                  url: true,
                  context: true,
                },
              },

              // Creates a full fledged settings object into target
              // with both ajaxSettings and settings fields.
              // If target is omitted, writes into ajaxSettings.
              ajaxSetup: function (target, settings) {
                return settings
                  ? // Building a settings object
                  ajaxExtend(
                    ajaxExtend(target, jQuery.ajaxSettings),
                    settings
                  )
                  : // Extending ajaxSettings
                  ajaxExtend(jQuery.ajaxSettings, target);
              },

              ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
              ajaxTransport: addToPrefiltersOrTransports(transports),

              // Main method
              ajax: function (url, options) {
                // If url is an object, simulate pre-1.5 signature
                if (typeof url === "object") {
                  options = url;
                  url = undefined;
                }

                // Force options to be an object
                options = options || {};

                var transport,
                  // URL without anti-cache param
                  cacheURL,
                  // Response headers
                  responseHeadersString,
                  responseHeaders,
                  // timeout handle
                  timeoutTimer,
                  // Url cleanup var
                  urlAnchor,
                  // Request state (becomes false upon send and true upon completion)
                  completed,
                  // To know if global events are to be dispatched
                  fireGlobals,
                  // Loop variable
                  i,
                  // uncached part of the url
                  uncached,
                  // Create the final options object
                  s = jQuery.ajaxSetup({}, options),
                  // Callbacks context
                  callbackContext = s.context || s,
                  // Context for global events is callbackContext if it is a DOM node or jQuery collection
                  globalEventContext =
                    s.context &&
                      (callbackContext.nodeType || callbackContext.jquery)
                      ? jQuery(callbackContext)
                      : jQuery.event,
                  // Deferreds
                  deferred = jQuery.Deferred(),
                  completeDeferred = jQuery.Callbacks("once memory"),
                  // Status-dependent callbacks
                  statusCode = s.statusCode || {},
                  // Headers (they are sent all at once)
                  requestHeaders = {},
                  requestHeadersNames = {},
                  // Default abort message
                  strAbort = "canceled",
                  // Fake xhr
                  jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function (key) {
                      var match;
                      if (completed) {
                        if (!responseHeaders) {
                          responseHeaders = {};
                          while (
                            (match = rheaders.exec(responseHeadersString))
                          ) {
                            responseHeaders[match[1].toLowerCase() + " "] = (
                              responseHeaders[match[1].toLowerCase() + " "] ||
                              []
                            ).concat(match[2]);
                          }
                        }
                        match = responseHeaders[key.toLowerCase() + " "];
                      }
                      return match == null ? null : match.join(", ");
                    },

                    // Raw string
                    getAllResponseHeaders: function () {
                      return completed ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function (name, value) {
                      if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] =
                          requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                      }
                      return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function (type) {
                      if (completed == null) {
                        s.mimeType = type;
                      }
                      return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function (map) {
                      var code;
                      if (map) {
                        if (completed) {
                          // Execute the appropriate callbacks
                          jqXHR.always(map[jqXHR.status]);
                        } else {
                          // Lazy-add the new callbacks in a way that preserves old ones
                          for (code in map) {
                            statusCode[code] = [statusCode[code], map[code]];
                          }
                        }
                      }
                      return this;
                    },

                    // Cancel the request
                    abort: function (statusText) {
                      var finalText = statusText || strAbort;
                      if (transport) {
                        transport.abort(finalText);
                      }
                      done(0, finalText);
                      return this;
                    },
                  };

                // Attach deferreds
                deferred.promise(jqXHR);

                // Add protocol if not provided (prefilters might expect it)
                // Handle falsy url in the settings object (trac-10093: consistency with old signature)
                // We also use the url parameter if available
                s.url = ((url || s.url || location.href) + "").replace(
                  rprotocol,
                  location.protocol + "//"
                );

                // Alias method option to type as per ticket trac-12004
                s.type = options.method || options.type || s.method || s.type;

                // Extract dataTypes list
                s.dataTypes = (s.dataType || "*")
                  .toLowerCase()
                  .match(rnothtmlwhite) || [""];

                // A cross-domain request is in order when the origin doesn't match the current origin.
                if (s.crossDomain == null) {
                  urlAnchor = document.createElement("a");

                  // Support: IE <=8 - 11, Edge 12 - 15
                  // IE throws exception on accessing the href property if url is malformed,
                  // e.g. http://example.com:80x/
                  try {
                    urlAnchor.href = s.url;

                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain =
                      originAnchor.protocol + "//" + originAnchor.host !==
                      urlAnchor.protocol + "//" + urlAnchor.host;
                  } catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                  }
                }

                // Convert data if not already a string
                if (s.data && s.processData && typeof s.data !== "string") {
                  s.data = jQuery.param(s.data, s.traditional);
                }

                // Apply prefilters
                inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

                // If request was aborted inside a prefilter, stop there
                if (completed) {
                  return jqXHR;
                }

                // We can fire global events as of now if asked to
                // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
                fireGlobals = jQuery.event && s.global;

                // Watch for a new set of requests
                if (fireGlobals && jQuery.active++ === 0) {
                  jQuery.event.trigger("ajaxStart");
                }

                // Uppercase the type
                s.type = s.type.toUpperCase();

                // Determine if request has content
                s.hasContent = !rnoContent.test(s.type);

                // Save the URL in case we're toying with the If-Modified-Since
                // and/or If-None-Match header later on
                // Remove hash to simplify url manipulation
                cacheURL = s.url.replace(rhash, "");

                // More options handling for requests with no content
                if (!s.hasContent) {
                  // Remember the hash so we can put it back
                  uncached = s.url.slice(cacheURL.length);

                  // If data is available and should be processed, append data to url
                  if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                    // trac-9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                  }

                  // Add or update anti-cache param if needed
                  if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached =
                      (rquery.test(cacheURL) ? "&" : "?") +
                      "_=" +
                      nonce.guid++ +
                      uncached;
                  }

                  // Put hash and anti-cache on the URL that will be requested (gh-1732)
                  s.url = cacheURL + uncached;

                  // Change '%20' to '+' if this is encoded form body content (gh-2658)
                } else if (
                  s.data &&
                  s.processData &&
                  (s.contentType || "").indexOf(
                    "application/x-www-form-urlencoded"
                  ) === 0
                ) {
                  s.data = s.data.replace(r20, "+");
                }

                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if (s.ifModified) {
                  if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader(
                      "If-Modified-Since",
                      jQuery.lastModified[cacheURL]
                    );
                  }
                  if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader(
                      "If-None-Match",
                      jQuery.etag[cacheURL]
                    );
                  }
                }

                // Set the correct header, if data is being sent
                if (
                  (s.data && s.hasContent && s.contentType !== false) ||
                  options.contentType
                ) {
                  jqXHR.setRequestHeader("Content-Type", s.contentType);
                }

                // Set the Accepts header for the server, depending on the dataType
                jqXHR.setRequestHeader(
                  "Accept",
                  s.dataTypes[0] && s.accepts[s.dataTypes[0]]
                    ? s.accepts[s.dataTypes[0]] +
                    (s.dataTypes[0] !== "*"
                      ? ", " + allTypes + "; q=0.01"
                      : "")
                    : s.accepts["*"]
                );

                // Check for headers option
                for (i in s.headers) {
                  jqXHR.setRequestHeader(i, s.headers[i]);
                }

                // Allow custom headers/mimetypes and early abort
                if (
                  s.beforeSend &&
                  (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
                    completed)
                ) {
                  // Abort if not done already and return
                  return jqXHR.abort();
                }

                // Aborting is no longer a cancellation
                strAbort = "abort";

                // Install callbacks on deferreds
                completeDeferred.add(s.complete);
                jqXHR.done(s.success);
                jqXHR.fail(s.error);

                // Get transport
                transport = inspectPrefiltersOrTransports(
                  transports,
                  s,
                  options,
                  jqXHR
                );

                // If no transport, we auto-abort
                if (!transport) {
                  done(-1, "No Transport");
                } else {
                  jqXHR.readyState = 1;

                  // Send global event
                  if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                  }

                  // If request was aborted inside ajaxSend, stop there
                  if (completed) {
                    return jqXHR;
                  }

                  // Timeout
                  if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                      jqXHR.abort("timeout");
                    }, s.timeout);
                  }

                  try {
                    completed = false;
                    transport.send(requestHeaders, done);
                  } catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) {
                      throw e;
                    }

                    // Propagate others as results
                    done(-1, e);
                  }
                }

                // Callback for when everything is done
                function done(status, nativeStatusText, responses, headers) {
                  var isSuccess,
                    success,
                    error,
                    response,
                    modified,
                    statusText = nativeStatusText;

                  // Ignore repeat invocations
                  if (completed) {
                    return;
                  }

                  completed = true;

                  // Clear timeout if it exists
                  if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                  }

                  // Dereference transport for early garbage collection
                  // (no matter how long the jqXHR object will be used)
                  transport = undefined;

                  // Cache response headers
                  responseHeadersString = headers || "";

                  // Set readyState
                  jqXHR.readyState = status > 0 ? 4 : 0;

                  // Determine if successful
                  isSuccess = (status >= 200 && status < 300) || status === 304;

                  // Get response data
                  if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                  }

                  // Use a noop converter for missing script but not if jsonp
                  if (
                    !isSuccess &&
                    jQuery.inArray("script", s.dataTypes) > -1 &&
                    jQuery.inArray("json", s.dataTypes) < 0
                  ) {
                    s.converters["text script"] = function () { };
                  }

                  // Convert no matter what (that way responseXXX fields are always set)
                  response = ajaxConvert(s, response, jqXHR, isSuccess);

                  // If successful, handle type chaining
                  if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                      modified = jqXHR.getResponseHeader("Last-Modified");
                      if (modified) {
                        jQuery.lastModified[cacheURL] = modified;
                      }
                      modified = jqXHR.getResponseHeader("etag");
                      if (modified) {
                        jQuery.etag[cacheURL] = modified;
                      }
                    }

                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                      statusText = "nocontent";

                      // if not modified
                    } else if (status === 304) {
                      statusText = "notmodified";

                      // If we have data, let's convert it
                    } else {
                      statusText = response.state;
                      success = response.data;
                      error = response.error;
                      isSuccess = !error;
                    }
                  } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                      statusText = "error";
                      if (status < 0) {
                        status = 0;
                      }
                    }
                  }

                  // Set data for the fake xhr object
                  jqXHR.status = status;
                  jqXHR.statusText = (nativeStatusText || statusText) + "";

                  // Success/Error
                  if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                      success,
                      statusText,
                      jqXHR,
                    ]);
                  } else {
                    deferred.rejectWith(callbackContext, [
                      jqXHR,
                      statusText,
                      error,
                    ]);
                  }

                  // Status-dependent callbacks
                  jqXHR.statusCode(statusCode);
                  statusCode = undefined;

                  if (fireGlobals) {
                    globalEventContext.trigger(
                      isSuccess ? "ajaxSuccess" : "ajaxError",
                      [jqXHR, s, isSuccess ? success : error]
                    );
                  }

                  // Complete
                  completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText,
                  ]);

                  if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                    // Handle the global AJAX counter
                    if (!--jQuery.active) {
                      jQuery.event.trigger("ajaxStop");
                    }
                  }
                }

                return jqXHR;
              },

              getJSON: function (url, data, callback) {
                return jQuery.get(url, data, callback, "json");
              },

              getScript: function (url, callback) {
                return jQuery.get(url, undefined, callback, "script");
              },
            });

            jQuery.each(["get", "post"], function (_i, method) {
              jQuery[method] = function (url, data, callback, type) {
                // Shift arguments if data argument was omitted
                if (isFunction(data)) {
                  type = type || callback;
                  callback = data;
                  data = undefined;
                }

                // The url can be an options object (which then must have .url)
                return jQuery.ajax(
                  jQuery.extend(
                    {
                      url: url,
                      type: method,
                      dataType: type,
                      data: data,
                      success: callback,
                    },
                    jQuery.isPlainObject(url) && url
                  )
                );
              };
            });

            jQuery.ajaxPrefilter(function (s) {
              var i;
              for (i in s.headers) {
                if (i.toLowerCase() === "content-type") {
                  s.contentType = s.headers[i] || "";
                }
              }
            });

            jQuery._evalUrl = function (url, options, doc) {
              return jQuery.ajax({
                url: url,

                // Make this explicit, since user can override this through ajaxSetup (trac-11264)
                type: "GET",
                dataType: "script",
                cache: true,
                async: false,
                global: false,

                // Only evaluate the response if it is successful (gh-4126)
                // dataFilter is not invoked for failure responses, so using it instead
                // of the default converter is kludgy but it works.
                converters: {
                  "text script": function () { },
                },
                dataFilter: function (response) {
                  jQuery.globalEval(response, options, doc);
                },
              });
            };

            jQuery.fn.extend({
              wrapAll: function (html) {
                var wrap;

                if (this[0]) {
                  if (isFunction(html)) {
                    html = html.call(this[0]);
                  }

                  // The elements to wrap the target around
                  wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                  if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                  }

                  wrap
                    .map(function () {
                      var elem = this;

                      while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                      }

                      return elem;
                    })
                    .append(this);
                }

                return this;
              },

              wrapInner: function (html) {
                if (isFunction(html)) {
                  return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                  });
                }

                return this.each(function () {
                  var self = jQuery(this),
                    contents = self.contents();

                  if (contents.length) {
                    contents.wrapAll(html);
                  } else {
                    self.append(html);
                  }
                });
              },

              wrap: function (html) {
                var htmlIsFunction = isFunction(html);

                return this.each(function (i) {
                  jQuery(this).wrapAll(
                    htmlIsFunction ? html.call(this, i) : html
                  );
                });
              },

              unwrap: function (selector) {
                this.parent(selector)
                  .not("body")
                  .each(function () {
                    jQuery(this).replaceWith(this.childNodes);
                  });
                return this;
              },
            });

            jQuery.expr.pseudos.hidden = function (elem) {
              return !jQuery.expr.pseudos.visible(elem);
            };
            jQuery.expr.pseudos.visible = function (elem) {
              return !!(
                elem.offsetWidth ||
                elem.offsetHeight ||
                elem.getClientRects().length
              );
            };

            jQuery.ajaxSettings.xhr = function () {
              try {
                return new window.XMLHttpRequest();
              } catch (e) { }
            };

            var xhrSuccessStatus = {
              // File protocol always yields status code 0, assume 200
              0: 200,

              // Support: IE <=9 only
              // trac-1450: sometimes IE returns 1223 when it should be 204
              1223: 204,
            },
              xhrSupported = jQuery.ajaxSettings.xhr();

            support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
            support.ajax = xhrSupported = !!xhrSupported;

            jQuery.ajaxTransport(function (options) {
              var callback, errorCallback;

              // Cross domain only allowed if supported through XMLHttpRequest
              if (support.cors || (xhrSupported && !options.crossDomain)) {
                return {
                  send: function (headers, complete) {
                    var i,
                      xhr = options.xhr();

                    xhr.open(
                      options.type,
                      options.url,
                      options.async,
                      options.username,
                      options.password
                    );

                    // Apply custom fields if provided
                    if (options.xhrFields) {
                      for (i in options.xhrFields) {
                        xhr[i] = options.xhrFields[i];
                      }
                    }

                    // Override mime type if needed
                    if (options.mimeType && xhr.overrideMimeType) {
                      xhr.overrideMimeType(options.mimeType);
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                      headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Set headers
                    for (i in headers) {
                      xhr.setRequestHeader(i, headers[i]);
                    }

                    // Callback
                    callback = function (type) {
                      return function () {
                        if (callback) {
                          callback =
                            errorCallback =
                            xhr.onload =
                            xhr.onerror =
                            xhr.onabort =
                            xhr.ontimeout =
                            xhr.onreadystatechange =
                            null;

                          if (type === "abort") {
                            xhr.abort();
                          } else if (type === "error") {
                            // Support: IE <=9 only
                            // On a manual native abort, IE9 throws
                            // errors on any property access that is not readyState
                            if (typeof xhr.status !== "number") {
                              complete(0, "error");
                            } else {
                              complete(
                                // File: protocol always yields status 0; see trac-8605, trac-14207
                                xhr.status,
                                xhr.statusText
                              );
                            }
                          } else {
                            complete(
                              xhrSuccessStatus[xhr.status] || xhr.status,
                              xhr.statusText,

                              // Support: IE <=9 only
                              // IE9 has no XHR2 but throws on binary (trac-11426)
                              // For XHR2 non-text, let the caller handle it (gh-2498)
                              (xhr.responseType || "text") !== "text" ||
                                typeof xhr.responseText !== "string"
                                ? { binary: xhr.response }
                                : { text: xhr.responseText },
                              xhr.getAllResponseHeaders()
                            );
                          }
                        }
                      };
                    };

                    // Listen to events
                    xhr.onload = callback();
                    errorCallback =
                      xhr.onerror =
                      xhr.ontimeout =
                      callback("error");

                    // Support: IE 9 only
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if (xhr.onabort !== undefined) {
                      xhr.onabort = errorCallback;
                    } else {
                      xhr.onreadystatechange = function () {
                        // Check readyState before timeout as it changes
                        if (xhr.readyState === 4) {
                          // Allow onerror to be called first,
                          // but that will not handle a native abort
                          // Also, save errorCallback to a variable
                          // as xhr.onerror cannot be accessed
                          window.setTimeout(function () {
                            if (callback) {
                              errorCallback();
                            }
                          });
                        }
                      };
                    }

                    // Create the abort callback
                    callback = callback("abort");

                    try {
                      // Do send the request (this may raise an exception)
                      xhr.send((options.hasContent && options.data) || null);
                    } catch (e) {
                      // trac-14683: Only rethrow if this hasn't been notified as an error yet
                      if (callback) {
                        throw e;
                      }
                    }
                  },

                  abort: function () {
                    if (callback) {
                      callback();
                    }
                  },
                };
              }
            });

            // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
            jQuery.ajaxPrefilter(function (s) {
              if (s.crossDomain) {
                s.contents.script = false;
              }
            });

            // Install script dataType
            jQuery.ajaxSetup({
              accepts: {
                script:
                  "text/javascript, application/javascript, " +
                  "application/ecmascript, application/x-ecmascript",
              },
              contents: {
                script: /\b(?:java|ecma)script\b/,
              },
              converters: {
                "text script": function (text) {
                  jQuery.globalEval(text);
                  return text;
                },
              },
            });

            // Handle cache's special case and crossDomain
            jQuery.ajaxPrefilter("script", function (s) {
              if (s.cache === undefined) {
                s.cache = false;
              }
              if (s.crossDomain) {
                s.type = "GET";
              }
            });

            // Bind script tag hack transport
            jQuery.ajaxTransport("script", function (s) {
              // This transport only deals with cross domain or forced-by-attrs requests
              if (s.crossDomain || s.scriptAttrs) {
                var script, callback;
                return {
                  send: function (_, complete) {
                    script = jQuery("<script>")
                      .attr(s.scriptAttrs || {})
                      .prop({ charset: s.scriptCharset, src: s.url })
                      .on(
                        "load error",
                        (callback = function (evt) {
                          script.remove();
                          callback = null;
                          if (evt) {
                            complete(
                              evt.type === "error" ? 404 : 200,
                              evt.type
                            );
                          }
                        })
                      );

                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild(script[0]);
                  },
                  abort: function () {
                    if (callback) {
                      callback();
                    }
                  },
                };
              }
            });

            var oldCallbacks = [],
              rjsonp = /(=)\?(?=&|$)|\?\?/;

            // Default jsonp settings
            jQuery.ajaxSetup({
              jsonp: "callback",
              jsonpCallback: function () {
                var callback =
                  oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
                this[callback] = true;
                return callback;
              },
            });

            // Detect, normalize options and install callbacks for jsonp requests
            jQuery.ajaxPrefilter(
              "json jsonp",
              function (s, originalSettings, jqXHR) {
                var callbackName,
                  overwritten,
                  responseContainer,
                  jsonProp =
                    s.jsonp !== false &&
                    (rjsonp.test(s.url)
                      ? "url"
                      : typeof s.data === "string" &&
                      (s.contentType || "").indexOf(
                        "application/x-www-form-urlencoded"
                      ) === 0 &&
                      rjsonp.test(s.data) &&
                      "data");

                // Handle iff the expected data type is "jsonp" or we have a parameter to set
                if (jsonProp || s.dataTypes[0] === "jsonp") {
                  // Get callback name, remembering preexisting value associated with it
                  callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
                    ? s.jsonpCallback()
                    : s.jsonpCallback;

                  // Insert callback into url or form data
                  if (jsonProp) {
                    s[jsonProp] = s[jsonProp].replace(
                      rjsonp,
                      "$1" + callbackName
                    );
                  } else if (s.jsonp !== false) {
                    s.url +=
                      (rquery.test(s.url) ? "&" : "?") +
                      s.jsonp +
                      "=" +
                      callbackName;
                  }

                  // Use data converter to retrieve json after script execution
                  s.converters["script json"] = function () {
                    if (!responseContainer) {
                      jQuery.error(callbackName + " was not called");
                    }
                    return responseContainer[0];
                  };

                  // Force json dataType
                  s.dataTypes[0] = "json";

                  // Install callback
                  overwritten = window[callbackName];
                  window[callbackName] = function () {
                    responseContainer = arguments;
                  };

                  // Clean-up function (fires after converters)
                  jqXHR.always(function () {
                    // If previous value didn't exist - remove it
                    if (overwritten === undefined) {
                      jQuery(window).removeProp(callbackName);

                      // Otherwise restore preexisting value
                    } else {
                      window[callbackName] = overwritten;
                    }

                    // Save back as free
                    if (s[callbackName]) {
                      // Make sure that re-using the options doesn't screw things around
                      s.jsonpCallback = originalSettings.jsonpCallback;

                      // Save the callback name for future use
                      oldCallbacks.push(callbackName);
                    }

                    // Call if it was a function and we have a response
                    if (responseContainer && isFunction(overwritten)) {
                      overwritten(responseContainer[0]);
                    }

                    responseContainer = overwritten = undefined;
                  });

                  // Delegate to script
                  return "script";
                }
              }
            );

            // Support: Safari 8 only
            // In Safari 8 documents created via document.implementation.createHTMLDocument
            // collapse sibling forms: the second one becomes a child of the first one.
            // Because of that, this security measure has to be disabled in Safari 8.
            // https://bugs.webkit.org/show_bug.cgi?id=137337
            support.createHTMLDocument = (function () {
              var body = document.implementation.createHTMLDocument("").body;
              body.innerHTML = "<form></form><form></form>";
              return body.childNodes.length === 2;
            })();

            // Argument "data" should be string of html
            // context (optional): If specified, the fragment will be created in this context,
            // defaults to document
            // keepScripts (optional): If true, will include scripts passed in the html string
            jQuery.parseHTML = function (data, context, keepScripts) {
              if (typeof data !== "string") {
                return [];
              }
              if (typeof context === "boolean") {
                keepScripts = context;
                context = false;
              }

              var base, parsed, scripts;

              if (!context) {
                // Stop scripts or inline event handlers from being executed immediately
                // by using document.implementation
                if (support.createHTMLDocument) {
                  context = document.implementation.createHTMLDocument("");

                  // Set the base href for the created document
                  // so any parsed elements with URLs
                  // are based on the document's URL (gh-2965)
                  base = context.createElement("base");
                  base.href = document.location.href;
                  context.head.appendChild(base);
                } else {
                  context = document;
                }
              }

              parsed = rsingleTag.exec(data);
              scripts = !keepScripts && [];

              // Single tag
              if (parsed) {
                return [context.createElement(parsed[1])];
              }

              parsed = buildFragment([data], context, scripts);

              if (scripts && scripts.length) {
                jQuery(scripts).remove();
              }

              return jQuery.merge([], parsed.childNodes);
            };

            /**
             * Load a url into a page
             */
            jQuery.fn.load = function (url, params, callback) {
              var selector,
                type,
                response,
                self = this,
                off = url.indexOf(" ");

              if (off > -1) {
                selector = stripAndCollapse(url.slice(off));
                url = url.slice(0, off);
              }

              // If it's a function
              if (isFunction(params)) {
                // We assume that it's the callback
                callback = params;
                params = undefined;

                // Otherwise, build a param string
              } else if (params && typeof params === "object") {
                type = "POST";
              }

              // If we have elements to modify, make the request
              if (self.length > 0) {
                jQuery
                  .ajax({
                    url: url,

                    // If "type" variable is undefined, then "GET" method will be used.
                    // Make value of this field explicit since
                    // user can override it through ajaxSetup method
                    type: type || "GET",
                    dataType: "html",
                    data: params,
                  })
                  .done(function (responseText) {
                    // Save response for use in complete callback
                    response = arguments;

                    self.html(
                      selector
                        ? // If a selector was specified, locate the right elements in a dummy div
                        // Exclude scripts to avoid IE 'Permission Denied' errors
                        jQuery("<div>")
                          .append(jQuery.parseHTML(responseText))
                          .find(selector)
                        : // Otherwise use the full result
                        responseText
                    );

                    // If the request succeeds, this function gets "data", "status", "jqXHR"
                    // but they are ignored because response was set above.
                    // If it fails, this function gets "jqXHR", "status", "error"
                  })
                  .always(
                    callback &&
                    function (jqXHR, status) {
                      self.each(function () {
                        callback.apply(
                          this,
                          response || [jqXHR.responseText, status, jqXHR]
                        );
                      });
                    }
                  );
              }

              return this;
            };

            jQuery.expr.pseudos.animated = function (elem) {
              return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem;
              }).length;
            };

            jQuery.offset = {
              setOffset: function (elem, options, i) {
                var curPosition,
                  curLeft,
                  curCSSTop,
                  curTop,
                  curOffset,
                  curCSSLeft,
                  calculatePosition,
                  position = jQuery.css(elem, "position"),
                  curElem = jQuery(elem),
                  props = {};

                // Set position first, in-case top/left are set even on static elem
                if (position === "static") {
                  elem.style.position = "relative";
                }

                curOffset = curElem.offset();
                curCSSTop = jQuery.css(elem, "top");
                curCSSLeft = jQuery.css(elem, "left");
                calculatePosition =
                  (position === "absolute" || position === "fixed") &&
                  (curCSSTop + curCSSLeft).indexOf("auto") > -1;

                // Need to be able to calculate position if either
                // top or left is auto and position is either absolute or fixed
                if (calculatePosition) {
                  curPosition = curElem.position();
                  curTop = curPosition.top;
                  curLeft = curPosition.left;
                } else {
                  curTop = parseFloat(curCSSTop) || 0;
                  curLeft = parseFloat(curCSSLeft) || 0;
                }

                if (isFunction(options)) {
                  // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                  options = options.call(elem, i, jQuery.extend({}, curOffset));
                }

                if (options.top != null) {
                  props.top = options.top - curOffset.top + curTop;
                }
                if (options.left != null) {
                  props.left = options.left - curOffset.left + curLeft;
                }

                if ("using" in options) {
                  options.using.call(elem, props);
                } else {
                  curElem.css(props);
                }
              },
            };

            jQuery.fn.extend({
              // offset() relates an element's border box to the document origin
              offset: function (options) {
                // Preserve chaining for setter
                if (arguments.length) {
                  return options === undefined
                    ? this
                    : this.each(function (i) {
                      jQuery.offset.setOffset(this, options, i);
                    });
                }

                var rect,
                  win,
                  elem = this[0];

                if (!elem) {
                  return;
                }

                // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                // Support: IE <=11 only
                // Running getBoundingClientRect on a
                // disconnected node in IE throws an error
                if (!elem.getClientRects().length) {
                  return { top: 0, left: 0 };
                }

                // Get document-relative position by adding viewport scroll to viewport-relative gBCR
                rect = elem.getBoundingClientRect();
                win = elem.ownerDocument.defaultView;
                return {
                  top: rect.top + win.pageYOffset,
                  left: rect.left + win.pageXOffset,
                };
              },

              // position() relates an element's margin box to its offset parent's padding box
              // This corresponds to the behavior of CSS absolute positioning
              position: function () {
                if (!this[0]) {
                  return;
                }

                var offsetParent,
                  offset,
                  doc,
                  elem = this[0],
                  parentOffset = { top: 0, left: 0 };

                // position:fixed elements are offset from the viewport, which itself always has zero offset
                if (jQuery.css(elem, "position") === "fixed") {
                  // Assume position:fixed implies availability of getBoundingClientRect
                  offset = elem.getBoundingClientRect();
                } else {
                  offset = this.offset();

                  // Account for the *real* offset parent, which can be the document or its root element
                  // when a statically positioned element is identified
                  doc = elem.ownerDocument;
                  offsetParent = elem.offsetParent || doc.documentElement;
                  while (
                    offsetParent &&
                    (offsetParent === doc.body ||
                      offsetParent === doc.documentElement) &&
                    jQuery.css(offsetParent, "position") === "static"
                  ) {
                    offsetParent = offsetParent.parentNode;
                  }
                  if (
                    offsetParent &&
                    offsetParent !== elem &&
                    offsetParent.nodeType === 1
                  ) {
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(
                      offsetParent,
                      "borderTopWidth",
                      true
                    );
                    parentOffset.left += jQuery.css(
                      offsetParent,
                      "borderLeftWidth",
                      true
                    );
                  }
                }

                // Subtract parent offsets and element margins
                return {
                  top:
                    offset.top -
                    parentOffset.top -
                    jQuery.css(elem, "marginTop", true),
                  left:
                    offset.left -
                    parentOffset.left -
                    jQuery.css(elem, "marginLeft", true),
                };
              },

              // This method will return documentElement in the following cases:
              // 1) For the element inside the iframe without offsetParent, this method will return
              //    documentElement of the parent window
              // 2) For the hidden or detached element
              // 3) For body or html element, i.e. in case of the html node - it will return itself
              //
              // but those exceptions were never presented as a real life use-cases
              // and might be considered as more preferable results.
              //
              // This logic, however, is not guaranteed and can change at any point in the future
              offsetParent: function () {
                return this.map(function () {
                  var offsetParent = this.offsetParent;

                  while (
                    offsetParent &&
                    jQuery.css(offsetParent, "position") === "static"
                  ) {
                    offsetParent = offsetParent.offsetParent;
                  }

                  return offsetParent || documentElement;
                });
              },
            });

            // Create scrollLeft and scrollTop methods
            jQuery.each(
              { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
              function (method, prop) {
                var top = "pageYOffset" === prop;

                jQuery.fn[method] = function (val) {
                  return access(
                    this,
                    function (elem, method, val) {
                      // Coalesce documents and windows
                      var win;
                      if (isWindow(elem)) {
                        win = elem;
                      } else if (elem.nodeType === 9) {
                        win = elem.defaultView;
                      }

                      if (val === undefined) {
                        return win ? win[prop] : elem[method];
                      }

                      if (win) {
                        win.scrollTo(
                          !top ? val : win.pageXOffset,
                          top ? val : win.pageYOffset
                        );
                      } else {
                        elem[method] = val;
                      }
                    },
                    method,
                    val,
                    arguments.length
                  );
                };
              }
            );

            // Support: Safari <=7 - 9.1, Chrome <=37 - 49
            // Add the top/left cssHooks using jQuery.fn.position
            // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
            // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
            // getComputedStyle returns percent when specified for top/left/bottom/right;
            // rather than make the css module depend on the offset module, just check for it here
            jQuery.each(["top", "left"], function (_i, prop) {
              jQuery.cssHooks[prop] = addGetHookIf(
                support.pixelPosition,
                function (elem, computed) {
                  if (computed) {
                    computed = curCSS(elem, prop);

                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test(computed)
                      ? jQuery(elem).position()[prop] + "px"
                      : computed;
                  }
                }
              );
            });

            // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
            jQuery.each(
              { Height: "height", Width: "width" },
              function (name, type) {
                jQuery.each(
                  {
                    padding: "inner" + name,
                    content: type,
                    "": "outer" + name,
                  },
                  function (defaultExtra, funcName) {
                    // Margin is only for outerHeight, outerWidth
                    jQuery.fn[funcName] = function (margin, value) {
                      var chainable =
                        arguments.length &&
                        (defaultExtra || typeof margin !== "boolean"),
                        extra =
                          defaultExtra ||
                          (margin === true || value === true
                            ? "margin"
                            : "border");

                      return access(
                        this,
                        function (elem, type, value) {
                          var doc;

                          if (isWindow(elem)) {
                            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                            return funcName.indexOf("outer") === 0
                              ? elem["inner" + name]
                              : elem.document.documentElement["client" + name];
                          }

                          // Get document width or height
                          if (elem.nodeType === 9) {
                            doc = elem.documentElement;

                            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                            // whichever is greatest
                            return Math.max(
                              elem.body["scroll" + name],
                              doc["scroll" + name],
                              elem.body["offset" + name],
                              doc["offset" + name],
                              doc["client" + name]
                            );
                          }

                          return value === undefined
                            ? // Get width or height on the element, requesting but not forcing parseFloat
                            jQuery.css(elem, type, extra)
                            : // Set width or height on the element
                            jQuery.style(elem, type, value, extra);
                        },
                        type,
                        chainable ? margin : undefined,
                        chainable
                      );
                    };
                  }
                );
              }
            );

            jQuery.each(
              [
                "ajaxStart",
                "ajaxStop",
                "ajaxComplete",
                "ajaxError",
                "ajaxSuccess",
                "ajaxSend",
              ],
              function (_i, type) {
                jQuery.fn[type] = function (fn) {
                  return this.on(type, fn);
                };
              }
            );

            jQuery.fn.extend({
              bind: function (types, data, fn) {
                return this.on(types, null, data, fn);
              },
              unbind: function (types, fn) {
                return this.off(types, null, fn);
              },

              delegate: function (selector, types, data, fn) {
                return this.on(types, selector, data, fn);
              },
              undelegate: function (selector, types, fn) {
                // ( namespace ) or ( selector, types [, fn] )
                return arguments.length === 1
                  ? this.off(selector, "**")
                  : this.off(types, selector || "**", fn);
              },

              hover: function (fnOver, fnOut) {
                return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
              },
            });

            jQuery.each(
              (
                "blur focus focusin focusout resize scroll click dblclick " +
                "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
                "change select submit keydown keypress keyup contextmenu"
              ).split(" "),
              function (_i, name) {
                // Handle event binding
                jQuery.fn[name] = function (data, fn) {
                  return arguments.length > 0
                    ? this.on(name, null, data, fn)
                    : this.trigger(name);
                };
              }
            );

            // Support: Android <=4.0 only
            // Make sure we trim BOM and NBSP
            // Require that the "whitespace run" starts from a non-whitespace
            // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
            var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

            // Bind a function to a context, optionally partially applying any
            // arguments.
            // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
            // However, it is not slated for removal any time soon
            jQuery.proxy = function (fn, context) {
              var tmp, args, proxy;

              if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
              }

              // Quick check to determine if target is callable, in the spec
              // this throws a TypeError, but we will just return undefined.
              if (!isFunction(fn)) {
                return undefined;
              }

              // Simulated bind
              args = slice.call(arguments, 2);
              proxy = function () {
                return fn.apply(
                  context || this,
                  args.concat(slice.call(arguments))
                );
              };

              // Set the guid of unique handler to the same of original handler, so it can be removed
              proxy.guid = fn.guid = fn.guid || jQuery.guid++;

              return proxy;
            };

            jQuery.holdReady = function (hold) {
              if (hold) {
                jQuery.readyWait++;
              } else {
                jQuery.ready(true);
              }
            };
            jQuery.isArray = Array.isArray;
            jQuery.parseJSON = JSON.parse;
            jQuery.nodeName = nodeName;
            jQuery.isFunction = isFunction;
            jQuery.isWindow = isWindow;
            jQuery.camelCase = camelCase;
            jQuery.type = toType;

            jQuery.now = Date.now;

            jQuery.isNumeric = function (obj) {
              // As of jQuery 3.0, isNumeric is limited to
              // strings and numbers (primitives or objects)
              // that can be coerced to finite numbers (gh-2662)
              var type = jQuery.type(obj);
              return (
                (type === "number" || type === "string") &&
                // parseFloat NaNs numeric-cast false positives ("")
                // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                // subtraction forces infinities to NaN
                !isNaN(obj - parseFloat(obj))
              );
            };

            jQuery.trim = function (text) {
              return text == null ? "" : (text + "").replace(rtrim, "$1");
            };

            // Register as a named AMD module, since jQuery can be concatenated with other
            // files that may use define, but not via a proper concatenation script that
            // understands anonymous AMD modules. A named AMD is safest and most robust
            // way to register. Lowercase jquery is used because AMD module names are
            // derived from file names, and jQuery is normally delivered in a lowercase
            // file name. Do this after creating the global so that if an AMD module wants
            // to call noConflict to hide this version of jQuery, it will work.

            // Note that for maximum portability, libraries that are not jQuery should
            // declare themselves as anonymous modules, and avoid setting a global if an
            // AMD loader is present. jQuery is a special case. For more information, see
            // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

            if (true) {
              !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
                (__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                  return jQuery;
                }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }

            var // Map over jQuery in case of overwrite
              _jQuery = window.jQuery,
              // Map over the $ in case of overwrite
              _$ = window.$;

            jQuery.noConflict = function (deep) {
              if (window.$ === jQuery) {
                window.$ = _$;
              }

              if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
              }

              return jQuery;
            };

            // Expose jQuery and $ identifiers, even in AMD
            // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
            // and CommonJS for browser emulators (trac-13566)
            if (typeof noGlobal === "undefined") {
              window.jQuery = window.$ = jQuery;
            }

            return jQuery;
          }
        );

        /***/
      },

    /***/ "./node_modules/laravel-echo/dist/echo.js":
      /*!************************************************!*\
  !*** ./node_modules/laravel-echo/dist/echo.js ***!
  \************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Channel: () => /* binding */ Channel,
          /* harmony export */ default: () => /* binding */ Echo,
          /* harmony export */
        });
        function _typeof(obj) {
          "@babel/helpers - typeof";

          return (
            (_typeof =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (obj) {
                  return typeof obj;
                }
                : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
            _typeof(obj)
          );
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false,
          });
          return Constructor;
        }

        function _extends() {
          _extends =
            Object.assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          return _extends.apply(this, arguments);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true,
              },
            }
          );
          Object.defineProperty(subClass, "prototype", {
            writable: false,
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
          return _getPrototypeOf(o);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };

          return _setPrototypeOf(o, p);
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct)
            return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;

          try {
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () { })
            );
            return true;
          } catch (e) {
            return false;
          }
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return self;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (typeof call === "object" || typeof call === "function")
          ) {
            return call;
          } else if (call !== void 0) {
            throw new TypeError(
              "Derived constructors may only return object or undefined"
            );
          }

          return _assertThisInitialized(self);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();

          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;

            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;

              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }

            return _possibleConstructorReturn(this, result);
          };
        }

        /**
         * This class represents a basic channel.
         */
        var Channel = /*#__PURE__*/ (function () {
          function Channel() {
            _classCallCheck(this, Channel);
          }

          _createClass(Channel, [
            {
              key: "listenForWhisper",
              value:
                /**
                 * Listen for a whisper event on the channel instance.
                 */
                function listenForWhisper(event, callback) {
                  return this.listen(".client-" + event, callback);
                },
              /**
               * Listen for an event on the channel instance.
               */
            },
            {
              key: "notification",
              value: function notification(callback) {
                return this.listen(
                  ".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",
                  callback
                );
              },
              /**
               * Stop listening for a whisper event on the channel instance.
               */
            },
            {
              key: "stopListeningForWhisper",
              value: function stopListeningForWhisper(event, callback) {
                return this.stopListening(".client-" + event, callback);
              },
            },
          ]);

          return Channel;
        })();

        /**
         * Event name formatter
         */
        var EventFormatter = /*#__PURE__*/ (function () {
          /**
           * Create a new class instance.
           */
          function EventFormatter(namespace) {
            _classCallCheck(this, EventFormatter);

            this.setNamespace(namespace);
          }
          /**
           * Format the given event name.
           */

          _createClass(EventFormatter, [
            {
              key: "format",
              value: function format(event) {
                if (event.charAt(0) === "." || event.charAt(0) === "\\") {
                  return event.substr(1);
                } else if (this.namespace) {
                  event = this.namespace + "." + event;
                }

                return event.replace(/\./g, "\\");
              },
              /**
               * Set the event namespace.
               */
            },
            {
              key: "setNamespace",
              value: function setNamespace(value) {
                this.namespace = value;
              },
            },
          ]);

          return EventFormatter;
        })();

        /**
         * This class represents a Pusher channel.
         */

        var PusherChannel = /*#__PURE__*/ (function (_Channel) {
          _inherits(PusherChannel, _Channel);

          var _super = _createSuper(PusherChannel);

          /**
           * Create a new class instance.
           */
          function PusherChannel(pusher, name, options) {
            var _this;

            _classCallCheck(this, PusherChannel);

            _this = _super.call(this);
            _this.name = name;
            _this.pusher = pusher;
            _this.options = options;
            _this.eventFormatter = new EventFormatter(_this.options.namespace);

            _this.subscribe();

            return _this;
          }
          /**
           * Subscribe to a Pusher channel.
           */

          _createClass(PusherChannel, [
            {
              key: "subscribe",
              value: function subscribe() {
                this.subscription = this.pusher.subscribe(this.name);
              },
              /**
               * Unsubscribe from a Pusher channel.
               */
            },
            {
              key: "unsubscribe",
              value: function unsubscribe() {
                this.pusher.unsubscribe(this.name);
              },
              /**
               * Listen for an event on the channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(event, callback) {
                this.on(this.eventFormatter.format(event), callback);
                return this;
              },
              /**
               * Listen for all events on the channel instance.
               */
            },
            {
              key: "listenToAll",
              value: function listenToAll(callback) {
                var _this2 = this;

                this.subscription.bind_global(function (event, data) {
                  if (event.startsWith("pusher:")) {
                    return;
                  }

                  var namespace = _this2.options.namespace.replace(/\./g, "\\");

                  var formattedEvent = event.startsWith(namespace)
                    ? event.substring(namespace.length + 1)
                    : "." + event;
                  callback(formattedEvent, data);
                });
                return this;
              },
              /**
               * Stop listening for an event on the channel instance.
               */
            },
            {
              key: "stopListening",
              value: function stopListening(event, callback) {
                if (callback) {
                  this.subscription.unbind(
                    this.eventFormatter.format(event),
                    callback
                  );
                } else {
                  this.subscription.unbind(this.eventFormatter.format(event));
                }

                return this;
              },
              /**
               * Stop listening for all events on the channel instance.
               */
            },
            {
              key: "stopListeningToAll",
              value: function stopListeningToAll(callback) {
                if (callback) {
                  this.subscription.unbind_global(callback);
                } else {
                  this.subscription.unbind_global();
                }

                return this;
              },
              /**
               * Register a callback to be called anytime a subscription succeeds.
               */
            },
            {
              key: "subscribed",
              value: function subscribed(callback) {
                this.on("pusher:subscription_succeeded", function () {
                  callback();
                });
                return this;
              },
              /**
               * Register a callback to be called anytime a subscription error occurs.
               */
            },
            {
              key: "error",
              value: function error(callback) {
                this.on("pusher:subscription_error", function (status) {
                  callback(status);
                });
                return this;
              },
              /**
               * Bind a channel to an event.
               */
            },
            {
              key: "on",
              value: function on(event, callback) {
                this.subscription.bind(event, callback);
                return this;
              },
            },
          ]);

          return PusherChannel;
        })(Channel);

        /**
         * This class represents a Pusher private channel.
         */

        var PusherPrivateChannel = /*#__PURE__*/ (function (_PusherChannel) {
          _inherits(PusherPrivateChannel, _PusherChannel);

          var _super = _createSuper(PusherPrivateChannel);

          function PusherPrivateChannel() {
            _classCallCheck(this, PusherPrivateChannel);

            return _super.apply(this, arguments);
          }

          _createClass(PusherPrivateChannel, [
            {
              key: "whisper",
              value:
                /**
                 * Trigger client event on the channel.
                 */
                function whisper(eventName, data) {
                  this.pusher.channels.channels[this.name].trigger(
                    "client-".concat(eventName),
                    data
                  );
                  return this;
                },
            },
          ]);

          return PusherPrivateChannel;
        })(PusherChannel);

        /**
         * This class represents a Pusher private channel.
         */

        var PusherEncryptedPrivateChannel = /*#__PURE__*/ (function (
          _PusherChannel
        ) {
          _inherits(PusherEncryptedPrivateChannel, _PusherChannel);

          var _super = _createSuper(PusherEncryptedPrivateChannel);

          function PusherEncryptedPrivateChannel() {
            _classCallCheck(this, PusherEncryptedPrivateChannel);

            return _super.apply(this, arguments);
          }

          _createClass(PusherEncryptedPrivateChannel, [
            {
              key: "whisper",
              value:
                /**
                 * Trigger client event on the channel.
                 */
                function whisper(eventName, data) {
                  this.pusher.channels.channels[this.name].trigger(
                    "client-".concat(eventName),
                    data
                  );
                  return this;
                },
            },
          ]);

          return PusherEncryptedPrivateChannel;
        })(PusherChannel);

        /**
         * This class represents a Pusher presence channel.
         */

        var PusherPresenceChannel = /*#__PURE__*/ (function (_PusherChannel) {
          _inherits(PusherPresenceChannel, _PusherChannel);

          var _super = _createSuper(PusherPresenceChannel);

          function PusherPresenceChannel() {
            _classCallCheck(this, PusherPresenceChannel);

            return _super.apply(this, arguments);
          }

          _createClass(PusherPresenceChannel, [
            {
              key: "here",
              value:
                /**
                 * Register a callback to be called anytime the member list changes.
                 */
                function here(callback) {
                  this.on("pusher:subscription_succeeded", function (data) {
                    callback(
                      Object.keys(data.members).map(function (k) {
                        return data.members[k];
                      })
                    );
                  });
                  return this;
                },
              /**
               * Listen for someone joining the channel.
               */
            },
            {
              key: "joining",
              value: function joining(callback) {
                this.on("pusher:member_added", function (member) {
                  callback(member.info);
                });
                return this;
              },
              /**
               * Listen for someone leaving the channel.
               */
            },
            {
              key: "leaving",
              value: function leaving(callback) {
                this.on("pusher:member_removed", function (member) {
                  callback(member.info);
                });
                return this;
              },
              /**
               * Trigger client event on the channel.
               */
            },
            {
              key: "whisper",
              value: function whisper(eventName, data) {
                this.pusher.channels.channels[this.name].trigger(
                  "client-".concat(eventName),
                  data
                );
                return this;
              },
            },
          ]);

          return PusherPresenceChannel;
        })(PusherChannel);

        /**
         * This class represents a Socket.io channel.
         */

        var SocketIoChannel = /*#__PURE__*/ (function (_Channel) {
          _inherits(SocketIoChannel, _Channel);

          var _super = _createSuper(SocketIoChannel);

          /**
           * Create a new class instance.
           */
          function SocketIoChannel(socket, name, options) {
            var _this;

            _classCallCheck(this, SocketIoChannel);

            _this = _super.call(this);
            /**
             * The event callbacks applied to the socket.
             */

            _this.events = {};
            /**
             * User supplied callbacks for events on this channel.
             */

            _this.listeners = {};
            _this.name = name;
            _this.socket = socket;
            _this.options = options;
            _this.eventFormatter = new EventFormatter(_this.options.namespace);

            _this.subscribe();

            return _this;
          }
          /**
           * Subscribe to a Socket.io channel.
           */

          _createClass(SocketIoChannel, [
            {
              key: "subscribe",
              value: function subscribe() {
                this.socket.emit("subscribe", {
                  channel: this.name,
                  auth: this.options.auth || {},
                });
              },
              /**
               * Unsubscribe from channel and ubind event callbacks.
               */
            },
            {
              key: "unsubscribe",
              value: function unsubscribe() {
                this.unbind();
                this.socket.emit("unsubscribe", {
                  channel: this.name,
                  auth: this.options.auth || {},
                });
              },
              /**
               * Listen for an event on the channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(event, callback) {
                this.on(this.eventFormatter.format(event), callback);
                return this;
              },
              /**
               * Stop listening for an event on the channel instance.
               */
            },
            {
              key: "stopListening",
              value: function stopListening(event, callback) {
                this.unbindEvent(this.eventFormatter.format(event), callback);
                return this;
              },
              /**
               * Register a callback to be called anytime a subscription succeeds.
               */
            },
            {
              key: "subscribed",
              value: function subscribed(callback) {
                this.on("connect", function (socket) {
                  callback(socket);
                });
                return this;
              },
              /**
               * Register a callback to be called anytime an error occurs.
               */
            },
            {
              key: "error",
              value: function error(callback) {
                return this;
              },
              /**
               * Bind the channel's socket to an event and store the callback.
               */
            },
            {
              key: "on",
              value: function on(event, callback) {
                var _this2 = this;

                this.listeners[event] = this.listeners[event] || [];

                if (!this.events[event]) {
                  this.events[event] = function (channel, data) {
                    if (_this2.name === channel && _this2.listeners[event]) {
                      _this2.listeners[event].forEach(function (cb) {
                        return cb(data);
                      });
                    }
                  };

                  this.socket.on(event, this.events[event]);
                }

                this.listeners[event].push(callback);
                return this;
              },
              /**
               * Unbind the channel's socket from all stored event callbacks.
               */
            },
            {
              key: "unbind",
              value: function unbind() {
                var _this3 = this;

                Object.keys(this.events).forEach(function (event) {
                  _this3.unbindEvent(event);
                });
              },
              /**
               * Unbind the listeners for the given event.
               */
            },
            {
              key: "unbindEvent",
              value: function unbindEvent(event, callback) {
                this.listeners[event] = this.listeners[event] || [];

                if (callback) {
                  this.listeners[event] = this.listeners[event].filter(
                    function (cb) {
                      return cb !== callback;
                    }
                  );
                }

                if (!callback || this.listeners[event].length === 0) {
                  if (this.events[event]) {
                    this.socket.removeListener(event, this.events[event]);
                    delete this.events[event];
                  }

                  delete this.listeners[event];
                }
              },
            },
          ]);

          return SocketIoChannel;
        })(Channel);

        /**
         * This class represents a Socket.io private channel.
         */

        var SocketIoPrivateChannel = /*#__PURE__*/ (function (
          _SocketIoChannel
        ) {
          _inherits(SocketIoPrivateChannel, _SocketIoChannel);

          var _super = _createSuper(SocketIoPrivateChannel);

          function SocketIoPrivateChannel() {
            _classCallCheck(this, SocketIoPrivateChannel);

            return _super.apply(this, arguments);
          }

          _createClass(SocketIoPrivateChannel, [
            {
              key: "whisper",
              value:
                /**
                 * Trigger client event on the channel.
                 */
                function whisper(eventName, data) {
                  this.socket.emit("client event", {
                    channel: this.name,
                    event: "client-".concat(eventName),
                    data: data,
                  });
                  return this;
                },
            },
          ]);

          return SocketIoPrivateChannel;
        })(SocketIoChannel);

        /**
         * This class represents a Socket.io presence channel.
         */

        var SocketIoPresenceChannel = /*#__PURE__*/ (function (
          _SocketIoPrivateChann
        ) {
          _inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);

          var _super = _createSuper(SocketIoPresenceChannel);

          function SocketIoPresenceChannel() {
            _classCallCheck(this, SocketIoPresenceChannel);

            return _super.apply(this, arguments);
          }

          _createClass(SocketIoPresenceChannel, [
            {
              key: "here",
              value:
                /**
                 * Register a callback to be called anytime the member list changes.
                 */
                function here(callback) {
                  this.on("presence:subscribed", function (members) {
                    callback(
                      members.map(function (m) {
                        return m.user_info;
                      })
                    );
                  });
                  return this;
                },
              /**
               * Listen for someone joining the channel.
               */
            },
            {
              key: "joining",
              value: function joining(callback) {
                this.on("presence:joining", function (member) {
                  return callback(member.user_info);
                });
                return this;
              },
              /**
               * Listen for someone leaving the channel.
               */
            },
            {
              key: "leaving",
              value: function leaving(callback) {
                this.on("presence:leaving", function (member) {
                  return callback(member.user_info);
                });
                return this;
              },
            },
          ]);

          return SocketIoPresenceChannel;
        })(SocketIoPrivateChannel);

        /**
         * This class represents a null channel.
         */

        var NullChannel = /*#__PURE__*/ (function (_Channel) {
          _inherits(NullChannel, _Channel);

          var _super = _createSuper(NullChannel);

          function NullChannel() {
            _classCallCheck(this, NullChannel);

            return _super.apply(this, arguments);
          }

          _createClass(NullChannel, [
            {
              key: "subscribe",
              value:
                /**
                 * Subscribe to a channel.
                 */
                function subscribe() {
                  //
                },
              /**
               * Unsubscribe from a channel.
               */
            },
            {
              key: "unsubscribe",
              value: function unsubscribe() {
                //
              },
              /**
               * Listen for an event on the channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(event, callback) {
                return this;
              },
              /**
               * Stop listening for an event on the channel instance.
               */
            },
            {
              key: "stopListening",
              value: function stopListening(event, callback) {
                return this;
              },
              /**
               * Register a callback to be called anytime a subscription succeeds.
               */
            },
            {
              key: "subscribed",
              value: function subscribed(callback) {
                return this;
              },
              /**
               * Register a callback to be called anytime an error occurs.
               */
            },
            {
              key: "error",
              value: function error(callback) {
                return this;
              },
              /**
               * Bind a channel to an event.
               */
            },
            {
              key: "on",
              value: function on(event, callback) {
                return this;
              },
            },
          ]);

          return NullChannel;
        })(Channel);

        /**
         * This class represents a null private channel.
         */

        var NullPrivateChannel = /*#__PURE__*/ (function (_NullChannel) {
          _inherits(NullPrivateChannel, _NullChannel);

          var _super = _createSuper(NullPrivateChannel);

          function NullPrivateChannel() {
            _classCallCheck(this, NullPrivateChannel);

            return _super.apply(this, arguments);
          }

          _createClass(NullPrivateChannel, [
            {
              key: "whisper",
              value:
                /**
                 * Trigger client event on the channel.
                 */
                function whisper(eventName, data) {
                  return this;
                },
            },
          ]);

          return NullPrivateChannel;
        })(NullChannel);

        /**
         * This class represents a null presence channel.
         */

        var NullPresenceChannel = /*#__PURE__*/ (function (_NullChannel) {
          _inherits(NullPresenceChannel, _NullChannel);

          var _super = _createSuper(NullPresenceChannel);

          function NullPresenceChannel() {
            _classCallCheck(this, NullPresenceChannel);

            return _super.apply(this, arguments);
          }

          _createClass(NullPresenceChannel, [
            {
              key: "here",
              value:
                /**
                 * Register a callback to be called anytime the member list changes.
                 */
                function here(callback) {
                  return this;
                },
              /**
               * Listen for someone joining the channel.
               */
            },
            {
              key: "joining",
              value: function joining(callback) {
                return this;
              },
              /**
               * Listen for someone leaving the channel.
               */
            },
            {
              key: "leaving",
              value: function leaving(callback) {
                return this;
              },
              /**
               * Trigger client event on the channel.
               */
            },
            {
              key: "whisper",
              value: function whisper(eventName, data) {
                return this;
              },
            },
          ]);

          return NullPresenceChannel;
        })(NullChannel);

        var Connector = /*#__PURE__*/ (function () {
          /**
           * Create a new class instance.
           */
          function Connector(options) {
            _classCallCheck(this, Connector);

            /**
             * Default connector options.
             */
            this._defaultOptions = {
              auth: {
                headers: {},
              },
              authEndpoint: "/broadcasting/auth",
              userAuthentication: {
                endpoint: "/broadcasting/user-auth",
                headers: {},
              },
              broadcaster: "pusher",
              csrfToken: null,
              bearerToken: null,
              host: null,
              key: null,
              namespace: "App.Events",
            };
            this.setOptions(options);
            this.connect();
          }
          /**
           * Merge the custom options with the defaults.
           */

          _createClass(Connector, [
            {
              key: "setOptions",
              value: function setOptions(options) {
                this.options = _extends(this._defaultOptions, options);
                var token = this.csrfToken();

                if (token) {
                  this.options.auth.headers["X-CSRF-TOKEN"] = token;
                  this.options.userAuthentication.headers["X-CSRF-TOKEN"] =
                    token;
                }

                token = this.options.bearerToken;

                if (token) {
                  this.options.auth.headers["Authorization"] =
                    "Bearer " + token;
                  this.options.userAuthentication.headers["Authorization"] =
                    "Bearer " + token;
                }

                return options;
              },
              /**
               * Extract the CSRF token from the page.
               */
            },
            {
              key: "csrfToken",
              value: function csrfToken() {
                var selector;

                if (
                  typeof window !== "undefined" &&
                  window["Laravel"] &&
                  window["Laravel"].csrfToken
                ) {
                  return window["Laravel"].csrfToken;
                } else if (this.options.csrfToken) {
                  return this.options.csrfToken;
                } else if (
                  typeof document !== "undefined" &&
                  typeof document.querySelector === "function" &&
                  (selector = document.querySelector('meta[name="csrf-token"]'))
                ) {
                  return selector.getAttribute("content");
                }

                return null;
              },
            },
          ]);

          return Connector;
        })();

        /**
         * This class creates a connector to Pusher.
         */

        var PusherConnector = /*#__PURE__*/ (function (_Connector) {
          _inherits(PusherConnector, _Connector);

          var _super = _createSuper(PusherConnector);

          function PusherConnector() {
            var _this;

            _classCallCheck(this, PusherConnector);

            _this = _super.apply(this, arguments);
            /**
             * All of the subscribed channel names.
             */

            _this.channels = {};
            return _this;
          }
          /**
           * Create a fresh Pusher connection.
           */

          _createClass(PusherConnector, [
            {
              key: "connect",
              value: function connect() {
                if (typeof this.options.client !== "undefined") {
                  this.pusher = this.options.client;
                } else {
                  this.pusher = new Pusher(this.options.key, this.options);
                }
              },
              /**
               * Sign in the user via Pusher user authentication (https://pusher.com/docs/channels/using_channels/user-authentication/).
               */
            },
            {
              key: "signin",
              value: function signin() {
                this.pusher.signin();
              },
              /**
               * Listen for an event on a channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(name, event, callback) {
                return this.channel(name).listen(event, callback);
              },
              /**
               * Get a channel instance by name.
               */
            },
            {
              key: "channel",
              value: function channel(name) {
                if (!this.channels[name]) {
                  this.channels[name] = new PusherChannel(
                    this.pusher,
                    name,
                    this.options
                  );
                }

                return this.channels[name];
              },
              /**
               * Get a private channel instance by name.
               */
            },
            {
              key: "privateChannel",
              value: function privateChannel(name) {
                if (!this.channels["private-" + name]) {
                  this.channels["private-" + name] = new PusherPrivateChannel(
                    this.pusher,
                    "private-" + name,
                    this.options
                  );
                }

                return this.channels["private-" + name];
              },
              /**
               * Get a private encrypted channel instance by name.
               */
            },
            {
              key: "encryptedPrivateChannel",
              value: function encryptedPrivateChannel(name) {
                if (!this.channels["private-encrypted-" + name]) {
                  this.channels["private-encrypted-" + name] =
                    new PusherEncryptedPrivateChannel(
                      this.pusher,
                      "private-encrypted-" + name,
                      this.options
                    );
                }

                return this.channels["private-encrypted-" + name];
              },
              /**
               * Get a presence channel instance by name.
               */
            },
            {
              key: "presenceChannel",
              value: function presenceChannel(name) {
                if (!this.channels["presence-" + name]) {
                  this.channels["presence-" + name] = new PusherPresenceChannel(
                    this.pusher,
                    "presence-" + name,
                    this.options
                  );
                }

                return this.channels["presence-" + name];
              },
              /**
               * Leave the given channel, as well as its private and presence variants.
               */
            },
            {
              key: "leave",
              value: function leave(name) {
                var _this2 = this;

                var channels = [
                  name,
                  "private-" + name,
                  "private-encrypted-" + name,
                  "presence-" + name,
                ];
                channels.forEach(function (name, index) {
                  _this2.leaveChannel(name);
                });
              },
              /**
               * Leave the given channel.
               */
            },
            {
              key: "leaveChannel",
              value: function leaveChannel(name) {
                if (this.channels[name]) {
                  this.channels[name].unsubscribe();
                  delete this.channels[name];
                }
              },
              /**
               * Get the socket ID for the connection.
               */
            },
            {
              key: "socketId",
              value: function socketId() {
                return this.pusher.connection.socket_id;
              },
              /**
               * Disconnect Pusher connection.
               */
            },
            {
              key: "disconnect",
              value: function disconnect() {
                this.pusher.disconnect();
              },
            },
          ]);

          return PusherConnector;
        })(Connector);

        /**
         * This class creates a connnector to a Socket.io server.
         */

        var SocketIoConnector = /*#__PURE__*/ (function (_Connector) {
          _inherits(SocketIoConnector, _Connector);

          var _super = _createSuper(SocketIoConnector);

          function SocketIoConnector() {
            var _this;

            _classCallCheck(this, SocketIoConnector);

            _this = _super.apply(this, arguments);
            /**
             * All of the subscribed channel names.
             */

            _this.channels = {};
            return _this;
          }
          /**
           * Create a fresh Socket.io connection.
           */

          _createClass(SocketIoConnector, [
            {
              key: "connect",
              value: function connect() {
                var _this2 = this;

                var io = this.getSocketIO();
                this.socket = io(this.options.host, this.options);
                this.socket.on("reconnect", function () {
                  Object.values(_this2.channels).forEach(function (channel) {
                    channel.subscribe();
                  });
                });
                return this.socket;
              },
              /**
               * Get socket.io module from global scope or options.
               */
            },
            {
              key: "getSocketIO",
              value: function getSocketIO() {
                if (typeof this.options.client !== "undefined") {
                  return this.options.client;
                }

                if (typeof io !== "undefined") {
                  return io;
                }

                throw new Error(
                  "Socket.io client not found. Should be globally available or passed via options.client"
                );
              },
              /**
               * Listen for an event on a channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(name, event, callback) {
                return this.channel(name).listen(event, callback);
              },
              /**
               * Get a channel instance by name.
               */
            },
            {
              key: "channel",
              value: function channel(name) {
                if (!this.channels[name]) {
                  this.channels[name] = new SocketIoChannel(
                    this.socket,
                    name,
                    this.options
                  );
                }

                return this.channels[name];
              },
              /**
               * Get a private channel instance by name.
               */
            },
            {
              key: "privateChannel",
              value: function privateChannel(name) {
                if (!this.channels["private-" + name]) {
                  this.channels["private-" + name] = new SocketIoPrivateChannel(
                    this.socket,
                    "private-" + name,
                    this.options
                  );
                }

                return this.channels["private-" + name];
              },
              /**
               * Get a presence channel instance by name.
               */
            },
            {
              key: "presenceChannel",
              value: function presenceChannel(name) {
                if (!this.channels["presence-" + name]) {
                  this.channels["presence-" + name] =
                    new SocketIoPresenceChannel(
                      this.socket,
                      "presence-" + name,
                      this.options
                    );
                }

                return this.channels["presence-" + name];
              },
              /**
               * Leave the given channel, as well as its private and presence variants.
               */
            },
            {
              key: "leave",
              value: function leave(name) {
                var _this3 = this;

                var channels = [name, "private-" + name, "presence-" + name];
                channels.forEach(function (name) {
                  _this3.leaveChannel(name);
                });
              },
              /**
               * Leave the given channel.
               */
            },
            {
              key: "leaveChannel",
              value: function leaveChannel(name) {
                if (this.channels[name]) {
                  this.channels[name].unsubscribe();
                  delete this.channels[name];
                }
              },
              /**
               * Get the socket ID for the connection.
               */
            },
            {
              key: "socketId",
              value: function socketId() {
                return this.socket.id;
              },
              /**
               * Disconnect Socketio connection.
               */
            },
            {
              key: "disconnect",
              value: function disconnect() {
                this.socket.disconnect();
              },
            },
          ]);

          return SocketIoConnector;
        })(Connector);

        /**
         * This class creates a null connector.
         */

        var NullConnector = /*#__PURE__*/ (function (_Connector) {
          _inherits(NullConnector, _Connector);

          var _super = _createSuper(NullConnector);

          function NullConnector() {
            var _this;

            _classCallCheck(this, NullConnector);

            _this = _super.apply(this, arguments);
            /**
             * All of the subscribed channel names.
             */

            _this.channels = {};
            return _this;
          }
          /**
           * Create a fresh connection.
           */

          _createClass(NullConnector, [
            {
              key: "connect",
              value: function connect() {
                //
              },
              /**
               * Listen for an event on a channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(name, event, callback) {
                return new NullChannel();
              },
              /**
               * Get a channel instance by name.
               */
            },
            {
              key: "channel",
              value: function channel(name) {
                return new NullChannel();
              },
              /**
               * Get a private channel instance by name.
               */
            },
            {
              key: "privateChannel",
              value: function privateChannel(name) {
                return new NullPrivateChannel();
              },
              /**
               * Get a presence channel instance by name.
               */
            },
            {
              key: "presenceChannel",
              value: function presenceChannel(name) {
                return new NullPresenceChannel();
              },
              /**
               * Leave the given channel, as well as its private and presence variants.
               */
            },
            {
              key: "leave",
              value: function leave(name) {
                //
              },
              /**
               * Leave the given channel.
               */
            },
            {
              key: "leaveChannel",
              value: function leaveChannel(name) {
                //
              },
              /**
               * Get the socket ID for the connection.
               */
            },
            {
              key: "socketId",
              value: function socketId() {
                return "fake-socket-id";
              },
              /**
               * Disconnect the connection.
               */
            },
            {
              key: "disconnect",
              value: function disconnect() {
                //
              },
            },
          ]);

          return NullConnector;
        })(Connector);

        /**
         * This class is the primary API for interacting with broadcasting.
         */

        var Echo = /*#__PURE__*/ (function () {
          /**
           * Create a new class instance.
           */
          function Echo(options) {
            _classCallCheck(this, Echo);

            this.options = options;
            this.connect();

            if (!this.options.withoutInterceptors) {
              this.registerInterceptors();
            }
          }
          /**
           * Get a channel instance by name.
           */

          _createClass(Echo, [
            {
              key: "channel",
              value: function channel(_channel) {
                return this.connector.channel(_channel);
              },
              /**
               * Create a new connection.
               */
            },
            {
              key: "connect",
              value: function connect() {
                if (this.options.broadcaster == "pusher") {
                  this.connector = new PusherConnector(this.options);
                } else if (this.options.broadcaster == "socket.io") {
                  this.connector = new SocketIoConnector(this.options);
                } else if (this.options.broadcaster == "null") {
                  this.connector = new NullConnector(this.options);
                } else if (typeof this.options.broadcaster == "function") {
                  this.connector = new this.options.broadcaster(this.options);
                }
              },
              /**
               * Disconnect from the Echo server.
               */
            },
            {
              key: "disconnect",
              value: function disconnect() {
                this.connector.disconnect();
              },
              /**
               * Get a presence channel instance by name.
               */
            },
            {
              key: "join",
              value: function join(channel) {
                return this.connector.presenceChannel(channel);
              },
              /**
               * Leave the given channel, as well as its private and presence variants.
               */
            },
            {
              key: "leave",
              value: function leave(channel) {
                this.connector.leave(channel);
              },
              /**
               * Leave the given channel.
               */
            },
            {
              key: "leaveChannel",
              value: function leaveChannel(channel) {
                this.connector.leaveChannel(channel);
              },
              /**
               * Listen for an event on a channel instance.
               */
            },
            {
              key: "listen",
              value: function listen(channel, event, callback) {
                return this.connector.listen(channel, event, callback);
              },
              /**
               * Get a private channel instance by name.
               */
            },
            {
              key: "private",
              value: function _private(channel) {
                return this.connector.privateChannel(channel);
              },
              /**
               * Get a private encrypted channel instance by name.
               */
            },
            {
              key: "encryptedPrivate",
              value: function encryptedPrivate(channel) {
                return this.connector.encryptedPrivateChannel(channel);
              },
              /**
               * Get the Socket ID for the connection.
               */
            },
            {
              key: "socketId",
              value: function socketId() {
                return this.connector.socketId();
              },
              /**
               * Register 3rd party request interceptiors. These are used to automatically
               * send a connections socket id to a Laravel app with a X-Socket-Id header.
               */
            },
            {
              key: "registerInterceptors",
              value: function registerInterceptors() {
                if (typeof Vue === "function" && Vue.http) {
                  this.registerVueRequestInterceptor();
                }

                if (typeof axios === "function") {
                  this.registerAxiosRequestInterceptor();
                }

                if (typeof jQuery === "function") {
                  this.registerjQueryAjaxSetup();
                }

                if (
                  (typeof Turbo === "undefined"
                    ? "undefined"
                    : _typeof(Turbo)) === "object"
                ) {
                  this.registerTurboRequestInterceptor();
                }
              },
              /**
               * Register a Vue HTTP interceptor to add the X-Socket-ID header.
               */
            },
            {
              key: "registerVueRequestInterceptor",
              value: function registerVueRequestInterceptor() {
                var _this = this;

                Vue.http.interceptors.push(function (request, next) {
                  if (_this.socketId()) {
                    request.headers.set("X-Socket-ID", _this.socketId());
                  }

                  next();
                });
              },
              /**
               * Register an Axios HTTP interceptor to add the X-Socket-ID header.
               */
            },
            {
              key: "registerAxiosRequestInterceptor",
              value: function registerAxiosRequestInterceptor() {
                var _this2 = this;

                axios.interceptors.request.use(function (config) {
                  if (_this2.socketId()) {
                    config.headers["X-Socket-Id"] = _this2.socketId();
                  }

                  return config;
                });
              },
              /**
               * Register jQuery AjaxPrefilter to add the X-Socket-ID header.
               */
            },
            {
              key: "registerjQueryAjaxSetup",
              value: function registerjQueryAjaxSetup() {
                var _this3 = this;

                if (typeof jQuery.ajax != "undefined") {
                  jQuery.ajaxPrefilter(function (
                    options,
                    originalOptions,
                    xhr
                  ) {
                    if (_this3.socketId()) {
                      xhr.setRequestHeader("X-Socket-Id", _this3.socketId());
                    }
                  });
                }
              },
              /**
               * Register the Turbo Request interceptor to add the X-Socket-ID header.
               */
            },
            {
              key: "registerTurboRequestInterceptor",
              value: function registerTurboRequestInterceptor() {
                var _this4 = this;

                document.addEventListener(
                  "turbo:before-fetch-request",
                  function (event) {
                    event.detail.fetchOptions.headers["X-Socket-Id"] =
                      _this4.socketId();
                  }
                );
              },
            },
          ]);

          return Echo;
        })();

        /***/
      },

    /***/ "./node_modules/lodash/lodash.js":
      /*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
      /***/ function (module, exports, __webpack_require__) {
        /* module decorator */ module = __webpack_require__.nmd(module);
        var __WEBPACK_AMD_DEFINE_RESULT__;
        /**
         * @license
         * Lodash <https://lodash.com/>
         * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */
        (function () {
          /** Used as a safe reference for `undefined` in pre-ES5 environments. */
          var undefined;

          /** Used as the semantic version number. */
          var VERSION = "4.17.21";

          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /** Error message constants. */
          var CORE_ERROR_TEXT =
            "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
            FUNC_ERROR_TEXT = "Expected a function",
            INVALID_TEMPL_VAR_ERROR_TEXT =
              "Invalid `variable` option passed into `_.template`";

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /** Used as the maximum memoize cache size. */
          var MAX_MEMOIZE_SIZE = 500;

          /** Used as the internal argument placeholder. */
          var PLACEHOLDER = "__lodash_placeholder__";

          /** Used to compose bitmasks for cloning. */
          var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /** Used to compose bitmasks for function metadata. */
          var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

          /** Used as default options for `_.truncate`. */
          var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = "...";

          /** Used to detect hot functions by number of calls within a span of milliseconds. */
          var HOT_COUNT = 800,
            HOT_SPAN = 16;

          /** Used to indicate the type of lazy iteratees. */
          var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e308,
            NAN = 0 / 0;

          /** Used as references for the maximum length and index of an array. */
          var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

          /** Used to associate wrap methods with their bit flags. */
          var wrapFlags = [
            ["ary", WRAP_ARY_FLAG],
            ["bind", WRAP_BIND_FLAG],
            ["bindKey", WRAP_BIND_KEY_FLAG],
            ["curry", WRAP_CURRY_FLAG],
            ["curryRight", WRAP_CURRY_RIGHT_FLAG],
            ["flip", WRAP_FLIP_FLAG],
            ["partial", WRAP_PARTIAL_FLAG],
            ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
            ["rearg", WRAP_REARG_FLAG],
          ];

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            asyncTag = "[object AsyncFunction]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            domExcTag = "[object DOMException]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            nullTag = "[object Null]",
            objectTag = "[object Object]",
            promiseTag = "[object Promise]",
            proxyTag = "[object Proxy]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]",
            undefinedTag = "[object Undefined]",
            weakMapTag = "[object WeakMap]",
            weakSetTag = "[object WeakSet]";

          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";

          /** Used to match empty string literals in compiled template source. */
          var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

          /** Used to match HTML entities and HTML characters. */
          var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

          /** Used to match template delimiters. */
          var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

          /** Used to match property names within property paths. */
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName =
              /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

          /** Used to match leading whitespace. */
          var reTrimStart = /^\s+/;

          /** Used to match a single whitespace character. */
          var reWhitespace = /\s/;

          /** Used to match wrap detail comments. */
          var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

          /** Used to match words composed of alphanumeric characters. */
          var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

          /**
           * Used to validate the `validate` option in `_.template` variable.
           *
           * Forbids characters which could potentially change the meaning of the function argument definition:
           * - "()," (modification of function parameters)
           * - "=" (default value)
           * - "[]{}" (destructuring of function parameters)
           * - "/" (beginning of a comment)
           * - whitespace
           */
          var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

          /** Used to match backslashes in property paths. */
          var reEscapeChar = /\\(\\)?/g;

          /**
           * Used to match
           * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
           */
          var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

          /** Used to match `RegExp` flags from their coerced string values. */
          var reFlags = /\w*$/;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /** Used to match Latin Unicode letters (excluding mathematical operators). */
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

          /** Used to ensure capturing order of template delimiters. */
          var reNoMatch = /($^)/;

          /** Used to match unescaped characters in compiled string literals. */
          var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

          /** Used to compose unicode character classes. */
          var rsAstralRange = "\\ud800-\\udfff",
            rsComboMarksRange = "\\u0300-\\u036f",
            reComboHalfMarksRange = "\\ufe20-\\ufe2f",
            rsComboSymbolsRange = "\\u20d0-\\u20ff",
            rsComboRange =
              rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = "\\u2700-\\u27bf",
            rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
            rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
            rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
            rsPunctuationRange = "\\u2000-\\u206f",
            rsSpaceRange =
              " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
            rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
            rsVarRange = "\\ufe0e\\ufe0f",
            rsBreakRange =
              rsMathOpRange +
              rsNonCharRange +
              rsPunctuationRange +
              rsSpaceRange;

          /** Used to compose unicode capture groups. */
          var rsApos = "['\u2019]",
            rsAstral = "[" + rsAstralRange + "]",
            rsBreak = "[" + rsBreakRange + "]",
            rsCombo = "[" + rsComboRange + "]",
            rsDigits = "\\d+",
            rsDingbat = "[" + rsDingbatRange + "]",
            rsLower = "[" + rsLowerRange + "]",
            rsMisc =
              "[^" +
              rsAstralRange +
              rsBreakRange +
              rsDigits +
              rsDingbatRange +
              rsLowerRange +
              rsUpperRange +
              "]",
            rsFitz = "\\ud83c[\\udffb-\\udfff]",
            rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
            rsNonAstral = "[^" + rsAstralRange + "]",
            rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
            rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rsUpper = "[" + rsUpperRange + "]",
            rsZWJ = "\\u200d";

          /** Used to compose unicode regexes. */
          var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
            rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
            rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
            rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
            reOptMod = rsModifier + "?",
            rsOptVar = "[" + rsVarRange + "]?",
            rsOptJoin =
              "(?:" +
              rsZWJ +
              "(?:" +
              [rsNonAstral, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsOptVar +
              reOptMod +
              ")*",
            rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
            rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji =
              "(?:" +
              [rsDingbat, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsSeq,
            rsSymbol =
              "(?:" +
              [
                rsNonAstral + rsCombo + "?",
                rsCombo,
                rsRegional,
                rsSurrPair,
                rsAstral,
              ].join("|") +
              ")";

          /** Used to match apostrophes. */
          var reApos = RegExp(rsApos, "g");

          /**
           * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
           * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
           */
          var reComboMark = RegExp(rsCombo, "g");

          /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
          var reUnicode = RegExp(
            rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,
            "g"
          );

          /** Used to match complex or compound words. */
          var reUnicodeWord = RegExp(
            [
              rsUpper +
              "?" +
              rsLower +
              "+" +
              rsOptContrLower +
              "(?=" +
              [rsBreak, rsUpper, "$"].join("|") +
              ")",
              rsMiscUpper +
              "+" +
              rsOptContrUpper +
              "(?=" +
              [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
              ")",
              rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
              rsUpper + "+" + rsOptContrUpper,
              rsOrdUpper,
              rsOrdLower,
              rsDigits,
              rsEmoji,
            ].join("|"),
            "g"
          );

          /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
          var reHasUnicode = RegExp(
            "[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]"
          );

          /** Used to detect strings that need a more robust regexp to match words. */
          var reHasUnicodeWord =
            /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

          /** Used to assign default `context` object properties. */
          var contextProps = [
            "Array",
            "Buffer",
            "DataView",
            "Date",
            "Error",
            "Float32Array",
            "Float64Array",
            "Function",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Map",
            "Math",
            "Object",
            "Promise",
            "RegExp",
            "Set",
            "String",
            "Symbol",
            "TypeError",
            "Uint8Array",
            "Uint8ClampedArray",
            "Uint16Array",
            "Uint32Array",
            "WeakMap",
            "_",
            "clearTimeout",
            "isFinite",
            "parseInt",
            "setTimeout",
          ];

          /** Used to make template sourceURLs easier to identify. */
          var templateCounter = -1;

          /** Used to identify `toStringTag` values of typed arrays. */
          var typedArrayTags = {};
          typedArrayTags[float32Tag] =
            typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] =
            typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] =
            typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] =
            typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] =
            true;
          typedArrayTags[argsTag] =
            typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] =
            typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] =
            typedArrayTags[dateTag] =
            typedArrayTags[errorTag] =
            typedArrayTags[funcTag] =
            typedArrayTags[mapTag] =
            typedArrayTags[numberTag] =
            typedArrayTags[objectTag] =
            typedArrayTags[regexpTag] =
            typedArrayTags[setTag] =
            typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] =
            false;

          /** Used to identify `toStringTag` values supported by `_.clone`. */
          var cloneableTags = {};
          cloneableTags[argsTag] =
            cloneableTags[arrayTag] =
            cloneableTags[arrayBufferTag] =
            cloneableTags[dataViewTag] =
            cloneableTags[boolTag] =
            cloneableTags[dateTag] =
            cloneableTags[float32Tag] =
            cloneableTags[float64Tag] =
            cloneableTags[int8Tag] =
            cloneableTags[int16Tag] =
            cloneableTags[int32Tag] =
            cloneableTags[mapTag] =
            cloneableTags[numberTag] =
            cloneableTags[objectTag] =
            cloneableTags[regexpTag] =
            cloneableTags[setTag] =
            cloneableTags[stringTag] =
            cloneableTags[symbolTag] =
            cloneableTags[uint8Tag] =
            cloneableTags[uint8ClampedTag] =
            cloneableTags[uint16Tag] =
            cloneableTags[uint32Tag] =
            true;
          cloneableTags[errorTag] =
            cloneableTags[funcTag] =
            cloneableTags[weakMapTag] =
            false;

          /** Used to map Latin Unicode letters to basic Latin letters. */
          var deburredLetters = {
            // Latin-1 Supplement block.
            "\xc0": "A",
            "\xc1": "A",
            "\xc2": "A",
            "\xc3": "A",
            "\xc4": "A",
            "\xc5": "A",
            "\xe0": "a",
            "\xe1": "a",
            "\xe2": "a",
            "\xe3": "a",
            "\xe4": "a",
            "\xe5": "a",
            "\xc7": "C",
            "\xe7": "c",
            "\xd0": "D",
            "\xf0": "d",
            "\xc8": "E",
            "\xc9": "E",
            "\xca": "E",
            "\xcb": "E",
            "\xe8": "e",
            "\xe9": "e",
            "\xea": "e",
            "\xeb": "e",
            "\xcc": "I",
            "\xcd": "I",
            "\xce": "I",
            "\xcf": "I",
            "\xec": "i",
            "\xed": "i",
            "\xee": "i",
            "\xef": "i",
            "\xd1": "N",
            "\xf1": "n",
            "\xd2": "O",
            "\xd3": "O",
            "\xd4": "O",
            "\xd5": "O",
            "\xd6": "O",
            "\xd8": "O",
            "\xf2": "o",
            "\xf3": "o",
            "\xf4": "o",
            "\xf5": "o",
            "\xf6": "o",
            "\xf8": "o",
            "\xd9": "U",
            "\xda": "U",
            "\xdb": "U",
            "\xdc": "U",
            "\xf9": "u",
            "\xfa": "u",
            "\xfb": "u",
            "\xfc": "u",
            "\xdd": "Y",
            "\xfd": "y",
            "\xff": "y",
            "\xc6": "Ae",
            "\xe6": "ae",
            "\xde": "Th",
            "\xfe": "th",
            "\xdf": "ss",
            // Latin Extended-A block.
            "\u0100": "A",
            "\u0102": "A",
            "\u0104": "A",
            "\u0101": "a",
            "\u0103": "a",
            "\u0105": "a",
            "\u0106": "C",
            "\u0108": "C",
            "\u010a": "C",
            "\u010c": "C",
            "\u0107": "c",
            "\u0109": "c",
            "\u010b": "c",
            "\u010d": "c",
            "\u010e": "D",
            "\u0110": "D",
            "\u010f": "d",
            "\u0111": "d",
            "\u0112": "E",
            "\u0114": "E",
            "\u0116": "E",
            "\u0118": "E",
            "\u011a": "E",
            "\u0113": "e",
            "\u0115": "e",
            "\u0117": "e",
            "\u0119": "e",
            "\u011b": "e",
            "\u011c": "G",
            "\u011e": "G",
            "\u0120": "G",
            "\u0122": "G",
            "\u011d": "g",
            "\u011f": "g",
            "\u0121": "g",
            "\u0123": "g",
            "\u0124": "H",
            "\u0126": "H",
            "\u0125": "h",
            "\u0127": "h",
            "\u0128": "I",
            "\u012a": "I",
            "\u012c": "I",
            "\u012e": "I",
            "\u0130": "I",
            "\u0129": "i",
            "\u012b": "i",
            "\u012d": "i",
            "\u012f": "i",
            "\u0131": "i",
            "\u0134": "J",
            "\u0135": "j",
            "\u0136": "K",
            "\u0137": "k",
            "\u0138": "k",
            "\u0139": "L",
            "\u013b": "L",
            "\u013d": "L",
            "\u013f": "L",
            "\u0141": "L",
            "\u013a": "l",
            "\u013c": "l",
            "\u013e": "l",
            "\u0140": "l",
            "\u0142": "l",
            "\u0143": "N",
            "\u0145": "N",
            "\u0147": "N",
            "\u014a": "N",
            "\u0144": "n",
            "\u0146": "n",
            "\u0148": "n",
            "\u014b": "n",
            "\u014c": "O",
            "\u014e": "O",
            "\u0150": "O",
            "\u014d": "o",
            "\u014f": "o",
            "\u0151": "o",
            "\u0154": "R",
            "\u0156": "R",
            "\u0158": "R",
            "\u0155": "r",
            "\u0157": "r",
            "\u0159": "r",
            "\u015a": "S",
            "\u015c": "S",
            "\u015e": "S",
            "\u0160": "S",
            "\u015b": "s",
            "\u015d": "s",
            "\u015f": "s",
            "\u0161": "s",
            "\u0162": "T",
            "\u0164": "T",
            "\u0166": "T",
            "\u0163": "t",
            "\u0165": "t",
            "\u0167": "t",
            "\u0168": "U",
            "\u016a": "U",
            "\u016c": "U",
            "\u016e": "U",
            "\u0170": "U",
            "\u0172": "U",
            "\u0169": "u",
            "\u016b": "u",
            "\u016d": "u",
            "\u016f": "u",
            "\u0171": "u",
            "\u0173": "u",
            "\u0174": "W",
            "\u0175": "w",
            "\u0176": "Y",
            "\u0177": "y",
            "\u0178": "Y",
            "\u0179": "Z",
            "\u017b": "Z",
            "\u017d": "Z",
            "\u017a": "z",
            "\u017c": "z",
            "\u017e": "z",
            "\u0132": "IJ",
            "\u0133": "ij",
            "\u0152": "Oe",
            "\u0153": "oe",
            "\u0149": "'n",
            "\u017f": "s",
          };

          /** Used to map characters to HTML entities. */
          var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
          };

          /** Used to map HTML entities to characters. */
          var htmlUnescapes = {
            "&amp;": "&",
            "&lt;": "<",
            "&gt;": ">",
            "&quot;": '"',
            "&#39;": "'",
          };

          /** Used to escape characters for inclusion in compiled string literals. */
          var stringEscapes = {
            "\\": "\\",
            "'": "'",
            "\n": "n",
            "\r": "r",
            "\u2028": "u2028",
            "\u2029": "u2029",
          };

          /** Built-in method references without a dependency on `root`. */
          var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof __webpack_require__.g == "object" &&
            __webpack_require__.g &&
            __webpack_require__.g.Object === Object &&
            __webpack_require__.g;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /** Detect free variable `exports`. */
          var freeExports = true && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule =
            freeExports &&
            "object" == "object" &&
            module &&
            !module.nodeType &&
            module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Detect free variable `process` from Node.js. */
          var freeProcess = moduleExports && freeGlobal.process;

          /** Used to access faster Node.js helpers. */
          var nodeUtil = (function () {
            try {
              // Use `util.types` for Node.js 10+.
              var types =
                freeModule &&
                freeModule.require &&
                freeModule.require("util").types;

              if (types) {
                return types;
              }

              // Legacy `process.binding('util')` for Node.js < 10.
              return (
                freeProcess &&
                freeProcess.binding &&
                freeProcess.binding("util")
              );
            } catch (e) { }
          })();

          /* Node.js helper references. */
          var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

          /*--------------------------------------------------------------------------*/

          /**
           * A faster alternative to `Function#apply`, this function invokes `func`
           * with the `this` binding of `thisArg` and the arguments of `args`.
           *
           * @private
           * @param {Function} func The function to invoke.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} args The arguments to invoke `func` with.
           * @returns {*} Returns the result of `func`.
           */
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);
              case 1:
                return func.call(thisArg, args[0]);
              case 2:
                return func.call(thisArg, args[0], args[1]);
              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
          }

          /**
           * A specialized version of `baseAggregator` for arrays.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              var value = array[index];
              setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.forEach` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.forEachRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
              if (iteratee(array[length], length, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.every` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           */
          function arrayEvery(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (!predicate(array[index], index, array)) {
                return false;
              }
            }
            return true;
          }

          /**
           * A specialized version of `_.filter` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }

          /**
           * A specialized version of `_.includes` for arrays without support for
           * specifying an index to search from.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }

          /**
           * This function is like `arrayIncludes` except that it accepts a comparator.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludesWith(array, value, comparator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }
            return false;
          }

          /**
           * A specialized version of `_.map` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }

          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          /**
           * A specialized version of `_.reduce` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the first element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
              length = array == null ? 0 : array.length;

            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.reduceRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the last element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.some` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }

          /**
           * Gets the size of an ASCII `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          var asciiSize = baseProperty("length");

          /**
           * Converts an ASCII `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function asciiToArray(string) {
            return string.split("");
          }

          /**
           * Splits an ASCII `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function asciiWords(string) {
            return string.match(reAsciiWord) || [];
          }

          /**
           * The base implementation of methods like `_.findKey` and `_.findLastKey`,
           * without support for iteratee shorthands, which iterates over `collection`
           * using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the found element or its key, else `undefined`.
           */
          function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
              if (predicate(value, key, collection)) {
                result = key;
                return false;
              }
            });
            return result;
          }

          /**
           * The base implementation of `_.findIndex` and `_.findLastIndex` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {number} fromIndex The index to search from.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOf(array, value, fromIndex) {
            return value === value
              ? strictIndexOf(array, value, fromIndex)
              : baseFindIndex(array, baseIsNaN, fromIndex);
          }

          /**
           * This function is like `baseIndexOf` except that it accepts a comparator.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (comparator(array[index], value)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.isNaN` without support for number objects.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           */
          function baseIsNaN(value) {
            return value !== value;
          }

          /**
           * The base implementation of `_.mean` and `_.meanBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the mean.
           */
          function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
          }

          /**
           * The base implementation of `_.property` without support for deep paths.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function baseProperty(key) {
            return function (object) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.propertyOf` without support for deep paths.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyOf(object) {
            return function (key) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.reduce` and `_.reduceRight`, without support
           * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} accumulator The initial value.
           * @param {boolean} initAccum Specify using the first or last element of
           *  `collection` as the initial value.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the accumulated value.
           */
          function baseReduce(
            collection,
            iteratee,
            accumulator,
            initAccum,
            eachFunc
          ) {
            eachFunc(collection, function (value, index, collection) {
              accumulator = initAccum
                ? ((initAccum = false), value)
                : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
          }

          /**
           * The base implementation of `_.sortBy` which uses `comparer` to define the
           * sort order of `array` and replaces criteria objects with their corresponding
           * values.
           *
           * @private
           * @param {Array} array The array to sort.
           * @param {Function} comparer The function to define sort order.
           * @returns {Array} Returns `array`.
           */
          function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }

          /**
           * The base implementation of `_.sum` and `_.sumBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the sum.
           */
          function baseSum(array, iteratee) {
            var result,
              index = -1,
              length = array.length;

            while (++index < length) {
              var current = iteratee(array[index]);
              if (current !== undefined) {
                result = result === undefined ? current : result + current;
              }
            }
            return result;
          }

          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          /**
           * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
           * of key-value pairs for `object` corresponding to the property names of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the key-value pairs.
           */
          function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
              return [key, object[key]];
            });
          }

          /**
           * The base implementation of `_.trim`.
           *
           * @private
           * @param {string} string The string to trim.
           * @returns {string} Returns the trimmed string.
           */
          function baseTrim(string) {
            return string
              ? string
                .slice(0, trimmedEndIndex(string) + 1)
                .replace(reTrimStart, "")
              : string;
          }

          /**
           * The base implementation of `_.unary` without support for storing metadata.
           *
           * @private
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           */
          function baseUnary(func) {
            return function (value) {
              return func(value);
            };
          }

          /**
           * The base implementation of `_.values` and `_.valuesIn` which creates an
           * array of `object` property values corresponding to the property names
           * of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the array of property values.
           */
          function baseValues(object, props) {
            return arrayMap(props, function (key) {
              return object[key];
            });
          }

          /**
           * Checks if a `cache` value for `key` exists.
           *
           * @private
           * @param {Object} cache The cache to query.
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          /**
           * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the first unmatched string symbol.
           */
          function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
              length = strSymbols.length;

            while (
              ++index < length &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) { }
            return index;
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the last unmatched string symbol.
           */
          function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (
              index-- &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) { }
            return index;
          }

          /**
           * Gets the number of `placeholder` occurrences in `array`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} placeholder The placeholder to search for.
           * @returns {number} Returns the placeholder count.
           */
          function countHolders(array, placeholder) {
            var length = array.length,
              result = 0;

            while (length--) {
              if (array[length] === placeholder) {
                ++result;
              }
            }
            return result;
          }

          /**
           * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
           * letters to basic Latin letters.
           *
           * @private
           * @param {string} letter The matched letter to deburr.
           * @returns {string} Returns the deburred letter.
           */
          var deburrLetter = basePropertyOf(deburredLetters);

          /**
           * Used by `_.escape` to convert characters to HTML entities.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          var escapeHtmlChar = basePropertyOf(htmlEscapes);

          /**
           * Used by `_.template` to escape characters for inclusion in compiled string literals.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          function escapeStringChar(chr) {
            return "\\" + stringEscapes[chr];
          }

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `string` contains Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a symbol is found, else `false`.
           */
          function hasUnicode(string) {
            return reHasUnicode.test(string);
          }

          /**
           * Checks if `string` contains a word composed of Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a word is found, else `false`.
           */
          function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
          }

          /**
           * Converts `iterator` to an array.
           *
           * @private
           * @param {Object} iterator The iterator to convert.
           * @returns {Array} Returns the converted array.
           */
          function iteratorToArray(iterator) {
            var data,
              result = [];

            while (!(data = iterator.next()).done) {
              result.push(data.value);
            }
            return result;
          }

          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);

            map.forEach(function (value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function (arg) {
              return func(transform(arg));
            };
          }

          /**
           * Replaces all `placeholder` elements in `array` with an internal placeholder
           * and returns an array of their indexes.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {*} placeholder The placeholder to replace.
           * @returns {Array} Returns the new array of placeholder indexes.
           */
          function replaceHolders(array, placeholder) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
              }
            }
            return result;
          }

          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = value;
            });
            return result;
          }

          /**
           * Converts `set` to its value-value pairs.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the value-value pairs.
           */
          function setToPairs(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = [value, value];
            });
            return result;
          }

          /**
           * A specialized version of `_.indexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }

          /**
           * A specialized version of `_.lastIndexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
              if (array[index] === value) {
                return index;
              }
            }
            return index;
          }

          /**
           * Gets the number of symbols in `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the string size.
           */
          function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
          }

          /**
           * Converts `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function stringToArray(string) {
            return hasUnicode(string)
              ? unicodeToArray(string)
              : asciiToArray(string);
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
           * character of `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the index of the last non-whitespace character.
           */
          function trimmedEndIndex(string) {
            var index = string.length;

            while (index-- && reWhitespace.test(string.charAt(index))) { }
            return index;
          }

          /**
           * Used by `_.unescape` to convert HTML entities to characters.
           *
           * @private
           * @param {string} chr The matched character to unescape.
           * @returns {string} Returns the unescaped character.
           */
          var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

          /**
           * Gets the size of a Unicode `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          function unicodeSize(string) {
            var result = (reUnicode.lastIndex = 0);
            while (reUnicode.test(string)) {
              ++result;
            }
            return result;
          }

          /**
           * Converts a Unicode `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function unicodeToArray(string) {
            return string.match(reUnicode) || [];
          }

          /**
           * Splits a Unicode `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
          }

          /*--------------------------------------------------------------------------*/

          /**
           * Create a new pristine `lodash` function using the `context` object.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Util
           * @param {Object} [context=root] The context object.
           * @returns {Function} Returns a new `lodash` function.
           * @example
           *
           * _.mixin({ 'foo': _.constant('foo') });
           *
           * var lodash = _.runInContext();
           * lodash.mixin({ 'bar': lodash.constant('bar') });
           *
           * _.isFunction(_.foo);
           * // => true
           * _.isFunction(_.bar);
           * // => false
           *
           * lodash.isFunction(lodash.foo);
           * // => false
           * lodash.isFunction(lodash.bar);
           * // => true
           *
           * // Create a suped-up `defer` in Node.js.
           * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
           */
          var runInContext = function runInContext(context) {
            context =
              context == null
                ? root
                : _.defaults(
                  root.Object(),
                  context,
                  _.pick(root, contextProps)
                );

            /** Built-in constructor references. */
            var Array = context.Array,
              Date = context.Date,
              Error = context.Error,
              Function = context.Function,
              Math = context.Math,
              Object = context.Object,
              RegExp = context.RegExp,
              String = context.String,
              TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
              funcProto = Function.prototype,
              objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context["__core-js_shared__"];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
              var uid = /[^.]+$/.exec(
                (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) ||
                ""
              );
              return uid ? "Symbol(src)_1." + uid : "";
            })();

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp(
              "^" +
              funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, "\\$&")
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  "$1.*?"
                ) +
              "$"
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined,
              Symbol = context.Symbol,
              Uint8Array = context.Uint8Array,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
              getPrototype = overArg(Object.getPrototypeOf, Object),
              objectCreate = Object.create,
              propertyIsEnumerable = objectProto.propertyIsEnumerable,
              splice = arrayProto.splice,
              spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
              symIterator = Symbol ? Symbol.iterator : undefined,
              symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            var defineProperty = (function () {
              try {
                var func = getNative(Object, "defineProperty");
                func({}, "", {});
                return func;
              } catch (e) { }
            })();

            /** Mocked built-ins. */
            var ctxClearTimeout =
              context.clearTimeout !== root.clearTimeout &&
              context.clearTimeout,
              ctxNow = Date && Date.now !== root.Date.now && Date.now,
              ctxSetTimeout =
                context.setTimeout !== root.setTimeout && context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
              nativeFloor = Math.floor,
              nativeGetSymbols = Object.getOwnPropertySymbols,
              nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
              nativeIsFinite = context.isFinite,
              nativeJoin = arrayProto.join,
              nativeKeys = overArg(Object.keys, Object),
              nativeMax = Math.max,
              nativeMin = Math.min,
              nativeNow = Date.now,
              nativeParseInt = context.parseInt,
              nativeRandom = Math.random,
              nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, "DataView"),
              Map = getNative(context, "Map"),
              Promise = getNative(context, "Promise"),
              Set = getNative(context, "Set"),
              WeakMap = getNative(context, "WeakMap"),
              nativeCreate = getNative(Object, "create");

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap();

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
              mapCtorString = toSource(Map),
              promiseCtorString = toSource(Promise),
              setCtorString = toSource(Set),
              weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
              symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
              symbolToString = symbolProto ? symbolProto.toString : undefined;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
              if (
                isObjectLike(value) &&
                !isArray(value) &&
                !(value instanceof LazyWrapper)
              ) {
                if (value instanceof LodashWrapper) {
                  return value;
                }
                if (hasOwnProperty.call(value, "__wrapped__")) {
                  return wrapperClone(value);
                }
              }
              return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
              function object() { }
              return function (proto) {
                if (!isObject(proto)) {
                  return {};
                }
                if (objectCreate) {
                  return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
              };
            })();

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
              // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__chain__ = !!chainAll;
              this.__index__ = 0;
              this.__values__ = undefined;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
              /**
               * Used to detect `data` property values to be HTML-escaped.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              escape: reEscape,

              /**
               * Used to detect code to be evaluated.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              evaluate: reEvaluate,

              /**
               * Used to detect `data` property values to inject.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              interpolate: reInterpolate,

              /**
               * Used to reference the data object in the template text.
               *
               * @memberOf _.templateSettings
               * @type {string}
               */
              variable: "",

              /**
               * Used to import variables into the compiled template.
               *
               * @memberOf _.templateSettings
               * @type {Object}
               */
              imports: {
                /**
                 * A reference to the `lodash` function.
                 *
                 * @memberOf _.templateSettings.imports
                 * @type {Function}
                 */
                _: lodash,
              },
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__dir__ = 1;
              this.__filtered__ = false;
              this.__iteratees__ = [];
              this.__takeCount__ = MAX_ARRAY_LENGTH;
              this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
              var result = new LazyWrapper(this.__wrapped__);
              result.__actions__ = copyArray(this.__actions__);
              result.__dir__ = this.__dir__;
              result.__filtered__ = this.__filtered__;
              result.__iteratees__ = copyArray(this.__iteratees__);
              result.__takeCount__ = this.__takeCount__;
              result.__views__ = copyArray(this.__views__);
              return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
              if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
              } else {
                result = this.clone();
                result.__dir__ *= -1;
              }
              return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
              var array = this.__wrapped__.value(),
                dir = this.__dir__,
                isArr = isArray(array),
                isRight = dir < 0,
                arrLength = isArr ? array.length : 0,
                view = getView(0, arrLength, this.__views__),
                start = view.start,
                end = view.end,
                length = end - start,
                index = isRight ? end : start - 1,
                iteratees = this.__iteratees__,
                iterLength = iteratees.length,
                resIndex = 0,
                takeCount = nativeMin(length, this.__takeCount__);

              if (
                !isArr ||
                (!isRight && arrLength == length && takeCount == length)
              ) {
                return baseWrapperValue(array, this.__actions__);
              }
              var result = [];

              outer: while (length-- && resIndex < takeCount) {
                index += dir;

                var iterIndex = -1,
                  value = array[index];

                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex],
                    iteratee = data.iteratee,
                    type = data.type,
                    computed = iteratee(value);

                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result[resIndex++] = value;
              }
              return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = nativeCreate ? nativeCreate(null) : {};
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return nativeCreate
                ? data[key] !== undefined
                : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] =
                nativeCreate && value === undefined ? HASH_UNDEFINED : value;
              return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype["delete"] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype["delete"] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                hash: new Hash(),
                map: new (Map || ListCache)(),
                string: new Hash(),
              };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = getMapData(this, key)["delete"](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = getMapData(this, key),
                size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype["delete"] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
              var index = -1,
                length = values == null ? 0 : values.length;

              this.__data__ = new MapCache();
              while (++index < length) {
                this.add(values[index]);
              }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
              this.__data__.set(value, HASH_UNDEFINED);
              return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
              return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
              var data = (this.__data__ = new ListCache(entries));
              this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
              this.__data__ = new ListCache();
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
              var data = this.__data__,
                result = data["delete"](key);

              this.size = data.size;
              return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
              return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
              return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
              var data = this.__data__;
              if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                  pairs.push([key, value]);
                  this.size = ++data.size;
                  return this;
                }
                data = this.__data__ = new MapCache(pairs);
              }
              data.set(key, value);
              this.size = data.size;
              return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype["delete"] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

              for (var key in value) {
                if (
                  (inherited || hasOwnProperty.call(value, key)) &&
                  !(
                    skipIndexes &&
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == "length" ||
                      // Node.js 0.10 has enumerable non-index properties on buffers.
                      (isBuff && (key == "offset" || key == "parent")) ||
                      // PhantomJS 2 has enumerable non-index properties on typed arrays.
                      (isType &&
                        (key == "buffer" ||
                          key == "byteLength" ||
                          key == "byteOffset")) ||
                      // Skip index properties.
                      isIndex(key, length))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
              var length = array.length;
              return length ? array[baseRandom(0, length - 1)] : undefined;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
              return shuffleSelf(
                copyArray(array),
                baseClamp(n, 0, array.length)
              );
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
              return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
              if (
                (value !== undefined && !eq(object[key], value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (
                !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
              baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
              return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
              return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == "__proto__" && defineProperty) {
                defineProperty(object, key, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true,
                });
              } else {
                object[key] = value;
              }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
              var index = -1,
                length = paths.length,
                result = Array(length),
                skip = object == null;

              while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
              }
              return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
              if (number === number) {
                if (upper !== undefined) {
                  number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                  number = number >= lower ? number : lower;
                }
              }
              return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
              var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

              if (customizer) {
                result = object
                  ? customizer(value, key, object, stack)
                  : customizer(value);
              }
              if (result !== undefined) {
                return result;
              }
              if (!isObject(value)) {
                return value;
              }
              var isArr = isArray(value);
              if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                  return copyArray(value, result);
                }
              } else {
                var tag = getTag(value),
                  isFunc = tag == funcTag || tag == genTag;

                if (isBuffer(value)) {
                  return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                  result = isFlat || isFunc ? {} : initCloneObject(value);
                  if (!isDeep) {
                    return isFlat
                      ? copySymbolsIn(value, baseAssignIn(result, value))
                      : copySymbols(value, baseAssign(result, value));
                  }
                } else {
                  if (!cloneableTags[tag]) {
                    return object ? value : {};
                  }
                  result = initCloneByTag(value, tag, isDeep);
                }
              }
              // Check for circular references and return its corresponding clone.
              stack || (stack = new Stack());
              var stacked = stack.get(value);
              if (stacked) {
                return stacked;
              }
              stack.set(value, result);

              if (isSet(value)) {
                value.forEach(function (subValue) {
                  result.add(
                    baseClone(
                      subValue,
                      bitmask,
                      customizer,
                      subValue,
                      value,
                      stack
                    )
                  );
                });
              } else if (isMap(value)) {
                value.forEach(function (subValue, key) {
                  result.set(
                    key,
                    baseClone(subValue, bitmask, customizer, key, value, stack)
                  );
                });
              }

              var keysFunc = isFull
                ? isFlat
                  ? getAllKeysIn
                  : getAllKeys
                : isFlat
                  ? keysIn
                  : keys;

              var props = isArr ? undefined : keysFunc(value);
              arrayEach(props || value, function (subValue, key) {
                if (props) {
                  key = subValue;
                  subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(
                  result,
                  key,
                  baseClone(subValue, bitmask, customizer, key, value, stack)
                );
              });
              return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
              var props = keys(source);
              return function (object) {
                return baseConformsTo(object, source, props);
              };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
              var length = props.length;
              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (length--) {
                var key = props[length],
                  predicate = source[key],
                  value = object[key];

                if (
                  (value === undefined && !(key in object)) ||
                  !predicate(value)
                ) {
                  return false;
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return setTimeout(function () {
                func.apply(undefined, args);
              }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                isCommon = true,
                length = array.length,
                result = [],
                valuesLength = values.length;

              if (!length) {
                return result;
              }
              if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
              }
              if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
              } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee == null ? value : iteratee(value);

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result.push(value);
                } else if (!includes(values, computed, comparator)) {
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
              var result = true;
              baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
              });
              return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
              var index = -1,
                length = array.length;

              while (++index < length) {
                var value = array[index],
                  current = iteratee(value);

                if (
                  current != null &&
                  (computed === undefined
                    ? current === current && !isSymbol(current)
                    : comparator(current, computed))
                ) {
                  var computed = current,
                    result = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
              var length = array.length;

              start = toInteger(start);
              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end === undefined || end > length ? length : toInteger(end);
              if (end < 0) {
                end += length;
              }
              end = start > end ? 0 : toLength(end);
              while (start < end) {
                array[start++] = value;
              }
              return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
              var result = [];
              baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                  result.push(value);
                }
              });
              return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
              var index = -1,
                length = array.length;

              predicate || (predicate = isFlattenable);
              result || (result = []);

              while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                  if (depth > 1) {
                    // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                  } else {
                    arrayPush(result, value);
                  }
                } else if (!isStrict) {
                  result[result.length] = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
              return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
              return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
              return arrayFilter(props, function (key) {
                return isFunction(object[key]);
              });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
              path = castPath(path, object);

              var index = 0,
                length = path.length;

              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }
              return index && index == length ? object : undefined;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
              var result = keysFunc(object);
              return isArray(object)
                ? result
                : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object(value)
                ? getRawTag(value)
                : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
              return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
              return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
              return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
              return (
                number >= nativeMin(start, end) &&
                number < nativeMax(start, end)
              );
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
              var includes = comparator ? arrayIncludesWith : arrayIncludes,
                length = arrays[0].length,
                othLength = arrays.length,
                othIndex = othLength,
                caches = Array(othLength),
                maxLength = Infinity,
                result = [];

              while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                  array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] =
                  !comparator &&
                    (iteratee || (length >= 120 && array.length >= 120))
                    ? new SetCache(othIndex && array)
                    : undefined;
              }
              array = arrays[0];

              var index = -1,
                seen = caches[0];

              outer: while (++index < length && result.length < maxLength) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (
                  !(seen
                    ? cacheHas(seen, computed)
                    : includes(result, computed, comparator))
                ) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (
                      !(cache
                        ? cacheHas(cache, computed)
                        : includes(arrays[othIndex], computed, comparator))
                    ) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
              baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
              path = castPath(path, object);
              object = parent(object, path);
              var func = object == null ? object : object[toKey(last(path))];
              return func == null ? undefined : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
              return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
              return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
              if (value === other) {
                return true;
              }
              if (
                value == null ||
                other == null ||
                (!isObjectLike(value) && !isObjectLike(other))
              ) {
                return value !== value && other !== other;
              }
              return baseIsEqualDeep(
                value,
                other,
                bitmask,
                customizer,
                baseIsEqual,
                stack
              );
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

              objTag = objTag == argsTag ? objectTag : objTag;
              othTag = othTag == argsTag ? objectTag : othTag;

              var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

              if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                  return false;
                }
                objIsArr = true;
                objIsObj = false;
              }
              if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object)
                  ? equalArrays(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  )
                  : equalByTag(
                    object,
                    other,
                    objTag,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
              }
              if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped =
                  objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                  othIsWrapped =
                    othIsObj && hasOwnProperty.call(other, "__wrapped__");

                if (objIsWrapped || othIsWrapped) {
                  var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                  stack || (stack = new Stack());
                  return equalFunc(
                    objUnwrapped,
                    othUnwrapped,
                    bitmask,
                    customizer,
                    stack
                  );
                }
              }
              if (!isSameTag) {
                return false;
              }
              stack || (stack = new Stack());
              return equalObjects(
                object,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
              );
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
              return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
              var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (index--) {
                var data = matchData[index];
                if (
                  noCustomizer && data[2]
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
                ) {
                  return false;
                }
              }
              while (++index < length) {
                data = matchData[index];
                var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];

                if (noCustomizer && data[2]) {
                  if (objValue === undefined && !(key in object)) {
                    return false;
                  }
                } else {
                  var stack = new Stack();
                  if (customizer) {
                    var result = customizer(
                      objValue,
                      srcValue,
                      key,
                      object,
                      source,
                      stack
                    );
                  }
                  if (
                    !(result === undefined
                      ? baseIsEqual(
                        srcValue,
                        objValue,
                        COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                        customizer,
                        stack
                      )
                      : result)
                  ) {
                    return false;
                  }
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject(value) || isMasked(value)) {
                return false;
              }
              var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
              return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
              return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
              return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
              return (
                isObjectLike(value) &&
                isLength(value.length) &&
                !!typedArrayTags[baseGetTag(value)]
              );
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
              // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
              // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
              if (typeof value == "function") {
                return value;
              }
              if (value == null) {
                return identity;
              }
              if (typeof value == "object") {
                return isArray(value)
                  ? baseMatchesProperty(value[0], value[1])
                  : baseMatches(value);
              }
              return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result = [];
              for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != "constructor") {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
              if (!isObject(object)) {
                return nativeKeysIn(object);
              }
              var isProto = isPrototype(object),
                result = [];

              for (var key in object) {
                if (
                  !(
                    key == "constructor" &&
                    (isProto || !hasOwnProperty.call(object, key))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
              return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
              var index = -1,
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
              });
              return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
              var matchData = getMatchData(source);
              if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(
                  matchData[0][0],
                  matchData[0][1]
                );
              }
              return function (object) {
                return (
                  object === source || baseIsMatch(object, source, matchData)
                );
              };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
              if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
              }
              return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue
                  ? hasIn(object, path)
                  : baseIsEqual(
                    srcValue,
                    objValue,
                    COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                  );
              };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
              if (object === source) {
                return;
              }
              baseFor(
                source,
                function (srcValue, key) {
                  stack || (stack = new Stack());
                  if (isObject(srcValue)) {
                    baseMergeDeep(
                      object,
                      source,
                      key,
                      srcIndex,
                      baseMerge,
                      customizer,
                      stack
                    );
                  } else {
                    var newValue = customizer
                      ? customizer(
                        safeGet(object, key),
                        srcValue,
                        key + "",
                        object,
                        source,
                        stack
                      )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                  }
                },
                keysIn
              );
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(
              object,
              source,
              key,
              srcIndex,
              mergeFunc,
              customizer,
              stack
            ) {
              var objValue = safeGet(object, key),
                srcValue = safeGet(source, key),
                stacked = stack.get(srcValue);

              if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
              }
              var newValue = customizer
                ? customizer(
                  objValue,
                  srcValue,
                  key + "",
                  object,
                  source,
                  stack
                )
                : undefined;

              var isCommon = newValue === undefined;

              if (isCommon) {
                var isArr = isArray(srcValue),
                  isBuff = !isArr && isBuffer(srcValue),
                  isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                  if (isArray(objValue)) {
                    newValue = objValue;
                  } else if (isArrayLikeObject(objValue)) {
                    newValue = copyArray(objValue);
                  } else if (isBuff) {
                    isCommon = false;
                    newValue = cloneBuffer(srcValue, true);
                  } else if (isTyped) {
                    isCommon = false;
                    newValue = cloneTypedArray(srcValue, true);
                  } else {
                    newValue = [];
                  }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                  newValue = objValue;
                  if (isArguments(objValue)) {
                    newValue = toPlainObject(objValue);
                  } else if (!isObject(objValue) || isFunction(objValue)) {
                    newValue = initCloneObject(srcValue);
                  }
                } else {
                  isCommon = false;
                }
              }
              if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
              }
              assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
              var length = array.length;
              if (!length) {
                return;
              }
              n += n < 0 ? length : 0;
              return isIndex(n, length) ? array[n] : undefined;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
              if (iteratees.length) {
                iteratees = arrayMap(iteratees, function (iteratee) {
                  if (isArray(iteratee)) {
                    return function (value) {
                      return baseGet(
                        value,
                        iteratee.length === 1 ? iteratee[0] : iteratee
                      );
                    };
                  }
                  return iteratee;
                });
              } else {
                iteratees = [identity];
              }

              var index = -1;
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

              var result = baseMap(
                collection,
                function (value, key, collection) {
                  var criteria = arrayMap(iteratees, function (iteratee) {
                    return iteratee(value);
                  });
                  return { criteria: criteria, index: ++index, value: value };
                }
              );

              return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
              });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
              return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
              });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
              var index = -1,
                length = paths.length,
                result = {};

              while (++index < length) {
                var path = paths[index],
                  value = baseGet(object, path);

                if (predicate(value, path)) {
                  baseSet(result, castPath(path, object), value);
                }
              }
              return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
              return function (object) {
                return baseGet(object, path);
              };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
              var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                index = -1,
                length = values.length,
                seen = array;

              if (array === values) {
                values = copyArray(values);
              }
              if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
              }
              while (++index < length) {
                var fromIndex = 0,
                  value = values[index],
                  computed = iteratee ? iteratee(value) : value;

                while (
                  (fromIndex = indexOf(seen, computed, fromIndex, comparator)) >
                  -1
                ) {
                  if (seen !== array) {
                    splice.call(seen, fromIndex, 1);
                  }
                  splice.call(array, fromIndex, 1);
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
              var length = array ? indexes.length : 0,
                lastIndex = length - 1;

              while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                  var previous = index;
                  if (isIndex(index)) {
                    splice.call(array, index, 1);
                  } else {
                    baseUnset(array, index);
                  }
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
              return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
              var result = "";
              if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
              }
              // Leverage the exponentiation by squaring algorithm for a faster repeat.
              // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
              do {
                if (n % 2) {
                  result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                  string += string;
                }
              } while (n);

              return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
              return setToString(overRest(func, start, identity), func + "");
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
              return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
              var array = values(collection);
              return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject(object)) {
                return object;
              }
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

              while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                  newValue = value;

                if (
                  key === "__proto__" ||
                  key === "constructor" ||
                  key === "prototype"
                ) {
                  return object;
                }

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer
                    ? customizer(objValue, key, nested)
                    : undefined;
                  if (newValue === undefined) {
                    newValue = isObject(objValue)
                      ? objValue
                      : isIndex(path[index + 1])
                        ? []
                        : {};
                  }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap
              ? identity
              : function (func, data) {
                metaMap.set(func, data);
                return func;
              };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty
              ? identity
              : function (func, string) {
                return defineProperty(func, "toString", {
                  configurable: true,
                  enumerable: false,
                  value: constant(string),
                  writable: true,
                });
              };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
              return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
              var index = -1,
                length = array.length;

              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end > length ? length : end;
              if (end < 0) {
                end += length;
              }
              length = start > end ? 0 : (end - start) >>> 0;
              start >>>= 0;

              var result = Array(length);
              while (++index < length) {
                result[index] = array[index + start];
              }
              return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
              var result;

              baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
              });
              return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
              var low = 0,
                high = array == null ? low : array.length;

              if (
                typeof value == "number" &&
                value === value &&
                high <= HALF_MAX_ARRAY_LENGTH
              ) {
                while (low < high) {
                  var mid = (low + high) >>> 1,
                    computed = array[mid];

                  if (
                    computed !== null &&
                    !isSymbol(computed) &&
                    (retHighest ? computed <= value : computed < value)
                  ) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return high;
              }
              return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
              var low = 0,
                high = array == null ? 0 : array.length;
              if (high === 0) {
                return 0;
              }

              value = iteratee(value);
              var valIsNaN = value !== value,
                valIsNull = value === null,
                valIsSymbol = isSymbol(value),
                valIsUndefined = value === undefined;

              while (low < high) {
                var mid = nativeFloor((low + high) / 2),
                  computed = iteratee(array[mid]),
                  othIsDefined = computed !== undefined,
                  othIsNull = computed === null,
                  othIsReflexive = computed === computed,
                  othIsSymbol = isSymbol(computed);

                if (valIsNaN) {
                  var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                  setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    !othIsNull &&
                    (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                  setLow = false;
                } else {
                  setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
              var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                if (!index || !eq(computed, seen)) {
                  var seen = computed;
                  result[resIndex++] = value === 0 ? 0 : value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == "string") {
                return value;
              }
              if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + "";
              }
              if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : "";
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                length = array.length,
                isCommon = true,
                result = [],
                seen = result;

              if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
              } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                  return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
              } else {
                seen = iteratee ? [] : result;
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee) {
                    seen.push(computed);
                  }
                  result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                  if (seen !== result) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
              path = castPath(path, object);
              object = parent(object, path);
              return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
              return baseSet(
                object,
                path,
                updater(baseGet(object, path)),
                customizer
              );
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
              var length = array.length,
                index = fromRight ? length : -1;

              while (
                (fromRight ? index-- : ++index < length) &&
                predicate(array[index], index, array)
              ) { }

              return isDrop
                ? baseSlice(
                  array,
                  fromRight ? 0 : index,
                  fromRight ? index + 1 : length
                )
                : baseSlice(
                  array,
                  fromRight ? index + 1 : 0,
                  fromRight ? length : index
                );
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
              var result = value;
              if (result instanceof LazyWrapper) {
                result = result.value();
              }
              return arrayReduce(
                actions,
                function (result, action) {
                  return action.func.apply(
                    action.thisArg,
                    arrayPush([result], action.args)
                  );
                },
                result
              );
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
              var length = arrays.length;
              if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
              }
              var index = -1,
                result = Array(length);

              while (++index < length) {
                var array = arrays[index],
                  othIndex = -1;

                while (++othIndex < length) {
                  if (othIndex != index) {
                    result[index] = baseDifference(
                      result[index] || array,
                      arrays[othIndex],
                      iteratee,
                      comparator
                    );
                  }
                }
              }
              return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
              var index = -1,
                length = props.length,
                valsLength = values.length,
                result = {};

              while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
              }
              return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
              return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
              return typeof value == "function" ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray(value)) {
                return value;
              }
              return isKey(value, object)
                ? [value]
                : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
              var length = array.length;
              end = end === undefined ? length : end;
              return !start && end >= length
                ? array
                : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout =
              ctxClearTimeout ||
              function (id) {
                return root.clearTimeout(id);
              };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }
              var length = buffer.length,
                result = allocUnsafe
                  ? allocUnsafe(length)
                  : new buffer.constructor(length);

              buffer.copy(result);
              return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
              var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
              new Uint8Array(result).set(new Uint8Array(arrayBuffer));
              return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(dataView.buffer)
                : dataView.buffer;
              return new dataView.constructor(
                buffer,
                dataView.byteOffset,
                dataView.byteLength
              );
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
              var result = new regexp.constructor(
                regexp.source,
                reFlags.exec(regexp)
              );
              result.lastIndex = regexp.lastIndex;
              return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
              return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(typedArray.buffer)
                : typedArray.buffer;
              return new typedArray.constructor(
                buffer,
                typedArray.byteOffset,
                typedArray.length
              );
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
              if (value !== other) {
                var valIsDefined = value !== undefined,
                  valIsNull = value === null,
                  valIsReflexive = value === value,
                  valIsSymbol = isSymbol(value);

                var othIsDefined = other !== undefined,
                  othIsNull = other === null,
                  othIsReflexive = other === other,
                  othIsSymbol = isSymbol(other);

                if (
                  (!othIsNull &&
                    !othIsSymbol &&
                    !valIsSymbol &&
                    value > other) ||
                  (valIsSymbol &&
                    othIsDefined &&
                    othIsReflexive &&
                    !othIsNull &&
                    !othIsSymbol) ||
                  (valIsNull && othIsDefined && othIsReflexive) ||
                  (!valIsDefined && othIsReflexive) ||
                  !valIsReflexive
                ) {
                  return 1;
                }
                if (
                  (!valIsNull &&
                    !valIsSymbol &&
                    !othIsSymbol &&
                    value < other) ||
                  (othIsSymbol &&
                    valIsDefined &&
                    valIsReflexive &&
                    !valIsNull &&
                    !valIsSymbol) ||
                  (othIsNull && valIsDefined && valIsReflexive) ||
                  (!othIsDefined && valIsReflexive) ||
                  !othIsReflexive
                ) {
                  return -1;
                }
              }
              return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
              var index = -1,
                objCriteria = object.criteria,
                othCriteria = other.criteria,
                length = objCriteria.length,
                ordersLength = orders.length;

              while (++index < length) {
                var result = compareAscending(
                  objCriteria[index],
                  othCriteria[index]
                );
                if (result) {
                  if (index >= ordersLength) {
                    return result;
                  }
                  var order = orders[index];
                  return result * (order == "desc" ? -1 : 1);
                }
              }
              // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
              // that causes it, under certain circumstances, to provide the same value for
              // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
              // for more details.
              //
              // This also ensures a stable sort in V8 and other engines.
              // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
              return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersLength = holders.length,
                leftIndex = -1,
                leftLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(leftLength + rangeLength),
                isUncurried = !isCurried;

              while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
              }
              while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[holders[argsIndex]] = args[argsIndex];
                }
              }
              while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
              }
              return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersIndex = -1,
                holdersLength = holders.length,
                rightIndex = -1,
                rightLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(rangeLength + rightLength),
                isUncurried = !isCurried;

              while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
              }
              var offset = argsIndex;
              while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
              }
              while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
              }
              return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
              var index = -1,
                length = source.length;

              array || (array = Array(length));
              while (++index < length) {
                array[index] = source[index];
              }
              return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
              var isNew = !object;
              object || (object = {});

              var index = -1,
                length = props.length;

              while (++index < length) {
                var key = props[index];

                var newValue = customizer
                  ? customizer(object[key], source[key], key, object, source)
                  : undefined;

                if (newValue === undefined) {
                  newValue = source[key];
                }
                if (isNew) {
                  baseAssignValue(object, key, newValue);
                } else {
                  assignValue(object, key, newValue);
                }
              }
              return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
              return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
              return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
              return function (collection, iteratee) {
                var func = isArray(collection)
                  ? arrayAggregator
                  : baseAggregator,
                  accumulator = initializer ? initializer() : {};

                return func(
                  collection,
                  setter,
                  getIteratee(iteratee, 2),
                  accumulator
                );
              };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
              return baseRest(function (object, sources) {
                var index = -1,
                  length = sources.length,
                  customizer = length > 1 ? sources[length - 1] : undefined,
                  guard = length > 2 ? sources[2] : undefined;

                customizer =
                  assigner.length > 3 && typeof customizer == "function"
                    ? (length--, customizer)
                    : undefined;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                  customizer = length < 3 ? undefined : customizer;
                  length = 1;
                }
                object = Object(object);
                while (++index < length) {
                  var source = sources[index];
                  if (source) {
                    assigner(object, source, index, customizer);
                  }
                }
                return object;
              });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
              return function (collection, iteratee) {
                if (collection == null) {
                  return collection;
                }
                if (!isArrayLike(collection)) {
                  return eachFunc(collection, iteratee);
                }
                var length = collection.length,
                  index = fromRight ? length : -1,
                  iterable = Object(collection);

                while (fromRight ? index-- : ++index < length) {
                  if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                  }
                }
                return collection;
              };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
              return function (object, iteratee, keysFunc) {
                var index = -1,
                  iterable = Object(object),
                  props = keysFunc(object),
                  length = props.length;

                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return fn.apply(isBind ? thisArg : this, arguments);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
              return function (string) {
                string = toString(string);

                var strSymbols = hasUnicode(string)
                  ? stringToArray(string)
                  : undefined;

                var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                var trailing = strSymbols
                  ? castSlice(strSymbols, 1).join("")
                  : string.slice(1);

                return chr[methodName]() + trailing;
              };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
              return function (string) {
                return arrayReduce(
                  words(deburr(string).replace(reApos, "")),
                  callback,
                  ""
                );
              };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
              return function () {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();
                  case 1:
                    return new Ctor(args[0]);
                  case 2:
                    return new Ctor(args[0], args[1]);
                  case 3:
                    return new Ctor(args[0], args[1], args[2]);
                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4]
                    );
                  case 6:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5]
                    );
                  case 7:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5],
                      args[6]
                    );
                }
                var thisBinding = baseCreate(Ctor.prototype),
                  result = Ctor.apply(thisBinding, args);

                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
              };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
              var Ctor = createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length,
                  placeholder = getHolder(wrapper);

                while (index--) {
                  args[index] = arguments[index];
                }
                var holders =
                  length < 3 &&
                    args[0] !== placeholder &&
                    args[length - 1] !== placeholder
                    ? []
                    : replaceHolders(args, placeholder);

                length -= holders.length;
                if (length < arity) {
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    undefined,
                    args,
                    holders,
                    undefined,
                    undefined,
                    arity - length
                  );
                }
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return apply(fn, this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
              return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                  var iteratee = getIteratee(predicate, 3);
                  collection = keys(collection);
                  predicate = function (key) {
                    return iteratee(iterable[key], key, iterable);
                  };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1
                  ? iterable[iteratee ? collection[index] : index]
                  : undefined;
              };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
              return flatRest(function (funcs) {
                var length = funcs.length,
                  index = length,
                  prereq = LodashWrapper.prototype.thru;

                if (fromRight) {
                  funcs.reverse();
                }
                while (index--) {
                  var func = funcs[index];
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                    var wrapper = new LodashWrapper([], true);
                  }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                  func = funcs[index];

                  var funcName = getFuncName(func),
                    data = funcName == "wrapper" ? getData(func) : undefined;

                  if (
                    data &&
                    isLaziable(data[0]) &&
                    data[1] ==
                    (WRAP_ARY_FLAG |
                      WRAP_CURRY_FLAG |
                      WRAP_PARTIAL_FLAG |
                      WRAP_REARG_FLAG) &&
                    !data[4].length &&
                    data[9] == 1
                  ) {
                    wrapper = wrapper[getFuncName(data[0])].apply(
                      wrapper,
                      data[3]
                    );
                  } else {
                    wrapper =
                      func.length == 1 && isLaziable(func)
                        ? wrapper[funcName]()
                        : wrapper.thru(func);
                  }
                }
                return function () {
                  var args = arguments,
                    value = args[0];

                  if (wrapper && args.length == 1 && isArray(value)) {
                    return wrapper.plant(value).value();
                  }
                  var index = 0,
                    result = length ? funcs[index].apply(this, args) : value;

                  while (++index < length) {
                    result = funcs[index].call(this, result);
                  }
                  return result;
                };
              });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary,
              arity
            ) {
              var isAry = bitmask & WRAP_ARY_FLAG,
                isBind = bitmask & WRAP_BIND_FLAG,
                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                isFlip = bitmask & WRAP_FLIP_FLAG,
                Ctor = isBindKey ? undefined : createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length;

                while (index--) {
                  args[index] = arguments[index];
                }
                if (isCurried) {
                  var placeholder = getHolder(wrapper),
                    holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                  args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                  args = composeArgsRight(
                    args,
                    partialsRight,
                    holdersRight,
                    isCurried
                  );
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                  var newHolders = replaceHolders(args, placeholder);
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    thisArg,
                    args,
                    newHolders,
                    argPos,
                    ary,
                    arity - length
                  );
                }
                var thisBinding = isBind ? thisArg : this,
                  fn = isBindKey ? thisBinding[func] : func;

                length = args.length;
                if (argPos) {
                  args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                  args.reverse();
                }
                if (isAry && ary < length) {
                  args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                  fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
              return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
              };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
              return function (value, other) {
                var result;
                if (value === undefined && other === undefined) {
                  return defaultValue;
                }
                if (value !== undefined) {
                  result = value;
                }
                if (other !== undefined) {
                  if (result === undefined) {
                    return other;
                  }
                  if (typeof value == "string" || typeof other == "string") {
                    value = baseToString(value);
                    other = baseToString(other);
                  } else {
                    value = baseToNumber(value);
                    other = baseToNumber(other);
                  }
                  result = operator(value, other);
                }
                return result;
              };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
              return flatRest(function (iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function (args) {
                  var thisArg = this;
                  return arrayFunc(iteratees, function (iteratee) {
                    return apply(iteratee, thisArg, args);
                  });
                });
              });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
              chars = chars === undefined ? " " : baseToString(chars);

              var charsLength = chars.length;
              if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
              }
              var result = baseRepeat(
                chars,
                nativeCeil(length / stringSize(chars))
              );
              return hasUnicode(chars)
                ? castSlice(stringToArray(result), 0, length).join("")
                : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var argsIndex = -1,
                  argsLength = arguments.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  args = Array(leftLength + argsLength),
                  fn =
                    this && this !== root && this instanceof wrapper
                      ? Ctor
                      : func;

                while (++leftIndex < leftLength) {
                  args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                  args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function (start, end, step) {
                if (
                  step &&
                  typeof step != "number" &&
                  isIterateeCall(start, end, step)
                ) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step =
                  step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
              return function (value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                  value = toNumber(value);
                  other = toNumber(other);
                }
                return operator(value, other);
              };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(
              func,
              bitmask,
              wrapFunc,
              placeholder,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isCurry = bitmask & WRAP_CURRY_FLAG,
                newHolders = isCurry ? holders : undefined,
                newHoldersRight = isCurry ? undefined : holders,
                newPartials = isCurry ? partials : undefined,
                newPartialsRight = isCurry ? undefined : partials;

              bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
              bitmask &= ~(isCurry
                ? WRAP_PARTIAL_RIGHT_FLAG
                : WRAP_PARTIAL_FLAG);

              if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
              }
              var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity,
              ];

              var result = wrapFunc.apply(undefined, newData);
              if (isLaziable(func)) {
                setData(result, newData);
              }
              result.placeholder = placeholder;
              return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
              var func = Math[methodName];
              return function (number, precision) {
                number = toNumber(number);
                precision =
                  precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                  // Shift with exponential notation to avoid floating-point issues.
                  // See [MDN](https://mdn.io/round#Examples) for more details.
                  var pair = (toString(number) + "e").split("e"),
                    value = func(pair[0] + "e" + (+pair[1] + precision));

                  pair = (toString(value) + "e").split("e");
                  return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
              };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(
              Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
            )
              ? noop
              : function (values) {
                return new Set(values);
              };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
              return function (object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                  return mapToArray(object);
                }
                if (tag == setTag) {
                  return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
              };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
              if (!isBindKey && typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var length = partials ? partials.length : 0;
              if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
              }
              ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
              arity = arity === undefined ? arity : toInteger(arity);
              length -= holders ? holders.length : 0;

              if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials,
                  holdersRight = holders;

                partials = holders = undefined;
              }
              var data = isBindKey ? undefined : getData(func);

              var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity,
              ];

              if (data) {
                mergeData(newData, data);
              }
              func = newData[0];
              bitmask = newData[1];
              thisArg = newData[2];
              partials = newData[3];
              holders = newData[4];
              arity = newData[9] =
                newData[9] === undefined
                  ? isBindKey
                    ? 0
                    : func.length
                  : nativeMax(newData[9] - length, 0);

              if (
                !arity &&
                bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
              ) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
              }
              if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
              } else if (
                bitmask == WRAP_CURRY_FLAG ||
                bitmask == WRAP_CURRY_RIGHT_FLAG
              ) {
                result = createCurry(func, bitmask, arity);
              } else if (
                (bitmask == WRAP_PARTIAL_FLAG ||
                  bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                !holders.length
              ) {
                result = createPartial(func, bitmask, thisArg, partials);
              } else {
                result = createHybrid.apply(undefined, newData);
              }
              var setter = data ? baseSetData : setData;
              return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
              if (
                objValue === undefined ||
                (eq(objValue, objectProto[key]) &&
                  !hasOwnProperty.call(object, key))
              ) {
                return srcValue;
              }
              return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(
              objValue,
              srcValue,
              key,
              object,
              source,
              stack
            ) {
              if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(
                  objValue,
                  srcValue,
                  undefined,
                  customDefaultsMerge,
                  stack
                );
                stack["delete"](srcValue);
              }
              return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
              return isPlainObject(value) ? undefined : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(
              array,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

              if (
                arrLength != othLength &&
                !(isPartial && othLength > arrLength)
              ) {
                return false;
              }
              // Check that cyclic values are equal.
              var arrStacked = stack.get(array);
              var othStacked = stack.get(other);
              if (arrStacked && othStacked) {
                return arrStacked == other && othStacked == array;
              }
              var index = -1,
                result = true,
                seen =
                  bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

              stack.set(array, other);
              stack.set(other, array);

              // Ignore non-index properties.
              while (++index < arrLength) {
                var arrValue = array[index],
                  othValue = other[index];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(
                      arrValue,
                      othValue,
                      index,
                      array,
                      other,
                      stack
                    );
                }
                if (compared !== undefined) {
                  if (compared) {
                    continue;
                  }
                  result = false;
                  break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                  if (
                    !arraySome(other, function (othValue, othIndex) {
                      if (
                        !cacheHas(seen, othIndex) &&
                        (arrValue === othValue ||
                          equalFunc(
                            arrValue,
                            othValue,
                            bitmask,
                            customizer,
                            stack
                          ))
                      ) {
                        return seen.push(othIndex);
                      }
                    })
                  ) {
                    result = false;
                    break;
                  }
                } else if (
                  !(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                  )
                ) {
                  result = false;
                  break;
                }
              }
              stack["delete"](array);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(
              object,
              other,
              tag,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              switch (tag) {
                case dataViewTag:
                  if (
                    object.byteLength != other.byteLength ||
                    object.byteOffset != other.byteOffset
                  ) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;

                case arrayBufferTag:
                  if (
                    object.byteLength != other.byteLength ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))
                  ) {
                    return false;
                  }
                  return true;

                case boolTag:
                case dateTag:
                case numberTag:
                  // Coerce booleans to `1` or `0` and dates to milliseconds.
                  // Invalid dates are coerced to `NaN`.
                  return eq(+object, +other);

                case errorTag:
                  return (
                    object.name == other.name && object.message == other.message
                  );

                case regexpTag:
                case stringTag:
                  // Coerce regexes to strings and treat strings, primitives and objects,
                  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                  // for more details.
                  return object == other + "";

                case mapTag:
                  var convert = mapToArray;

                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);

                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;

                  // Recursively compare objects (susceptible to call stack limits).
                  stack.set(object, other);
                  var result = equalArrays(
                    convert(object),
                    convert(other),
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
                  stack["delete"](object);
                  return result;

                case symbolTag:
                  if (symbolValueOf) {
                    return (
                      symbolValueOf.call(object) == symbolValueOf.call(other)
                    );
                  }
              }
              return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

              if (objLength != othLength && !isPartial) {
                return false;
              }
              var index = objLength;
              while (index--) {
                var key = objProps[index];
                if (
                  !(isPartial ? key in other : hasOwnProperty.call(other, key))
                ) {
                  return false;
                }
              }
              // Check that cyclic values are equal.
              var objStacked = stack.get(object);
              var othStacked = stack.get(other);
              if (objStacked && othStacked) {
                return objStacked == other && othStacked == object;
              }
              var result = true;
              stack.set(object, other);
              stack.set(other, object);

              var skipCtor = isPartial;
              while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                  othValue = other[key];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (
                  !(compared === undefined
                    ? objValue === othValue ||
                    equalFunc(objValue, othValue, bitmask, customizer, stack)
                    : compared)
                ) {
                  result = false;
                  break;
                }
                skipCtor || (skipCtor = key == "constructor");
              }
              if (result && !skipCtor) {
                var objCtor = object.constructor,
                  othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (
                  objCtor != othCtor &&
                  "constructor" in object &&
                  "constructor" in other &&
                  !(
                    typeof objCtor == "function" &&
                    objCtor instanceof objCtor &&
                    typeof othCtor == "function" &&
                    othCtor instanceof othCtor
                  )
                ) {
                  result = false;
                }
              }
              stack["delete"](object);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
              return setToString(overRest(func, undefined, flatten), func + "");
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
              return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
              return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap
              ? noop
              : function (func) {
                return metaMap.get(func);
              };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
              var result = func.name + "",
                array = realNames[result],
                length = hasOwnProperty.call(realNames, result)
                  ? array.length
                  : 0;

              while (length--) {
                var data = array[length],
                  otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                  return data.name;
                }
              }
              return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
              var object = hasOwnProperty.call(lodash, "placeholder")
                ? lodash
                : func;
              return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
              var result = lodash.iteratee || iteratee;
              result = result === iteratee ? baseIteratee : result;
              return arguments.length
                ? result(arguments[0], arguments[1])
                : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return isKeyable(key)
                ? data[typeof key == "string" ? "string" : "hash"]
                : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
              var result = keys(object),
                length = result.length;

              while (length--) {
                var key = result[length],
                  value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
              }
              return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = getValue(object, key);
              return baseIsNative(value) ? value : undefined;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) { }

              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols
              ? stubArray
              : function (object) {
                if (object == null) {
                  return [];
                }
                object = Object(object);
                return arrayFilter(
                  nativeGetSymbols(object),
                  function (symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                  }
                );
              };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols
              ? stubArray
              : function (object) {
                var result = [];
                while (object) {
                  arrayPush(result, getSymbols(object));
                  object = getPrototype(object);
                }
                return result;
              };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if (
              (DataView &&
                getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
              (Map && getTag(new Map()) != mapTag) ||
              (Promise && getTag(Promise.resolve()) != promiseTag) ||
              (Set && getTag(new Set()) != setTag) ||
              (WeakMap && getTag(new WeakMap()) != weakMapTag)
            ) {
              getTag = function (value) {
                var result = baseGetTag(value),
                  Ctor = result == objectTag ? value.constructor : undefined,
                  ctorString = Ctor ? toSource(Ctor) : "";

                if (ctorString) {
                  switch (ctorString) {
                    case dataViewCtorString:
                      return dataViewTag;
                    case mapCtorString:
                      return mapTag;
                    case promiseCtorString:
                      return promiseTag;
                    case setCtorString:
                      return setTag;
                    case weakMapCtorString:
                      return weakMapTag;
                  }
                }
                return result;
              };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
              var index = -1,
                length = transforms.length;

              while (++index < length) {
                var data = transforms[index],
                  size = data.size;

                switch (data.type) {
                  case "drop":
                    start += size;
                    break;
                  case "dropRight":
                    end -= size;
                    break;
                  case "take":
                    end = nativeMin(end, start + size);
                    break;
                  case "takeRight":
                    start = nativeMax(start, end - size);
                    break;
                }
              }
              return { start: start, end: end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
              var match = source.match(reWrapDetails);
              return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                result = false;

              while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                  break;
                }
                object = object[key];
              }
              if (result || ++index != length) {
                return result;
              }
              length = object == null ? 0 : object.length;
              return (
                !!length &&
                isLength(length) &&
                isIndex(key, length) &&
                (isArray(object) || isArguments(object))
              );
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
              var length = array.length,
                result = new array.constructor(length);

              // Add properties assigned by `RegExp#exec`.
              if (
                length &&
                typeof array[0] == "string" &&
                hasOwnProperty.call(array, "index")
              ) {
                result.index = array.index;
                result.input = array.input;
              }
              return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
              return typeof object.constructor == "function" &&
                !isPrototype(object)
                ? baseCreate(getPrototype(object))
                : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
              var Ctor = object.constructor;
              switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);

                case boolTag:
                case dateTag:
                  return new Ctor(+object);

                case dataViewTag:
                  return cloneDataView(object, isDeep);

                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                  return cloneTypedArray(object, isDeep);

                case mapTag:
                  return new Ctor();

                case numberTag:
                case stringTag:
                  return new Ctor(object);

                case regexpTag:
                  return cloneRegExp(object);

                case setTag:
                  return new Ctor();

                case symbolTag:
                  return cloneSymbol(object);
              }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
              var length = details.length;
              if (!length) {
                return source;
              }
              var lastIndex = length - 1;
              details[lastIndex] =
                (length > 1 ? "& " : "") + details[lastIndex];
              details = details.join(length > 2 ? ", " : " ");
              return source.replace(
                reWrapComment,
                "{\n/* [wrapped with " + details + "] */\n"
              );
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
              return (
                isArray(value) ||
                isArguments(value) ||
                !!(spreadableSymbol && value && value[spreadableSymbol])
              );
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return (
                !!length &&
                (type == "number" ||
                  (type != "symbol" && reIsUint.test(value))) &&
                value > -1 &&
                value % 1 == 0 &&
                value < length
              );
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject(object)) {
                return false;
              }
              var type = typeof index;
              if (
                type == "number"
                  ? isArrayLike(object) && isIndex(index, object.length)
                  : type == "string" && index in object
              ) {
                return eq(object[index], value);
              }
              return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray(value)) {
                return false;
              }
              var type = typeof value;
              if (
                type == "number" ||
                type == "symbol" ||
                type == "boolean" ||
                value == null ||
                isSymbol(value)
              ) {
                return true;
              }
              return (
                reIsPlainProp.test(value) ||
                !reIsDeepProp.test(value) ||
                (object != null && value in Object(object))
              );
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return type == "string" ||
                type == "number" ||
                type == "symbol" ||
                type == "boolean"
                ? value !== "__proto__"
                : value === null;
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
              var funcName = getFuncName(func),
                other = lodash[funcName];

              if (
                typeof other != "function" ||
                !(funcName in LazyWrapper.prototype)
              ) {
                return false;
              }
              if (func === other) {
                return true;
              }
              var data = getData(other);
              return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && maskSrcKey in func;
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
              var Ctor = value && value.constructor,
                proto =
                  (typeof Ctor == "function" && Ctor.prototype) || objectProto;

              return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
              return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
              return function (object) {
                if (object == null) {
                  return false;
                }
                return (
                  object[key] === srcValue &&
                  (srcValue !== undefined || key in Object(object))
                );
              };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
              var bitmask = data[1],
                srcBitmask = source[1],
                newBitmask = bitmask | srcBitmask,
                isCommon =
                  newBitmask <
                  (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

              var isCombo =
                (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
                (srcBitmask == WRAP_ARY_FLAG &&
                  bitmask == WRAP_REARG_FLAG &&
                  data[7].length <= source[8]) ||
                (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                  source[7].length <= source[8] &&
                  bitmask == WRAP_CURRY_FLAG);

              // Exit early if metadata can't be merged.
              if (!(isCommon || isCombo)) {
                return data;
              }
              // Use source `thisArg` if available.
              if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |=
                  bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
              }
              // Compose partial arguments.
              var value = source[3];
              if (value) {
                var partials = data[3];
                data[3] = partials
                  ? composeArgs(partials, value, source[4])
                  : value;
                data[4] = partials
                  ? replaceHolders(data[3], PLACEHOLDER)
                  : source[4];
              }
              // Compose partial right arguments.
              value = source[5];
              if (value) {
                partials = data[5];
                data[5] = partials
                  ? composeArgsRight(partials, value, source[6])
                  : value;
                data[6] = partials
                  ? replaceHolders(data[5], PLACEHOLDER)
                  : source[6];
              }
              // Use source `argPos` if available.
              value = source[7];
              if (value) {
                data[7] = value;
              }
              // Use source `ary` if it's smaller.
              if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] =
                  data[8] == null ? source[8] : nativeMin(data[8], source[8]);
              }
              // Use source `arity` if one is not provided.
              if (data[9] == null) {
                data[9] = source[9];
              }
              // Use source `func` and merge bitmasks.
              data[0] = source[0];
              data[1] = newBitmask;

              return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
              var result = [];
              if (object != null) {
                for (var key in Object(object)) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
              return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
              start = nativeMax(
                start === undefined ? func.length - 1 : start,
                0
              );
              return function () {
                var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  array = Array(length);

                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
              };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
              return path.length < 2
                ? object
                : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
              var arrLength = array.length,
                length = nativeMin(indexes.length, arrLength),
                oldArray = copyArray(array);

              while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength)
                  ? oldArray[index]
                  : undefined;
              }
              return array;
            }

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
              if (key === "constructor" && typeof object[key] === "function") {
                return;
              }

              if (key == "__proto__") {
                return;
              }

              return object[key];
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout =
              ctxSetTimeout ||
              function (func, wait) {
                return root.setTimeout(func, wait);
              };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
              var source = reference + "";
              return setToString(
                wrapper,
                insertWrapDetails(
                  source,
                  updateWrapDetails(getWrapDetails(source), bitmask)
                )
              );
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
              var count = 0,
                lastCalled = 0;

              return function () {
                var stamp = nativeNow(),
                  remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                  if (++count >= HOT_COUNT) {
                    return arguments[0];
                  }
                } else {
                  count = 0;
                }
                return func.apply(undefined, arguments);
              };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
              var index = -1,
                length = array.length,
                lastIndex = length - 1;

              size = size === undefined ? length : size;
              while (++index < size) {
                var rand = baseRandom(index, lastIndex),
                  value = array[rand];

                array[rand] = array[index];
                array[index] = value;
              }
              array.length = size;
              return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push("");
              }
              string.replace(
                rePropName,
                function (match, number, quote, subString) {
                  result.push(
                    quote
                      ? subString.replace(reEscapeChar, "$1")
                      : number || match
                  );
                }
              );
              return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == "string" || isSymbol(value)) {
                return value;
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) { }
                try {
                  return func + "";
                } catch (e) { }
              }
              return "";
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
              arrayEach(wrapFlags, function (pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                  details.push(value);
                }
              });
              return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
              if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
              }
              var result = new LodashWrapper(
                wrapper.__wrapped__,
                wrapper.__chain__
              );
              result.__actions__ = copyArray(wrapper.__actions__);
              result.__index__ = wrapper.__index__;
              result.__values__ = wrapper.__values__;
              return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
              if (
                guard ? isIterateeCall(array, size, guard) : size === undefined
              ) {
                size = 1;
              } else {
                size = nativeMax(toInteger(size), 0);
              }
              var length = array == null ? 0 : array.length;
              if (!length || size < 1) {
                return [];
              }
              var index = 0,
                resIndex = 0,
                result = Array(nativeCeil(length / size));

              while (index < length) {
                result[resIndex++] = baseSlice(array, index, (index += size));
              }
              return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
              var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (value) {
                  result[resIndex++] = value;
                }
              }
              return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
              var length = arguments.length;
              if (!length) {
                return [];
              }
              var args = Array(length - 1),
                array = arguments[0],
                index = length;

              while (index--) {
                args[index - 1] = arguments[index];
              }
              return arrayPush(
                isArray(array) ? copyArray(array) : [array],
                baseFlatten(args, 1)
              );
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true)
                )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
              var iteratee = last(values);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true),
                  getIteratee(iteratee, 2)
                )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
              var comparator = last(values);
              if (isArrayLikeObject(comparator)) {
                comparator = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true),
                  undefined,
                  comparator
                )
                : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true)
                : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                start &&
                typeof start != "number" &&
                isIterateeCall(array, value, start)
              ) {
                start = 0;
                end = length;
              }
              return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length - 1;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  fromIndex < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return baseFindIndex(
                array,
                getIteratee(predicate, 3),
                index,
                true
              );
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
              var index = -1,
                length = pairs == null ? 0 : pairs.length,
                result = {};

              while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
              }
              return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
              return array && array.length ? array[0] : undefined;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
              var mapped = arrayMap(arrays, castArrayLikeObject);
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped)
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
              var iteratee = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              if (iteratee === last(mapped)) {
                iteratee = undefined;
              } else {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
              var comparator = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              comparator =
                typeof comparator == "function" ? comparator : undefined;
              if (comparator) {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, undefined, comparator)
                : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
              return array == null ? "" : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
              var length = array == null ? 0 : array.length;
              return length ? array[length - 1] : undefined;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  index < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return value === value
                ? strictLastIndexOf(array, value, index)
                : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
              return array && array.length
                ? baseNth(array, toInteger(n))
                : undefined;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
              return array && array.length && values && values.length
                ? basePullAll(array, values)
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, getIteratee(iteratee, 2))
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, undefined, comparator)
                : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
              var length = array == null ? 0 : array.length,
                result = baseAt(array, indexes);

              basePullAt(
                array,
                arrayMap(indexes, function (index) {
                  return isIndex(index, length) ? +index : index;
                }).sort(compareAscending)
              );

              return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
              var result = [];
              if (!(array && array.length)) {
                return result;
              }
              var index = -1,
                indexes = [],
                length = array.length;

              predicate = getIteratee(predicate, 3);
              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result.push(value);
                  indexes.push(index);
                }
              }
              basePullAt(array, indexes);
              return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
              return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                end &&
                typeof end != "number" &&
                isIterateeCall(array, start, end)
              ) {
                start = 0;
                end = length;
              } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
              }
              return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
              return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
              return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(
                array,
                value,
                getIteratee(iteratee, 2),
                true
              );
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
              return array && array.length ? baseSortedUniq(array) : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
              return array && array.length
                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
              if (!(array && array.length)) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3))
                : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                undefined,
                comparator
              );
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
              return array && array.length ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
              return array && array.length
                ? baseUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return array && array.length
                ? baseUniq(array, undefined, comparator)
                : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
              if (!(array && array.length)) {
                return [];
              }
              var length = 0;
              array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                  length = nativeMax(group.length, length);
                  return true;
                }
              });
              return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
              });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
              if (!(array && array.length)) {
                return [];
              }
              var result = unzip(array);
              if (iteratee == null) {
                return result;
              }
              return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
              });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(array, values)
                : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
              return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                undefined,
                comparator
              );
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
              return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
              return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
              var length = arrays.length,
                iteratee = length > 1 ? arrays[length - 1] : undefined;

              iteratee =
                typeof iteratee == "function"
                  ? (arrays.pop(), iteratee)
                  : undefined;
              return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
              var result = lodash(value);
              result.__chain__ = true;
              return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
              interceptor(value);
              return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
              return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
              var length = paths.length,
                start = length ? paths[0] : 0,
                value = this.__wrapped__,
                interceptor = function (object) {
                  return baseAt(object, paths);
                };

              if (
                length > 1 ||
                this.__actions__.length ||
                !(value instanceof LazyWrapper) ||
                !isIndex(start)
              ) {
                return this.thru(interceptor);
              }
              value = value.slice(start, +start + (length ? 1 : 0));
              value.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined,
              });
              return new LodashWrapper(value, this.__chain__).thru(function (
                array
              ) {
                if (length && !array.length) {
                  array.push(undefined);
                }
                return array;
              });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
              return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
              return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
              if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
              }
              var done = this.__index__ >= this.__values__.length,
                value = done ? undefined : this.__values__[this.__index__++];

              return { done: done, value: value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
              return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
              var result,
                parent = this;

              while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                  previous.__wrapped__ = clone;
                } else {
                  result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
              }
              previous.__wrapped__ = value;
              return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
              var value = this.__wrapped__;
              if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                  wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                  func: thru,
                  args: [reverse],
                  thisArg: undefined,
                });
                return new LodashWrapper(wrapped, this.__chain__);
              }
              return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
              return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                ++result[key];
              } else {
                baseAssignValue(result, key, 1);
              }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
              var func = isArray(collection) ? arrayEvery : baseEvery;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             *
             * // Combining several predicates using `_.overEvery` or `_.overSome`.
             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
             * // => objects for ['fred', 'barney']
             */
            function filter(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
              var func = isArray(collection) ? arrayEach : baseEach;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
              var func = isArray(collection) ? arrayEachRight : baseEachRight;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
              } else {
                baseAssignValue(result, key, [value]);
              }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
              collection = isArrayLike(collection)
                ? collection
                : values(collection);
              fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

              var length = collection.length;
              if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
              }
              return isString(collection)
                ? fromIndex <= length &&
                collection.indexOf(value, fromIndex) > -1
                : !!length && baseIndexOf(collection, value, fromIndex) > -1;
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
              var index = -1,
                isFunc = typeof path == "function",
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function (value) {
                result[++index] = isFunc
                  ? apply(path, value, args)
                  : baseInvoke(value, path, args);
              });
              return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
              baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
              var func = isArray(collection) ? arrayMap : baseMap;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
              if (collection == null) {
                return [];
              }
              if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
              }
              orders = guard ? undefined : orders;
              if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
              }
              return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(
              function (result, value, key) {
                result[key ? 0 : 1].push(value);
              },
              function () {
                return [[], []];
              }
            );

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduce : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEach
              );
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduceRight : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEachRight
              );
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
              var func = isArray(collection) ? arraySample : baseSample;
              return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
              if (
                guard ? isIterateeCall(collection, n, guard) : n === undefined
              ) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              var func = isArray(collection) ? arraySampleSize : baseSampleSize;
              return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
              var func = isArray(collection) ? arrayShuffle : baseShuffle;
              return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
              if (collection == null) {
                return 0;
              }
              if (isArrayLike(collection)) {
                return isString(collection)
                  ? stringSize(collection)
                  : collection.length;
              }
              var tag = getTag(collection);
              if (tag == mapTag || tag == setTag) {
                return collection.size;
              }
              return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
              var func = isArray(collection) ? arraySome : baseSome;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
              if (collection == null) {
                return [];
              }
              var length = iteratees.length;
              if (
                length > 1 &&
                isIterateeCall(collection, iteratees[0], iteratees[1])
              ) {
                iteratees = [];
              } else if (
                length > 2 &&
                isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
              ) {
                iteratees = [iteratees[0]];
              }
              return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now =
              ctxNow ||
              function () {
                return root.Date.now();
              };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n < 1) {
                  return func.apply(this, arguments);
                }
              };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
              n = guard ? undefined : n;
              n = func && n == null ? func.length : n;
              return createWrap(
                func,
                WRAP_ARY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                n
              );
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
              var result;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n > 0) {
                  result = func.apply(this, arguments);
                }
                if (n <= 1) {
                  func = undefined;
                }
                return result;
              };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
              var bitmask = WRAP_BIND_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
              var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curry.placeholder;
              return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_RIGHT_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curryRight.placeholder;
              return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
              var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing
                  ? nativeMax(toNumber(options.maxWait) || 0, wait)
                  : maxWait;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }

              function invokeFunc(time) {
                var args = lastArgs,
                  thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }

              function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
              }

              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  timeWaiting = wait - timeSinceLastCall;

                return maxing
                  ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                  : timeWaiting;
              }

              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime;

                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return (
                  lastCallTime === undefined ||
                  timeSinceLastCall >= wait ||
                  timeSinceLastCall < 0 ||
                  (maxing && timeSinceLastInvoke >= maxWait)
                );
              }

              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
              }

              function trailingEdge(time) {
                timerId = undefined;

                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
              }

              function cancel() {
                if (timerId !== undefined) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
              }

              function flush() {
                return timerId === undefined ? result : trailingEdge(now());
              }

              function debounced() {
                var time = now(),
                  isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                  if (timerId === undefined) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    // Handle invocations in a tight loop.
                    clearTimeout(timerId);
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === undefined) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
              return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
              return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
              return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (
                typeof func != "function" ||
                (resolver != null && typeof resolver != "function")
              ) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function () {
                var args = arguments,
                  key = resolver ? resolver.apply(this, args) : args[0],
                  cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || MapCache)();
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
              if (typeof predicate != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return function () {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return !predicate.call(this);
                  case 1:
                    return !predicate.call(this, args[0]);
                  case 2:
                    return !predicate.call(this, args[0], args[1]);
                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
              };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
              return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
              transforms =
                transforms.length == 1 && isArray(transforms[0])
                  ? arrayMap(transforms[0], baseUnary(getIteratee()))
                  : arrayMap(
                    baseFlatten(transforms, 1),
                    baseUnary(getIteratee())
                  );

              var funcsLength = transforms.length;
              return baseRest(function (args) {
                var index = -1,
                  length = nativeMin(args.length, funcsLength);

                while (++index < length) {
                  args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
              });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partial));
              return createWrap(
                func,
                WRAP_PARTIAL_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partialRight));
              return createWrap(
                func,
                WRAP_PARTIAL_RIGHT_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
              return createWrap(
                func,
                WRAP_REARG_FLAG,
                undefined,
                undefined,
                undefined,
                indexes
              );
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start === undefined ? start : toInteger(start);
              return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start == null ? 0 : nativeMax(toInteger(start), 0);
              return baseRest(function (args) {
                var array = args[start],
                  otherArgs = castSlice(args, 0, start);

                if (array) {
                  arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
              });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
              var leading = true,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                leading: leading,
                maxWait: wait,
                trailing: trailing,
              });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
              return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
              return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
              if (!arguments.length) {
                return [];
              }
              var value = arguments[0];
              return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
              return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(
                value,
                CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                customizer
              );
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
              return (
                source == null || baseConformsTo(object, source, keys(source))
              );
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
              return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(
              (function () {
                return arguments;
              })()
            )
              ? baseIsArguments
              : function (value) {
                return (
                  isObjectLike(value) &&
                  hasOwnProperty.call(value, "callee") &&
                  !propertyIsEnumerable.call(value, "callee")
                );
              };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer
              ? baseUnary(nodeIsArrayBuffer)
              : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return (
                value != null && isLength(value.length) && !isFunction(value)
              );
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
              return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
              return (
                value === true ||
                value === false ||
                (isObjectLike(value) && baseGetTag(value) == boolTag)
              );
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
              return (
                isObjectLike(value) &&
                value.nodeType === 1 &&
                !isPlainObject(value)
              );
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
              if (value == null) {
                return true;
              }
              if (
                isArrayLike(value) &&
                (isArray(value) ||
                  typeof value == "string" ||
                  typeof value.splice == "function" ||
                  isBuffer(value) ||
                  isTypedArray(value) ||
                  isArguments(value))
              ) {
                return !value.length;
              }
              var tag = getTag(value);
              if (tag == mapTag || tag == setTag) {
                return !value.size;
              }
              if (isPrototype(value)) {
                return !baseKeys(value).length;
              }
              for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
              return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              var result = customizer ? customizer(value, other) : undefined;
              return result === undefined
                ? baseIsEqual(value, other, undefined, customizer)
                : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
              if (!isObjectLike(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return (
                tag == errorTag ||
                tag == domExcTag ||
                (typeof value.message == "string" &&
                  typeof value.name == "string" &&
                  !isPlainObject(value))
              );
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
              return typeof value == "number" && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = baseGetTag(value);
              return (
                tag == funcTag ||
                tag == genTag ||
                tag == asyncTag ||
                tag == proxyTag
              );
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
              return typeof value == "number" && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return (
                typeof value == "number" &&
                value > -1 &&
                value % 1 == 0 &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
              var type = typeof value;
              return value != null && (type == "object" || type == "function");
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == "object";
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
              return (
                object === source ||
                baseIsMatch(object, source, getMatchData(source))
              );
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseIsMatch(
                object,
                source,
                getMatchData(source),
                customizer
              );
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
              // An `NaN` primitive is the only value that is not equal to itself.
              // Perform the `toStringTag` check first to avoid errors with some
              // ActiveX objects in IE.
              return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
              if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
              }
              return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
              return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
              return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
              return (
                typeof value == "number" ||
                (isObjectLike(value) && baseGetTag(value) == numberTag)
              );
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
              if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor =
                hasOwnProperty.call(proto, "constructor") && proto.constructor;
              return (
                typeof Ctor == "function" &&
                Ctor instanceof Ctor &&
                funcToString.call(Ctor) == objectCtorString
              );
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp
              ? baseUnary(nodeIsRegExp)
              : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
              return (
                isInteger(value) &&
                value >= -MAX_SAFE_INTEGER &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
              return (
                typeof value == "string" ||
                (!isArray(value) &&
                  isObjectLike(value) &&
                  baseGetTag(value) == stringTag)
              );
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
              return (
                typeof value == "symbol" ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag)
              );
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray
              ? baseUnary(nodeIsTypedArray)
              : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
              return value === undefined;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
              return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
              return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
              return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
              if (!value) {
                return [];
              }
              if (isArrayLike(value)) {
                return isString(value)
                  ? stringToArray(value)
                  : copyArray(value);
              }
              if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
              }
              var tag = getTag(value),
                func =
                  tag == mapTag
                    ? mapToArray
                    : tag == setTag
                      ? setToArray
                      : values;

              return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
              var result = toFinite(value),
                remainder = result % 1;

              return result === result
                ? remainder
                  ? result - remainder
                  : result
                : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
              return value
                ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other =
                  typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = baseTrim(value);
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value)
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : reIsBadHex.test(value)
                  ? NAN
                  : +value;
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
              return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
              return value
                ? baseClamp(
                  toInteger(value),
                  -MAX_SAFE_INTEGER,
                  MAX_SAFE_INTEGER
                )
                : value === 0
                  ? value
                  : 0;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
              return value == null ? "" : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
              if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
              }
              for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                  assignValue(object, key, source[key]);
                }
              }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
              copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
              var result = baseCreate(prototype);
              return properties == null
                ? result
                : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
              object = Object(object);

              var index = -1;
              var length = sources.length;
              var guard = length > 2 ? sources[2] : undefined;

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
              }

              while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;

                while (++propsIndex < propsLength) {
                  var key = props[propsIndex];
                  var value = object[key];

                  if (
                    value === undefined ||
                    (eq(value, objectProto[key]) &&
                      !hasOwnProperty.call(object, key))
                  ) {
                    object[key] = source[key];
                  }
                }
              }

              return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
              args.push(undefined, customDefaultsMerge);
              return apply(mergeWith, undefined, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
              return baseFindKey(
                object,
                getIteratee(predicate, 3),
                baseForOwnRight
              );
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
              return object == null
                ? object
                : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
              return object == null
                ? object
                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
              return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
              return (
                object && baseForOwnRight(object, getIteratee(iteratee, 3))
              );
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
              return object == null ? [] : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
              return object == null
                ? []
                : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
              var result = object == null ? undefined : baseGet(object, path);
              return result === undefined ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
              return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
              return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
              } else {
                result[value] = [key];
              }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object)
                : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object, true)
                : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
              });
              return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
              });
              return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
              baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
              var result = {};
              if (object == null) {
                return result;
              }
              var isDeep = false;
              paths = arrayMap(paths, function (path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
              });
              copyObject(object, getAllKeysIn(object), result);
              if (isDeep) {
                result = baseClone(
                  result,
                  CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                  customOmitClone
                );
              }
              var length = paths.length;
              while (length--) {
                baseUnset(result, paths[length]);
              }
              return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
              return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
              return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
              if (object == null) {
                return {};
              }
              var props = arrayMap(getAllKeysIn(object), function (prop) {
                return [prop];
              });
              predicate = getIteratee(predicate);
              return basePickBy(object, props, function (value, path) {
                return predicate(value, path[0]);
              });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
              path = castPath(path, object);

              var index = -1,
                length = path.length;

              // Ensure the loop is entered when path is empty.
              if (!length) {
                length = 1;
                object = undefined;
              }
              while (++index < length) {
                var value =
                  object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                  index = length;
                  value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
              }
              return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
              var isArr = isArray(object),
                isArrLike = isArr || isBuffer(object) || isTypedArray(object);

              iteratee = getIteratee(iteratee, 4);
              if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                  accumulator = isArr ? new Ctor() : [];
                } else if (isObject(object)) {
                  accumulator = isFunction(Ctor)
                    ? baseCreate(getPrototype(object))
                    : {};
                } else {
                  accumulator = {};
                }
              }
              (isArrLike ? arrayEach : baseForOwn)(
                object,
                function (value, index, object) {
                  return iteratee(accumulator, value, index, object);
                }
              );
              return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
              return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater), customizer);
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
              return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
              return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
              if (upper === undefined) {
                upper = lower;
                lower = undefined;
              }
              if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
              }
              if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
              }
              return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
              start = toFinite(start);
              if (end === undefined) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              number = toNumber(number);
              return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
              if (
                floating &&
                typeof floating != "boolean" &&
                isIterateeCall(lower, upper, floating)
              ) {
                upper = floating = undefined;
              }
              if (floating === undefined) {
                if (typeof upper == "boolean") {
                  floating = upper;
                  upper = undefined;
                } else if (typeof lower == "boolean") {
                  floating = lower;
                  lower = undefined;
                }
              }
              if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
              } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                  upper = lower;
                  lower = 0;
                } else {
                  upper = toFinite(upper);
                }
              }
              if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
              }
              if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(
                  lower +
                  rand *
                  (upper -
                    lower +
                    freeParseFloat("1e-" + ((rand + "").length - 1))),
                  upper
                );
              }
              return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
              word = word.toLowerCase();
              return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
              return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
              string = toString(string);
              return (
                string &&
                string.replace(reLatin, deburrLetter).replace(reComboMark, "")
              );
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
              string = toString(string);
              target = baseToString(target);

              var length = string.length;
              position =
                position === undefined
                  ? length
                  : baseClamp(toInteger(position), 0, length);

              var end = position;
              position -= target.length;
              return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
              string = toString(string);
              return string && reHasUnescapedHtml.test(string)
                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
              string = toString(string);
              return string && reHasRegExpChar.test(string)
                ? string.replace(reRegExpChar, "\\$&")
                : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
              return result + (index ? "-" : "") + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst("toLowerCase");

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              if (!length || strLength >= length) {
                return string;
              }
              var mid = (length - strLength) / 2;
              return (
                createPadding(nativeFloor(mid), chars) +
                string +
                createPadding(nativeCeil(mid), chars)
              );
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? string + createPadding(length - strLength, chars)
                : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? createPadding(length - strLength, chars) + string
                : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
              if (guard || radix == null) {
                radix = 0;
              } else if (radix) {
                radix = +radix;
              }
              return nativeParseInt(
                toString(string).replace(reTrimStart, ""),
                radix || 0
              );
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
              if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
              var args = arguments,
                string = toString(args[0]);

              return args.length < 3
                ? string
                : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
              return result + (index ? "_" : "") + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
              if (
                limit &&
                typeof limit != "number" &&
                isIterateeCall(string, separator, limit)
              ) {
                separator = limit = undefined;
              }
              limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
              if (!limit) {
                return [];
              }
              string = toString(string);
              if (
                string &&
                (typeof separator == "string" ||
                  (separator != null && !isRegExp(separator)))
              ) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                  return castSlice(stringToArray(string), 0, limit);
                }
              }
              return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
              string = toString(string);
              position =
                position == null
                  ? 0
                  : baseClamp(toInteger(position), 0, string.length);

              target = baseToString(target);
              return string.slice(position, position + target.length) == target;
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
              // Based on John Resig's `tmpl` implementation
              // (http://ejohn.org/blog/javascript-micro-templating/)
              // and Laura Doktorova's doT.js (https://github.com/olado/doT).
              var settings = lodash.templateSettings;

              if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
              }
              string = toString(string);
              options = assignInWith(
                {},
                options,
                settings,
                customDefaultsAssignIn
              );

              var imports = assignInWith(
                {},
                options.imports,
                settings.imports,
                customDefaultsAssignIn
              ),
                importsKeys = keys(imports),
                importsValues = baseValues(imports, importsKeys);

              var isEscaping,
                isEvaluating,
                index = 0,
                interpolate = options.interpolate || reNoMatch,
                source = "__p += '";

              // Compile the regexp to match each delimiter.
              var reDelimiters = RegExp(
                (options.escape || reNoMatch).source +
                "|" +
                interpolate.source +
                "|" +
                (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                  .source +
                "|" +
                (options.evaluate || reNoMatch).source +
                "|$",
                "g"
              );

              // Use a sourceURL for easier debugging.
              // The sourceURL gets injected into the source that's eval-ed, so be careful
              // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
              // and escape the comment, thus injecting code that gets evaled.
              var sourceURL =
                "//# sourceURL=" +
                (hasOwnProperty.call(options, "sourceURL")
                  ? (options.sourceURL + "").replace(/\s/g, " ")
                  : "lodash.templateSources[" + ++templateCounter + "]") +
                "\n";

              string.replace(
                reDelimiters,
                function (
                  match,
                  escapeValue,
                  interpolateValue,
                  esTemplateValue,
                  evaluateValue,
                  offset
                ) {
                  interpolateValue || (interpolateValue = esTemplateValue);

                  // Escape characters that can't be included in string literals.
                  source += string
                    .slice(index, offset)
                    .replace(reUnescapedString, escapeStringChar);

                  // Replace delimiters with snippets.
                  if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                  }
                  if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                  }
                  if (interpolateValue) {
                    source +=
                      "' +\n((__t = (" +
                      interpolateValue +
                      ")) == null ? '' : __t) +\n'";
                  }
                  index = offset + match.length;

                  // The JS engine embedded in Adobe products needs `match` returned in
                  // order to produce the correct `offset` value.
                  return match;
                }
              );

              source += "';\n";

              // If `variable` is not specified wrap a with-statement around the generated
              // code to add the data object to the top of the scope chain.
              var variable =
                hasOwnProperty.call(options, "variable") && options.variable;
              if (!variable) {
                source = "with (obj) {\n" + source + "\n}\n";
              }
              // Throw an error if a forbidden character was found in `variable`, to prevent
              // potential command injection attacks.
              else if (reForbiddenIdentifierChars.test(variable)) {
                throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
              }

              // Cleanup code by stripping empty strings.
              source = (
                isEvaluating ? source.replace(reEmptyStringLeading, "") : source
              )
                .replace(reEmptyStringMiddle, "$1")
                .replace(reEmptyStringTrailing, "$1;");

              // Frame code as the function body.
              source =
                "function(" +
                (variable || "obj") +
                ") {\n" +
                (variable ? "" : "obj || (obj = {});\n") +
                "var __t, __p = ''" +
                (isEscaping ? ", __e = _.escape" : "") +
                (isEvaluating
                  ? ", __j = Array.prototype.join;\n" +
                  "function print() { __p += __j.call(arguments, '') }\n"
                  : ";\n") +
                source +
                "return __p\n}";

              var result = attempt(function () {
                return Function(
                  importsKeys,
                  sourceURL + "return " + source
                ).apply(undefined, importsValues);
              });

              // Provide the compiled function's source by its `toString` method or
              // the `source` property as a convenience for inlining compiled templates.
              result.source = source;
              if (isError(result)) {
                throw result;
              }
              return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
              return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
              return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return baseTrim(string);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                chrSymbols = stringToArray(chars),
                start = charsStartIndex(strSymbols, chrSymbols),
                end = charsEndIndex(strSymbols, chrSymbols) + 1;

              return castSlice(strSymbols, start, end).join("");
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.slice(0, trimmedEndIndex(string) + 1);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

              return castSlice(strSymbols, 0, end).join("");
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                start = charsStartIndex(strSymbols, stringToArray(chars));

              return castSlice(strSymbols, start).join("");
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
              var length = DEFAULT_TRUNC_LENGTH,
                omission = DEFAULT_TRUNC_OMISSION;

              if (isObject(options)) {
                var separator =
                  "separator" in options ? options.separator : separator;
                length =
                  "length" in options ? toInteger(options.length) : length;
                omission =
                  "omission" in options
                    ? baseToString(options.omission)
                    : omission;
              }
              string = toString(string);

              var strLength = string.length;
              if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
              }
              if (length >= strLength) {
                return string;
              }
              var end = length - stringSize(omission);
              if (end < 1) {
                return omission;
              }
              var result = strSymbols
                ? castSlice(strSymbols, 0, end).join("")
                : string.slice(0, end);

              if (separator === undefined) {
                return result + omission;
              }
              if (strSymbols) {
                end += result.length - end;
              }
              if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                  var match,
                    substring = result;

                  if (!separator.global) {
                    separator = RegExp(
                      separator.source,
                      toString(reFlags.exec(separator)) + "g"
                    );
                  }
                  separator.lastIndex = 0;
                  while ((match = separator.exec(substring))) {
                    var newEnd = match.index;
                  }
                  result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
              } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                  result = result.slice(0, index);
                }
              }
              return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
              string = toString(string);
              return string && reHasEscapedHtml.test(string)
                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst("toUpperCase");

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
              string = toString(string);
              pattern = guard ? undefined : pattern;

              if (pattern === undefined) {
                return hasUnicodeWord(string)
                  ? unicodeWords(string)
                  : asciiWords(string);
              }
              return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
              try {
                return apply(func, undefined, args);
              } catch (e) {
                return isError(e) ? e : new Error(e);
              }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
              arrayEach(methodNames, function (key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
              });
              return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
              var length = pairs == null ? 0 : pairs.length,
                toIteratee = getIteratee();

              pairs = !length
                ? []
                : arrayMap(pairs, function (pair) {
                  if (typeof pair[1] != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return [toIteratee(pair[0]), pair[1]];
                });

              return baseRest(function (args) {
                var index = -1;
                while (++index < length) {
                  var pair = pairs[index];
                  if (apply(pair[0], this, args)) {
                    return apply(pair[1], this, args);
                  }
                }
              });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
              return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
              return function () {
                return value;
              };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
              return value == null || value !== value ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
              return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
              return baseIteratee(
                typeof func == "function"
                  ? func
                  : baseClone(func, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
              return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matchesProperty(path, srcValue) {
              return baseMatchesProperty(
                path,
                baseClone(srcValue, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
              return function (object) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
              return function (path) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
              var props = keys(source),
                methodNames = baseFunctions(source, props);

              if (
                options == null &&
                !(isObject(source) && (methodNames.length || !props.length))
              ) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
              }
              var chain =
                !(isObject(options) && "chain" in options) || !!options.chain,
                isFunc = isFunction(object);

              arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                  object.prototype[methodName] = function () {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                      var result = object(this.__wrapped__),
                        actions = (result.__actions__ = copyArray(
                          this.__actions__
                        ));

                      actions.push({
                        func: func,
                        args: arguments,
                        thisArg: object,
                      });
                      result.__chain__ = chainAll;
                      return result;
                    }
                    return func.apply(
                      object,
                      arrayPush([this.value()], arguments)
                    );
                  };
                }
              });

              return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
              if (root._ === this) {
                root._ = oldDash;
              }
              return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
              // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
              n = toInteger(n);
              return baseRest(function (args) {
                return baseNth(args, n);
              });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             *
             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
              return isKey(path)
                ? baseProperty(toKey(path))
                : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
              return function (path) {
                return object == null ? undefined : baseGet(object, path);
              };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
              return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
              return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
              return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
              return "";
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
              return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
              n = toInteger(n);
              if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
              }
              var index = MAX_ARRAY_LENGTH,
                length = nativeMin(n, MAX_ARRAY_LENGTH);

              iteratee = getIteratee(iteratee);
              n -= MAX_ARRAY_LENGTH;

              var result = baseTimes(length, iteratee);
              while (++index < n) {
                iteratee(index);
              }
              return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
              if (isArray(value)) {
                return arrayMap(value, toKey);
              }
              return isSymbol(value)
                ? [value]
                : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
              var id = ++idCounter;
              return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
              return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound("ceil");

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
              return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound("floor");

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseGt)
                : undefined;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                : undefined;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
              return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
              return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseLt)
                : undefined;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                : undefined;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (
              multiplier,
              multiplicand
            ) {
              return multiplier * multiplicand;
            },
              1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound("round");

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
              return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
              return array && array.length ? baseSum(array, identity) : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
              return array && array.length
                ? baseSum(array, getIteratee(iteratee, 2))
                : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(
              lodash,
              (function () {
                var source = {};
                baseForOwn(lodash, function (func, methodName) {
                  if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                  }
                });
                return source;
              })(),
              { chain: false }
            );

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(
              [
                "bind",
                "bindKey",
                "curry",
                "curryRight",
                "partial",
                "partialRight",
              ],
              function (methodName) {
                lodash[methodName].placeholder = lodash;
              }
            );

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(["drop", "take"], function (methodName, index) {
              LazyWrapper.prototype[methodName] = function (n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                var result =
                  this.__filtered__ && !index
                    ? new LazyWrapper(this)
                    : this.clone();

                if (result.__filtered__) {
                  result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                  result.__views__.push({
                    size: nativeMin(n, MAX_ARRAY_LENGTH),
                    type: methodName + (result.__dir__ < 0 ? "Right" : ""),
                  });
                }
                return result;
              };

              LazyWrapper.prototype[methodName + "Right"] = function (n) {
                return this.reverse()[methodName](n).reverse();
              };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(
              ["filter", "map", "takeWhile"],
              function (methodName, index) {
                var type = index + 1,
                  isFilter =
                    type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                LazyWrapper.prototype[methodName] = function (iteratee) {
                  var result = this.clone();
                  result.__iteratees__.push({
                    iteratee: getIteratee(iteratee, 3),
                    type: type,
                  });
                  result.__filtered__ = result.__filtered__ || isFilter;
                  return result;
                };
              }
            );

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(["head", "last"], function (methodName, index) {
              var takeName = "take" + (index ? "Right" : "");

              LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
              };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(["initial", "tail"], function (methodName, index) {
              var dropName = "drop" + (index ? "" : "Right");

              LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__
                  ? new LazyWrapper(this)
                  : this[dropName](1);
              };
            });

            LazyWrapper.prototype.compact = function () {
              return this.filter(identity);
            };

            LazyWrapper.prototype.find = function (predicate) {
              return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function (predicate) {
              return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
              if (typeof path == "function") {
                return new LazyWrapper(this);
              }
              return this.map(function (value) {
                return baseInvoke(value, path, args);
              });
            });

            LazyWrapper.prototype.reject = function (predicate) {
              return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function (start, end) {
              start = toInteger(start);

              var result = this;
              if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
              }
              if (start < 0) {
                result = result.takeRight(-start);
              } else if (start) {
                result = result.drop(start);
              }
              if (end !== undefined) {
                end = toInteger(end);
                result =
                  end < 0 ? result.dropRight(-end) : result.take(end - start);
              }
              return result;
            };

            LazyWrapper.prototype.takeRightWhile = function (predicate) {
              return this.reverse().takeWhile(predicate).reverse();
            };

            LazyWrapper.prototype.toArray = function () {
              return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                methodName
              ),
                isTaker = /^(?:head|last)$/.test(methodName),
                lodashFunc =
                  lodash[
                  isTaker
                    ? "take" + (methodName == "last" ? "Right" : "")
                    : methodName
                  ],
                retUnwrapped = isTaker || /^find/.test(methodName);

              if (!lodashFunc) {
                return;
              }
              lodash.prototype[methodName] = function () {
                var value = this.__wrapped__,
                  args = isTaker ? [1] : arguments,
                  isLazy = value instanceof LazyWrapper,
                  iteratee = args[0],
                  useLazy = isLazy || isArray(value);

                var interceptor = function (value) {
                  var result = lodashFunc.apply(
                    lodash,
                    arrayPush([value], args)
                  );
                  return isTaker && chainAll ? result[0] : result;
                };

                if (
                  useLazy &&
                  checkIteratee &&
                  typeof iteratee == "function" &&
                  iteratee.length != 1
                ) {
                  // Avoid lazy use if the iteratee has a "length" value other than `1`.
                  isLazy = useLazy = false;
                }
                var chainAll = this.__chain__,
                  isHybrid = !!this.__actions__.length,
                  isUnwrapped = retUnwrapped && !chainAll,
                  onlyLazy = isLazy && !isHybrid;

                if (!retUnwrapped && useLazy) {
                  value = onlyLazy ? value : new LazyWrapper(this);
                  var result = func.apply(value, args);
                  result.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined,
                  });
                  return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                  return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped
                  ? isTaker
                    ? result.value()[0]
                    : result.value()
                  : result;
              };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(
              ["pop", "push", "shift", "sort", "splice", "unshift"],
              function (methodName) {
                var func = arrayProto[methodName],
                  chainName = /^(?:push|sort|unshift)$/.test(methodName)
                    ? "tap"
                    : "thru",
                  retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                lodash.prototype[methodName] = function () {
                  var args = arguments;
                  if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                  }
                  return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                  });
                };
              }
            );

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var lodashFunc = lodash[methodName];
              if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) {
                  realNames[key] = [];
                }
                realNames[key].push({ name: methodName, func: lodashFunc });
              }
            });

            realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
              {
                name: "wrapper",
                func: undefined,
              },
            ];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON =
              lodash.prototype.valueOf =
              lodash.prototype.value =
              wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
              lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
          };

          /*--------------------------------------------------------------------------*/

          // Export lodash.
          var _ = runInContext();

          // Some AMD build optimizers, like r.js, check for condition patterns like:
          if (true) {
            // Expose Lodash on the global object to prevent errors when Lodash is
            // loaded by a script tag in the presence of an AMD loader.
            // See http://requirejs.org/docs/errors.html#mismatch for more details.
            // Use `_.noConflict` to remove Lodash from the global object.
            root._ = _;

            // Define as an anonymous module so, through path mapping, it can be
            // referenced as the "underscore" module.
            !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return _;
            }.call(exports, __webpack_require__, exports, module)),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
          // Check for `exports` after `define` in case a build optimizer adds it.
          else {
          }
        }).call(this);

        /***/
      },

    /***/ "./resources/sass/app.scss":
      /*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        // extracted by mini-css-extract-plugin

        /***/
      },

    /***/ "./node_modules/popper.js/dist/esm/popper.js":
      /*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /**!
         * @fileOverview Kickass library to create and place poppers near their reference elements.
         * @version 1.16.1
         * @license
         * Copyright (c) 2016 Federico Zivolo and contributors
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in all
         * copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         * SOFTWARE.
         */
        var isBrowser =
          typeof window !== "undefined" &&
          typeof document !== "undefined" &&
          typeof navigator !== "undefined";

        var timeoutDuration = (function () {
          var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
          for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
            if (
              isBrowser &&
              navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0
            ) {
              return 1;
            }
          }
          return 0;
        })();

        function microtaskDebounce(fn) {
          var called = false;
          return function () {
            if (called) {
              return;
            }
            called = true;
            window.Promise.resolve().then(function () {
              called = false;
              fn();
            });
          };
        }

        function taskDebounce(fn) {
          var scheduled = false;
          return function () {
            if (!scheduled) {
              scheduled = true;
              setTimeout(function () {
                scheduled = false;
                fn();
              }, timeoutDuration);
            }
          };
        }

        var supportsMicroTasks = isBrowser && window.Promise;

        /**
         * Create a debounced version of a method, that's asynchronously deferred
         * but called in the minimum time possible.
         *
         * @method
         * @memberof Popper.Utils
         * @argument {Function} fn
         * @returns {Function}
         */
        var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

        /**
         * Check if the given variable is a function
         * @method
         * @memberof Popper.Utils
         * @argument {Any} functionToCheck - variable to check
         * @returns {Boolean} answer to: is a function?
         */
        function isFunction(functionToCheck) {
          var getType = {};
          return (
            functionToCheck &&
            getType.toString.call(functionToCheck) === "[object Function]"
          );
        }

        /**
         * Get CSS computed property of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Eement} element
         * @argument {String} property
         */
        function getStyleComputedProperty(element, property) {
          if (element.nodeType !== 1) {
            return [];
          }
          // NOTE: 1 DOM access here
          var window = element.ownerDocument.defaultView;
          var css = window.getComputedStyle(element, null);
          return property ? css[property] : css;
        }

        /**
         * Returns the parentNode or the host of the element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} parent
         */
        function getParentNode(element) {
          if (element.nodeName === "HTML") {
            return element;
          }
          return element.parentNode || element.host;
        }

        /**
         * Returns the scrolling parent of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} scroll parent
         */
        function getScrollParent(element) {
          // Return body, `getScroll` will take care to get the correct `scrollTop` from it
          if (!element) {
            return document.body;
          }

          switch (element.nodeName) {
            case "HTML":
            case "BODY":
              return element.ownerDocument.body;
            case "#document":
              return element.body;
          }

          // Firefox want us to check `-x` and `-y` variations as well

          var _getStyleComputedProp = getStyleComputedProperty(element),
            overflow = _getStyleComputedProp.overflow,
            overflowX = _getStyleComputedProp.overflowX,
            overflowY = _getStyleComputedProp.overflowY;

          if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
          }

          return getScrollParent(getParentNode(element));
        }

        /**
         * Returns the reference node of the reference object, or the reference object itself.
         * @method
         * @memberof Popper.Utils
         * @param {Element|Object} reference - the reference element (the popper will be relative to this)
         * @returns {Element} parent
         */
        function getReferenceNode(reference) {
          return reference && reference.referenceNode
            ? reference.referenceNode
            : reference;
        }

        var isIE11 =
          isBrowser && !!(window.MSInputMethodContext && document.documentMode);
        var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

        /**
         * Determines if the browser is Internet Explorer
         * @method
         * @memberof Popper.Utils
         * @param {Number} version to check
         * @returns {Boolean} isIE
         */
        function isIE(version) {
          if (version === 11) {
            return isIE11;
          }
          if (version === 10) {
            return isIE10;
          }
          return isIE11 || isIE10;
        }

        /**
         * Returns the offset parent of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} offset parent
         */
        function getOffsetParent(element) {
          if (!element) {
            return document.documentElement;
          }

          var noOffsetParent = isIE(10) ? document.body : null;

          // NOTE: 1 DOM access here
          var offsetParent = element.offsetParent || null;
          // Skip hidden elements which don't have an offsetParent
          while (
            offsetParent === noOffsetParent &&
            element.nextElementSibling
          ) {
            offsetParent = (element = element.nextElementSibling).offsetParent;
          }

          var nodeName = offsetParent && offsetParent.nodeName;

          if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
            return element
              ? element.ownerDocument.documentElement
              : document.documentElement;
          }

          // .offsetParent will return the closest TH, TD or TABLE in case
          // no offsetParent is present, I hate this job...
          if (
            ["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 &&
            getStyleComputedProperty(offsetParent, "position") === "static"
          ) {
            return getOffsetParent(offsetParent);
          }

          return offsetParent;
        }

        function isOffsetContainer(element) {
          var nodeName = element.nodeName;

          if (nodeName === "BODY") {
            return false;
          }
          return (
            nodeName === "HTML" ||
            getOffsetParent(element.firstElementChild) === element
          );
        }

        /**
         * Finds the root node (document, shadowDOM root) of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} node
         * @returns {Element} root node
         */
        function getRoot(node) {
          if (node.parentNode !== null) {
            return getRoot(node.parentNode);
          }

          return node;
        }

        /**
         * Finds the offset parent common to the two provided nodes
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element1
         * @argument {Element} element2
         * @returns {Element} common offset parent
         */
        function findCommonOffsetParent(element1, element2) {
          // This check is needed to avoid errors in case one of the elements isn't defined for any reason
          if (
            !element1 ||
            !element1.nodeType ||
            !element2 ||
            !element2.nodeType
          ) {
            return document.documentElement;
          }

          // Here we make sure to give as "start" the element that comes first in the DOM
          var order =
            element1.compareDocumentPosition(element2) &
            Node.DOCUMENT_POSITION_FOLLOWING;
          var start = order ? element1 : element2;
          var end = order ? element2 : element1;

          // Get common ancestor container
          var range = document.createRange();
          range.setStart(start, 0);
          range.setEnd(end, 0);
          var commonAncestorContainer = range.commonAncestorContainer;

          // Both nodes are inside #document

          if (
            (element1 !== commonAncestorContainer &&
              element2 !== commonAncestorContainer) ||
            start.contains(end)
          ) {
            if (isOffsetContainer(commonAncestorContainer)) {
              return commonAncestorContainer;
            }

            return getOffsetParent(commonAncestorContainer);
          }

          // one of the nodes is inside shadowDOM, find which one
          var element1root = getRoot(element1);
          if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
          } else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
          }
        }

        /**
         * Gets the scroll value of the given element in the given side (top and left)
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @argument {String} side `top` or `left`
         * @returns {number} amount of scrolled pixels
         */
        function getScroll(element) {
          var side =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "top";

          var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
          var nodeName = element.nodeName;

          if (nodeName === "BODY" || nodeName === "HTML") {
            var html = element.ownerDocument.documentElement;
            var scrollingElement =
              element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
          }

          return element[upperSide];
        }

        /*
         * Sum or subtract the element scroll values (left and top) from a given rect object
         * @method
         * @memberof Popper.Utils
         * @param {Object} rect - Rect object you want to change
         * @param {HTMLElement} element - The element from the function reads the scroll values
         * @param {Boolean} subtract - set to true if you want to subtract the scroll values
         * @return {Object} rect - The modifier rect object
         */
        function includeScroll(rect, element) {
          var subtract =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;

          var scrollTop = getScroll(element, "top");
          var scrollLeft = getScroll(element, "left");
          var modifier = subtract ? -1 : 1;
          rect.top += scrollTop * modifier;
          rect.bottom += scrollTop * modifier;
          rect.left += scrollLeft * modifier;
          rect.right += scrollLeft * modifier;
          return rect;
        }

        /*
         * Helper to detect borders of a given element
         * @method
         * @memberof Popper.Utils
         * @param {CSSStyleDeclaration} styles
         * Result of `getStyleComputedProperty` on the given element
         * @param {String} axis - `x` or `y`
         * @return {number} borders - The borders size of the given axis
         */

        function getBordersSize(styles, axis) {
          var sideA = axis === "x" ? "Left" : "Top";
          var sideB = sideA === "Left" ? "Right" : "Bottom";

          return (
            parseFloat(styles["border" + sideA + "Width"]) +
            parseFloat(styles["border" + sideB + "Width"])
          );
        }

        function getSize(axis, body, html, computedStyle) {
          return Math.max(
            body["offset" + axis],
            body["scroll" + axis],
            html["client" + axis],
            html["offset" + axis],
            html["scroll" + axis],
            isIE(10)
              ? parseInt(html["offset" + axis]) +
              parseInt(
                computedStyle[
                "margin" + (axis === "Height" ? "Top" : "Left")
                ]
              ) +
              parseInt(
                computedStyle[
                "margin" + (axis === "Height" ? "Bottom" : "Right")
                ]
              )
              : 0
          );
        }

        function getWindowSizes(document) {
          var body = document.body;
          var html = document.documentElement;
          var computedStyle = isIE(10) && getComputedStyle(html);

          return {
            height: getSize("Height", body, html, computedStyle),
            width: getSize("Width", body, html, computedStyle),
          };
        }

        var classCallCheck = function (instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };

        var createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var defineProperty = function (obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }

          return obj;
        };

        var _extends =
          Object.assign ||
          function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        /**
         * Given element offsets, generate an output similar to getBoundingClientRect
         * @method
         * @memberof Popper.Utils
         * @argument {Object} offsets
         * @returns {Object} ClientRect like output
         */
        function getClientRect(offsets) {
          return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height,
          });
        }

        /**
         * Get bounding client rect of given element
         * @method
         * @memberof Popper.Utils
         * @param {HTMLElement} element
         * @return {Object} client rect
         */
        function getBoundingClientRect(element) {
          var rect = {};

          // IE10 10 FIX: Please, don't ask, the element isn't
          // considered in DOM in some circumstances...
          // This isn't reproducible in IE10 compatibility mode of IE11
          try {
            if (isIE(10)) {
              rect = element.getBoundingClientRect();
              var scrollTop = getScroll(element, "top");
              var scrollLeft = getScroll(element, "left");
              rect.top += scrollTop;
              rect.left += scrollLeft;
              rect.bottom += scrollTop;
              rect.right += scrollLeft;
            } else {
              rect = element.getBoundingClientRect();
            }
          } catch (e) { }

          var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top,
          };

          // subtract scrollbar size from sizes
          var sizes =
            element.nodeName === "HTML"
              ? getWindowSizes(element.ownerDocument)
              : {};
          var width = sizes.width || element.clientWidth || result.width;
          var height = sizes.height || element.clientHeight || result.height;

          var horizScrollbar = element.offsetWidth - width;
          var vertScrollbar = element.offsetHeight - height;

          // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
          // we make this check conditional for performance reasons
          if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, "x");
            vertScrollbar -= getBordersSize(styles, "y");

            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
          }

          return getClientRect(result);
        }

        function getOffsetRectRelativeToArbitraryNode(children, parent) {
          var fixedPosition =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;

          var isIE10 = isIE(10);
          var isHTML = parent.nodeName === "HTML";
          var childrenRect = getBoundingClientRect(children);
          var parentRect = getBoundingClientRect(parent);
          var scrollParent = getScrollParent(children);

          var styles = getStyleComputedProperty(parent);
          var borderTopWidth = parseFloat(styles.borderTopWidth);
          var borderLeftWidth = parseFloat(styles.borderLeftWidth);

          // In cases where the parent is fixed, we must ignore negative scroll in offset calc
          if (fixedPosition && isHTML) {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
          }
          var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height,
          });
          offsets.marginTop = 0;
          offsets.marginLeft = 0;

          // Subtract margins of documentElement in case it's being used as parent
          // we do this only on HTML because it's the only element that behaves
          // differently when margins are applied to it. The margins are included in
          // the box of the documentElement, in the other cases not.
          if (!isIE10 && isHTML) {
            var marginTop = parseFloat(styles.marginTop);
            var marginLeft = parseFloat(styles.marginLeft);

            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft;

            // Attach marginTop and marginLeft because in some circumstances we may need them
            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
          }

          if (
            isIE10 && !fixedPosition
              ? parent.contains(scrollParent)
              : parent === scrollParent && scrollParent.nodeName !== "BODY"
          ) {
            offsets = includeScroll(offsets, parent);
          }

          return offsets;
        }

        function getViewportOffsetRectRelativeToArtbitraryNode(element) {
          var excludeScroll =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;

          var html = element.ownerDocument.documentElement;
          var relativeOffset = getOffsetRectRelativeToArbitraryNode(
            element,
            html
          );
          var width = Math.max(html.clientWidth, window.innerWidth || 0);
          var height = Math.max(html.clientHeight, window.innerHeight || 0);

          var scrollTop = !excludeScroll ? getScroll(html) : 0;
          var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;

          var offset = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width: width,
            height: height,
          };

          return getClientRect(offset);
        }

        /**
         * Check if the given element is fixed or is inside a fixed parent
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @argument {Element} customContainer
         * @returns {Boolean} answer to "isFixed?"
         */
        function isFixed(element) {
          var nodeName = element.nodeName;
          if (nodeName === "BODY" || nodeName === "HTML") {
            return false;
          }
          if (getStyleComputedProperty(element, "position") === "fixed") {
            return true;
          }
          var parentNode = getParentNode(element);
          if (!parentNode) {
            return false;
          }
          return isFixed(parentNode);
        }

        /**
         * Finds the first parent of an element that has a transformed property defined
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} first transformed parent or documentElement
         */

        function getFixedPositionOffsetParent(element) {
          // This check is needed to avoid errors in case one of the elements isn't defined for any reason
          if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
          }
          var el = element.parentElement;
          while (el && getStyleComputedProperty(el, "transform") === "none") {
            el = el.parentElement;
          }
          return el || document.documentElement;
        }

        /**
         * Computed the boundaries limits and return them
         * @method
         * @memberof Popper.Utils
         * @param {HTMLElement} popper
         * @param {HTMLElement} reference
         * @param {number} padding
         * @param {HTMLElement} boundariesElement - Element used to define the boundaries
         * @param {Boolean} fixedPosition - Is in fixed position mode
         * @returns {Object} Coordinates of the boundaries
         */
        function getBoundaries(popper, reference, padding, boundariesElement) {
          var fixedPosition =
            arguments.length > 4 && arguments[4] !== undefined
              ? arguments[4]
              : false;

          // NOTE: 1 DOM access here

          var boundaries = { top: 0, left: 0 };
          var offsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, getReferenceNode(reference));

          // Handle viewport case
          if (boundariesElement === "viewport") {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(
              offsetParent,
              fixedPosition
            );
          } else {
            // Handle other cases based on DOM element used as boundaries
            var boundariesNode = void 0;
            if (boundariesElement === "scrollParent") {
              boundariesNode = getScrollParent(getParentNode(reference));
              if (boundariesNode.nodeName === "BODY") {
                boundariesNode = popper.ownerDocument.documentElement;
              }
            } else if (boundariesElement === "window") {
              boundariesNode = popper.ownerDocument.documentElement;
            } else {
              boundariesNode = boundariesElement;
            }

            var offsets = getOffsetRectRelativeToArbitraryNode(
              boundariesNode,
              offsetParent,
              fixedPosition
            );

            // In case of HTML, we need a different computation
            if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
              var _getWindowSizes = getWindowSizes(popper.ownerDocument),
                height = _getWindowSizes.height,
                width = _getWindowSizes.width;

              boundaries.top += offsets.top - offsets.marginTop;
              boundaries.bottom = height + offsets.top;
              boundaries.left += offsets.left - offsets.marginLeft;
              boundaries.right = width + offsets.left;
            } else {
              // for all the other DOM elements, this one is good
              boundaries = offsets;
            }
          }

          // Add paddings
          padding = padding || 0;
          var isPaddingNumber = typeof padding === "number";
          boundaries.left += isPaddingNumber ? padding : padding.left || 0;
          boundaries.top += isPaddingNumber ? padding : padding.top || 0;
          boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
          boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

          return boundaries;
        }

        function getArea(_ref) {
          var width = _ref.width,
            height = _ref.height;

          return width * height;
        }

        /**
         * Utility used to transform the `auto` placement to the placement with more
         * available space.
         * @method
         * @memberof Popper.Utils
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function computeAutoPlacement(
          placement,
          refRect,
          popper,
          reference,
          boundariesElement
        ) {
          var padding =
            arguments.length > 5 && arguments[5] !== undefined
              ? arguments[5]
              : 0;

          if (placement.indexOf("auto") === -1) {
            return placement;
          }

          var boundaries = getBoundaries(
            popper,
            reference,
            padding,
            boundariesElement
          );

          var rects = {
            top: {
              width: boundaries.width,
              height: refRect.top - boundaries.top,
            },
            right: {
              width: boundaries.right - refRect.right,
              height: boundaries.height,
            },
            bottom: {
              width: boundaries.width,
              height: boundaries.bottom - refRect.bottom,
            },
            left: {
              width: refRect.left - boundaries.left,
              height: boundaries.height,
            },
          };

          var sortedAreas = Object.keys(rects)
            .map(function (key) {
              return _extends(
                {
                  key: key,
                },
                rects[key],
                {
                  area: getArea(rects[key]),
                }
              );
            })
            .sort(function (a, b) {
              return b.area - a.area;
            });

          var filteredAreas = sortedAreas.filter(function (_ref2) {
            var width = _ref2.width,
              height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
          });

          var computedPlacement =
            filteredAreas.length > 0
              ? filteredAreas[0].key
              : sortedAreas[0].key;

          var variation = placement.split("-")[1];

          return computedPlacement + (variation ? "-" + variation : "");
        }

        /**
         * Get offsets to the reference element
         * @method
         * @memberof Popper.Utils
         * @param {Object} state
         * @param {Element} popper - the popper element
         * @param {Element} reference - the reference element (the popper will be relative to this)
         * @param {Element} fixedPosition - is in fixed position mode
         * @returns {Object} An object containing the offsets which will be applied to the popper
         */
        function getReferenceOffsets(state, popper, reference) {
          var fixedPosition =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : null;

          var commonOffsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, getReferenceNode(reference));
          return getOffsetRectRelativeToArbitraryNode(
            reference,
            commonOffsetParent,
            fixedPosition
          );
        }

        /**
         * Get the outer sizes of the given element (offset size + margins)
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Object} object containing width and height properties
         */
        function getOuterSizes(element) {
          var window = element.ownerDocument.defaultView;
          var styles = window.getComputedStyle(element);
          var x =
            parseFloat(styles.marginTop || 0) +
            parseFloat(styles.marginBottom || 0);
          var y =
            parseFloat(styles.marginLeft || 0) +
            parseFloat(styles.marginRight || 0);
          var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x,
          };
          return result;
        }

        /**
         * Get the opposite placement of the given one
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement
         * @returns {String} flipped placement
         */
        function getOppositePlacement(placement) {
          var hash = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom",
          };
          return placement.replace(
            /left|right|bottom|top/g,
            function (matched) {
              return hash[matched];
            }
          );
        }

        /**
         * Get offsets to the popper
         * @method
         * @memberof Popper.Utils
         * @param {Object} position - CSS position the Popper will get applied
         * @param {HTMLElement} popper - the popper element
         * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
         * @param {String} placement - one of the valid placement options
         * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
         */
        function getPopperOffsets(popper, referenceOffsets, placement) {
          placement = placement.split("-")[0];

          // Get popper node sizes
          var popperRect = getOuterSizes(popper);

          // Add position, width and height to our offsets object
          var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height,
          };

          // depending by the popper placement we have to compute its offsets slightly differently
          var isHoriz = ["right", "left"].indexOf(placement) !== -1;
          var mainSide = isHoriz ? "top" : "left";
          var secondarySide = isHoriz ? "left" : "top";
          var measurement = isHoriz ? "height" : "width";
          var secondaryMeasurement = !isHoriz ? "height" : "width";

          popperOffsets[mainSide] =
            referenceOffsets[mainSide] +
            referenceOffsets[measurement] / 2 -
            popperRect[measurement] / 2;
          if (placement === secondarySide) {
            popperOffsets[secondarySide] =
              referenceOffsets[secondarySide] -
              popperRect[secondaryMeasurement];
          } else {
            popperOffsets[secondarySide] =
              referenceOffsets[getOppositePlacement(secondarySide)];
          }

          return popperOffsets;
        }

        /**
         * Mimics the `find` method of Array
         * @method
         * @memberof Popper.Utils
         * @argument {Array} arr
         * @argument prop
         * @argument value
         * @returns index or -1
         */
        function find(arr, check) {
          // use native find if supported
          if (Array.prototype.find) {
            return arr.find(check);
          }

          // use `filter` to obtain the same behavior of `find`
          return arr.filter(check)[0];
        }

        /**
         * Return the index of the matching object
         * @method
         * @memberof Popper.Utils
         * @argument {Array} arr
         * @argument prop
         * @argument value
         * @returns index or -1
         */
        function findIndex(arr, prop, value) {
          // use native findIndex if supported
          if (Array.prototype.findIndex) {
            return arr.findIndex(function (cur) {
              return cur[prop] === value;
            });
          }

          // use `find` + `indexOf` if `findIndex` isn't supported
          var match = find(arr, function (obj) {
            return obj[prop] === value;
          });
          return arr.indexOf(match);
        }

        /**
         * Loop trough the list of modifiers and run them in order,
         * each of them will then edit the data object.
         * @method
         * @memberof Popper.Utils
         * @param {dataObject} data
         * @param {Array} modifiers
         * @param {String} ends - Optional modifier name used as stopper
         * @returns {dataObject}
         */
        function runModifiers(modifiers, data, ends) {
          var modifiersToRun =
            ends === undefined
              ? modifiers
              : modifiers.slice(0, findIndex(modifiers, "name", ends));

          modifiersToRun.forEach(function (modifier) {
            if (modifier["function"]) {
              // eslint-disable-line dot-notation
              console.warn(
                "`modifier.function` is deprecated, use `modifier.fn`!"
              );
            }
            var fn = modifier["function"] || modifier.fn; // eslint-disable-line dot-notation
            if (modifier.enabled && isFunction(fn)) {
              // Add properties to offsets to make them a complete clientRect object
              // we do this before each modifier to make sure the previous one doesn't
              // mess with these values
              data.offsets.popper = getClientRect(data.offsets.popper);
              data.offsets.reference = getClientRect(data.offsets.reference);

              data = fn(data, modifier);
            }
          });

          return data;
        }

        /**
         * Updates the position of the popper, computing the new offsets and applying
         * the new style.<br />
         * Prefer `scheduleUpdate` over `update` because of performance reasons.
         * @method
         * @memberof Popper
         */
        function update() {
          // if popper is destroyed, don't perform any further update
          if (this.state.isDestroyed) {
            return;
          }

          var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {},
          };

          // compute reference element offsets
          data.offsets.reference = getReferenceOffsets(
            this.state,
            this.popper,
            this.reference,
            this.options.positionFixed
          );

          // compute auto placement, store placement inside the data object,
          // modifiers will be able to edit `placement` if needed
          // and refer to originalPlacement to know the original value
          data.placement = computeAutoPlacement(
            this.options.placement,
            data.offsets.reference,
            this.popper,
            this.reference,
            this.options.modifiers.flip.boundariesElement,
            this.options.modifiers.flip.padding
          );

          // store the computed placement inside `originalPlacement`
          data.originalPlacement = data.placement;

          data.positionFixed = this.options.positionFixed;

          // compute the popper offsets
          data.offsets.popper = getPopperOffsets(
            this.popper,
            data.offsets.reference,
            data.placement
          );

          data.offsets.popper.position = this.options.positionFixed
            ? "fixed"
            : "absolute";

          // run the modifiers
          data = runModifiers(this.modifiers, data);

          // the first `update` will call `onCreate` callback
          // the other ones will call `onUpdate` callback
          if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
          } else {
            this.options.onUpdate(data);
          }
        }

        /**
         * Helper used to know if the given modifier is enabled.
         * @method
         * @memberof Popper.Utils
         * @returns {Boolean}
         */
        function isModifierEnabled(modifiers, modifierName) {
          return modifiers.some(function (_ref) {
            var name = _ref.name,
              enabled = _ref.enabled;
            return enabled && name === modifierName;
          });
        }

        /**
         * Get the prefixed supported property name
         * @method
         * @memberof Popper.Utils
         * @argument {String} property (camelCase)
         * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
         */
        function getSupportedPropertyName(property) {
          var prefixes = [false, "ms", "Webkit", "Moz", "O"];
          var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

          for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? "" + prefix + upperProp : property;
            if (typeof document.body.style[toCheck] !== "undefined") {
              return toCheck;
            }
          }
          return null;
        }

        /**
         * Destroys the popper.
         * @method
         * @memberof Popper
         */
        function destroy() {
          this.state.isDestroyed = true;

          // touch DOM only if `applyStyle` modifier is enabled
          if (isModifierEnabled(this.modifiers, "applyStyle")) {
            this.popper.removeAttribute("x-placement");
            this.popper.style.position = "";
            this.popper.style.top = "";
            this.popper.style.left = "";
            this.popper.style.right = "";
            this.popper.style.bottom = "";
            this.popper.style.willChange = "";
            this.popper.style[getSupportedPropertyName("transform")] = "";
          }

          this.disableEventListeners();

          // remove the popper if user explicitly asked for the deletion on destroy
          // do not use `remove` because IE11 doesn't support it
          if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
          }
          return this;
        }

        /**
         * Get the window associated with the element
         * @argument {Element} element
         * @returns {Window}
         */
        function getWindow(element) {
          var ownerDocument = element.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView : window;
        }

        function attachToScrollParents(
          scrollParent,
          event,
          callback,
          scrollParents
        ) {
          var isBody = scrollParent.nodeName === "BODY";
          var target = isBody
            ? scrollParent.ownerDocument.defaultView
            : scrollParent;
          target.addEventListener(event, callback, { passive: true });

          if (!isBody) {
            attachToScrollParents(
              getScrollParent(target.parentNode),
              event,
              callback,
              scrollParents
            );
          }
          scrollParents.push(target);
        }

        /**
         * Setup needed event listeners used to update the popper position
         * @method
         * @memberof Popper.Utils
         * @private
         */
        function setupEventListeners(reference, options, state, updateBound) {
          // Resize event listener on window
          state.updateBound = updateBound;
          getWindow(reference).addEventListener("resize", state.updateBound, {
            passive: true,
          });

          // Scroll event listener on scroll parents
          var scrollElement = getScrollParent(reference);
          attachToScrollParents(
            scrollElement,
            "scroll",
            state.updateBound,
            state.scrollParents
          );
          state.scrollElement = scrollElement;
          state.eventsEnabled = true;

          return state;
        }

        /**
         * It will add resize/scroll events and start recalculating
         * position of the popper element when they are triggered.
         * @method
         * @memberof Popper
         */
        function enableEventListeners() {
          if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(
              this.reference,
              this.options,
              this.state,
              this.scheduleUpdate
            );
          }
        }

        /**
         * Remove event listeners used to update the popper position
         * @method
         * @memberof Popper.Utils
         * @private
         */
        function removeEventListeners(reference, state) {
          // Remove resize event listener on window
          getWindow(reference).removeEventListener("resize", state.updateBound);

          // Remove scroll event listener on scroll parents
          state.scrollParents.forEach(function (target) {
            target.removeEventListener("scroll", state.updateBound);
          });

          // Reset state
          state.updateBound = null;
          state.scrollParents = [];
          state.scrollElement = null;
          state.eventsEnabled = false;
          return state;
        }

        /**
         * It will remove resize/scroll events and won't recalculate popper position
         * when they are triggered. It also won't trigger `onUpdate` callback anymore,
         * unless you call `update` method manually.
         * @method
         * @memberof Popper
         */
        function disableEventListeners() {
          if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
          }
        }

        /**
         * Tells if a given input is a number
         * @method
         * @memberof Popper.Utils
         * @param {*} input to check
         * @return {Boolean}
         */
        function isNumeric(n) {
          return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
        }

        /**
         * Set the style to the given popper
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element - Element to apply the style to
         * @argument {Object} styles
         * Object with a list of properties and values which will be applied to the element
         */
        function setStyles(element, styles) {
          Object.keys(styles).forEach(function (prop) {
            var unit = "";
            // add unit if the value is numeric and is one of the following
            if (
              ["width", "height", "top", "right", "bottom", "left"].indexOf(
                prop
              ) !== -1 &&
              isNumeric(styles[prop])
            ) {
              unit = "px";
            }
            element.style[prop] = styles[prop] + unit;
          });
        }

        /**
         * Set the attributes to the given popper
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element - Element to apply the attributes to
         * @argument {Object} styles
         * Object with a list of properties and values which will be applied to the element
         */
        function setAttributes(element, attributes) {
          Object.keys(attributes).forEach(function (prop) {
            var value = attributes[prop];
            if (value !== false) {
              element.setAttribute(prop, attributes[prop]);
            } else {
              element.removeAttribute(prop);
            }
          });
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} data.styles - List of style properties - values to apply to popper element
         * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The same data object
         */
        function applyStyle(data) {
          // any property present in `data.styles` will be applied to the popper,
          // in this way we can make the 3rd party modifiers add custom styles to it
          // Be aware, modifiers could override the properties defined in the previous
          // lines of this modifier!
          setStyles(data.instance.popper, data.styles);

          // any property present in `data.attributes` will be applied to the popper,
          // they will be set as HTML attributes of the element
          setAttributes(data.instance.popper, data.attributes);

          // if arrowElement is defined and arrowStyles has some properties
          if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
          }

          return data;
        }

        /**
         * Set the x-placement attribute before everything else because it could be used
         * to add margins to the popper margins needs to be calculated to get the
         * correct popper offsets.
         * @method
         * @memberof Popper.modifiers
         * @param {HTMLElement} reference - The reference element used to position the popper
         * @param {HTMLElement} popper - The HTML element used as popper
         * @param {Object} options - Popper.js options
         */
        function applyStyleOnLoad(
          reference,
          popper,
          options,
          modifierOptions,
          state
        ) {
          // compute reference element offsets
          var referenceOffsets = getReferenceOffsets(
            state,
            popper,
            reference,
            options.positionFixed
          );

          // compute auto placement, store placement inside the data object,
          // modifiers will be able to edit `placement` if needed
          // and refer to originalPlacement to know the original value
          var placement = computeAutoPlacement(
            options.placement,
            referenceOffsets,
            popper,
            reference,
            options.modifiers.flip.boundariesElement,
            options.modifiers.flip.padding
          );

          popper.setAttribute("x-placement", placement);

          // Apply `position` to popper before anything else because
          // without the position applied we can't guarantee correct computations
          setStyles(popper, {
            position: options.positionFixed ? "fixed" : "absolute",
          });

          return options;
        }

        /**
         * @function
         * @memberof Popper.Utils
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Boolean} shouldRound - If the offsets should be rounded at all
         * @returns {Object} The popper's position offsets rounded
         *
         * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
         * good as it can be within reason.
         * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
         *
         * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
         * as well on High DPI screens).
         *
         * Firefox prefers no rounding for positioning and does not have blurriness on
         * high DPI screens.
         *
         * Only horizontal placement and left/right values need to be considered.
         */
        function getRoundedOffsets(data, shouldRound) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var round = Math.round,
            floor = Math.floor;

          var noRound = function noRound(v) {
            return v;
          };

          var referenceWidth = round(reference.width);
          var popperWidth = round(popper.width);

          var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
          var isVariation = data.placement.indexOf("-") !== -1;
          var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
          var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

          var horizontalToInteger = !shouldRound
            ? noRound
            : isVertical || isVariation || sameWidthParity
              ? round
              : floor;
          var verticalToInteger = !shouldRound ? noRound : round;

          return {
            left: horizontalToInteger(
              bothOddWidth && !isVariation && shouldRound
                ? popper.left - 1
                : popper.left
            ),
            top: verticalToInteger(popper.top),
            bottom: verticalToInteger(popper.bottom),
            right: horizontalToInteger(popper.right),
          };
        }

        var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function computeStyle(data, options) {
          var x = options.x,
            y = options.y;
          var popper = data.offsets.popper;

          // Remove this legacy support in Popper.js v2

          var legacyGpuAccelerationOption = find(
            data.instance.modifiers,
            function (modifier) {
              return modifier.name === "applyStyle";
            }
          ).gpuAcceleration;
          if (legacyGpuAccelerationOption !== undefined) {
            console.warn(
              "WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!"
            );
          }
          var gpuAcceleration =
            legacyGpuAccelerationOption !== undefined
              ? legacyGpuAccelerationOption
              : options.gpuAcceleration;

          var offsetParent = getOffsetParent(data.instance.popper);
          var offsetParentRect = getBoundingClientRect(offsetParent);

          // Styles
          var styles = {
            position: popper.position,
          };

          var offsets = getRoundedOffsets(
            data,
            window.devicePixelRatio < 2 || !isFirefox
          );

          var sideA = x === "bottom" ? "top" : "bottom";
          var sideB = y === "right" ? "left" : "right";

          // if gpuAcceleration is set to `true` and transform is supported,
          //  we use `translate3d` to apply the position to the popper we
          // automatically use the supported prefixed version if needed
          var prefixedProperty = getSupportedPropertyName("transform");

          // now, let's make a step back and look at this code closely (wtf?)
          // If the content of the popper grows once it's been positioned, it
          // may happen that the popper gets misplaced because of the new content
          // overflowing its reference element
          // To avoid this problem, we provide two options (x and y), which allow
          // the consumer to define the offset origin.
          // If we position a popper on top of a reference element, we can set
          // `x` to `top` to make the popper grow towards its top instead of
          // its bottom.
          var left = void 0,
            top = void 0;
          if (sideA === "bottom") {
            // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
            // and not the bottom of the html element
            if (offsetParent.nodeName === "HTML") {
              top = -offsetParent.clientHeight + offsets.bottom;
            } else {
              top = -offsetParentRect.height + offsets.bottom;
            }
          } else {
            top = offsets.top;
          }
          if (sideB === "right") {
            if (offsetParent.nodeName === "HTML") {
              left = -offsetParent.clientWidth + offsets.right;
            } else {
              left = -offsetParentRect.width + offsets.right;
            }
          } else {
            left = offsets.left;
          }
          if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] =
              "translate3d(" + left + "px, " + top + "px, 0)";
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = "transform";
          } else {
            // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
            var invertTop = sideA === "bottom" ? -1 : 1;
            var invertLeft = sideB === "right" ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ", " + sideB;
          }

          // Attributes
          var attributes = {
            "x-placement": data.placement,
          };

          // Update `data` attributes, styles and arrowStyles
          data.attributes = _extends({}, attributes, data.attributes);
          data.styles = _extends({}, styles, data.styles);
          data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

          return data;
        }

        /**
         * Helper used to know if the given modifier depends from another one.<br />
         * It checks if the needed modifier is listed and enabled.
         * @method
         * @memberof Popper.Utils
         * @param {Array} modifiers - list of modifiers
         * @param {String} requestingName - name of requesting modifier
         * @param {String} requestedName - name of requested modifier
         * @returns {Boolean}
         */
        function isModifierRequired(modifiers, requestingName, requestedName) {
          var requesting = find(modifiers, function (_ref) {
            var name = _ref.name;
            return name === requestingName;
          });

          var isRequired =
            !!requesting &&
            modifiers.some(function (modifier) {
              return (
                modifier.name === requestedName &&
                modifier.enabled &&
                modifier.order < requesting.order
              );
            });

          if (!isRequired) {
            var _requesting = "`" + requestingName + "`";
            var requested = "`" + requestedName + "`";
            console.warn(
              requested +
              " modifier is required by " +
              _requesting +
              " modifier in order to work, be sure to include it before " +
              _requesting +
              "!"
            );
          }
          return isRequired;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function arrow(data, options) {
          var _data$offsets$arrow;

          // arrow depends on keepTogether in order to work
          if (
            !isModifierRequired(
              data.instance.modifiers,
              "arrow",
              "keepTogether"
            )
          ) {
            return data;
          }

          var arrowElement = options.element;

          // if arrowElement is a string, suppose it's a CSS selector
          if (typeof arrowElement === "string") {
            arrowElement = data.instance.popper.querySelector(arrowElement);

            // if arrowElement is not found, don't run the modifier
            if (!arrowElement) {
              return data;
            }
          } else {
            // if the arrowElement isn't a query selector we must check that the
            // provided DOM node is child of its popper node
            if (!data.instance.popper.contains(arrowElement)) {
              console.warn(
                "WARNING: `arrow.element` must be child of its popper element!"
              );
              return data;
            }
          }

          var placement = data.placement.split("-")[0];
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var isVertical = ["left", "right"].indexOf(placement) !== -1;

          var len = isVertical ? "height" : "width";
          var sideCapitalized = isVertical ? "Top" : "Left";
          var side = sideCapitalized.toLowerCase();
          var altSide = isVertical ? "left" : "top";
          var opSide = isVertical ? "bottom" : "right";
          var arrowElementSize = getOuterSizes(arrowElement)[len];

          //
          // extends keepTogether behavior making sure the popper and its
          // reference have enough pixels in conjunction
          //

          // top/left side
          if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -=
              popper[side] - (reference[opSide] - arrowElementSize);
          }
          // bottom/right side
          if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] +=
              reference[side] + arrowElementSize - popper[opSide];
          }
          data.offsets.popper = getClientRect(data.offsets.popper);

          // compute center of the popper
          var center =
            reference[side] + reference[len] / 2 - arrowElementSize / 2;

          // Compute the sideValue using the updated popper offsets
          // take popper margin in account because we don't have this info available
          var css = getStyleComputedProperty(data.instance.popper);
          var popperMarginSide = parseFloat(css["margin" + sideCapitalized]);
          var popperBorderSide = parseFloat(
            css["border" + sideCapitalized + "Width"]
          );
          var sideValue =
            center -
            data.offsets.popper[side] -
            popperMarginSide -
            popperBorderSide;

          // prevent arrowElement from being placed not contiguously to its popper
          sideValue = Math.max(
            Math.min(popper[len] - arrowElementSize, sideValue),
            0
          );

          data.arrowElement = arrowElement;
          data.offsets.arrow =
            ((_data$offsets$arrow = {}),
              defineProperty(_data$offsets$arrow, side, Math.round(sideValue)),
              defineProperty(_data$offsets$arrow, altSide, ""),
              _data$offsets$arrow);

          return data;
        }

        /**
         * Get the opposite placement variation of the given one
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement variation
         * @returns {String} flipped placement variation
         */
        function getOppositeVariation(variation) {
          if (variation === "end") {
            return "start";
          } else if (variation === "start") {
            return "end";
          }
          return variation;
        }

        /**
         * List of accepted placements to use as values of the `placement` option.<br />
         * Valid placements are:
         * - `auto`
         * - `top`
         * - `right`
         * - `bottom`
         * - `left`
         *
         * Each placement can have a variation from this list:
         * - `-start`
         * - `-end`
         *
         * Variations are interpreted easily if you think of them as the left to right
         * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
         * is right.<br />
         * Vertically (`left` and `right`), `start` is top and `end` is bottom.
         *
         * Some valid examples are:
         * - `top-end` (on top of reference, right aligned)
         * - `right-start` (on right of reference, top aligned)
         * - `bottom` (on bottom, centered)
         * - `auto-end` (on the side with more space available, alignment depends by placement)
         *
         * @static
         * @type {Array}
         * @enum {String}
         * @readonly
         * @method placements
         * @memberof Popper
         */
        var placements = [
          "auto-start",
          "auto",
          "auto-end",
          "top-start",
          "top",
          "top-end",
          "right-start",
          "right",
          "right-end",
          "bottom-end",
          "bottom",
          "bottom-start",
          "left-end",
          "left",
          "left-start",
        ];

        // Get rid of `auto` `auto-start` and `auto-end`
        var validPlacements = placements.slice(3);

        /**
         * Given an initial placement, returns all the subsequent placements
         * clockwise (or counter-clockwise).
         *
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement - A valid placement (it accepts variations)
         * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
         * @returns {Array} placements including their variations
         */
        function clockwise(placement) {
          var counter =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;

          var index = validPlacements.indexOf(placement);
          var arr = validPlacements
            .slice(index + 1)
            .concat(validPlacements.slice(0, index));
          return counter ? arr.reverse() : arr;
        }

        var BEHAVIORS = {
          FLIP: "flip",
          CLOCKWISE: "clockwise",
          COUNTERCLOCKWISE: "counterclockwise",
        };

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function flip(data, options) {
          // if `inner` modifier is enabled, we can't use the `flip` modifier
          if (isModifierEnabled(data.instance.modifiers, "inner")) {
            return data;
          }

          if (data.flipped && data.placement === data.originalPlacement) {
            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
            return data;
          }

          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            options.boundariesElement,
            data.positionFixed
          );

          var placement = data.placement.split("-")[0];
          var placementOpposite = getOppositePlacement(placement);
          var variation = data.placement.split("-")[1] || "";

          var flipOrder = [];

          switch (options.behavior) {
            case BEHAVIORS.FLIP:
              flipOrder = [placement, placementOpposite];
              break;
            case BEHAVIORS.CLOCKWISE:
              flipOrder = clockwise(placement);
              break;
            case BEHAVIORS.COUNTERCLOCKWISE:
              flipOrder = clockwise(placement, true);
              break;
            default:
              flipOrder = options.behavior;
          }

          flipOrder.forEach(function (step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
              return data;
            }

            placement = data.placement.split("-")[0];
            placementOpposite = getOppositePlacement(placement);

            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference;

            // using floor because the reference offsets may contain decimals we are not going to consider here
            var floor = Math.floor;
            var overlapsRef =
              (placement === "left" &&
                floor(popperOffsets.right) > floor(refOffsets.left)) ||
              (placement === "right" &&
                floor(popperOffsets.left) < floor(refOffsets.right)) ||
              (placement === "top" &&
                floor(popperOffsets.bottom) > floor(refOffsets.top)) ||
              (placement === "bottom" &&
                floor(popperOffsets.top) < floor(refOffsets.bottom));

            var overflowsLeft =
              floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight =
              floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom =
              floor(popperOffsets.bottom) > floor(boundaries.bottom);

            var overflowsBoundaries =
              (placement === "left" && overflowsLeft) ||
              (placement === "right" && overflowsRight) ||
              (placement === "top" && overflowsTop) ||
              (placement === "bottom" && overflowsBottom);

            // flip the variation if required
            var isVertical = ["top", "bottom"].indexOf(placement) !== -1;

            // flips variation if reference element overflows boundaries
            var flippedVariationByRef =
              !!options.flipVariations &&
              ((isVertical && variation === "start" && overflowsLeft) ||
                (isVertical && variation === "end" && overflowsRight) ||
                (!isVertical && variation === "start" && overflowsTop) ||
                (!isVertical && variation === "end" && overflowsBottom));

            // flips variation if popper content overflows boundaries
            var flippedVariationByContent =
              !!options.flipVariationsByContent &&
              ((isVertical && variation === "start" && overflowsRight) ||
                (isVertical && variation === "end" && overflowsLeft) ||
                (!isVertical && variation === "start" && overflowsBottom) ||
                (!isVertical && variation === "end" && overflowsTop));

            var flippedVariation =
              flippedVariationByRef || flippedVariationByContent;

            if (overlapsRef || overflowsBoundaries || flippedVariation) {
              // this boolean to detect any flip loop
              data.flipped = true;

              if (overlapsRef || overflowsBoundaries) {
                placement = flipOrder[index + 1];
              }

              if (flippedVariation) {
                variation = getOppositeVariation(variation);
              }

              data.placement = placement + (variation ? "-" + variation : "");

              // this object contains `position`, we want to preserve it along with
              // any additional property we may add in the future
              data.offsets.popper = _extends(
                {},
                data.offsets.popper,
                getPopperOffsets(
                  data.instance.popper,
                  data.offsets.reference,
                  data.placement
                )
              );

              data = runModifiers(data.instance.modifiers, data, "flip");
            }
          });
          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function keepTogether(data) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var placement = data.placement.split("-")[0];
          var floor = Math.floor;
          var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
          var side = isVertical ? "right" : "bottom";
          var opSide = isVertical ? "left" : "top";
          var measurement = isVertical ? "width" : "height";

          if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] =
              floor(reference[opSide]) - popper[measurement];
          }
          if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
          }

          return data;
        }

        /**
         * Converts a string containing value + unit into a px value number
         * @function
         * @memberof {modifiers~offset}
         * @private
         * @argument {String} str - Value + unit string
         * @argument {String} measurement - `height` or `width`
         * @argument {Object} popperOffsets
         * @argument {Object} referenceOffsets
         * @returns {Number|String}
         * Value in pixels, or original string if no values were extracted
         */
        function toValue(str, measurement, popperOffsets, referenceOffsets) {
          // separate value from unit
          var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
          var value = +split[1];
          var unit = split[2];

          // If it's not a number it's an operator, I guess
          if (!value) {
            return str;
          }

          if (unit.indexOf("%") === 0) {
            var element = void 0;
            switch (unit) {
              case "%p":
                element = popperOffsets;
                break;
              case "%":
              case "%r":
              default:
                element = referenceOffsets;
            }

            var rect = getClientRect(element);
            return (rect[measurement] / 100) * value;
          } else if (unit === "vh" || unit === "vw") {
            // if is a vh or vw, we calculate the size based on the viewport
            var size = void 0;
            if (unit === "vh") {
              size = Math.max(
                document.documentElement.clientHeight,
                window.innerHeight || 0
              );
            } else {
              size = Math.max(
                document.documentElement.clientWidth,
                window.innerWidth || 0
              );
            }
            return (size / 100) * value;
          } else {
            // if is an explicit pixel unit, we get rid of the unit and keep the value
            // if is an implicit unit, it's px, and we return just the value
            return value;
          }
        }

        /**
         * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
         * @function
         * @memberof {modifiers~offset}
         * @private
         * @argument {String} offset
         * @argument {Object} popperOffsets
         * @argument {Object} referenceOffsets
         * @argument {String} basePlacement
         * @returns {Array} a two cells array with x and y offsets in numbers
         */
        function parseOffset(
          offset,
          popperOffsets,
          referenceOffsets,
          basePlacement
        ) {
          var offsets = [0, 0];

          // Use height if placement is left or right and index is 0 otherwise use width
          // in this way the first offset will use an axis and the second one
          // will use the other one
          var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;

          // Split the offset string to obtain a list of values and operands
          // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
          var fragments = offset.split(/(\+|\-)/).map(function (frag) {
            return frag.trim();
          });

          // Detect if the offset string contains a pair of values or a single one
          // they could be separated by comma or space
          var divider = fragments.indexOf(
            find(fragments, function (frag) {
              return frag.search(/,|\s/) !== -1;
            })
          );

          if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
            console.warn(
              "Offsets separated by white space(s) are deprecated, use a comma (,) instead."
            );
          }

          // If divider is found, we divide the list of values and operands to divide
          // them by ofset X and Y.
          var splitRegex = /\s*,\s*|\s+/;
          var ops =
            divider !== -1
              ? [
                fragments
                  .slice(0, divider)
                  .concat([fragments[divider].split(splitRegex)[0]]),
                [fragments[divider].split(splitRegex)[1]].concat(
                  fragments.slice(divider + 1)
                ),
              ]
              : [fragments];

          // Convert the values with units to absolute pixels to allow our computations
          ops = ops.map(function (op, index) {
            // Most of the units rely on the orientation of the popper
            var measurement = (index === 1 ? !useHeight : useHeight)
              ? "height"
              : "width";
            var mergeWithPrevious = false;
            return (
              op
                // This aggregates any `+` or `-` sign that aren't considered operators
                // e.g.: 10 + +5 => [10, +, +5]
                .reduce(function (a, b) {
                  if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
                    a[a.length - 1] = b;
                    mergeWithPrevious = true;
                    return a;
                  } else if (mergeWithPrevious) {
                    a[a.length - 1] += b;
                    mergeWithPrevious = false;
                    return a;
                  } else {
                    return a.concat(b);
                  }
                }, [])
                // Here we convert the string values into number values (in px)
                .map(function (str) {
                  return toValue(
                    str,
                    measurement,
                    popperOffsets,
                    referenceOffsets
                  );
                })
            );
          });

          // Loop trough the offsets arrays and execute the operations
          ops.forEach(function (op, index) {
            op.forEach(function (frag, index2) {
              if (isNumeric(frag)) {
                offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
              }
            });
          });
          return offsets;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @argument {Number|String} options.offset=0
         * The offset value as described in the modifier description
         * @returns {Object} The data object, properly modified
         */
        function offset(data, _ref) {
          var offset = _ref.offset;
          var placement = data.placement,
            _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var basePlacement = placement.split("-")[0];

          var offsets = void 0;
          if (isNumeric(+offset)) {
            offsets = [+offset, 0];
          } else {
            offsets = parseOffset(offset, popper, reference, basePlacement);
          }

          if (basePlacement === "left") {
            popper.top += offsets[0];
            popper.left -= offsets[1];
          } else if (basePlacement === "right") {
            popper.top += offsets[0];
            popper.left += offsets[1];
          } else if (basePlacement === "top") {
            popper.left += offsets[0];
            popper.top -= offsets[1];
          } else if (basePlacement === "bottom") {
            popper.left += offsets[0];
            popper.top += offsets[1];
          }

          data.popper = popper;
          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function preventOverflow(data, options) {
          var boundariesElement =
            options.boundariesElement || getOffsetParent(data.instance.popper);

          // If offsetParent is the reference element, we really want to
          // go one step up and use the next offsetParent as reference to
          // avoid to make this modifier completely useless and look like broken
          if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
          }

          // NOTE: DOM access here
          // resets the popper's position so that the document size can be calculated excluding
          // the size of the popper element itself
          var transformProp = getSupportedPropertyName("transform");
          var popperStyles = data.instance.popper.style; // assignment to help minification
          var top = popperStyles.top,
            left = popperStyles.left,
            transform = popperStyles[transformProp];

          popperStyles.top = "";
          popperStyles.left = "";
          popperStyles[transformProp] = "";

          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            boundariesElement,
            data.positionFixed
          );

          // NOTE: DOM access here
          // restores the original style properties after the offsets have been computed
          popperStyles.top = top;
          popperStyles.left = left;
          popperStyles[transformProp] = transform;

          options.boundaries = boundaries;

          var order = options.priority;
          var popper = data.offsets.popper;

          var check = {
            primary: function primary(placement) {
              var value = popper[placement];
              if (
                popper[placement] < boundaries[placement] &&
                !options.escapeWithReference
              ) {
                value = Math.max(popper[placement], boundaries[placement]);
              }
              return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
              var mainSide = placement === "right" ? "left" : "top";
              var value = popper[mainSide];
              if (
                popper[placement] > boundaries[placement] &&
                !options.escapeWithReference
              ) {
                value = Math.min(
                  popper[mainSide],
                  boundaries[placement] -
                  (placement === "right" ? popper.width : popper.height)
                );
              }
              return defineProperty({}, mainSide, value);
            },
          };

          order.forEach(function (placement) {
            var side =
              ["left", "top"].indexOf(placement) !== -1
                ? "primary"
                : "secondary";
            popper = _extends({}, popper, check[side](placement));
          });

          data.offsets.popper = popper;

          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function shift(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var shiftvariation = placement.split("-")[1];

          // if shift shiftvariation is specified, run the modifier
          if (shiftvariation) {
            var _data$offsets = data.offsets,
              reference = _data$offsets.reference,
              popper = _data$offsets.popper;

            var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
            var side = isVertical ? "left" : "top";
            var measurement = isVertical ? "width" : "height";

            var shiftOffsets = {
              start: defineProperty({}, side, reference[side]),
              end: defineProperty(
                {},
                side,
                reference[side] + reference[measurement] - popper[measurement]
              ),
            };

            data.offsets.popper = _extends(
              {},
              popper,
              shiftOffsets[shiftvariation]
            );
          }

          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function hide(data) {
          if (
            !isModifierRequired(
              data.instance.modifiers,
              "hide",
              "preventOverflow"
            )
          ) {
            return data;
          }

          var refRect = data.offsets.reference;
          var bound = find(data.instance.modifiers, function (modifier) {
            return modifier.name === "preventOverflow";
          }).boundaries;

          if (
            refRect.bottom < bound.top ||
            refRect.left > bound.right ||
            refRect.top > bound.bottom ||
            refRect.right < bound.left
          ) {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === true) {
              return data;
            }

            data.hide = true;
            data.attributes["x-out-of-boundaries"] = "";
          } else {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === false) {
              return data;
            }

            data.hide = false;
            data.attributes["x-out-of-boundaries"] = false;
          }

          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function inner(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;

          var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;

          popper[isHoriz ? "left" : "top"] =
            reference[basePlacement] -
            (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);

          data.placement = getOppositePlacement(placement);
          data.offsets.popper = getClientRect(popper);

          return data;
        }

        /**
         * Modifier function, each modifier can have a function of this type assigned
         * to its `fn` property.<br />
         * These functions will be called on each update, this means that you must
         * make sure they are performant enough to avoid performance bottlenecks.
         *
         * @function ModifierFn
         * @argument {dataObject} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {dataObject} The data object, properly modified
         */

        /**
         * Modifiers are plugins used to alter the behavior of your poppers.<br />
         * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
         * needed by the library.
         *
         * Usually you don't want to override the `order`, `fn` and `onLoad` props.
         * All the other properties are configurations that could be tweaked.
         * @namespace modifiers
         */
        var modifiers = {
          /**
           * Modifier used to shift the popper on the start or end of its reference
           * element.<br />
           * It will read the variation of the `placement` property.<br />
           * It can be one either `-end` or `-start`.
           * @memberof modifiers
           * @inner
           */
          shift: {
            /** @prop {number} order=100 - Index used to define the order of execution */
            order: 100,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: shift,
          },

          /**
           * The `offset` modifier can shift your popper on both its axis.
           *
           * It accepts the following units:
           * - `px` or unit-less, interpreted as pixels
           * - `%` or `%r`, percentage relative to the length of the reference element
           * - `%p`, percentage relative to the length of the popper element
           * - `vw`, CSS viewport width unit
           * - `vh`, CSS viewport height unit
           *
           * For length is intended the main axis relative to the placement of the popper.<br />
           * This means that if the placement is `top` or `bottom`, the length will be the
           * `width`. In case of `left` or `right`, it will be the `height`.
           *
           * You can provide a single value (as `Number` or `String`), or a pair of values
           * as `String` divided by a comma or one (or more) white spaces.<br />
           * The latter is a deprecated method because it leads to confusion and will be
           * removed in v2.<br />
           * Additionally, it accepts additions and subtractions between different units.
           * Note that multiplications and divisions aren't supported.
           *
           * Valid examples are:
           * ```
           * 10
           * '10%'
           * '10, 10'
           * '10%, 10'
           * '10 + 10%'
           * '10 - 5vh + 3%'
           * '-10px + 5vh, 5px - 6%'
           * ```
           * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
           * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
           * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
           *
           * @memberof modifiers
           * @inner
           */
          offset: {
            /** @prop {number} order=200 - Index used to define the order of execution */
            order: 200,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: offset,
            /** @prop {Number|String} offset=0
             * The offset value as described in the modifier description
             */
            offset: 0,
          },

          /**
           * Modifier used to prevent the popper from being positioned outside the boundary.
           *
           * A scenario exists where the reference itself is not within the boundaries.<br />
           * We can say it has "escaped the boundaries" — or just "escaped".<br />
           * In this case we need to decide whether the popper should either:
           *
           * - detach from the reference and remain "trapped" in the boundaries, or
           * - if it should ignore the boundary and "escape with its reference"
           *
           * When `escapeWithReference` is set to`true` and reference is completely
           * outside its boundaries, the popper will overflow (or completely leave)
           * the boundaries in order to remain attached to the edge of the reference.
           *
           * @memberof modifiers
           * @inner
           */
          preventOverflow: {
            /** @prop {number} order=300 - Index used to define the order of execution */
            order: 300,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: preventOverflow,
            /**
             * @prop {Array} [priority=['left','right','top','bottom']]
             * Popper will try to prevent overflow following these priorities by default,
             * then, it could overflow on the left and on top of the `boundariesElement`
             */
            priority: ["left", "right", "top", "bottom"],
            /**
             * @prop {number} padding=5
             * Amount of pixel used to define a minimum distance between the boundaries
             * and the popper. This makes sure the popper always has a little padding
             * between the edges of its container
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='scrollParent'
             * Boundaries used by the modifier. Can be `scrollParent`, `window`,
             * `viewport` or any DOM element.
             */
            boundariesElement: "scrollParent",
          },

          /**
           * Modifier used to make sure the reference and its popper stay near each other
           * without leaving any gap between the two. Especially useful when the arrow is
           * enabled and you want to ensure that it points to its reference element.
           * It cares only about the first axis. You can still have poppers with margin
           * between the popper and its reference element.
           * @memberof modifiers
           * @inner
           */
          keepTogether: {
            /** @prop {number} order=400 - Index used to define the order of execution */
            order: 400,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: keepTogether,
          },

          /**
           * This modifier is used to move the `arrowElement` of the popper to make
           * sure it is positioned between the reference element and its popper element.
           * It will read the outer size of the `arrowElement` node to detect how many
           * pixels of conjunction are needed.
           *
           * It has no effect if no `arrowElement` is provided.
           * @memberof modifiers
           * @inner
           */
          arrow: {
            /** @prop {number} order=500 - Index used to define the order of execution */
            order: 500,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: arrow,
            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
            element: "[x-arrow]",
          },

          /**
           * Modifier used to flip the popper's placement when it starts to overlap its
           * reference element.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           *
           * **NOTE:** this modifier will interrupt the current update cycle and will
           * restart it if it detects the need to flip the placement.
           * @memberof modifiers
           * @inner
           */
          flip: {
            /** @prop {number} order=600 - Index used to define the order of execution */
            order: 600,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: flip,
            /**
             * @prop {String|Array} behavior='flip'
             * The behavior used to change the popper's placement. It can be one of
             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
             * placements (with optional variations)
             */
            behavior: "flip",
            /**
             * @prop {number} padding=5
             * The popper will flip if it hits the edges of the `boundariesElement`
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='viewport'
             * The element which will define the boundaries of the popper position.
             * The popper will never be placed outside of the defined boundaries
             * (except if `keepTogether` is enabled)
             */
            boundariesElement: "viewport",
            /**
             * @prop {Boolean} flipVariations=false
             * The popper will switch placement variation between `-start` and `-end` when
             * the reference element overlaps its boundaries.
             *
             * The original placement should have a set variation.
             */
            flipVariations: false,
            /**
             * @prop {Boolean} flipVariationsByContent=false
             * The popper will switch placement variation between `-start` and `-end` when
             * the popper element overlaps its reference boundaries.
             *
             * The original placement should have a set variation.
             */
            flipVariationsByContent: false,
          },

          /**
           * Modifier used to make the popper flow toward the inner of the reference element.
           * By default, when this modifier is disabled, the popper will be placed outside
           * the reference element.
           * @memberof modifiers
           * @inner
           */
          inner: {
            /** @prop {number} order=700 - Index used to define the order of execution */
            order: 700,
            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
            enabled: false,
            /** @prop {ModifierFn} */
            fn: inner,
          },

          /**
           * Modifier used to hide the popper when its reference element is outside of the
           * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
           * be used to hide with a CSS selector the popper when its reference is
           * out of boundaries.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           * @memberof modifiers
           * @inner
           */
          hide: {
            /** @prop {number} order=800 - Index used to define the order of execution */
            order: 800,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: hide,
          },

          /**
           * Computes the style that will be applied to the popper element to gets
           * properly positioned.
           *
           * Note that this modifier will not touch the DOM, it just prepares the styles
           * so that `applyStyle` modifier can apply it. This separation is useful
           * in case you need to replace `applyStyle` with a custom implementation.
           *
           * This modifier has `850` as `order` value to maintain backward compatibility
           * with previous versions of Popper.js. Expect the modifiers ordering method
           * to change in future major versions of the library.
           *
           * @memberof modifiers
           * @inner
           */
          computeStyle: {
            /** @prop {number} order=850 - Index used to define the order of execution */
            order: 850,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: computeStyle,
            /**
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: true,
            /**
             * @prop {string} [x='bottom']
             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
             * Change this if your popper should grow in a direction different from `bottom`
             */
            x: "bottom",
            /**
             * @prop {string} [x='left']
             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
             * Change this if your popper should grow in a direction different from `right`
             */
            y: "right",
          },

          /**
           * Applies the computed styles to the popper element.
           *
           * All the DOM manipulations are limited to this modifier. This is useful in case
           * you want to integrate Popper.js inside a framework or view library and you
           * want to delegate all the DOM manipulations to it.
           *
           * Note that if you disable this modifier, you must make sure the popper element
           * has its position set to `absolute` before Popper.js can do its work!
           *
           * Just disable this modifier and define your own to achieve the desired effect.
           *
           * @memberof modifiers
           * @inner
           */
          applyStyle: {
            /** @prop {number} order=900 - Index used to define the order of execution */
            order: 900,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: applyStyle,
            /** @prop {Function} */
            onLoad: applyStyleOnLoad,
            /**
             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: undefined,
          },
        };

        /**
         * The `dataObject` is an object containing all the information used by Popper.js.
         * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
         * @name dataObject
         * @property {Object} data.instance The Popper.js instance
         * @property {String} data.placement Placement applied to popper
         * @property {String} data.originalPlacement Placement originally defined on init
         * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
         * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
         * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
         * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
         * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
         * @property {Object} data.boundaries Offsets of the popper boundaries
         * @property {Object} data.offsets The measurements of popper, reference and arrow elements
         * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
         * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
         * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
         */

        /**
         * Default options provided to Popper.js constructor.<br />
         * These can be overridden using the `options` argument of Popper.js.<br />
         * To override an option, simply pass an object with the same
         * structure of the `options` object, as the 3rd argument. For example:
         * ```
         * new Popper(ref, pop, {
         *   modifiers: {
         *     preventOverflow: { enabled: false }
         *   }
         * })
         * ```
         * @type {Object}
         * @static
         * @memberof Popper
         */
        var Defaults = {
          /**
           * Popper's placement.
           * @prop {Popper.placements} placement='bottom'
           */
          placement: "bottom",

          /**
           * Set this to true if you want popper to position it self in 'fixed' mode
           * @prop {Boolean} positionFixed=false
           */
          positionFixed: false,

          /**
           * Whether events (resize, scroll) are initially enabled.
           * @prop {Boolean} eventsEnabled=true
           */
          eventsEnabled: true,

          /**
           * Set to true if you want to automatically remove the popper when
           * you call the `destroy` method.
           * @prop {Boolean} removeOnDestroy=false
           */
          removeOnDestroy: false,

          /**
           * Callback called when the popper is created.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onCreate}
           */
          onCreate: function onCreate() { },

          /**
           * Callback called when the popper is updated. This callback is not called
           * on the initialization/creation of the popper, but only on subsequent
           * updates.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onUpdate}
           */
          onUpdate: function onUpdate() { },

          /**
           * List of modifiers used to modify the offsets before they are applied to the popper.
           * They provide most of the functionalities of Popper.js.
           * @prop {modifiers}
           */
          modifiers: modifiers,
        };

        /**
         * @callback onCreate
         * @param {dataObject} data
         */

        /**
         * @callback onUpdate
         * @param {dataObject} data
         */

        // Utils
        // Methods
        var Popper = (function () {
          /**
           * Creates a new Popper.js instance.
           * @class Popper
           * @param {Element|referenceObject} reference - The reference element used to position the popper
           * @param {Element} popper - The HTML / XML element used as the popper
           * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
           * @return {Object} instance - The generated Popper.js instance
           */
          function Popper(reference, popper) {
            var _this = this;

            var options =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : {};
            classCallCheck(this, Popper);

            this.scheduleUpdate = function () {
              return requestAnimationFrame(_this.update);
            };

            // make update() debounced, so that it only runs at most once-per-tick
            this.update = debounce(this.update.bind(this));

            // with {} we create a new object with the options inside it
            this.options = _extends({}, Popper.Defaults, options);

            // init state
            this.state = {
              isDestroyed: false,
              isCreated: false,
              scrollParents: [],
            };

            // get reference and popper elements (allow jQuery wrappers)
            this.reference =
              reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper;

            // Deep merge modifiers options
            this.options.modifiers = {};
            Object.keys(
              _extends({}, Popper.Defaults.modifiers, options.modifiers)
            ).forEach(function (name) {
              _this.options.modifiers[name] = _extends(
                {},
                Popper.Defaults.modifiers[name] || {},
                options.modifiers ? options.modifiers[name] : {}
              );
            });

            // Refactoring modifiers' list (Object => Array)
            this.modifiers = Object.keys(this.options.modifiers)
              .map(function (name) {
                return _extends(
                  {
                    name: name,
                  },
                  _this.options.modifiers[name]
                );
              })
              // sort the modifiers by order
              .sort(function (a, b) {
                return a.order - b.order;
              });

            // modifiers have the ability to execute arbitrary code when Popper.js get inited
            // such code is executed in the same order of its modifier
            // they could add new properties to their options configuration
            // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
            this.modifiers.forEach(function (modifierOptions) {
              if (
                modifierOptions.enabled &&
                isFunction(modifierOptions.onLoad)
              ) {
                modifierOptions.onLoad(
                  _this.reference,
                  _this.popper,
                  _this.options,
                  modifierOptions,
                  _this.state
                );
              }
            });

            // fire the first update to position the popper in the right place
            this.update();

            var eventsEnabled = this.options.eventsEnabled;
            if (eventsEnabled) {
              // setup event listeners, they will take care of update the position in specific situations
              this.enableEventListeners();
            }

            this.state.eventsEnabled = eventsEnabled;
          }

          // We can't use class properties because they don't get listed in the
          // class prototype and break stuff like Sinon stubs

          createClass(Popper, [
            {
              key: "update",
              value: function update$$1() {
                return update.call(this);
              },
            },
            {
              key: "destroy",
              value: function destroy$$1() {
                return destroy.call(this);
              },
            },
            {
              key: "enableEventListeners",
              value: function enableEventListeners$$1() {
                return enableEventListeners.call(this);
              },
            },
            {
              key: "disableEventListeners",
              value: function disableEventListeners$$1() {
                return disableEventListeners.call(this);
              },

              /**
               * Schedules an update. It will run on the next UI update available.
               * @method scheduleUpdate
               * @memberof Popper
               */

              /**
               * Collection of utilities useful when writing custom modifiers.
               * Starting from version 1.7, this method is available only if you
               * include `popper-utils.js` before `popper.js`.
               *
               * **DEPRECATION**: This way to access PopperUtils is deprecated
               * and will be removed in v2! Use the PopperUtils module directly instead.
               * Due to the high instability of the methods contained in Utils, we can't
               * guarantee them to follow semver. Use them at your own risk!
               * @static
               * @private
               * @type {Object}
               * @deprecated since version 1.8
               * @member Utils
               * @memberof Popper
               */
            },
          ]);
          return Popper;
        })();

        /**
         * The `referenceObject` is an object that provides an interface compatible with Popper.js
         * and lets you use it as replacement of a real DOM node.<br />
         * You can use this method to position a popper relatively to a set of coordinates
         * in case you don't have a DOM node to use as reference.
         *
         * ```
         * new Popper(referenceObject, popperNode);
         * ```
         *
         * NB: This feature isn't supported in Internet Explorer 10.
         * @name referenceObject
         * @property {Function} data.getBoundingClientRect
         * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
         * @property {number} data.clientWidth
         * An ES6 getter that will return the width of the virtual reference element.
         * @property {number} data.clientHeight
         * An ES6 getter that will return the height of the virtual reference element.
         */

        Popper.Utils = (
          typeof window !== "undefined" ? window : __webpack_require__.g
        ).PopperUtils;
        Popper.placements = placements;
        Popper.Defaults = Defaults;

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = Popper;
        //# sourceMappingURL=popper.js.map

        /***/
      },

    /***/ "./node_modules/process/browser.js":
      /*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
      /***/ (module) => {
        // shim for using process in browser
        var process = (module.exports = {});

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function () {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ""; // empty string to avoid regexp issues
        process.versions = {};

        function noop() { }

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
          return [];
        };

        process.binding = function (name) {
          throw new Error("process.binding is not supported");
        };

        process.cwd = function () {
          return "/";
        };
        process.chdir = function (dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function () {
          return 0;
        };

        /***/
      },

    /***/ "./node_modules/push.js/bin/push.min.js":
      /*!**********************************************!*\
  !*** ./node_modules/push.js/bin/push.min.js ***!
  \**********************************************/
      /***/ function (module, __unused_webpack_exports, __webpack_require__) {
        /**
         * @license
         *
         * Push v1.0.9
         * =========
         * A compact, cross-browser solution for the JavaScript Notifications API
         *
         * Credits
         * -------
         * Tsvetan Tsvetkov (ttsvetko)
         * Alex Gibson (alexgibson)
         *
         * License
         * -------
         *
         * The MIT License (MIT)
         *
         * Copyright (c) 2015-2017 Tyler Nickerson
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in
         * all copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
         * THE SOFTWARE.
         */
        !(function (i, t) {
          true ? (module.exports = t()) : 0;
        })(this, function () {
          "use strict";
          var i = {
            errors: {
              incompatible: "".concat(
                "PushError:",
                " Push.js is incompatible with browser."
              ),
              invalid_plugin: "".concat(
                "PushError:",
                " plugin class missing from plugin manifest (invalid plugin). Please check the documentation."
              ),
              invalid_title: "".concat(
                "PushError:",
                " title of notification must be a string"
              ),
              permission_denied: "".concat(
                "PushError:",
                " permission request declined"
              ),
              sw_notification_error: "".concat(
                "PushError:",
                " could not show a ServiceWorker notification due to the following reason: "
              ),
              sw_registration_error: "".concat(
                "PushError:",
                " could not register the ServiceWorker due to the following reason: "
              ),
              unknown_interface: "".concat(
                "PushError:",
                " unable to create notification: unknown interface"
              ),
            },
          };
          function t(i) {
            return (t =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (i) {
                  return typeof i;
                }
                : function (i) {
                  return i &&
                    "function" == typeof Symbol &&
                    i.constructor === Symbol &&
                    i !== Symbol.prototype
                    ? "symbol"
                    : typeof i;
                })(i);
          }
          function n(i, t) {
            if (!(i instanceof t))
              throw new TypeError("Cannot call a class as a function");
          }
          function e(i, t) {
            for (var n = 0; n < t.length; n++) {
              var e = t[n];
              (e.enumerable = e.enumerable || !1),
                (e.configurable = !0),
                "value" in e && (e.writable = !0),
                Object.defineProperty(i, e.key, e);
            }
          }
          function o(i, t, n) {
            return t && e(i.prototype, t), n && e(i, n), i;
          }
          function r(i, t) {
            if ("function" != typeof t && null !== t)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            (i.prototype = Object.create(t && t.prototype, {
              constructor: { value: i, writable: !0, configurable: !0 },
            })),
              t && c(i, t);
          }
          function s(i) {
            return (s = Object.setPrototypeOf
              ? Object.getPrototypeOf
              : function (i) {
                return i.__proto__ || Object.getPrototypeOf(i);
              })(i);
          }
          function c(i, t) {
            return (c =
              Object.setPrototypeOf ||
              function (i, t) {
                return (i.__proto__ = t), i;
              })(i, t);
          }
          function a(i, t) {
            return !t || ("object" != typeof t && "function" != typeof t)
              ? (function (i) {
                if (void 0 === i)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return i;
              })(i)
              : t;
          }
          var u = (function () {
            function i(t) {
              n(this, i),
                (this._win = t),
                (this.GRANTED = "granted"),
                (this.DEFAULT = "default"),
                (this.DENIED = "denied"),
                (this._permissions = [
                  this.GRANTED,
                  this.DEFAULT,
                  this.DENIED,
                ]);
            }
            return (
              o(i, [
                {
                  key: "request",
                  value: function (i, t) {
                    return arguments.length > 0
                      ? this._requestWithCallback.apply(this, arguments)
                      : this._requestAsPromise();
                  },
                },
                {
                  key: "_requestWithCallback",
                  value: function (i, t) {
                    var n,
                      e = this,
                      o = this.get(),
                      r = !1,
                      s = function () {
                        var n =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : e._win.Notification.permission;
                        r ||
                          ((r = !0),
                            void 0 === n &&
                            e._win.webkitNotifications &&
                            (n =
                              e._win.webkitNotifications.checkPermission()),
                            n === e.GRANTED || 0 === n ? i && i() : t && t());
                      };
                    o !== this.DEFAULT
                      ? s(o)
                      : this._win.webkitNotifications &&
                        this._win.webkitNotifications.checkPermission
                        ? this._win.webkitNotifications.requestPermission(s)
                        : this._win.Notification &&
                          this._win.Notification.requestPermission
                          ? (n = this._win.Notification.requestPermission(s)) &&
                          n.then &&
                          n.then(s).catch(function () {
                            t && t();
                          })
                          : i && i();
                  },
                },
                {
                  key: "_requestAsPromise",
                  value: function () {
                    var i = this,
                      t = this.get(),
                      n = t !== this.DEFAULT,
                      e =
                        this._win.Notification &&
                        this._win.Notification.requestPermission,
                      o =
                        this._win.webkitNotifications &&
                        this._win.webkitNotifications.checkPermission;
                    return new Promise(function (r, s) {
                      var c,
                        a = !1,
                        u = function (t) {
                          a ||
                            ((a = !0),
                              !(function (t) {
                                return t === i.GRANTED || 0 === t;
                              })(t)
                                ? s()
                                : r());
                        };
                      n
                        ? u(t)
                        : o
                          ? i._win.webkitNotifications.requestPermission(
                            function (i) {
                              u(i);
                            }
                          )
                          : e
                            ? (c = i._win.Notification.requestPermission(u)) &&
                            c.then &&
                            c.then(u).catch(s)
                            : r();
                    });
                  },
                },
                {
                  key: "has",
                  value: function () {
                    return this.get() === this.GRANTED;
                  },
                },
                {
                  key: "get",
                  value: function () {
                    return this._win.Notification &&
                      this._win.Notification.permission
                      ? this._win.Notification.permission
                      : this._win.webkitNotifications &&
                        this._win.webkitNotifications.checkPermission
                        ? this._permissions[
                        this._win.webkitNotifications.checkPermission()
                        ]
                        : navigator.mozNotification
                          ? this.GRANTED
                          : this._win.external && this._win.external.msIsSiteMode
                            ? this._win.external.msIsSiteMode()
                              ? this.GRANTED
                              : this.DEFAULT
                            : this.GRANTED;
                  },
                },
              ]),
              i
            );
          })(),
            f = (function () {
              function i() {
                n(this, i);
              }
              return (
                o(i, null, [
                  {
                    key: "isUndefined",
                    value: function (i) {
                      return void 0 === i;
                    },
                  },
                  {
                    key: "isNull",
                    value: function (i) {
                      return null === obj;
                    },
                  },
                  {
                    key: "isString",
                    value: function (i) {
                      return "string" == typeof i;
                    },
                  },
                  {
                    key: "isFunction",
                    value: function (i) {
                      return i && "[object Function]" === {}.toString.call(i);
                    },
                  },
                  {
                    key: "isObject",
                    value: function (i) {
                      return "object" === t(i);
                    },
                  },
                  {
                    key: "objectMerge",
                    value: function (i, t) {
                      for (var n in t)
                        i.hasOwnProperty(n) &&
                          this.isObject(i[n]) &&
                          this.isObject(t[n])
                          ? this.objectMerge(i[n], t[n])
                          : (i[n] = t[n]);
                    },
                  },
                ]),
                i
              );
            })(),
            l = function i(t) {
              n(this, i), (this._win = t);
            },
            h = (function (i) {
              function t() {
                return n(this, t), a(this, s(t).apply(this, arguments));
              }
              return (
                r(t, l),
                o(t, [
                  {
                    key: "isSupported",
                    value: function () {
                      return void 0 !== this._win.Notification;
                    },
                  },
                  {
                    key: "create",
                    value: function (i, t) {
                      return new this._win.Notification(i, {
                        icon:
                          f.isString(t.icon) ||
                            f.isUndefined(t.icon) ||
                            f.isNull(t.icon)
                            ? t.icon
                            : t.icon.x32,
                        body: t.body,
                        tag: t.tag,
                        requireInteraction: t.requireInteraction,
                      });
                    },
                  },
                  {
                    key: "close",
                    value: function (i) {
                      i.close();
                    },
                  },
                ]),
                t
              );
            })(),
            _ = (function (t) {
              function e() {
                return n(this, e), a(this, s(e).apply(this, arguments));
              }
              return (
                r(e, l),
                o(e, [
                  {
                    key: "isSupported",
                    value: function () {
                      return (
                        void 0 !== this._win.navigator &&
                        void 0 !== this._win.navigator.serviceWorker
                      );
                    },
                  },
                  {
                    key: "getFunctionBody",
                    value: function (i) {
                      var t = i.toString().match(/function[^{]+{([\s\S]*)}$/);
                      return null != t && t.length > 1 ? t[1] : null;
                    },
                  },
                  {
                    key: "create",
                    value: function (t, n, e, o, r) {
                      var s = this;
                      this._win.navigator.serviceWorker.register(o),
                        this._win.navigator.serviceWorker.ready
                          .then(function (o) {
                            var c = {
                              id: t,
                              link: e.link,
                              origin: document.location.href,
                              onClick: f.isFunction(e.onClick)
                                ? s.getFunctionBody(e.onClick)
                                : "",
                              onClose: f.isFunction(e.onClose)
                                ? s.getFunctionBody(e.onClose)
                                : "",
                            };
                            void 0 !== e.data &&
                              null !== e.data &&
                              (c = Object.assign(c, e.data)),
                              o
                                .showNotification(n, {
                                  icon: e.icon,
                                  body: e.body,
                                  vibrate: e.vibrate,
                                  tag: e.tag,
                                  data: c,
                                  requireInteraction: e.requireInteraction,
                                  silent: e.silent,
                                })
                                .then(function () {
                                  o.getNotifications().then(function (i) {
                                    o.active.postMessage(""), r(i);
                                  });
                                })
                                .catch(function (t) {
                                  throw new Error(
                                    i.errors.sw_notification_error + t.message
                                  );
                                });
                          })
                          .catch(function (t) {
                            throw new Error(
                              i.errors.sw_registration_error + t.message
                            );
                          });
                    },
                  },
                  { key: "close", value: function () { } },
                ]),
                e
              );
            })(),
            v = (function (i) {
              function t() {
                return n(this, t), a(this, s(t).apply(this, arguments));
              }
              return (
                r(t, l),
                o(t, [
                  {
                    key: "isSupported",
                    value: function () {
                      return void 0 !== this._win.navigator.mozNotification;
                    },
                  },
                  {
                    key: "create",
                    value: function (i, t) {
                      var n =
                        this._win.navigator.mozNotification.createNotification(
                          i,
                          t.body,
                          t.icon
                        );
                      return n.show(), n;
                    },
                  },
                ]),
                t
              );
            })(),
            d = (function (i) {
              function t() {
                return n(this, t), a(this, s(t).apply(this, arguments));
              }
              return (
                r(t, l),
                o(t, [
                  {
                    key: "isSupported",
                    value: function () {
                      return (
                        void 0 !== this._win.external &&
                        void 0 !== this._win.external.msIsSiteMode
                      );
                    },
                  },
                  {
                    key: "create",
                    value: function (i, t) {
                      return (
                        this._win.external.msSiteModeClearIconOverlay(),
                        this._win.external.msSiteModeSetIconOverlay(
                          f.isString(t.icon) || f.isUndefined(t.icon)
                            ? t.icon
                            : t.icon.x16,
                          i
                        ),
                        this._win.external.msSiteModeActivate(),
                        null
                      );
                    },
                  },
                  {
                    key: "close",
                    value: function () {
                      this._win.external.msSiteModeClearIconOverlay();
                    },
                  },
                ]),
                t
              );
            })(),
            w = (function (i) {
              function t() {
                return n(this, t), a(this, s(t).apply(this, arguments));
              }
              return (
                r(t, l),
                o(t, [
                  {
                    key: "isSupported",
                    value: function () {
                      return void 0 !== this._win.webkitNotifications;
                    },
                  },
                  {
                    key: "create",
                    value: function (i, t) {
                      var n = this._win.webkitNotifications.createNotification(
                        t.icon,
                        i,
                        t.body
                      );
                      return n.show(), n;
                    },
                  },
                  {
                    key: "close",
                    value: function (i) {
                      i.cancel();
                    },
                  },
                ]),
                t
              );
            })();
          return new ((function () {
            function t(i) {
              n(this, t),
                (this._currentId = 0),
                (this._notifications = {}),
                (this._win = i),
                (this.Permission = new u(i)),
                (this._agents = {
                  desktop: new h(i),
                  chrome: new _(i),
                  firefox: new v(i),
                  ms: new d(i),
                  webkit: new w(i),
                }),
                (this._configuration = {
                  serviceWorker: "/serviceWorker.min.js",
                  fallback: function (i) { },
                });
            }
            return (
              o(t, [
                {
                  key: "_closeNotification",
                  value: function (t) {
                    var n = !0,
                      e = this._notifications[t];
                    if (void 0 !== e) {
                      if (
                        ((n = this._removeNotification(t)),
                          this._agents.desktop.isSupported())
                      )
                        this._agents.desktop.close(e);
                      else if (this._agents.webkit.isSupported())
                        this._agents.webkit.close(e);
                      else {
                        if (!this._agents.ms.isSupported())
                          throw (
                            ((n = !1), new Error(i.errors.unknown_interface))
                          );
                        this._agents.ms.close();
                      }
                      return n;
                    }
                    return !1;
                  },
                },
                {
                  key: "_addNotification",
                  value: function (i) {
                    var t = this._currentId;
                    return (this._notifications[t] = i), this._currentId++, t;
                  },
                },
                {
                  key: "_removeNotification",
                  value: function (i) {
                    var t = !1;
                    return (
                      this._notifications.hasOwnProperty(i) &&
                      (delete this._notifications[i], (t = !0)),
                      t
                    );
                  },
                },
                {
                  key: "_prepareNotification",
                  value: function (i, t) {
                    var n,
                      e = this;
                    return (
                      (n = {
                        get: function () {
                          return e._notifications[i];
                        },
                        close: function () {
                          e._closeNotification(i);
                        },
                      }),
                      t.timeout &&
                      setTimeout(function () {
                        n.close();
                      }, t.timeout),
                      n
                    );
                  },
                },
                {
                  key: "_serviceWorkerCallback",
                  value: function (i, t, n) {
                    var e = this,
                      o = this._addNotification(i[i.length - 1]);
                    navigator &&
                      navigator.serviceWorker &&
                      (navigator.serviceWorker.addEventListener(
                        "message",
                        function (i) {
                          var t = JSON.parse(i.data);
                          "close" === t.action &&
                            Number.isInteger(t.id) &&
                            e._removeNotification(t.id);
                        }
                      ),
                        n(this._prepareNotification(o, t))),
                      n(null);
                  },
                },
                {
                  key: "_createCallback",
                  value: function (i, t, n) {
                    var e,
                      o = this,
                      r = null;
                    if (
                      ((t = t || {}),
                        (e = function (i) {
                          o._removeNotification(i),
                            f.isFunction(t.onClose) && t.onClose.call(o, r);
                        }),
                        this._agents.desktop.isSupported())
                    )
                      try {
                        r = this._agents.desktop.create(i, t);
                      } catch (e) {
                        var s = this._currentId,
                          c = this.config().serviceWorker;
                        this._agents.chrome.isSupported() &&
                          this._agents.chrome.create(s, i, t, c, function (i) {
                            return o._serviceWorkerCallback(i, t, n);
                          });
                      }
                    else
                      this._agents.webkit.isSupported()
                        ? (r = this._agents.webkit.create(i, t))
                        : this._agents.firefox.isSupported()
                          ? this._agents.firefox.create(i, t)
                          : this._agents.ms.isSupported()
                            ? (r = this._agents.ms.create(i, t))
                            : ((t.title = i), this.config().fallback(t));
                    if (null !== r) {
                      var a = this._addNotification(r),
                        u = this._prepareNotification(a, t);
                      f.isFunction(t.onShow) &&
                        r.addEventListener("show", t.onShow),
                        f.isFunction(t.onError) &&
                        r.addEventListener("error", t.onError),
                        f.isFunction(t.onClick) &&
                        r.addEventListener("click", t.onClick),
                        r.addEventListener("close", function () {
                          e(a);
                        }),
                        r.addEventListener("cancel", function () {
                          e(a);
                        }),
                        n(u);
                    }
                    n(null);
                  },
                },
                {
                  key: "create",
                  value: function (t, n) {
                    var e,
                      o = this;
                    if (!f.isString(t)) throw new Error(i.errors.invalid_title);
                    return (
                      (e = this.Permission.has()
                        ? function (i, e) {
                          try {
                            o._createCallback(t, n, i);
                          } catch (i) {
                            e(i);
                          }
                        }
                        : function (e, r) {
                          o.Permission.request()
                            .then(function () {
                              o._createCallback(t, n, e);
                            })
                            .catch(function () {
                              r(i.errors.permission_denied);
                            });
                        }),
                      new Promise(e)
                    );
                  },
                },
                {
                  key: "count",
                  value: function () {
                    var i,
                      t = 0;
                    for (i in this._notifications)
                      this._notifications.hasOwnProperty(i) && t++;
                    return t;
                  },
                },
                {
                  key: "close",
                  value: function (i) {
                    var t;
                    for (t in this._notifications)
                      if (
                        this._notifications.hasOwnProperty(t) &&
                        this._notifications[t].tag === i
                      )
                        return this._closeNotification(t);
                  },
                },
                {
                  key: "clear",
                  value: function () {
                    var i,
                      t = !0;
                    for (i in this._notifications)
                      this._notifications.hasOwnProperty(i) &&
                        (t = t && this._closeNotification(i));
                    return t;
                  },
                },
                {
                  key: "supported",
                  value: function () {
                    var i = !1;
                    for (var t in this._agents)
                      this._agents.hasOwnProperty(t) &&
                        (i = i || this._agents[t].isSupported());
                    return i;
                  },
                },
                {
                  key: "config",
                  value: function (i) {
                    return (
                      (void 0 !== i || (null !== i && f.isObject(i))) &&
                      f.objectMerge(this._configuration, i),
                      this._configuration
                    );
                  },
                },
                {
                  key: "extend",
                  value: function (t) {
                    var n,
                      e = {}.hasOwnProperty;
                    if (!e.call(t, "plugin"))
                      throw new Error(i.errors.invalid_plugin);
                    for (var o in (e.call(t, "config") &&
                      f.isObject(t.config) &&
                      null !== t.config &&
                      this.config(t.config),
                      (n = new (0, t.plugin)(this.config()))))
                      e.call(n, o) && f.isFunction(n[o]) && (this[o] = n[o]);
                  },
                },
              ]),
              t
            );
          })())("undefined" != typeof window ? window : __webpack_require__.g);
        });
        //# sourceMappingURL=push.min.js.map

        /***/
      },

    /***/ "./node_modules/pusher-js/dist/web/pusher.js":
      /*!***************************************************!*\
  !*** ./node_modules/pusher-js/dist/web/pusher.js ***!
  \***************************************************/
      /***/ (module) => {
        /*!
         * Pusher JavaScript Library v7.5.0
         * https://pusher.com/
         *
         * Copyright 2020, Pusher
         * Released under the MIT licence.
         */

        (function webpackUniversalModuleDefinition(root, factory) {
          if (true) module.exports = factory();
          else {
          }
        })(window, function () {
          return /******/ (function (modules) {
            // webpackBootstrap
            /******/ // The module cache
            /******/ var installedModules = {};
            /******/
            /******/ // The require function
            /******/ function __nested_webpack_require_669__(moduleId) {
              /******/
              /******/ // Check if module is in cache
              /******/ if (installedModules[moduleId]) {
                /******/ return installedModules[moduleId].exports;
                /******/
              }
              /******/ // Create a new module (and put it into the cache)
              /******/ var module = (installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {},
                /******/
              });
              /******/
              /******/ // Execute the module function
              /******/ modules[moduleId].call(
                module.exports,
                module,
                module.exports,
                __nested_webpack_require_669__
              );
              /******/
              /******/ // Flag the module as loaded
              /******/ module.l = true;
              /******/
              /******/ // Return the exports of the module
              /******/ return module.exports;
              /******/
            }
            /******/
            /******/
            /******/ // expose the modules object (__webpack_modules__)
            /******/ __nested_webpack_require_669__.m = modules;
            /******/
            /******/ // expose the module cache
            /******/ __nested_webpack_require_669__.c = installedModules;
            /******/
            /******/ // define getter function for harmony exports
            /******/ __nested_webpack_require_669__.d = function (
              exports,
              name,
              getter
            ) {
              /******/ if (!__nested_webpack_require_669__.o(exports, name)) {
                /******/ Object.defineProperty(exports, name, {
              enumerable: true,
              get: getter,
            });
                /******/
              }
              /******/
            };
            /******/
            /******/ // define __esModule on exports
            /******/ __nested_webpack_require_669__.r = function (exports) {
              /******/ if (
                typeof Symbol !== "undefined" &&
                Symbol.toStringTag
              ) {
                /******/ Object.defineProperty(exports, Symbol.toStringTag, {
                value: "Module",
              });
                /******/
              }
              /******/ Object.defineProperty(exports, "__esModule", {
                value: true,
              });
              /******/
            };
            /******/
            /******/ // create a fake namespace object
            /******/ // mode & 1: value is a module id, require it
            /******/ // mode & 2: merge all properties of value into the ns
            /******/ // mode & 4: return value when already ns object
            /******/ // mode & 8|1: behave like require
            /******/ __nested_webpack_require_669__.t = function (value, mode) {
              /******/ if (mode & 1)
                value = __nested_webpack_require_669__(value);
              /******/ if (mode & 8) return value;
              /******/ if (
                mode & 4 &&
                typeof value === "object" &&
                value &&
                value.__esModule
              )
                return value;
              /******/ var ns = Object.create(null);
              /******/ __nested_webpack_require_669__.r(ns);
              /******/ Object.defineProperty(ns, "default", {
                  enumerable: true,
                  value: value,
                });
              /******/ if (mode & 2 && typeof value != "string")
                for (var key in value)
                  __nested_webpack_require_669__.d(
                    ns,
                    key,
                    function (key) {
                      return value[key];
                    }.bind(null, key)
                  );
              /******/ return ns;
              /******/
            };
            /******/
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __nested_webpack_require_669__.n = function (module) {
              /******/ var getter =
                module && module.__esModule
                  ? /******/ function getDefault() {
                    return module["default"];
                  }
                  : /******/ function getModuleExports() {
                    return module;
                  };
              /******/ __nested_webpack_require_669__.d(getter, "a", getter);
              /******/ return getter;
              /******/
            };
            /******/
            /******/ // Object.prototype.hasOwnProperty.call
            /******/ __nested_webpack_require_669__.o = function (
              object,
              property
            ) {
              return Object.prototype.hasOwnProperty.call(object, property);
            };
            /******/
            /******/ // __webpack_public_path__
            /******/ __nested_webpack_require_669__.p = "";
            /******/
            /******/
            /******/ // Load entry module and return exports
            /******/ return __nested_webpack_require_669__(
              (__nested_webpack_require_669__.s = 2)
            );
            /******/
          })(
            /************************************************************************/
            /******/[
              /* 0 */
              /***/ function (module, exports, __webpack_require__) {
                "use strict";

                // Copyright (C) 2016 Dmitry Chestnykh
                // MIT License. See LICENSE file for details.
                var __extends =
                  (this && this.__extends) ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();
                Object.defineProperty(exports, "__esModule", { value: true });
                /**
                 * Package base64 implements Base64 encoding and decoding.
                 */
                // Invalid character used in decoding to indicate
                // that the character to decode is out of range of
                // alphabet and cannot be decoded.
                var INVALID_BYTE = 256;
                /**
                 * Implements standard Base64 encoding.
                 *
                 * Operates in constant time.
                 */
                var Coder = /** @class */ (function () {
                  // TODO(dchest): methods to encode chunk-by-chunk.
                  function Coder(_paddingCharacter) {
                    if (_paddingCharacter === void 0) {
                      _paddingCharacter = "=";
                    }
                    this._paddingCharacter = _paddingCharacter;
                  }
                  Coder.prototype.encodedLength = function (length) {
                    if (!this._paddingCharacter) {
                      return ((length * 8 + 5) / 6) | 0;
                    }
                    return (((length + 2) / 3) * 4) | 0;
                  };
                  Coder.prototype.encode = function (data) {
                    var out = "";
                    var i = 0;
                    for (; i < data.length - 2; i += 3) {
                      var c =
                        (data[i] << 16) | (data[i + 1] << 8) | data[i + 2];
                      out += this._encodeByte((c >>> (3 * 6)) & 63);
                      out += this._encodeByte((c >>> (2 * 6)) & 63);
                      out += this._encodeByte((c >>> (1 * 6)) & 63);
                      out += this._encodeByte((c >>> (0 * 6)) & 63);
                    }
                    var left = data.length - i;
                    if (left > 0) {
                      var c =
                        (data[i] << 16) | (left === 2 ? data[i + 1] << 8 : 0);
                      out += this._encodeByte((c >>> (3 * 6)) & 63);
                      out += this._encodeByte((c >>> (2 * 6)) & 63);
                      if (left === 2) {
                        out += this._encodeByte((c >>> (1 * 6)) & 63);
                      } else {
                        out += this._paddingCharacter || "";
                      }
                      out += this._paddingCharacter || "";
                    }
                    return out;
                  };
                  Coder.prototype.maxDecodedLength = function (length) {
                    if (!this._paddingCharacter) {
                      return ((length * 6 + 7) / 8) | 0;
                    }
                    return ((length / 4) * 3) | 0;
                  };
                  Coder.prototype.decodedLength = function (s) {
                    return this.maxDecodedLength(
                      s.length - this._getPaddingLength(s)
                    );
                  };
                  Coder.prototype.decode = function (s) {
                    if (s.length === 0) {
                      return new Uint8Array(0);
                    }
                    var paddingLength = this._getPaddingLength(s);
                    var length = s.length - paddingLength;
                    var out = new Uint8Array(this.maxDecodedLength(length));
                    var op = 0;
                    var i = 0;
                    var haveBad = 0;
                    var v0 = 0,
                      v1 = 0,
                      v2 = 0,
                      v3 = 0;
                    for (; i < length - 4; i += 4) {
                      v0 = this._decodeChar(s.charCodeAt(i + 0));
                      v1 = this._decodeChar(s.charCodeAt(i + 1));
                      v2 = this._decodeChar(s.charCodeAt(i + 2));
                      v3 = this._decodeChar(s.charCodeAt(i + 3));
                      out[op++] = (v0 << 2) | (v1 >>> 4);
                      out[op++] = (v1 << 4) | (v2 >>> 2);
                      out[op++] = (v2 << 6) | v3;
                      haveBad |= v0 & INVALID_BYTE;
                      haveBad |= v1 & INVALID_BYTE;
                      haveBad |= v2 & INVALID_BYTE;
                      haveBad |= v3 & INVALID_BYTE;
                    }
                    if (i < length - 1) {
                      v0 = this._decodeChar(s.charCodeAt(i));
                      v1 = this._decodeChar(s.charCodeAt(i + 1));
                      out[op++] = (v0 << 2) | (v1 >>> 4);
                      haveBad |= v0 & INVALID_BYTE;
                      haveBad |= v1 & INVALID_BYTE;
                    }
                    if (i < length - 2) {
                      v2 = this._decodeChar(s.charCodeAt(i + 2));
                      out[op++] = (v1 << 4) | (v2 >>> 2);
                      haveBad |= v2 & INVALID_BYTE;
                    }
                    if (i < length - 3) {
                      v3 = this._decodeChar(s.charCodeAt(i + 3));
                      out[op++] = (v2 << 6) | v3;
                      haveBad |= v3 & INVALID_BYTE;
                    }
                    if (haveBad !== 0) {
                      throw new Error(
                        "Base64Coder: incorrect characters for decoding"
                      );
                    }
                    return out;
                  };
                  // Standard encoding have the following encoded/decoded ranges,
                  // which we need to convert between.
                  //
                  // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /
                  // Index:   0 - 25                    26 - 51              52 - 61   62  63
                  // ASCII:  65 - 90                    97 - 122             48 - 57   43  47
                  //
                  // Encode 6 bits in b into a new character.
                  Coder.prototype._encodeByte = function (b) {
                    // Encoding uses constant time operations as follows:
                    //
                    // 1. Define comparison of A with B using (A - B) >>> 8:
                    //          if A > B, then result is positive integer
                    //          if A <= B, then result is 0
                    //
                    // 2. Define selection of C or 0 using bitwise AND: X & C:
                    //          if X == 0, then result is 0
                    //          if X != 0, then result is C
                    //
                    // 3. Start with the smallest comparison (b >= 0), which is always
                    //    true, so set the result to the starting ASCII value (65).
                    //
                    // 4. Continue comparing b to higher ASCII values, and selecting
                    //    zero if comparison isn't true, otherwise selecting a value
                    //    to add to result, which:
                    //
                    //          a) undoes the previous addition
                    //          b) provides new value to add
                    //
                    var result = b;
                    // b >= 0
                    result += 65;
                    // b > 25
                    result += ((25 - b) >>> 8) & (0 - 65 - 26 + 97);
                    // b > 51
                    result += ((51 - b) >>> 8) & (26 - 97 - 52 + 48);
                    // b > 61
                    result += ((61 - b) >>> 8) & (52 - 48 - 62 + 43);
                    // b > 62
                    result += ((62 - b) >>> 8) & (62 - 43 - 63 + 47);
                    return String.fromCharCode(result);
                  };
                  // Decode a character code into a byte.
                  // Must return 256 if character is out of alphabet range.
                  Coder.prototype._decodeChar = function (c) {
                    // Decoding works similar to encoding: using the same comparison
                    // function, but now it works on ranges: result is always incremented
                    // by value, but this value becomes zero if the range is not
                    // satisfied.
                    //
                    // Decoding starts with invalid value, 256, which is then
                    // subtracted when the range is satisfied. If none of the ranges
                    // apply, the function returns 256, which is then checked by
                    // the caller to throw error.
                    var result = INVALID_BYTE; // start with invalid character
                    // c == 43 (c > 42 and c < 44)
                    result +=
                      (((42 - c) & (c - 44)) >>> 8) &
                      (-INVALID_BYTE + c - 43 + 62);
                    // c == 47 (c > 46 and c < 48)
                    result +=
                      (((46 - c) & (c - 48)) >>> 8) &
                      (-INVALID_BYTE + c - 47 + 63);
                    // c > 47 and c < 58
                    result +=
                      (((47 - c) & (c - 58)) >>> 8) &
                      (-INVALID_BYTE + c - 48 + 52);
                    // c > 64 and c < 91
                    result +=
                      (((64 - c) & (c - 91)) >>> 8) &
                      (-INVALID_BYTE + c - 65 + 0);
                    // c > 96 and c < 123
                    result +=
                      (((96 - c) & (c - 123)) >>> 8) &
                      (-INVALID_BYTE + c - 97 + 26);
                    return result;
                  };
                  Coder.prototype._getPaddingLength = function (s) {
                    var paddingLength = 0;
                    if (this._paddingCharacter) {
                      for (var i = s.length - 1; i >= 0; i--) {
                        if (s[i] !== this._paddingCharacter) {
                          break;
                        }
                        paddingLength++;
                      }
                      if (s.length < 4 || paddingLength > 2) {
                        throw new Error("Base64Coder: incorrect padding");
                      }
                    }
                    return paddingLength;
                  };
                  return Coder;
                })();
                exports.Coder = Coder;
                var stdCoder = new Coder();
                function encode(data) {
                  return stdCoder.encode(data);
                }
                exports.encode = encode;
                function decode(s) {
                  return stdCoder.decode(s);
                }
                exports.decode = decode;
                /**
                 * Implements URL-safe Base64 encoding.
                 * (Same as Base64, but '+' is replaced with '-', and '/' with '_').
                 *
                 * Operates in constant time.
                 */
                var URLSafeCoder = /** @class */ (function (_super) {
                  __extends(URLSafeCoder, _super);
                  function URLSafeCoder() {
                    return (
                      (_super !== null && _super.apply(this, arguments)) || this
                    );
                  }
                  // URL-safe encoding have the following encoded/decoded ranges:
                  //
                  // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _
                  // Index:   0 - 25                    26 - 51              52 - 61   62  63
                  // ASCII:  65 - 90                    97 - 122             48 - 57   45  95
                  //
                  URLSafeCoder.prototype._encodeByte = function (b) {
                    var result = b;
                    // b >= 0
                    result += 65;
                    // b > 25
                    result += ((25 - b) >>> 8) & (0 - 65 - 26 + 97);
                    // b > 51
                    result += ((51 - b) >>> 8) & (26 - 97 - 52 + 48);
                    // b > 61
                    result += ((61 - b) >>> 8) & (52 - 48 - 62 + 45);
                    // b > 62
                    result += ((62 - b) >>> 8) & (62 - 45 - 63 + 95);
                    return String.fromCharCode(result);
                  };
                  URLSafeCoder.prototype._decodeChar = function (c) {
                    var result = INVALID_BYTE;
                    // c == 45 (c > 44 and c < 46)
                    result +=
                      (((44 - c) & (c - 46)) >>> 8) &
                      (-INVALID_BYTE + c - 45 + 62);
                    // c == 95 (c > 94 and c < 96)
                    result +=
                      (((94 - c) & (c - 96)) >>> 8) &
                      (-INVALID_BYTE + c - 95 + 63);
                    // c > 47 and c < 58
                    result +=
                      (((47 - c) & (c - 58)) >>> 8) &
                      (-INVALID_BYTE + c - 48 + 52);
                    // c > 64 and c < 91
                    result +=
                      (((64 - c) & (c - 91)) >>> 8) &
                      (-INVALID_BYTE + c - 65 + 0);
                    // c > 96 and c < 123
                    result +=
                      (((96 - c) & (c - 123)) >>> 8) &
                      (-INVALID_BYTE + c - 97 + 26);
                    return result;
                  };
                  return URLSafeCoder;
                })(Coder);
                exports.URLSafeCoder = URLSafeCoder;
                var urlSafeCoder = new URLSafeCoder();
                function encodeURLSafe(data) {
                  return urlSafeCoder.encode(data);
                }
                exports.encodeURLSafe = encodeURLSafe;
                function decodeURLSafe(s) {
                  return urlSafeCoder.decode(s);
                }
                exports.decodeURLSafe = decodeURLSafe;
                exports.encodedLength = function (length) {
                  return stdCoder.encodedLength(length);
                };
                exports.maxDecodedLength = function (length) {
                  return stdCoder.maxDecodedLength(length);
                };
                exports.decodedLength = function (s) {
                  return stdCoder.decodedLength(s);
                };

                /***/
              },
              /* 1 */
              /***/ function (module, exports, __webpack_require__) {
                "use strict";

                // Copyright (C) 2016 Dmitry Chestnykh
                // MIT License. See LICENSE file for details.
                Object.defineProperty(exports, "__esModule", { value: true });
                /**
                 * Package utf8 implements UTF-8 encoding and decoding.
                 */
                var INVALID_UTF16 = "utf8: invalid string";
                var INVALID_UTF8 = "utf8: invalid source encoding";
                /**
                 * Encodes the given string into UTF-8 byte array.
                 * Throws if the source string has invalid UTF-16 encoding.
                 */
                function encode(s) {
                  // Calculate result length and allocate output array.
                  // encodedLength() also validates string and throws errors,
                  // so we don't need repeat validation here.
                  var arr = new Uint8Array(encodedLength(s));
                  var pos = 0;
                  for (var i = 0; i < s.length; i++) {
                    var c = s.charCodeAt(i);
                    if (c < 0x80) {
                      arr[pos++] = c;
                    } else if (c < 0x800) {
                      arr[pos++] = 0xc0 | (c >> 6);
                      arr[pos++] = 0x80 | (c & 0x3f);
                    } else if (c < 0xd800) {
                      arr[pos++] = 0xe0 | (c >> 12);
                      arr[pos++] = 0x80 | ((c >> 6) & 0x3f);
                      arr[pos++] = 0x80 | (c & 0x3f);
                    } else {
                      i++; // get one more character
                      c = (c & 0x3ff) << 10;
                      c |= s.charCodeAt(i) & 0x3ff;
                      c += 0x10000;
                      arr[pos++] = 0xf0 | (c >> 18);
                      arr[pos++] = 0x80 | ((c >> 12) & 0x3f);
                      arr[pos++] = 0x80 | ((c >> 6) & 0x3f);
                      arr[pos++] = 0x80 | (c & 0x3f);
                    }
                  }
                  return arr;
                }
                exports.encode = encode;
                /**
                 * Returns the number of bytes required to encode the given string into UTF-8.
                 * Throws if the source string has invalid UTF-16 encoding.
                 */
                function encodedLength(s) {
                  var result = 0;
                  for (var i = 0; i < s.length; i++) {
                    var c = s.charCodeAt(i);
                    if (c < 0x80) {
                      result += 1;
                    } else if (c < 0x800) {
                      result += 2;
                    } else if (c < 0xd800) {
                      result += 3;
                    } else if (c <= 0xdfff) {
                      if (i >= s.length - 1) {
                        throw new Error(INVALID_UTF16);
                      }
                      i++; // "eat" next character
                      result += 4;
                    } else {
                      throw new Error(INVALID_UTF16);
                    }
                  }
                  return result;
                }
                exports.encodedLength = encodedLength;
                /**
                 * Decodes the given byte array from UTF-8 into a string.
                 * Throws if encoding is invalid.
                 */
                function decode(arr) {
                  var chars = [];
                  for (var i = 0; i < arr.length; i++) {
                    var b = arr[i];
                    if (b & 0x80) {
                      var min = void 0;
                      if (b < 0xe0) {
                        // Need 1 more byte.
                        if (i >= arr.length) {
                          throw new Error(INVALID_UTF8);
                        }
                        var n1 = arr[++i];
                        if ((n1 & 0xc0) !== 0x80) {
                          throw new Error(INVALID_UTF8);
                        }
                        b = ((b & 0x1f) << 6) | (n1 & 0x3f);
                        min = 0x80;
                      } else if (b < 0xf0) {
                        // Need 2 more bytes.
                        if (i >= arr.length - 1) {
                          throw new Error(INVALID_UTF8);
                        }
                        var n1 = arr[++i];
                        var n2 = arr[++i];
                        if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80) {
                          throw new Error(INVALID_UTF8);
                        }
                        b =
                          ((b & 0x0f) << 12) | ((n1 & 0x3f) << 6) | (n2 & 0x3f);
                        min = 0x800;
                      } else if (b < 0xf8) {
                        // Need 3 more bytes.
                        if (i >= arr.length - 2) {
                          throw new Error(INVALID_UTF8);
                        }
                        var n1 = arr[++i];
                        var n2 = arr[++i];
                        var n3 = arr[++i];
                        if (
                          (n1 & 0xc0) !== 0x80 ||
                          (n2 & 0xc0) !== 0x80 ||
                          (n3 & 0xc0) !== 0x80
                        ) {
                          throw new Error(INVALID_UTF8);
                        }
                        b =
                          ((b & 0x0f) << 18) |
                          ((n1 & 0x3f) << 12) |
                          ((n2 & 0x3f) << 6) |
                          (n3 & 0x3f);
                        min = 0x10000;
                      } else {
                        throw new Error(INVALID_UTF8);
                      }
                      if (b < min || (b >= 0xd800 && b <= 0xdfff)) {
                        throw new Error(INVALID_UTF8);
                      }
                      if (b >= 0x10000) {
                        // Surrogate pair.
                        if (b > 0x10ffff) {
                          throw new Error(INVALID_UTF8);
                        }
                        b -= 0x10000;
                        chars.push(String.fromCharCode(0xd800 | (b >> 10)));
                        b = 0xdc00 | (b & 0x3ff);
                      }
                    }
                    chars.push(String.fromCharCode(b));
                  }
                  return chars.join("");
                }
                exports.decode = decode;

                /***/
              },
              /* 2 */
              /***/ function (
                module,
                exports,
                __nested_webpack_require_19901__
              ) {
                // required so we don't have to do require('pusher').default etc.
                module.exports = __nested_webpack_require_19901__(3).default;

                /***/
              },
              /* 3 */
              /***/ function (
                module,
                __webpack_exports__,
                __nested_webpack_require_20105__
              ) {
                "use strict";
                // ESM COMPAT FLAG
                __nested_webpack_require_20105__.r(__webpack_exports__);

                // CONCATENATED MODULE: ./src/runtimes/web/dom/script_receiver_factory.ts
                var ScriptReceiverFactory = (function () {
                  function ScriptReceiverFactory(prefix, name) {
                    this.lastId = 0;
                    this.prefix = prefix;
                    this.name = name;
                  }
                  ScriptReceiverFactory.prototype.create = function (callback) {
                    this.lastId++;
                    var number = this.lastId;
                    var id = this.prefix + number;
                    var name = this.name + "[" + number + "]";
                    var called = false;
                    var callbackWrapper = function () {
                      if (!called) {
                        callback.apply(null, arguments);
                        called = true;
                      }
                    };
                    this[number] = callbackWrapper;
                    return {
                      number: number,
                      id: id,
                      name: name,
                      callback: callbackWrapper,
                    };
                  };
                  ScriptReceiverFactory.prototype.remove = function (receiver) {
                    delete this[receiver.number];
                  };
                  return ScriptReceiverFactory;
                })();

                var ScriptReceivers = new ScriptReceiverFactory(
                  "_pusher_script_",
                  "Pusher.ScriptReceivers"
                );

                // CONCATENATED MODULE: ./src/core/defaults.ts
                var Defaults = {
                  VERSION: "7.5.0",
                  PROTOCOL: 7,
                  wsPort: 80,
                  wssPort: 443,
                  wsPath: "",
                  httpHost: "sockjs.pusher.com",
                  httpPort: 80,
                  httpsPort: 443,
                  httpPath: "/pusher",
                  stats_host: "stats.pusher.com",
                  authEndpoint: "/pusher/auth",
                  authTransport: "ajax",
                  activityTimeout: 120000,
                  pongTimeout: 30000,
                  unavailableTimeout: 10000,
                  cluster: "mt1",
                  userAuthentication: {
                    endpoint: "/pusher/user-auth",
                    transport: "ajax",
                  },
                  channelAuthorization: {
                    endpoint: "/pusher/auth",
                    transport: "ajax",
                  },
                  cdn_http: "http://js.pusher.com",
                  cdn_https: "https://js.pusher.com",
                  dependency_suffix: "",
                };
                /* harmony default export */ var defaults = Defaults;

                // CONCATENATED MODULE: ./src/runtimes/web/dom/dependency_loader.ts

                var dependency_loader_DependencyLoader = (function () {
                  function DependencyLoader(options) {
                    this.options = options;
                    this.receivers = options.receivers || ScriptReceivers;
                    this.loading = {};
                  }
                  DependencyLoader.prototype.load = function (
                    name,
                    options,
                    callback
                  ) {
                    var self = this;
                    if (self.loading[name] && self.loading[name].length > 0) {
                      self.loading[name].push(callback);
                    } else {
                      self.loading[name] = [callback];
                      var request = runtime.createScriptRequest(
                        self.getPath(name, options)
                      );
                      var receiver = self.receivers.create(function (error) {
                        self.receivers.remove(receiver);
                        if (self.loading[name]) {
                          var callbacks = self.loading[name];
                          delete self.loading[name];
                          var successCallback = function (wasSuccessful) {
                            if (!wasSuccessful) {
                              request.cleanup();
                            }
                          };
                          for (var i = 0; i < callbacks.length; i++) {
                            callbacks[i](error, successCallback);
                          }
                        }
                      });
                      request.send(receiver);
                    }
                  };
                  DependencyLoader.prototype.getRoot = function (options) {
                    var cdn;
                    var protocol = runtime.getDocument().location.protocol;
                    if ((options && options.useTLS) || protocol === "https:") {
                      cdn = this.options.cdn_https;
                    } else {
                      cdn = this.options.cdn_http;
                    }
                    return cdn.replace(/\/*$/, "") + "/" + this.options.version;
                  };
                  DependencyLoader.prototype.getPath = function (
                    name,
                    options
                  ) {
                    return (
                      this.getRoot(options) +
                      "/" +
                      name +
                      this.options.suffix +
                      ".js"
                    );
                  };
                  return DependencyLoader;
                })();
                /* harmony default export */ var dependency_loader =
                  dependency_loader_DependencyLoader;

                // CONCATENATED MODULE: ./src/runtimes/web/dom/dependencies.ts

                var DependenciesReceivers = new ScriptReceiverFactory(
                  "_pusher_dependencies",
                  "Pusher.DependenciesReceivers"
                );
                var Dependencies = new dependency_loader({
                  cdn_http: defaults.cdn_http,
                  cdn_https: defaults.cdn_https,
                  version: defaults.VERSION,
                  suffix: defaults.dependency_suffix,
                  receivers: DependenciesReceivers,
                });

                // CONCATENATED MODULE: ./src/core/utils/url_store.ts
                var urlStore = {
                  baseUrl: "https://pusher.com",
                  urls: {
                    authenticationEndpoint: {
                      path: "/docs/channels/server_api/authenticating_users",
                    },
                    authorizationEndpoint: {
                      path: "/docs/channels/server_api/authorizing-users/",
                    },
                    javascriptQuickStart: {
                      path: "/docs/javascript_quick_start",
                    },
                    triggeringClientEvents: {
                      path: "/docs/client_api_guide/client_events#trigger-events",
                    },
                    encryptedChannelSupport: {
                      fullUrl:
                        "https://github.com/pusher/pusher-js/tree/cc491015371a4bde5743d1c87a0fbac0feb53195#encrypted-channel-support",
                    },
                  },
                };
                var buildLogSuffix = function (key) {
                  var urlPrefix = "See:";
                  var urlObj = urlStore.urls[key];
                  if (!urlObj) return "";
                  var url;
                  if (urlObj.fullUrl) {
                    url = urlObj.fullUrl;
                  } else if (urlObj.path) {
                    url = urlStore.baseUrl + urlObj.path;
                  }
                  if (!url) return "";
                  return urlPrefix + " " + url;
                };
                /* harmony default export */ var url_store = {
                  buildLogSuffix: buildLogSuffix,
                };

                // CONCATENATED MODULE: ./src/core/auth/options.ts
                var AuthRequestType;
                (function (AuthRequestType) {
                  AuthRequestType["UserAuthentication"] = "user-authentication";
                  AuthRequestType["ChannelAuthorization"] =
                    "channel-authorization";
                })(AuthRequestType || (AuthRequestType = {}));

                // CONCATENATED MODULE: ./src/core/errors.ts
                var __extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();
                var BadEventName = (function (_super) {
                  __extends(BadEventName, _super);
                  function BadEventName(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return BadEventName;
                })(Error);

                var BadChannelName = (function (_super) {
                  __extends(BadChannelName, _super);
                  function BadChannelName(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return BadChannelName;
                })(Error);

                var RequestTimedOut = (function (_super) {
                  __extends(RequestTimedOut, _super);
                  function RequestTimedOut(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return RequestTimedOut;
                })(Error);

                var TransportPriorityTooLow = (function (_super) {
                  __extends(TransportPriorityTooLow, _super);
                  function TransportPriorityTooLow(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return TransportPriorityTooLow;
                })(Error);

                var TransportClosed = (function (_super) {
                  __extends(TransportClosed, _super);
                  function TransportClosed(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return TransportClosed;
                })(Error);

                var UnsupportedFeature = (function (_super) {
                  __extends(UnsupportedFeature, _super);
                  function UnsupportedFeature(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return UnsupportedFeature;
                })(Error);

                var UnsupportedTransport = (function (_super) {
                  __extends(UnsupportedTransport, _super);
                  function UnsupportedTransport(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return UnsupportedTransport;
                })(Error);

                var UnsupportedStrategy = (function (_super) {
                  __extends(UnsupportedStrategy, _super);
                  function UnsupportedStrategy(msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return UnsupportedStrategy;
                })(Error);

                var HTTPAuthError = (function (_super) {
                  __extends(HTTPAuthError, _super);
                  function HTTPAuthError(status, msg) {
                    var _newTarget = this.constructor;
                    var _this = _super.call(this, msg) || this;
                    _this.status = status;
                    Object.setPrototypeOf(_this, _newTarget.prototype);
                    return _this;
                  }
                  return HTTPAuthError;
                })(Error);

                // CONCATENATED MODULE: ./src/runtimes/isomorphic/auth/xhr_auth.ts

                var ajax = function (
                  context,
                  query,
                  authOptions,
                  authRequestType,
                  callback
                ) {
                  var xhr = runtime.createXHR();
                  xhr.open("POST", authOptions.endpoint, true);
                  xhr.setRequestHeader(
                    "Content-Type",
                    "application/x-www-form-urlencoded"
                  );
                  for (var headerName in authOptions.headers) {
                    xhr.setRequestHeader(
                      headerName,
                      authOptions.headers[headerName]
                    );
                  }
                  xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                      if (xhr.status === 200) {
                        var data = void 0;
                        var parsed = false;
                        try {
                          data = JSON.parse(xhr.responseText);
                          parsed = true;
                        } catch (e) {
                          callback(
                            new HTTPAuthError(
                              200,
                              "JSON returned from " +
                              authRequestType.toString() +
                              " endpoint was invalid, yet status code was 200. Data was: " +
                              xhr.responseText
                            ),
                            null
                          );
                        }
                        if (parsed) {
                          callback(null, data);
                        }
                      } else {
                        var suffix = "";
                        switch (authRequestType) {
                          case AuthRequestType.UserAuthentication:
                            suffix = url_store.buildLogSuffix(
                              "authenticationEndpoint"
                            );
                            break;
                          case AuthRequestType.ChannelAuthorization:
                            suffix =
                              "Clients must be authorized to join private or presence channels. " +
                              url_store.buildLogSuffix("authorizationEndpoint");
                            break;
                        }
                        callback(
                          new HTTPAuthError(
                            xhr.status,
                            "Unable to retrieve auth string from " +
                            authRequestType.toString() +
                            " endpoint - " +
                            ("received status: " +
                              xhr.status +
                              " from " +
                              authOptions.endpoint +
                              ". " +
                              suffix)
                          ),
                          null
                        );
                      }
                    }
                  };
                  xhr.send(query);
                  return xhr;
                };
                /* harmony default export */ var xhr_auth = ajax;

                // CONCATENATED MODULE: ./src/core/base64.ts
                function encode(s) {
                  return btoa(utob(s));
                }
                var fromCharCode = String.fromCharCode;
                var b64chars =
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var b64tab = {};
                for (
                  var base64_i = 0, l = b64chars.length;
                  base64_i < l;
                  base64_i++
                ) {
                  b64tab[b64chars.charAt(base64_i)] = base64_i;
                }
                var cb_utob = function (c) {
                  var cc = c.charCodeAt(0);
                  return cc < 0x80
                    ? c
                    : cc < 0x800
                      ? fromCharCode(0xc0 | (cc >>> 6)) +
                      fromCharCode(0x80 | (cc & 0x3f))
                      : fromCharCode(0xe0 | ((cc >>> 12) & 0x0f)) +
                      fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) +
                      fromCharCode(0x80 | (cc & 0x3f));
                };
                var utob = function (u) {
                  return u.replace(/[^\x00-\x7F]/g, cb_utob);
                };
                var cb_encode = function (ccc) {
                  var padlen = [0, 2, 1][ccc.length % 3];
                  var ord =
                    (ccc.charCodeAt(0) << 16) |
                    ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8) |
                    (ccc.length > 2 ? ccc.charCodeAt(2) : 0);
                  var chars = [
                    b64chars.charAt(ord >>> 18),
                    b64chars.charAt((ord >>> 12) & 63),
                    padlen >= 2 ? "=" : b64chars.charAt((ord >>> 6) & 63),
                    padlen >= 1 ? "=" : b64chars.charAt(ord & 63),
                  ];
                  return chars.join("");
                };
                var btoa =
                  window.btoa ||
                  function (b) {
                    return b.replace(/[\s\S]{1,3}/g, cb_encode);
                  };

                // CONCATENATED MODULE: ./src/core/utils/timers/abstract_timer.ts
                var Timer = (function () {
                  function Timer(set, clear, delay, callback) {
                    var _this = this;
                    this.clear = clear;
                    this.timer = set(function () {
                      if (_this.timer) {
                        _this.timer = callback(_this.timer);
                      }
                    }, delay);
                  }
                  Timer.prototype.isRunning = function () {
                    return this.timer !== null;
                  };
                  Timer.prototype.ensureAborted = function () {
                    if (this.timer) {
                      this.clear(this.timer);
                      this.timer = null;
                    }
                  };
                  return Timer;
                })();
                /* harmony default export */ var abstract_timer = Timer;

                // CONCATENATED MODULE: ./src/core/utils/timers/index.ts
                var timers_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                function timers_clearTimeout(timer) {
                  window.clearTimeout(timer);
                }
                function timers_clearInterval(timer) {
                  window.clearInterval(timer);
                }
                var OneOffTimer = (function (_super) {
                  timers_extends(OneOffTimer, _super);
                  function OneOffTimer(delay, callback) {
                    return (
                      _super.call(
                        this,
                        setTimeout,
                        timers_clearTimeout,
                        delay,
                        function (timer) {
                          callback();
                          return null;
                        }
                      ) || this
                    );
                  }
                  return OneOffTimer;
                })(abstract_timer);

                var PeriodicTimer = (function (_super) {
                  timers_extends(PeriodicTimer, _super);
                  function PeriodicTimer(delay, callback) {
                    return (
                      _super.call(
                        this,
                        setInterval,
                        timers_clearInterval,
                        delay,
                        function (timer) {
                          callback();
                          return timer;
                        }
                      ) || this
                    );
                  }
                  return PeriodicTimer;
                })(abstract_timer);

                // CONCATENATED MODULE: ./src/core/util.ts

                var Util = {
                  now: function () {
                    if (Date.now) {
                      return Date.now();
                    } else {
                      return new Date().valueOf();
                    }
                  },
                  defer: function (callback) {
                    return new OneOffTimer(0, callback);
                  },
                  method: function (name) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                      args[_i - 1] = arguments[_i];
                    }
                    var boundArguments = Array.prototype.slice.call(
                      arguments,
                      1
                    );
                    return function (object) {
                      return object[name].apply(
                        object,
                        boundArguments.concat(arguments)
                      );
                    };
                  },
                };
                /* harmony default export */ var util = Util;

                // CONCATENATED MODULE: ./src/core/utils/collections.ts

                function extend(target) {
                  var sources = [];
                  for (var _i = 1; _i < arguments.length; _i++) {
                    sources[_i - 1] = arguments[_i];
                  }
                  for (var i = 0; i < sources.length; i++) {
                    var extensions = sources[i];
                    for (var property in extensions) {
                      if (
                        extensions[property] &&
                        extensions[property].constructor &&
                        extensions[property].constructor === Object
                      ) {
                        target[property] = extend(
                          target[property] || {},
                          extensions[property]
                        );
                      } else {
                        target[property] = extensions[property];
                      }
                    }
                  }
                  return target;
                }
                function stringify() {
                  var m = ["Pusher"];
                  for (var i = 0; i < arguments.length; i++) {
                    if (typeof arguments[i] === "string") {
                      m.push(arguments[i]);
                    } else {
                      m.push(safeJSONStringify(arguments[i]));
                    }
                  }
                  return m.join(" : ");
                }
                function arrayIndexOf(array, item) {
                  var nativeIndexOf = Array.prototype.indexOf;
                  if (array === null) {
                    return -1;
                  }
                  if (nativeIndexOf && array.indexOf === nativeIndexOf) {
                    return array.indexOf(item);
                  }
                  for (var i = 0, l = array.length; i < l; i++) {
                    if (array[i] === item) {
                      return i;
                    }
                  }
                  return -1;
                }
                function objectApply(object, f) {
                  for (var key in object) {
                    if (Object.prototype.hasOwnProperty.call(object, key)) {
                      f(object[key], key, object);
                    }
                  }
                }
                function keys(object) {
                  var keys = [];
                  objectApply(object, function (_, key) {
                    keys.push(key);
                  });
                  return keys;
                }
                function values(object) {
                  var values = [];
                  objectApply(object, function (value) {
                    values.push(value);
                  });
                  return values;
                }
                function apply(array, f, context) {
                  for (var i = 0; i < array.length; i++) {
                    f.call(context || window, array[i], i, array);
                  }
                }
                function map(array, f) {
                  var result = [];
                  for (var i = 0; i < array.length; i++) {
                    result.push(f(array[i], i, array, result));
                  }
                  return result;
                }
                function mapObject(object, f) {
                  var result = {};
                  objectApply(object, function (value, key) {
                    result[key] = f(value);
                  });
                  return result;
                }
                function filter(array, test) {
                  test =
                    test ||
                    function (value) {
                      return !!value;
                    };
                  var result = [];
                  for (var i = 0; i < array.length; i++) {
                    if (test(array[i], i, array, result)) {
                      result.push(array[i]);
                    }
                  }
                  return result;
                }
                function filterObject(object, test) {
                  var result = {};
                  objectApply(object, function (value, key) {
                    if (
                      (test && test(value, key, object, result)) ||
                      Boolean(value)
                    ) {
                      result[key] = value;
                    }
                  });
                  return result;
                }
                function flatten(object) {
                  var result = [];
                  objectApply(object, function (value, key) {
                    result.push([key, value]);
                  });
                  return result;
                }
                function any(array, test) {
                  for (var i = 0; i < array.length; i++) {
                    if (test(array[i], i, array)) {
                      return true;
                    }
                  }
                  return false;
                }
                function collections_all(array, test) {
                  for (var i = 0; i < array.length; i++) {
                    if (!test(array[i], i, array)) {
                      return false;
                    }
                  }
                  return true;
                }
                function encodeParamsObject(data) {
                  return mapObject(data, function (value) {
                    if (typeof value === "object") {
                      value = safeJSONStringify(value);
                    }
                    return encodeURIComponent(encode(value.toString()));
                  });
                }
                function buildQueryString(data) {
                  var params = filterObject(data, function (value) {
                    return value !== undefined;
                  });
                  var query = map(
                    flatten(encodeParamsObject(params)),
                    util.method("join", "=")
                  ).join("&");
                  return query;
                }
                function decycleObject(object) {
                  var objects = [],
                    paths = [];
                  return (function derez(value, path) {
                    var i, name, nu;
                    switch (typeof value) {
                      case "object":
                        if (!value) {
                          return null;
                        }
                        for (i = 0; i < objects.length; i += 1) {
                          if (objects[i] === value) {
                            return { $ref: paths[i] };
                          }
                        }
                        objects.push(value);
                        paths.push(path);
                        if (
                          Object.prototype.toString.apply(value) ===
                          "[object Array]"
                        ) {
                          nu = [];
                          for (i = 0; i < value.length; i += 1) {
                            nu[i] = derez(value[i], path + "[" + i + "]");
                          }
                        } else {
                          nu = {};
                          for (name in value) {
                            if (
                              Object.prototype.hasOwnProperty.call(value, name)
                            ) {
                              nu[name] = derez(
                                value[name],
                                path + "[" + JSON.stringify(name) + "]"
                              );
                            }
                          }
                        }
                        return nu;
                      case "number":
                      case "string":
                      case "boolean":
                        return value;
                    }
                  })(object, "$");
                }
                function safeJSONStringify(source) {
                  try {
                    return JSON.stringify(source);
                  } catch (e) {
                    return JSON.stringify(decycleObject(source));
                  }
                }

                // CONCATENATED MODULE: ./src/core/logger.ts

                var logger_Logger = (function () {
                  function Logger() {
                    this.globalLog = function (message) {
                      if (window.console && window.console.log) {
                        window.console.log(message);
                      }
                    };
                  }
                  Logger.prototype.debug = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                    }
                    this.log(this.globalLog, args);
                  };
                  Logger.prototype.warn = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                    }
                    this.log(this.globalLogWarn, args);
                  };
                  Logger.prototype.error = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                      args[_i] = arguments[_i];
                    }
                    this.log(this.globalLogError, args);
                  };
                  Logger.prototype.globalLogWarn = function (message) {
                    if (window.console && window.console.warn) {
                      window.console.warn(message);
                    } else {
                      this.globalLog(message);
                    }
                  };
                  Logger.prototype.globalLogError = function (message) {
                    if (window.console && window.console.error) {
                      window.console.error(message);
                    } else {
                      this.globalLogWarn(message);
                    }
                  };
                  Logger.prototype.log = function (defaultLoggingFunction) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                      args[_i - 1] = arguments[_i];
                    }
                    var message = stringify.apply(this, arguments);
                    if (core_pusher.log) {
                      core_pusher.log(message);
                    } else if (core_pusher.logToConsole) {
                      var log = defaultLoggingFunction.bind(this);
                      log(message);
                    }
                  };
                  return Logger;
                })();
                /* harmony default export */ var logger = new logger_Logger();

                // CONCATENATED MODULE: ./src/runtimes/web/auth/jsonp_auth.ts

                var jsonp = function (
                  context,
                  query,
                  authOptions,
                  authRequestType,
                  callback
                ) {
                  if (authOptions.headers !== undefined) {
                    logger.warn(
                      "To send headers with the " +
                      authRequestType.toString() +
                      " request, you must use AJAX, rather than JSONP."
                    );
                  }
                  var callbackName = context.nextAuthCallbackID.toString();
                  context.nextAuthCallbackID++;
                  var document = context.getDocument();
                  var script = document.createElement("script");
                  context.auth_callbacks[callbackName] = function (data) {
                    callback(null, data);
                  };
                  var callback_name =
                    "Pusher.auth_callbacks['" + callbackName + "']";
                  script.src =
                    authOptions.endpoint +
                    "?callback=" +
                    encodeURIComponent(callback_name) +
                    "&" +
                    query;
                  var head =
                    document.getElementsByTagName("head")[0] ||
                    document.documentElement;
                  head.insertBefore(script, head.firstChild);
                };
                /* harmony default export */ var jsonp_auth = jsonp;

                // CONCATENATED MODULE: ./src/runtimes/web/dom/script_request.ts
                var ScriptRequest = (function () {
                  function ScriptRequest(src) {
                    this.src = src;
                  }
                  ScriptRequest.prototype.send = function (receiver) {
                    var self = this;
                    var errorString = "Error loading " + self.src;
                    self.script = document.createElement("script");
                    self.script.id = receiver.id;
                    self.script.src = self.src;
                    self.script.type = "text/javascript";
                    self.script.charset = "UTF-8";
                    if (self.script.addEventListener) {
                      self.script.onerror = function () {
                        receiver.callback(errorString);
                      };
                      self.script.onload = function () {
                        receiver.callback(null);
                      };
                    } else {
                      self.script.onreadystatechange = function () {
                        if (
                          self.script.readyState === "loaded" ||
                          self.script.readyState === "complete"
                        ) {
                          receiver.callback(null);
                        }
                      };
                    }
                    if (
                      self.script.async === undefined &&
                      document.attachEvent &&
                      /opera/i.test(navigator.userAgent)
                    ) {
                      self.errorScript = document.createElement("script");
                      self.errorScript.id = receiver.id + "_error";
                      self.errorScript.text =
                        receiver.name + "('" + errorString + "');";
                      self.script.async = self.errorScript.async = false;
                    } else {
                      self.script.async = true;
                    }
                    var head = document.getElementsByTagName("head")[0];
                    head.insertBefore(self.script, head.firstChild);
                    if (self.errorScript) {
                      head.insertBefore(
                        self.errorScript,
                        self.script.nextSibling
                      );
                    }
                  };
                  ScriptRequest.prototype.cleanup = function () {
                    if (this.script) {
                      this.script.onload = this.script.onerror = null;
                      this.script.onreadystatechange = null;
                    }
                    if (this.script && this.script.parentNode) {
                      this.script.parentNode.removeChild(this.script);
                    }
                    if (this.errorScript && this.errorScript.parentNode) {
                      this.errorScript.parentNode.removeChild(this.errorScript);
                    }
                    this.script = null;
                    this.errorScript = null;
                  };
                  return ScriptRequest;
                })();
                /* harmony default export */ var script_request = ScriptRequest;

                // CONCATENATED MODULE: ./src/runtimes/web/dom/jsonp_request.ts

                var jsonp_request_JSONPRequest = (function () {
                  function JSONPRequest(url, data) {
                    this.url = url;
                    this.data = data;
                  }
                  JSONPRequest.prototype.send = function (receiver) {
                    if (this.request) {
                      return;
                    }
                    var query = buildQueryString(this.data);
                    var url = this.url + "/" + receiver.number + "?" + query;
                    this.request = runtime.createScriptRequest(url);
                    this.request.send(receiver);
                  };
                  JSONPRequest.prototype.cleanup = function () {
                    if (this.request) {
                      this.request.cleanup();
                    }
                  };
                  return JSONPRequest;
                })();
                /* harmony default export */ var jsonp_request =
                  jsonp_request_JSONPRequest;

                // CONCATENATED MODULE: ./src/runtimes/web/timeline/jsonp_timeline.ts

                var getAgent = function (sender, useTLS) {
                  return function (data, callback) {
                    var scheme = "http" + (useTLS ? "s" : "") + "://";
                    var url =
                      scheme +
                      (sender.host || sender.options.host) +
                      sender.options.path;
                    var request = runtime.createJSONPRequest(url, data);
                    var receiver = runtime.ScriptReceivers.create(function (
                      error,
                      result
                    ) {
                      ScriptReceivers.remove(receiver);
                      request.cleanup();
                      if (result && result.host) {
                        sender.host = result.host;
                      }
                      if (callback) {
                        callback(error, result);
                      }
                    });
                    request.send(receiver);
                  };
                };
                var jsonp_timeline_jsonp = {
                  name: "jsonp",
                  getAgent: getAgent,
                };
                /* harmony default export */ var jsonp_timeline =
                  jsonp_timeline_jsonp;

                // CONCATENATED MODULE: ./src/core/transports/url_schemes.ts

                function getGenericURL(baseScheme, params, path) {
                  var scheme = baseScheme + (params.useTLS ? "s" : "");
                  var host = params.useTLS ? params.hostTLS : params.hostNonTLS;
                  return scheme + "://" + host + path;
                }
                function getGenericPath(key, queryString) {
                  var path = "/app/" + key;
                  var query =
                    "?protocol=" +
                    defaults.PROTOCOL +
                    "&client=js" +
                    "&version=" +
                    defaults.VERSION +
                    (queryString ? "&" + queryString : "");
                  return path + query;
                }
                var ws = {
                  getInitial: function (key, params) {
                    var path =
                      (params.httpPath || "") +
                      getGenericPath(key, "flash=false");
                    return getGenericURL("ws", params, path);
                  },
                };
                var http = {
                  getInitial: function (key, params) {
                    var path =
                      (params.httpPath || "/pusher") + getGenericPath(key);
                    return getGenericURL("http", params, path);
                  },
                };
                var sockjs = {
                  getInitial: function (key, params) {
                    return getGenericURL(
                      "http",
                      params,
                      params.httpPath || "/pusher"
                    );
                  },
                  getPath: function (key, params) {
                    return getGenericPath(key);
                  },
                };

                // CONCATENATED MODULE: ./src/core/events/callback_registry.ts

                var callback_registry_CallbackRegistry = (function () {
                  function CallbackRegistry() {
                    this._callbacks = {};
                  }
                  CallbackRegistry.prototype.get = function (name) {
                    return this._callbacks[prefix(name)];
                  };
                  CallbackRegistry.prototype.add = function (
                    name,
                    callback,
                    context
                  ) {
                    var prefixedEventName = prefix(name);
                    this._callbacks[prefixedEventName] =
                      this._callbacks[prefixedEventName] || [];
                    this._callbacks[prefixedEventName].push({
                      fn: callback,
                      context: context,
                    });
                  };
                  CallbackRegistry.prototype.remove = function (
                    name,
                    callback,
                    context
                  ) {
                    if (!name && !callback && !context) {
                      this._callbacks = {};
                      return;
                    }
                    var names = name ? [prefix(name)] : keys(this._callbacks);
                    if (callback || context) {
                      this.removeCallback(names, callback, context);
                    } else {
                      this.removeAllCallbacks(names);
                    }
                  };
                  CallbackRegistry.prototype.removeCallback = function (
                    names,
                    callback,
                    context
                  ) {
                    apply(
                      names,
                      function (name) {
                        this._callbacks[name] = filter(
                          this._callbacks[name] || [],
                          function (binding) {
                            return (
                              (callback && callback !== binding.fn) ||
                              (context && context !== binding.context)
                            );
                          }
                        );
                        if (this._callbacks[name].length === 0) {
                          delete this._callbacks[name];
                        }
                      },
                      this
                    );
                  };
                  CallbackRegistry.prototype.removeAllCallbacks = function (
                    names
                  ) {
                    apply(
                      names,
                      function (name) {
                        delete this._callbacks[name];
                      },
                      this
                    );
                  };
                  return CallbackRegistry;
                })();
                /* harmony default export */ var callback_registry =
                  callback_registry_CallbackRegistry;
                function prefix(name) {
                  return "_" + name;
                }

                // CONCATENATED MODULE: ./src/core/events/dispatcher.ts

                var dispatcher_Dispatcher = (function () {
                  function Dispatcher(failThrough) {
                    this.callbacks = new callback_registry();
                    this.global_callbacks = [];
                    this.failThrough = failThrough;
                  }
                  Dispatcher.prototype.bind = function (
                    eventName,
                    callback,
                    context
                  ) {
                    this.callbacks.add(eventName, callback, context);
                    return this;
                  };
                  Dispatcher.prototype.bind_global = function (callback) {
                    this.global_callbacks.push(callback);
                    return this;
                  };
                  Dispatcher.prototype.unbind = function (
                    eventName,
                    callback,
                    context
                  ) {
                    this.callbacks.remove(eventName, callback, context);
                    return this;
                  };
                  Dispatcher.prototype.unbind_global = function (callback) {
                    if (!callback) {
                      this.global_callbacks = [];
                      return this;
                    }
                    this.global_callbacks = filter(
                      this.global_callbacks || [],
                      function (c) {
                        return c !== callback;
                      }
                    );
                    return this;
                  };
                  Dispatcher.prototype.unbind_all = function () {
                    this.unbind();
                    this.unbind_global();
                    return this;
                  };
                  Dispatcher.prototype.emit = function (
                    eventName,
                    data,
                    metadata
                  ) {
                    for (var i = 0; i < this.global_callbacks.length; i++) {
                      this.global_callbacks[i](eventName, data);
                    }
                    var callbacks = this.callbacks.get(eventName);
                    var args = [];
                    if (metadata) {
                      args.push(data, metadata);
                    } else if (data) {
                      args.push(data);
                    }
                    if (callbacks && callbacks.length > 0) {
                      for (var i = 0; i < callbacks.length; i++) {
                        callbacks[i].fn.apply(
                          callbacks[i].context || window,
                          args
                        );
                      }
                    } else if (this.failThrough) {
                      this.failThrough(eventName, data);
                    }
                    return this;
                  };
                  return Dispatcher;
                })();
                /* harmony default export */ var dispatcher =
                  dispatcher_Dispatcher;

                // CONCATENATED MODULE: ./src/core/transports/transport_connection.ts
                var transport_connection_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var transport_connection_TransportConnection = (function (
                  _super
                ) {
                  transport_connection_extends(TransportConnection, _super);
                  function TransportConnection(
                    hooks,
                    name,
                    priority,
                    key,
                    options
                  ) {
                    var _this = _super.call(this) || this;
                    _this.initialize = runtime.transportConnectionInitializer;
                    _this.hooks = hooks;
                    _this.name = name;
                    _this.priority = priority;
                    _this.key = key;
                    _this.options = options;
                    _this.state = "new";
                    _this.timeline = options.timeline;
                    _this.activityTimeout = options.activityTimeout;
                    _this.id = _this.timeline.generateUniqueID();
                    return _this;
                  }
                  TransportConnection.prototype.handlesActivityChecks =
                    function () {
                      return Boolean(this.hooks.handlesActivityChecks);
                    };
                  TransportConnection.prototype.supportsPing = function () {
                    return Boolean(this.hooks.supportsPing);
                  };
                  TransportConnection.prototype.connect = function () {
                    var _this = this;
                    if (this.socket || this.state !== "initialized") {
                      return false;
                    }
                    var url = this.hooks.urls.getInitial(
                      this.key,
                      this.options
                    );
                    try {
                      this.socket = this.hooks.getSocket(url, this.options);
                    } catch (e) {
                      util.defer(function () {
                        _this.onError(e);
                        _this.changeState("closed");
                      });
                      return false;
                    }
                    this.bindListeners();
                    logger.debug("Connecting", {
                      transport: this.name,
                      url: url,
                    });
                    this.changeState("connecting");
                    return true;
                  };
                  TransportConnection.prototype.close = function () {
                    if (this.socket) {
                      this.socket.close();
                      return true;
                    } else {
                      return false;
                    }
                  };
                  TransportConnection.prototype.send = function (data) {
                    var _this = this;
                    if (this.state === "open") {
                      util.defer(function () {
                        if (_this.socket) {
                          _this.socket.send(data);
                        }
                      });
                      return true;
                    } else {
                      return false;
                    }
                  };
                  TransportConnection.prototype.ping = function () {
                    if (this.state === "open" && this.supportsPing()) {
                      this.socket.ping();
                    }
                  };
                  TransportConnection.prototype.onOpen = function () {
                    if (this.hooks.beforeOpen) {
                      this.hooks.beforeOpen(
                        this.socket,
                        this.hooks.urls.getPath(this.key, this.options)
                      );
                    }
                    this.changeState("open");
                    this.socket.onopen = undefined;
                  };
                  TransportConnection.prototype.onError = function (error) {
                    this.emit("error", {
                      type: "WebSocketError",
                      error: error,
                    });
                    this.timeline.error(
                      this.buildTimelineMessage({ error: error.toString() })
                    );
                  };
                  TransportConnection.prototype.onClose = function (
                    closeEvent
                  ) {
                    if (closeEvent) {
                      this.changeState("closed", {
                        code: closeEvent.code,
                        reason: closeEvent.reason,
                        wasClean: closeEvent.wasClean,
                      });
                    } else {
                      this.changeState("closed");
                    }
                    this.unbindListeners();
                    this.socket = undefined;
                  };
                  TransportConnection.prototype.onMessage = function (message) {
                    this.emit("message", message);
                  };
                  TransportConnection.prototype.onActivity = function () {
                    this.emit("activity");
                  };
                  TransportConnection.prototype.bindListeners = function () {
                    var _this = this;
                    this.socket.onopen = function () {
                      _this.onOpen();
                    };
                    this.socket.onerror = function (error) {
                      _this.onError(error);
                    };
                    this.socket.onclose = function (closeEvent) {
                      _this.onClose(closeEvent);
                    };
                    this.socket.onmessage = function (message) {
                      _this.onMessage(message);
                    };
                    if (this.supportsPing()) {
                      this.socket.onactivity = function () {
                        _this.onActivity();
                      };
                    }
                  };
                  TransportConnection.prototype.unbindListeners = function () {
                    if (this.socket) {
                      this.socket.onopen = undefined;
                      this.socket.onerror = undefined;
                      this.socket.onclose = undefined;
                      this.socket.onmessage = undefined;
                      if (this.supportsPing()) {
                        this.socket.onactivity = undefined;
                      }
                    }
                  };
                  TransportConnection.prototype.changeState = function (
                    state,
                    params
                  ) {
                    this.state = state;
                    this.timeline.info(
                      this.buildTimelineMessage({
                        state: state,
                        params: params,
                      })
                    );
                    this.emit(state, params);
                  };
                  TransportConnection.prototype.buildTimelineMessage =
                    function (message) {
                      return extend({ cid: this.id }, message);
                    };
                  return TransportConnection;
                })(dispatcher);
                /* harmony default export */ var transport_connection =
                  transport_connection_TransportConnection;

                // CONCATENATED MODULE: ./src/core/transports/transport.ts

                var transport_Transport = (function () {
                  function Transport(hooks) {
                    this.hooks = hooks;
                  }
                  Transport.prototype.isSupported = function (environment) {
                    return this.hooks.isSupported(environment);
                  };
                  Transport.prototype.createConnection = function (
                    name,
                    priority,
                    key,
                    options
                  ) {
                    return new transport_connection(
                      this.hooks,
                      name,
                      priority,
                      key,
                      options
                    );
                  };
                  return Transport;
                })();
                /* harmony default export */ var transports_transport =
                  transport_Transport;

                // CONCATENATED MODULE: ./src/runtimes/isomorphic/transports/transports.ts

                var WSTransport = new transports_transport({
                  urls: ws,
                  handlesActivityChecks: false,
                  supportsPing: false,
                  isInitialized: function () {
                    return Boolean(runtime.getWebSocketAPI());
                  },
                  isSupported: function () {
                    return Boolean(runtime.getWebSocketAPI());
                  },
                  getSocket: function (url) {
                    return runtime.createWebSocket(url);
                  },
                });
                var httpConfiguration = {
                  urls: http,
                  handlesActivityChecks: false,
                  supportsPing: true,
                  isInitialized: function () {
                    return true;
                  },
                };
                var streamingConfiguration = extend(
                  {
                    getSocket: function (url) {
                      return runtime.HTTPFactory.createStreamingSocket(url);
                    },
                  },
                  httpConfiguration
                );
                var pollingConfiguration = extend(
                  {
                    getSocket: function (url) {
                      return runtime.HTTPFactory.createPollingSocket(url);
                    },
                  },
                  httpConfiguration
                );
                var xhrConfiguration = {
                  isSupported: function () {
                    return runtime.isXHRSupported();
                  },
                };
                var XHRStreamingTransport = new transports_transport(
                  extend({}, streamingConfiguration, xhrConfiguration)
                );
                var XHRPollingTransport = new transports_transport(
                  extend({}, pollingConfiguration, xhrConfiguration)
                );
                var Transports = {
                  ws: WSTransport,
                  xhr_streaming: XHRStreamingTransport,
                  xhr_polling: XHRPollingTransport,
                };
                /* harmony default export */ var transports = Transports;

                // CONCATENATED MODULE: ./src/runtimes/web/transports/transports.ts

                var SockJSTransport = new transports_transport({
                  file: "sockjs",
                  urls: sockjs,
                  handlesActivityChecks: true,
                  supportsPing: false,
                  isSupported: function () {
                    return true;
                  },
                  isInitialized: function () {
                    return window.SockJS !== undefined;
                  },
                  getSocket: function (url, options) {
                    return new window.SockJS(url, null, {
                      js_path: Dependencies.getPath("sockjs", {
                        useTLS: options.useTLS,
                      }),
                      ignore_null_origin: options.ignoreNullOrigin,
                    });
                  },
                  beforeOpen: function (socket, path) {
                    socket.send(
                      JSON.stringify({
                        path: path,
                      })
                    );
                  },
                });
                var xdrConfiguration = {
                  isSupported: function (environment) {
                    var yes = runtime.isXDRSupported(environment.useTLS);
                    return yes;
                  },
                };
                var XDRStreamingTransport = new transports_transport(
                  extend({}, streamingConfiguration, xdrConfiguration)
                );
                var XDRPollingTransport = new transports_transport(
                  extend({}, pollingConfiguration, xdrConfiguration)
                );
                transports.xdr_streaming = XDRStreamingTransport;
                transports.xdr_polling = XDRPollingTransport;
                transports.sockjs = SockJSTransport;
                /* harmony default export */ var transports_transports =
                  transports;

                // CONCATENATED MODULE: ./src/runtimes/web/net_info.ts
                var net_info_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var NetInfo = (function (_super) {
                  net_info_extends(NetInfo, _super);
                  function NetInfo() {
                    var _this = _super.call(this) || this;
                    var self = _this;
                    if (window.addEventListener !== undefined) {
                      window.addEventListener(
                        "online",
                        function () {
                          self.emit("online");
                        },
                        false
                      );
                      window.addEventListener(
                        "offline",
                        function () {
                          self.emit("offline");
                        },
                        false
                      );
                    }
                    return _this;
                  }
                  NetInfo.prototype.isOnline = function () {
                    if (window.navigator.onLine === undefined) {
                      return true;
                    } else {
                      return window.navigator.onLine;
                    }
                  };
                  return NetInfo;
                })(dispatcher);

                var net_info_Network = new NetInfo();

                // CONCATENATED MODULE: ./src/core/transports/assistant_to_the_transport_manager.ts

                var assistant_to_the_transport_manager_AssistantToTheTransportManager =
                  (function () {
                    function AssistantToTheTransportManager(
                      manager,
                      transport,
                      options
                    ) {
                      this.manager = manager;
                      this.transport = transport;
                      this.minPingDelay = options.minPingDelay;
                      this.maxPingDelay = options.maxPingDelay;
                      this.pingDelay = undefined;
                    }
                    AssistantToTheTransportManager.prototype.createConnection =
                      function (name, priority, key, options) {
                        var _this = this;
                        options = extend({}, options, {
                          activityTimeout: this.pingDelay,
                        });
                        var connection = this.transport.createConnection(
                          name,
                          priority,
                          key,
                          options
                        );
                        var openTimestamp = null;
                        var onOpen = function () {
                          connection.unbind("open", onOpen);
                          connection.bind("closed", onClosed);
                          openTimestamp = util.now();
                        };
                        var onClosed = function (closeEvent) {
                          connection.unbind("closed", onClosed);
                          if (
                            closeEvent.code === 1002 ||
                            closeEvent.code === 1003
                          ) {
                            _this.manager.reportDeath();
                          } else if (!closeEvent.wasClean && openTimestamp) {
                            var lifespan = util.now() - openTimestamp;
                            if (lifespan < 2 * _this.maxPingDelay) {
                              _this.manager.reportDeath();
                              _this.pingDelay = Math.max(
                                lifespan / 2,
                                _this.minPingDelay
                              );
                            }
                          }
                        };
                        connection.bind("open", onOpen);
                        return connection;
                      };
                    AssistantToTheTransportManager.prototype.isSupported =
                      function (environment) {
                        return (
                          this.manager.isAlive() &&
                          this.transport.isSupported(environment)
                        );
                      };
                    return AssistantToTheTransportManager;
                  })();
                /* harmony default export */ var assistant_to_the_transport_manager =
                  assistant_to_the_transport_manager_AssistantToTheTransportManager;

                // CONCATENATED MODULE: ./src/core/connection/protocol/protocol.ts
                var Protocol = {
                  decodeMessage: function (messageEvent) {
                    try {
                      var messageData = JSON.parse(messageEvent.data);
                      var pusherEventData = messageData.data;
                      if (typeof pusherEventData === "string") {
                        try {
                          pusherEventData = JSON.parse(messageData.data);
                        } catch (e) { }
                      }
                      var pusherEvent = {
                        event: messageData.event,
                        channel: messageData.channel,
                        data: pusherEventData,
                      };
                      if (messageData.user_id) {
                        pusherEvent.user_id = messageData.user_id;
                      }
                      return pusherEvent;
                    } catch (e) {
                      throw {
                        type: "MessageParseError",
                        error: e,
                        data: messageEvent.data,
                      };
                    }
                  },
                  encodeMessage: function (event) {
                    return JSON.stringify(event);
                  },
                  processHandshake: function (messageEvent) {
                    var message = Protocol.decodeMessage(messageEvent);
                    if (message.event === "pusher:connection_established") {
                      if (!message.data.activity_timeout) {
                        throw "No activity timeout specified in handshake";
                      }
                      return {
                        action: "connected",
                        id: message.data.socket_id,
                        activityTimeout: message.data.activity_timeout * 1000,
                      };
                    } else if (message.event === "pusher:error") {
                      return {
                        action: this.getCloseAction(message.data),
                        error: this.getCloseError(message.data),
                      };
                    } else {
                      throw "Invalid handshake";
                    }
                  },
                  getCloseAction: function (closeEvent) {
                    if (closeEvent.code < 4000) {
                      if (closeEvent.code >= 1002 && closeEvent.code <= 1004) {
                        return "backoff";
                      } else {
                        return null;
                      }
                    } else if (closeEvent.code === 4000) {
                      return "tls_only";
                    } else if (closeEvent.code < 4100) {
                      return "refused";
                    } else if (closeEvent.code < 4200) {
                      return "backoff";
                    } else if (closeEvent.code < 4300) {
                      return "retry";
                    } else {
                      return "refused";
                    }
                  },
                  getCloseError: function (closeEvent) {
                    if (closeEvent.code !== 1000 && closeEvent.code !== 1001) {
                      return {
                        type: "PusherError",
                        data: {
                          code: closeEvent.code,
                          message: closeEvent.reason || closeEvent.message,
                        },
                      };
                    } else {
                      return null;
                    }
                  },
                };
                /* harmony default export */ var protocol_protocol = Protocol;

                // CONCATENATED MODULE: ./src/core/connection/connection.ts
                var connection_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var connection_Connection = (function (_super) {
                  connection_extends(Connection, _super);
                  function Connection(id, transport) {
                    var _this = _super.call(this) || this;
                    _this.id = id;
                    _this.transport = transport;
                    _this.activityTimeout = transport.activityTimeout;
                    _this.bindListeners();
                    return _this;
                  }
                  Connection.prototype.handlesActivityChecks = function () {
                    return this.transport.handlesActivityChecks();
                  };
                  Connection.prototype.send = function (data) {
                    return this.transport.send(data);
                  };
                  Connection.prototype.send_event = function (
                    name,
                    data,
                    channel
                  ) {
                    var event = { event: name, data: data };
                    if (channel) {
                      event.channel = channel;
                    }
                    logger.debug("Event sent", event);
                    return this.send(protocol_protocol.encodeMessage(event));
                  };
                  Connection.prototype.ping = function () {
                    if (this.transport.supportsPing()) {
                      this.transport.ping();
                    } else {
                      this.send_event("pusher:ping", {});
                    }
                  };
                  Connection.prototype.close = function () {
                    this.transport.close();
                  };
                  Connection.prototype.bindListeners = function () {
                    var _this = this;
                    var listeners = {
                      message: function (messageEvent) {
                        var pusherEvent;
                        try {
                          pusherEvent =
                            protocol_protocol.decodeMessage(messageEvent);
                        } catch (e) {
                          _this.emit("error", {
                            type: "MessageParseError",
                            error: e,
                            data: messageEvent.data,
                          });
                        }
                        if (pusherEvent !== undefined) {
                          logger.debug("Event recd", pusherEvent);
                          switch (pusherEvent.event) {
                            case "pusher:error":
                              _this.emit("error", {
                                type: "PusherError",
                                data: pusherEvent.data,
                              });
                              break;
                            case "pusher:ping":
                              _this.emit("ping");
                              break;
                            case "pusher:pong":
                              _this.emit("pong");
                              break;
                          }
                          _this.emit("message", pusherEvent);
                        }
                      },
                      activity: function () {
                        _this.emit("activity");
                      },
                      error: function (error) {
                        _this.emit("error", error);
                      },
                      closed: function (closeEvent) {
                        unbindListeners();
                        if (closeEvent && closeEvent.code) {
                          _this.handleCloseEvent(closeEvent);
                        }
                        _this.transport = null;
                        _this.emit("closed");
                      },
                    };
                    var unbindListeners = function () {
                      objectApply(listeners, function (listener, event) {
                        _this.transport.unbind(event, listener);
                      });
                    };
                    objectApply(listeners, function (listener, event) {
                      _this.transport.bind(event, listener);
                    });
                  };
                  Connection.prototype.handleCloseEvent = function (
                    closeEvent
                  ) {
                    var action = protocol_protocol.getCloseAction(closeEvent);
                    var error = protocol_protocol.getCloseError(closeEvent);
                    if (error) {
                      this.emit("error", error);
                    }
                    if (action) {
                      this.emit(action, { action: action, error: error });
                    }
                  };
                  return Connection;
                })(dispatcher);
                /* harmony default export */ var connection_connection =
                  connection_Connection;

                // CONCATENATED MODULE: ./src/core/connection/handshake/index.ts

                var handshake_Handshake = (function () {
                  function Handshake(transport, callback) {
                    this.transport = transport;
                    this.callback = callback;
                    this.bindListeners();
                  }
                  Handshake.prototype.close = function () {
                    this.unbindListeners();
                    this.transport.close();
                  };
                  Handshake.prototype.bindListeners = function () {
                    var _this = this;
                    this.onMessage = function (m) {
                      _this.unbindListeners();
                      var result;
                      try {
                        result = protocol_protocol.processHandshake(m);
                      } catch (e) {
                        _this.finish("error", { error: e });
                        _this.transport.close();
                        return;
                      }
                      if (result.action === "connected") {
                        _this.finish("connected", {
                          connection: new connection_connection(
                            result.id,
                            _this.transport
                          ),
                          activityTimeout: result.activityTimeout,
                        });
                      } else {
                        _this.finish(result.action, { error: result.error });
                        _this.transport.close();
                      }
                    };
                    this.onClosed = function (closeEvent) {
                      _this.unbindListeners();
                      var action =
                        protocol_protocol.getCloseAction(closeEvent) ||
                        "backoff";
                      var error = protocol_protocol.getCloseError(closeEvent);
                      _this.finish(action, { error: error });
                    };
                    this.transport.bind("message", this.onMessage);
                    this.transport.bind("closed", this.onClosed);
                  };
                  Handshake.prototype.unbindListeners = function () {
                    this.transport.unbind("message", this.onMessage);
                    this.transport.unbind("closed", this.onClosed);
                  };
                  Handshake.prototype.finish = function (action, params) {
                    this.callback(
                      extend(
                        { transport: this.transport, action: action },
                        params
                      )
                    );
                  };
                  return Handshake;
                })();
                /* harmony default export */ var connection_handshake =
                  handshake_Handshake;

                // CONCATENATED MODULE: ./src/core/timeline/timeline_sender.ts

                var timeline_sender_TimelineSender = (function () {
                  function TimelineSender(timeline, options) {
                    this.timeline = timeline;
                    this.options = options || {};
                  }
                  TimelineSender.prototype.send = function (useTLS, callback) {
                    if (this.timeline.isEmpty()) {
                      return;
                    }
                    this.timeline.send(
                      runtime.TimelineTransport.getAgent(this, useTLS),
                      callback
                    );
                  };
                  return TimelineSender;
                })();
                /* harmony default export */ var timeline_sender =
                  timeline_sender_TimelineSender;

                // CONCATENATED MODULE: ./src/core/channels/channel.ts
                var channel_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var channel_Channel = (function (_super) {
                  channel_extends(Channel, _super);
                  function Channel(name, pusher) {
                    var _this =
                      _super.call(this, function (event, data) {
                        logger.debug(
                          "No callbacks on " + name + " for " + event
                        );
                      }) || this;
                    _this.name = name;
                    _this.pusher = pusher;
                    _this.subscribed = false;
                    _this.subscriptionPending = false;
                    _this.subscriptionCancelled = false;
                    return _this;
                  }
                  Channel.prototype.authorize = function (socketId, callback) {
                    return callback(null, { auth: "" });
                  };
                  Channel.prototype.trigger = function (event, data) {
                    if (event.indexOf("client-") !== 0) {
                      throw new BadEventName(
                        "Event '" + event + "' does not start with 'client-'"
                      );
                    }
                    if (!this.subscribed) {
                      var suffix = url_store.buildLogSuffix(
                        "triggeringClientEvents"
                      );
                      logger.warn(
                        "Client event triggered before channel 'subscription_succeeded' event . " +
                        suffix
                      );
                    }
                    return this.pusher.send_event(event, data, this.name);
                  };
                  Channel.prototype.disconnect = function () {
                    this.subscribed = false;
                    this.subscriptionPending = false;
                  };
                  Channel.prototype.handleEvent = function (event) {
                    var eventName = event.event;
                    var data = event.data;
                    if (
                      eventName === "pusher_internal:subscription_succeeded"
                    ) {
                      this.handleSubscriptionSucceededEvent(event);
                    } else if (
                      eventName === "pusher_internal:subscription_count"
                    ) {
                      this.handleSubscriptionCountEvent(event);
                    } else if (eventName.indexOf("pusher_internal:") !== 0) {
                      var metadata = {};
                      this.emit(eventName, data, metadata);
                    }
                  };
                  Channel.prototype.handleSubscriptionSucceededEvent =
                    function (event) {
                      this.subscriptionPending = false;
                      this.subscribed = true;
                      if (this.subscriptionCancelled) {
                        this.pusher.unsubscribe(this.name);
                      } else {
                        this.emit("pusher:subscription_succeeded", event.data);
                      }
                    };
                  Channel.prototype.handleSubscriptionCountEvent = function (
                    event
                  ) {
                    if (event.data.subscription_count) {
                      this.subscriptionCount = event.data.subscription_count;
                    }
                    this.emit("pusher:subscription_count", event.data);
                  };
                  Channel.prototype.subscribe = function () {
                    var _this = this;
                    if (this.subscribed) {
                      return;
                    }
                    this.subscriptionPending = true;
                    this.subscriptionCancelled = false;
                    this.authorize(
                      this.pusher.connection.socket_id,
                      function (error, data) {
                        if (error) {
                          _this.subscriptionPending = false;
                          logger.error(error.toString());
                          _this.emit(
                            "pusher:subscription_error",
                            Object.assign(
                              {},
                              {
                                type: "AuthError",
                                error: error.message,
                              },
                              error instanceof HTTPAuthError
                                ? { status: error.status }
                                : {}
                            )
                          );
                        } else {
                          _this.pusher.send_event("pusher:subscribe", {
                            auth: data.auth,
                            channel_data: data.channel_data,
                            channel: _this.name,
                          });
                        }
                      }
                    );
                  };
                  Channel.prototype.unsubscribe = function () {
                    this.subscribed = false;
                    this.pusher.send_event("pusher:unsubscribe", {
                      channel: this.name,
                    });
                  };
                  Channel.prototype.cancelSubscription = function () {
                    this.subscriptionCancelled = true;
                  };
                  Channel.prototype.reinstateSubscription = function () {
                    this.subscriptionCancelled = false;
                  };
                  return Channel;
                })(dispatcher);
                /* harmony default export */ var channels_channel =
                  channel_Channel;

                // CONCATENATED MODULE: ./src/core/channels/private_channel.ts
                var private_channel_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var PrivateChannel = (function (_super) {
                  private_channel_extends(PrivateChannel, _super);
                  function PrivateChannel() {
                    return (
                      (_super !== null && _super.apply(this, arguments)) || this
                    );
                  }
                  PrivateChannel.prototype.authorize = function (
                    socketId,
                    callback
                  ) {
                    return this.pusher.config.channelAuthorizer(
                      {
                        channelName: this.name,
                        socketId: socketId,
                      },
                      callback
                    );
                  };
                  return PrivateChannel;
                })(channels_channel);
                /* harmony default export */ var private_channel =
                  PrivateChannel;

                // CONCATENATED MODULE: ./src/core/channels/members.ts

                var members_Members = (function () {
                  function Members() {
                    this.reset();
                  }
                  Members.prototype.get = function (id) {
                    if (
                      Object.prototype.hasOwnProperty.call(this.members, id)
                    ) {
                      return {
                        id: id,
                        info: this.members[id],
                      };
                    } else {
                      return null;
                    }
                  };
                  Members.prototype.each = function (callback) {
                    var _this = this;
                    objectApply(this.members, function (member, id) {
                      callback(_this.get(id));
                    });
                  };
                  Members.prototype.setMyID = function (id) {
                    this.myID = id;
                  };
                  Members.prototype.onSubscription = function (
                    subscriptionData
                  ) {
                    this.members = subscriptionData.presence.hash;
                    this.count = subscriptionData.presence.count;
                    this.me = this.get(this.myID);
                  };
                  Members.prototype.addMember = function (memberData) {
                    if (this.get(memberData.user_id) === null) {
                      this.count++;
                    }
                    this.members[memberData.user_id] = memberData.user_info;
                    return this.get(memberData.user_id);
                  };
                  Members.prototype.removeMember = function (memberData) {
                    var member = this.get(memberData.user_id);
                    if (member) {
                      delete this.members[memberData.user_id];
                      this.count--;
                    }
                    return member;
                  };
                  Members.prototype.reset = function () {
                    this.members = {};
                    this.count = 0;
                    this.myID = null;
                    this.me = null;
                  };
                  return Members;
                })();
                /* harmony default export */ var members = members_Members;

                // CONCATENATED MODULE: ./src/core/channels/presence_channel.ts
                var presence_channel_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();
                var __awaiter =
                  false ||
                  function (thisArg, _arguments, P, generator) {
                    function adopt(value) {
                      return value instanceof P
                        ? value
                        : new P(function (resolve) {
                          resolve(value);
                        });
                    }
                    return new (P || (P = Promise))(function (resolve, reject) {
                      function fulfilled(value) {
                        try {
                          step(generator.next(value));
                        } catch (e) {
                          reject(e);
                        }
                      }
                      function rejected(value) {
                        try {
                          step(generator["throw"](value));
                        } catch (e) {
                          reject(e);
                        }
                      }
                      function step(result) {
                        result.done
                          ? resolve(result.value)
                          : adopt(result.value).then(fulfilled, rejected);
                      }
                      step(
                        (generator = generator.apply(
                          thisArg,
                          _arguments || []
                        )).next()
                      );
                    });
                  };
                var __generator =
                  false ||
                  function (thisArg, body) {
                    var _ = {
                      label: 0,
                      sent: function () {
                        if (t[0] & 1) throw t[1];
                        return t[1];
                      },
                      trys: [],
                      ops: [],
                    },
                      f,
                      y,
                      t,
                      g;
                    return (
                      (g = { next: verb(0), throw: verb(1), return: verb(2) }),
                      typeof Symbol === "function" &&
                      (g[Symbol.iterator] = function () {
                        return this;
                      }),
                      g
                    );
                    function verb(n) {
                      return function (v) {
                        return step([n, v]);
                      };
                    }
                    function step(op) {
                      if (f)
                        throw new TypeError("Generator is already executing.");
                      while (_)
                        try {
                          if (
                            ((f = 1),
                              y &&
                              (t =
                                op[0] & 2
                                  ? y["return"]
                                  : op[0]
                                    ? y["throw"] ||
                                    ((t = y["return"]) && t.call(y), 0)
                                    : y.next) &&
                              !(t = t.call(y, op[1])).done)
                          )
                            return t;
                          if (((y = 0), t)) op = [op[0] & 2, t.value];
                          switch (op[0]) {
                            case 0:
                            case 1:
                              t = op;
                              break;
                            case 4:
                              _.label++;
                              return { value: op[1], done: false };
                            case 5:
                              _.label++;
                              y = op[1];
                              op = [0];
                              continue;
                            case 7:
                              op = _.ops.pop();
                              _.trys.pop();
                              continue;
                            default:
                              if (
                                !((t = _.trys),
                                  (t = t.length > 0 && t[t.length - 1])) &&
                                (op[0] === 6 || op[0] === 2)
                              ) {
                                _ = 0;
                                continue;
                              }
                              if (
                                op[0] === 3 &&
                                (!t || (op[1] > t[0] && op[1] < t[3]))
                              ) {
                                _.label = op[1];
                                break;
                              }
                              if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                              }
                              if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                              }
                              if (t[2]) _.ops.pop();
                              _.trys.pop();
                              continue;
                          }
                          op = body.call(thisArg, _);
                        } catch (e) {
                          op = [6, e];
                          y = 0;
                        } finally {
                          f = t = 0;
                        }
                      if (op[0] & 5) throw op[1];
                      return { value: op[0] ? op[1] : void 0, done: true };
                    }
                  };

                var presence_channel_PresenceChannel = (function (_super) {
                  presence_channel_extends(PresenceChannel, _super);
                  function PresenceChannel(name, pusher) {
                    var _this = _super.call(this, name, pusher) || this;
                    _this.members = new members();
                    return _this;
                  }
                  PresenceChannel.prototype.authorize = function (
                    socketId,
                    callback
                  ) {
                    var _this = this;
                    _super.prototype.authorize.call(
                      this,
                      socketId,
                      function (error, authData) {
                        return __awaiter(_this, void 0, void 0, function () {
                          var channelData, suffix;
                          return __generator(this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                if (!!error) return [3, 3];
                                authData = authData;
                                if (!(authData.channel_data != null))
                                  return [3, 1];
                                channelData = JSON.parse(authData.channel_data);
                                this.members.setMyID(channelData.user_id);
                                return [3, 3];
                              case 1:
                                return [4, this.pusher.user.signinDonePromise];
                              case 2:
                                _a.sent();
                                if (this.pusher.user.user_data != null) {
                                  this.members.setMyID(
                                    this.pusher.user.user_data.id
                                  );
                                } else {
                                  suffix = url_store.buildLogSuffix(
                                    "authorizationEndpoint"
                                  );
                                  logger.error(
                                    "Invalid auth response for channel '" +
                                    this.name +
                                    "', " +
                                    ("expected 'channel_data' field. " +
                                      suffix +
                                      ", ") +
                                    "or the user should be signed in."
                                  );
                                  callback("Invalid auth response");
                                  return [2];
                                }
                                _a.label = 3;
                              case 3:
                                callback(error, authData);
                                return [2];
                            }
                          });
                        });
                      }
                    );
                  };
                  PresenceChannel.prototype.handleEvent = function (event) {
                    var eventName = event.event;
                    if (eventName.indexOf("pusher_internal:") === 0) {
                      this.handleInternalEvent(event);
                    } else {
                      var data = event.data;
                      var metadata = {};
                      if (event.user_id) {
                        metadata.user_id = event.user_id;
                      }
                      this.emit(eventName, data, metadata);
                    }
                  };
                  PresenceChannel.prototype.handleInternalEvent = function (
                    event
                  ) {
                    var eventName = event.event;
                    var data = event.data;
                    switch (eventName) {
                      case "pusher_internal:subscription_succeeded":
                        this.handleSubscriptionSucceededEvent(event);
                        break;
                      case "pusher_internal:subscription_count":
                        this.handleSubscriptionCountEvent(event);
                        break;
                      case "pusher_internal:member_added":
                        var addedMember = this.members.addMember(data);
                        this.emit("pusher:member_added", addedMember);
                        break;
                      case "pusher_internal:member_removed":
                        var removedMember = this.members.removeMember(data);
                        if (removedMember) {
                          this.emit("pusher:member_removed", removedMember);
                        }
                        break;
                    }
                  };
                  PresenceChannel.prototype.handleSubscriptionSucceededEvent =
                    function (event) {
                      this.subscriptionPending = false;
                      this.subscribed = true;
                      if (this.subscriptionCancelled) {
                        this.pusher.unsubscribe(this.name);
                      } else {
                        this.members.onSubscription(event.data);
                        this.emit(
                          "pusher:subscription_succeeded",
                          this.members
                        );
                      }
                    };
                  PresenceChannel.prototype.disconnect = function () {
                    this.members.reset();
                    _super.prototype.disconnect.call(this);
                  };
                  return PresenceChannel;
                })(private_channel);
                /* harmony default export */ var presence_channel =
                  presence_channel_PresenceChannel;

                // EXTERNAL MODULE: ./node_modules/@stablelib/utf8/lib/utf8.js
                var utf8 = __nested_webpack_require_20105__(1);

                // EXTERNAL MODULE: ./node_modules/@stablelib/base64/lib/base64.js
                var base64 = __nested_webpack_require_20105__(0);

                // CONCATENATED MODULE: ./src/core/channels/encrypted_channel.ts
                var encrypted_channel_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var encrypted_channel_EncryptedChannel = (function (_super) {
                  encrypted_channel_extends(EncryptedChannel, _super);
                  function EncryptedChannel(name, pusher, nacl) {
                    var _this = _super.call(this, name, pusher) || this;
                    _this.key = null;
                    _this.nacl = nacl;
                    return _this;
                  }
                  EncryptedChannel.prototype.authorize = function (
                    socketId,
                    callback
                  ) {
                    var _this = this;
                    _super.prototype.authorize.call(
                      this,
                      socketId,
                      function (error, authData) {
                        if (error) {
                          callback(error, authData);
                          return;
                        }
                        var sharedSecret = authData["shared_secret"];
                        if (!sharedSecret) {
                          callback(
                            new Error(
                              "No shared_secret key in auth payload for encrypted channel: " +
                              _this.name
                            ),
                            null
                          );
                          return;
                        }
                        _this.key = Object(base64["decode"])(sharedSecret);
                        delete authData["shared_secret"];
                        callback(null, authData);
                      }
                    );
                  };
                  EncryptedChannel.prototype.trigger = function (event, data) {
                    throw new UnsupportedFeature(
                      "Client events are not currently supported for encrypted channels"
                    );
                  };
                  EncryptedChannel.prototype.handleEvent = function (event) {
                    var eventName = event.event;
                    var data = event.data;
                    if (
                      eventName.indexOf("pusher_internal:") === 0 ||
                      eventName.indexOf("pusher:") === 0
                    ) {
                      _super.prototype.handleEvent.call(this, event);
                      return;
                    }
                    this.handleEncryptedEvent(eventName, data);
                  };
                  EncryptedChannel.prototype.handleEncryptedEvent = function (
                    event,
                    data
                  ) {
                    var _this = this;
                    if (!this.key) {
                      logger.debug(
                        "Received encrypted event before key has been retrieved from the authEndpoint"
                      );
                      return;
                    }
                    if (!data.ciphertext || !data.nonce) {
                      logger.error(
                        "Unexpected format for encrypted event, expected object with `ciphertext` and `nonce` fields, got: " +
                        data
                      );
                      return;
                    }
                    var cipherText = Object(base64["decode"])(data.ciphertext);
                    if (
                      cipherText.length < this.nacl.secretbox.overheadLength
                    ) {
                      logger.error(
                        "Expected encrypted event ciphertext length to be " +
                        this.nacl.secretbox.overheadLength +
                        ", got: " +
                        cipherText.length
                      );
                      return;
                    }
                    var nonce = Object(base64["decode"])(data.nonce);
                    if (nonce.length < this.nacl.secretbox.nonceLength) {
                      logger.error(
                        "Expected encrypted event nonce length to be " +
                        this.nacl.secretbox.nonceLength +
                        ", got: " +
                        nonce.length
                      );
                      return;
                    }
                    var bytes = this.nacl.secretbox.open(
                      cipherText,
                      nonce,
                      this.key
                    );
                    if (bytes === null) {
                      logger.debug(
                        "Failed to decrypt an event, probably because it was encrypted with a different key. Fetching a new key from the authEndpoint..."
                      );
                      this.authorize(
                        this.pusher.connection.socket_id,
                        function (error, authData) {
                          if (error) {
                            logger.error(
                              "Failed to make a request to the authEndpoint: " +
                              authData +
                              ". Unable to fetch new key, so dropping encrypted event"
                            );
                            return;
                          }
                          bytes = _this.nacl.secretbox.open(
                            cipherText,
                            nonce,
                            _this.key
                          );
                          if (bytes === null) {
                            logger.error(
                              "Failed to decrypt event with new key. Dropping encrypted event"
                            );
                            return;
                          }
                          _this.emit(event, _this.getDataToEmit(bytes));
                          return;
                        }
                      );
                      return;
                    }
                    this.emit(event, this.getDataToEmit(bytes));
                  };
                  EncryptedChannel.prototype.getDataToEmit = function (bytes) {
                    var raw = Object(utf8["decode"])(bytes);
                    try {
                      return JSON.parse(raw);
                    } catch (_a) {
                      return raw;
                    }
                  };
                  return EncryptedChannel;
                })(private_channel);
                /* harmony default export */ var encrypted_channel =
                  encrypted_channel_EncryptedChannel;

                // CONCATENATED MODULE: ./src/core/connection/connection_manager.ts
                var connection_manager_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var connection_manager_ConnectionManager = (function (_super) {
                  connection_manager_extends(ConnectionManager, _super);
                  function ConnectionManager(key, options) {
                    var _this = _super.call(this) || this;
                    _this.state = "initialized";
                    _this.connection = null;
                    _this.key = key;
                    _this.options = options;
                    _this.timeline = _this.options.timeline;
                    _this.usingTLS = _this.options.useTLS;
                    _this.errorCallbacks = _this.buildErrorCallbacks();
                    _this.connectionCallbacks = _this.buildConnectionCallbacks(
                      _this.errorCallbacks
                    );
                    _this.handshakeCallbacks = _this.buildHandshakeCallbacks(
                      _this.errorCallbacks
                    );
                    var Network = runtime.getNetwork();
                    Network.bind("online", function () {
                      _this.timeline.info({ netinfo: "online" });
                      if (
                        _this.state === "connecting" ||
                        _this.state === "unavailable"
                      ) {
                        _this.retryIn(0);
                      }
                    });
                    Network.bind("offline", function () {
                      _this.timeline.info({ netinfo: "offline" });
                      if (_this.connection) {
                        _this.sendActivityCheck();
                      }
                    });
                    _this.updateStrategy();
                    return _this;
                  }
                  ConnectionManager.prototype.connect = function () {
                    if (this.connection || this.runner) {
                      return;
                    }
                    if (!this.strategy.isSupported()) {
                      this.updateState("failed");
                      return;
                    }
                    this.updateState("connecting");
                    this.startConnecting();
                    this.setUnavailableTimer();
                  };
                  ConnectionManager.prototype.send = function (data) {
                    if (this.connection) {
                      return this.connection.send(data);
                    } else {
                      return false;
                    }
                  };
                  ConnectionManager.prototype.send_event = function (
                    name,
                    data,
                    channel
                  ) {
                    if (this.connection) {
                      return this.connection.send_event(name, data, channel);
                    } else {
                      return false;
                    }
                  };
                  ConnectionManager.prototype.disconnect = function () {
                    this.disconnectInternally();
                    this.updateState("disconnected");
                  };
                  ConnectionManager.prototype.isUsingTLS = function () {
                    return this.usingTLS;
                  };
                  ConnectionManager.prototype.startConnecting = function () {
                    var _this = this;
                    var callback = function (error, handshake) {
                      if (error) {
                        _this.runner = _this.strategy.connect(0, callback);
                      } else {
                        if (handshake.action === "error") {
                          _this.emit("error", {
                            type: "HandshakeError",
                            error: handshake.error,
                          });
                          _this.timeline.error({
                            handshakeError: handshake.error,
                          });
                        } else {
                          _this.abortConnecting();
                          _this.handshakeCallbacks[handshake.action](handshake);
                        }
                      }
                    };
                    this.runner = this.strategy.connect(0, callback);
                  };
                  ConnectionManager.prototype.abortConnecting = function () {
                    if (this.runner) {
                      this.runner.abort();
                      this.runner = null;
                    }
                  };
                  ConnectionManager.prototype.disconnectInternally =
                    function () {
                      this.abortConnecting();
                      this.clearRetryTimer();
                      this.clearUnavailableTimer();
                      if (this.connection) {
                        var connection = this.abandonConnection();
                        connection.close();
                      }
                    };
                  ConnectionManager.prototype.updateStrategy = function () {
                    this.strategy = this.options.getStrategy({
                      key: this.key,
                      timeline: this.timeline,
                      useTLS: this.usingTLS,
                    });
                  };
                  ConnectionManager.prototype.retryIn = function (delay) {
                    var _this = this;
                    this.timeline.info({ action: "retry", delay: delay });
                    if (delay > 0) {
                      this.emit("connecting_in", Math.round(delay / 1000));
                    }
                    this.retryTimer = new OneOffTimer(delay || 0, function () {
                      _this.disconnectInternally();
                      _this.connect();
                    });
                  };
                  ConnectionManager.prototype.clearRetryTimer = function () {
                    if (this.retryTimer) {
                      this.retryTimer.ensureAborted();
                      this.retryTimer = null;
                    }
                  };
                  ConnectionManager.prototype.setUnavailableTimer =
                    function () {
                      var _this = this;
                      this.unavailableTimer = new OneOffTimer(
                        this.options.unavailableTimeout,
                        function () {
                          _this.updateState("unavailable");
                        }
                      );
                    };
                  ConnectionManager.prototype.clearUnavailableTimer =
                    function () {
                      if (this.unavailableTimer) {
                        this.unavailableTimer.ensureAborted();
                      }
                    };
                  ConnectionManager.prototype.sendActivityCheck = function () {
                    var _this = this;
                    this.stopActivityCheck();
                    this.connection.ping();
                    this.activityTimer = new OneOffTimer(
                      this.options.pongTimeout,
                      function () {
                        _this.timeline.error({
                          pong_timed_out: _this.options.pongTimeout,
                        });
                        _this.retryIn(0);
                      }
                    );
                  };
                  ConnectionManager.prototype.resetActivityCheck = function () {
                    var _this = this;
                    this.stopActivityCheck();
                    if (
                      this.connection &&
                      !this.connection.handlesActivityChecks()
                    ) {
                      this.activityTimer = new OneOffTimer(
                        this.activityTimeout,
                        function () {
                          _this.sendActivityCheck();
                        }
                      );
                    }
                  };
                  ConnectionManager.prototype.stopActivityCheck = function () {
                    if (this.activityTimer) {
                      this.activityTimer.ensureAborted();
                    }
                  };
                  ConnectionManager.prototype.buildConnectionCallbacks =
                    function (errorCallbacks) {
                      var _this = this;
                      return extend({}, errorCallbacks, {
                        message: function (message) {
                          _this.resetActivityCheck();
                          _this.emit("message", message);
                        },
                        ping: function () {
                          _this.send_event("pusher:pong", {});
                        },
                        activity: function () {
                          _this.resetActivityCheck();
                        },
                        error: function (error) {
                          _this.emit("error", error);
                        },
                        closed: function () {
                          _this.abandonConnection();
                          if (_this.shouldRetry()) {
                            _this.retryIn(1000);
                          }
                        },
                      });
                    };
                  ConnectionManager.prototype.buildHandshakeCallbacks =
                    function (errorCallbacks) {
                      var _this = this;
                      return extend({}, errorCallbacks, {
                        connected: function (handshake) {
                          _this.activityTimeout = Math.min(
                            _this.options.activityTimeout,
                            handshake.activityTimeout,
                            handshake.connection.activityTimeout || Infinity
                          );
                          _this.clearUnavailableTimer();
                          _this.setConnection(handshake.connection);
                          _this.socket_id = _this.connection.id;
                          _this.updateState("connected", {
                            socket_id: _this.socket_id,
                          });
                        },
                      });
                    };
                  ConnectionManager.prototype.buildErrorCallbacks =
                    function () {
                      var _this = this;
                      var withErrorEmitted = function (callback) {
                        return function (result) {
                          if (result.error) {
                            _this.emit("error", {
                              type: "WebSocketError",
                              error: result.error,
                            });
                          }
                          callback(result);
                        };
                      };
                      return {
                        tls_only: withErrorEmitted(function () {
                          _this.usingTLS = true;
                          _this.updateStrategy();
                          _this.retryIn(0);
                        }),
                        refused: withErrorEmitted(function () {
                          _this.disconnect();
                        }),
                        backoff: withErrorEmitted(function () {
                          _this.retryIn(1000);
                        }),
                        retry: withErrorEmitted(function () {
                          _this.retryIn(0);
                        }),
                      };
                    };
                  ConnectionManager.prototype.setConnection = function (
                    connection
                  ) {
                    this.connection = connection;
                    for (var event in this.connectionCallbacks) {
                      this.connection.bind(
                        event,
                        this.connectionCallbacks[event]
                      );
                    }
                    this.resetActivityCheck();
                  };
                  ConnectionManager.prototype.abandonConnection = function () {
                    if (!this.connection) {
                      return;
                    }
                    this.stopActivityCheck();
                    for (var event in this.connectionCallbacks) {
                      this.connection.unbind(
                        event,
                        this.connectionCallbacks[event]
                      );
                    }
                    var connection = this.connection;
                    this.connection = null;
                    return connection;
                  };
                  ConnectionManager.prototype.updateState = function (
                    newState,
                    data
                  ) {
                    var previousState = this.state;
                    this.state = newState;
                    if (previousState !== newState) {
                      var newStateDescription = newState;
                      if (newStateDescription === "connected") {
                        newStateDescription +=
                          " with new socket ID " + data.socket_id;
                      }
                      logger.debug(
                        "State changed",
                        previousState + " -> " + newStateDescription
                      );
                      this.timeline.info({ state: newState, params: data });
                      this.emit("state_change", {
                        previous: previousState,
                        current: newState,
                      });
                      this.emit(newState, data);
                    }
                  };
                  ConnectionManager.prototype.shouldRetry = function () {
                    return (
                      this.state === "connecting" || this.state === "connected"
                    );
                  };
                  return ConnectionManager;
                })(dispatcher);
                /* harmony default export */ var connection_manager =
                  connection_manager_ConnectionManager;

                // CONCATENATED MODULE: ./src/core/channels/channels.ts

                var channels_Channels = (function () {
                  function Channels() {
                    this.channels = {};
                  }
                  Channels.prototype.add = function (name, pusher) {
                    if (!this.channels[name]) {
                      this.channels[name] = createChannel(name, pusher);
                    }
                    return this.channels[name];
                  };
                  Channels.prototype.all = function () {
                    return values(this.channels);
                  };
                  Channels.prototype.find = function (name) {
                    return this.channels[name];
                  };
                  Channels.prototype.remove = function (name) {
                    var channel = this.channels[name];
                    delete this.channels[name];
                    return channel;
                  };
                  Channels.prototype.disconnect = function () {
                    objectApply(this.channels, function (channel) {
                      channel.disconnect();
                    });
                  };
                  return Channels;
                })();
                /* harmony default export */ var channels = channels_Channels;
                function createChannel(name, pusher) {
                  if (name.indexOf("private-encrypted-") === 0) {
                    if (pusher.config.nacl) {
                      return factory.createEncryptedChannel(
                        name,
                        pusher,
                        pusher.config.nacl
                      );
                    }
                    var errMsg =
                      "Tried to subscribe to a private-encrypted- channel but no nacl implementation available";
                    var suffix = url_store.buildLogSuffix(
                      "encryptedChannelSupport"
                    );
                    throw new UnsupportedFeature(errMsg + ". " + suffix);
                  } else if (name.indexOf("private-") === 0) {
                    return factory.createPrivateChannel(name, pusher);
                  } else if (name.indexOf("presence-") === 0) {
                    return factory.createPresenceChannel(name, pusher);
                  } else if (name.indexOf("#") === 0) {
                    throw new BadChannelName(
                      'Cannot create a channel with name "' + name + '".'
                    );
                  } else {
                    return factory.createChannel(name, pusher);
                  }
                }

                // CONCATENATED MODULE: ./src/core/utils/factory.ts

                var Factory = {
                  createChannels: function () {
                    return new channels();
                  },
                  createConnectionManager: function (key, options) {
                    return new connection_manager(key, options);
                  },
                  createChannel: function (name, pusher) {
                    return new channels_channel(name, pusher);
                  },
                  createPrivateChannel: function (name, pusher) {
                    return new private_channel(name, pusher);
                  },
                  createPresenceChannel: function (name, pusher) {
                    return new presence_channel(name, pusher);
                  },
                  createEncryptedChannel: function (name, pusher, nacl) {
                    return new encrypted_channel(name, pusher, nacl);
                  },
                  createTimelineSender: function (timeline, options) {
                    return new timeline_sender(timeline, options);
                  },
                  createHandshake: function (transport, callback) {
                    return new connection_handshake(transport, callback);
                  },
                  createAssistantToTheTransportManager: function (
                    manager,
                    transport,
                    options
                  ) {
                    return new assistant_to_the_transport_manager(
                      manager,
                      transport,
                      options
                    );
                  },
                };
                /* harmony default export */ var factory = Factory;

                // CONCATENATED MODULE: ./src/core/transports/transport_manager.ts

                var transport_manager_TransportManager = (function () {
                  function TransportManager(options) {
                    this.options = options || {};
                    this.livesLeft = this.options.lives || Infinity;
                  }
                  TransportManager.prototype.getAssistant = function (
                    transport
                  ) {
                    return factory.createAssistantToTheTransportManager(
                      this,
                      transport,
                      {
                        minPingDelay: this.options.minPingDelay,
                        maxPingDelay: this.options.maxPingDelay,
                      }
                    );
                  };
                  TransportManager.prototype.isAlive = function () {
                    return this.livesLeft > 0;
                  };
                  TransportManager.prototype.reportDeath = function () {
                    this.livesLeft -= 1;
                  };
                  return TransportManager;
                })();
                /* harmony default export */ var transport_manager =
                  transport_manager_TransportManager;

                // CONCATENATED MODULE: ./src/core/strategies/sequential_strategy.ts

                var sequential_strategy_SequentialStrategy = (function () {
                  function SequentialStrategy(strategies, options) {
                    this.strategies = strategies;
                    this.loop = Boolean(options.loop);
                    this.failFast = Boolean(options.failFast);
                    this.timeout = options.timeout;
                    this.timeoutLimit = options.timeoutLimit;
                  }
                  SequentialStrategy.prototype.isSupported = function () {
                    return any(this.strategies, util.method("isSupported"));
                  };
                  SequentialStrategy.prototype.connect = function (
                    minPriority,
                    callback
                  ) {
                    var _this = this;
                    var strategies = this.strategies;
                    var current = 0;
                    var timeout = this.timeout;
                    var runner = null;
                    var tryNextStrategy = function (error, handshake) {
                      if (handshake) {
                        callback(null, handshake);
                      } else {
                        current = current + 1;
                        if (_this.loop) {
                          current = current % strategies.length;
                        }
                        if (current < strategies.length) {
                          if (timeout) {
                            timeout = timeout * 2;
                            if (_this.timeoutLimit) {
                              timeout = Math.min(timeout, _this.timeoutLimit);
                            }
                          }
                          runner = _this.tryStrategy(
                            strategies[current],
                            minPriority,
                            { timeout: timeout, failFast: _this.failFast },
                            tryNextStrategy
                          );
                        } else {
                          callback(true);
                        }
                      }
                    };
                    runner = this.tryStrategy(
                      strategies[current],
                      minPriority,
                      { timeout: timeout, failFast: this.failFast },
                      tryNextStrategy
                    );
                    return {
                      abort: function () {
                        runner.abort();
                      },
                      forceMinPriority: function (p) {
                        minPriority = p;
                        if (runner) {
                          runner.forceMinPriority(p);
                        }
                      },
                    };
                  };
                  SequentialStrategy.prototype.tryStrategy = function (
                    strategy,
                    minPriority,
                    options,
                    callback
                  ) {
                    var timer = null;
                    var runner = null;
                    if (options.timeout > 0) {
                      timer = new OneOffTimer(options.timeout, function () {
                        runner.abort();
                        callback(true);
                      });
                    }
                    runner = strategy.connect(
                      minPriority,
                      function (error, handshake) {
                        if (
                          error &&
                          timer &&
                          timer.isRunning() &&
                          !options.failFast
                        ) {
                          return;
                        }
                        if (timer) {
                          timer.ensureAborted();
                        }
                        callback(error, handshake);
                      }
                    );
                    return {
                      abort: function () {
                        if (timer) {
                          timer.ensureAborted();
                        }
                        runner.abort();
                      },
                      forceMinPriority: function (p) {
                        runner.forceMinPriority(p);
                      },
                    };
                  };
                  return SequentialStrategy;
                })();
                /* harmony default export */ var sequential_strategy =
                  sequential_strategy_SequentialStrategy;

                // CONCATENATED MODULE: ./src/core/strategies/best_connected_ever_strategy.ts

                var best_connected_ever_strategy_BestConnectedEverStrategy =
                  (function () {
                    function BestConnectedEverStrategy(strategies) {
                      this.strategies = strategies;
                    }
                    BestConnectedEverStrategy.prototype.isSupported =
                      function () {
                        return any(this.strategies, util.method("isSupported"));
                      };
                    BestConnectedEverStrategy.prototype.connect = function (
                      minPriority,
                      callback
                    ) {
                      return connect(
                        this.strategies,
                        minPriority,
                        function (i, runners) {
                          return function (error, handshake) {
                            runners[i].error = error;
                            if (error) {
                              if (allRunnersFailed(runners)) {
                                callback(true);
                              }
                              return;
                            }
                            apply(runners, function (runner) {
                              runner.forceMinPriority(
                                handshake.transport.priority
                              );
                            });
                            callback(null, handshake);
                          };
                        }
                      );
                    };
                    return BestConnectedEverStrategy;
                  })();
                /* harmony default export */ var best_connected_ever_strategy =
                  best_connected_ever_strategy_BestConnectedEverStrategy;
                function connect(strategies, minPriority, callbackBuilder) {
                  var runners = map(strategies, function (strategy, i, _, rs) {
                    return strategy.connect(
                      minPriority,
                      callbackBuilder(i, rs)
                    );
                  });
                  return {
                    abort: function () {
                      apply(runners, abortRunner);
                    },
                    forceMinPriority: function (p) {
                      apply(runners, function (runner) {
                        runner.forceMinPriority(p);
                      });
                    },
                  };
                }
                function allRunnersFailed(runners) {
                  return collections_all(runners, function (runner) {
                    return Boolean(runner.error);
                  });
                }
                function abortRunner(runner) {
                  if (!runner.error && !runner.aborted) {
                    runner.abort();
                    runner.aborted = true;
                  }
                }

                // CONCATENATED MODULE: ./src/core/strategies/cached_strategy.ts

                var cached_strategy_CachedStrategy = (function () {
                  function CachedStrategy(strategy, transports, options) {
                    this.strategy = strategy;
                    this.transports = transports;
                    this.ttl = options.ttl || 1800 * 1000;
                    this.usingTLS = options.useTLS;
                    this.timeline = options.timeline;
                  }
                  CachedStrategy.prototype.isSupported = function () {
                    return this.strategy.isSupported();
                  };
                  CachedStrategy.prototype.connect = function (
                    minPriority,
                    callback
                  ) {
                    var usingTLS = this.usingTLS;
                    var info = fetchTransportCache(usingTLS);
                    var strategies = [this.strategy];
                    if (info && info.timestamp + this.ttl >= util.now()) {
                      var transport = this.transports[info.transport];
                      if (transport) {
                        this.timeline.info({
                          cached: true,
                          transport: info.transport,
                          latency: info.latency,
                        });
                        strategies.push(
                          new sequential_strategy([transport], {
                            timeout: info.latency * 2 + 1000,
                            failFast: true,
                          })
                        );
                      }
                    }
                    var startTimestamp = util.now();
                    var runner = strategies
                      .pop()
                      .connect(minPriority, function cb(error, handshake) {
                        if (error) {
                          flushTransportCache(usingTLS);
                          if (strategies.length > 0) {
                            startTimestamp = util.now();
                            runner = strategies.pop().connect(minPriority, cb);
                          } else {
                            callback(error);
                          }
                        } else {
                          storeTransportCache(
                            usingTLS,
                            handshake.transport.name,
                            util.now() - startTimestamp
                          );
                          callback(null, handshake);
                        }
                      });
                    return {
                      abort: function () {
                        runner.abort();
                      },
                      forceMinPriority: function (p) {
                        minPriority = p;
                        if (runner) {
                          runner.forceMinPriority(p);
                        }
                      },
                    };
                  };
                  return CachedStrategy;
                })();
                /* harmony default export */ var cached_strategy =
                  cached_strategy_CachedStrategy;
                function getTransportCacheKey(usingTLS) {
                  return "pusherTransport" + (usingTLS ? "TLS" : "NonTLS");
                }
                function fetchTransportCache(usingTLS) {
                  var storage = runtime.getLocalStorage();
                  if (storage) {
                    try {
                      var serializedCache =
                        storage[getTransportCacheKey(usingTLS)];
                      if (serializedCache) {
                        return JSON.parse(serializedCache);
                      }
                    } catch (e) {
                      flushTransportCache(usingTLS);
                    }
                  }
                  return null;
                }
                function storeTransportCache(usingTLS, transport, latency) {
                  var storage = runtime.getLocalStorage();
                  if (storage) {
                    try {
                      storage[getTransportCacheKey(usingTLS)] =
                        safeJSONStringify({
                          timestamp: util.now(),
                          transport: transport,
                          latency: latency,
                        });
                    } catch (e) { }
                  }
                }
                function flushTransportCache(usingTLS) {
                  var storage = runtime.getLocalStorage();
                  if (storage) {
                    try {
                      delete storage[getTransportCacheKey(usingTLS)];
                    } catch (e) { }
                  }
                }

                // CONCATENATED MODULE: ./src/core/strategies/delayed_strategy.ts

                var delayed_strategy_DelayedStrategy = (function () {
                  function DelayedStrategy(strategy, _a) {
                    var number = _a.delay;
                    this.strategy = strategy;
                    this.options = { delay: number };
                  }
                  DelayedStrategy.prototype.isSupported = function () {
                    return this.strategy.isSupported();
                  };
                  DelayedStrategy.prototype.connect = function (
                    minPriority,
                    callback
                  ) {
                    var strategy = this.strategy;
                    var runner;
                    var timer = new OneOffTimer(
                      this.options.delay,
                      function () {
                        runner = strategy.connect(minPriority, callback);
                      }
                    );
                    return {
                      abort: function () {
                        timer.ensureAborted();
                        if (runner) {
                          runner.abort();
                        }
                      },
                      forceMinPriority: function (p) {
                        minPriority = p;
                        if (runner) {
                          runner.forceMinPriority(p);
                        }
                      },
                    };
                  };
                  return DelayedStrategy;
                })();
                /* harmony default export */ var delayed_strategy =
                  delayed_strategy_DelayedStrategy;

                // CONCATENATED MODULE: ./src/core/strategies/if_strategy.ts
                var IfStrategy = (function () {
                  function IfStrategy(test, trueBranch, falseBranch) {
                    this.test = test;
                    this.trueBranch = trueBranch;
                    this.falseBranch = falseBranch;
                  }
                  IfStrategy.prototype.isSupported = function () {
                    var branch = this.test()
                      ? this.trueBranch
                      : this.falseBranch;
                    return branch.isSupported();
                  };
                  IfStrategy.prototype.connect = function (
                    minPriority,
                    callback
                  ) {
                    var branch = this.test()
                      ? this.trueBranch
                      : this.falseBranch;
                    return branch.connect(minPriority, callback);
                  };
                  return IfStrategy;
                })();
                /* harmony default export */ var if_strategy = IfStrategy;

                // CONCATENATED MODULE: ./src/core/strategies/first_connected_strategy.ts
                var FirstConnectedStrategy = (function () {
                  function FirstConnectedStrategy(strategy) {
                    this.strategy = strategy;
                  }
                  FirstConnectedStrategy.prototype.isSupported = function () {
                    return this.strategy.isSupported();
                  };
                  FirstConnectedStrategy.prototype.connect = function (
                    minPriority,
                    callback
                  ) {
                    var runner = this.strategy.connect(
                      minPriority,
                      function (error, handshake) {
                        if (handshake) {
                          runner.abort();
                        }
                        callback(error, handshake);
                      }
                    );
                    return runner;
                  };
                  return FirstConnectedStrategy;
                })();
                /* harmony default export */ var first_connected_strategy =
                  FirstConnectedStrategy;

                // CONCATENATED MODULE: ./src/runtimes/web/default_strategy.ts

                function testSupportsStrategy(strategy) {
                  return function () {
                    return strategy.isSupported();
                  };
                }
                var getDefaultStrategy = function (
                  config,
                  baseOptions,
                  defineTransport
                ) {
                  var definedTransports = {};
                  function defineTransportStrategy(
                    name,
                    type,
                    priority,
                    options,
                    manager
                  ) {
                    var transport = defineTransport(
                      config,
                      name,
                      type,
                      priority,
                      options,
                      manager
                    );
                    definedTransports[name] = transport;
                    return transport;
                  }
                  var ws_options = Object.assign({}, baseOptions, {
                    hostNonTLS: config.wsHost + ":" + config.wsPort,
                    hostTLS: config.wsHost + ":" + config.wssPort,
                    httpPath: config.wsPath,
                  });
                  var wss_options = Object.assign({}, ws_options, {
                    useTLS: true,
                  });
                  var sockjs_options = Object.assign({}, baseOptions, {
                    hostNonTLS: config.httpHost + ":" + config.httpPort,
                    hostTLS: config.httpHost + ":" + config.httpsPort,
                    httpPath: config.httpPath,
                  });
                  var timeouts = {
                    loop: true,
                    timeout: 15000,
                    timeoutLimit: 60000,
                  };
                  var ws_manager = new transport_manager({
                    lives: 2,
                    minPingDelay: 10000,
                    maxPingDelay: config.activityTimeout,
                  });
                  var streaming_manager = new transport_manager({
                    lives: 2,
                    minPingDelay: 10000,
                    maxPingDelay: config.activityTimeout,
                  });
                  var ws_transport = defineTransportStrategy(
                    "ws",
                    "ws",
                    3,
                    ws_options,
                    ws_manager
                  );
                  var wss_transport = defineTransportStrategy(
                    "wss",
                    "ws",
                    3,
                    wss_options,
                    ws_manager
                  );
                  var sockjs_transport = defineTransportStrategy(
                    "sockjs",
                    "sockjs",
                    1,
                    sockjs_options
                  );
                  var xhr_streaming_transport = defineTransportStrategy(
                    "xhr_streaming",
                    "xhr_streaming",
                    1,
                    sockjs_options,
                    streaming_manager
                  );
                  var xdr_streaming_transport = defineTransportStrategy(
                    "xdr_streaming",
                    "xdr_streaming",
                    1,
                    sockjs_options,
                    streaming_manager
                  );
                  var xhr_polling_transport = defineTransportStrategy(
                    "xhr_polling",
                    "xhr_polling",
                    1,
                    sockjs_options
                  );
                  var xdr_polling_transport = defineTransportStrategy(
                    "xdr_polling",
                    "xdr_polling",
                    1,
                    sockjs_options
                  );
                  var ws_loop = new sequential_strategy(
                    [ws_transport],
                    timeouts
                  );
                  var wss_loop = new sequential_strategy(
                    [wss_transport],
                    timeouts
                  );
                  var sockjs_loop = new sequential_strategy(
                    [sockjs_transport],
                    timeouts
                  );
                  var streaming_loop = new sequential_strategy(
                    [
                      new if_strategy(
                        testSupportsStrategy(xhr_streaming_transport),
                        xhr_streaming_transport,
                        xdr_streaming_transport
                      ),
                    ],
                    timeouts
                  );
                  var polling_loop = new sequential_strategy(
                    [
                      new if_strategy(
                        testSupportsStrategy(xhr_polling_transport),
                        xhr_polling_transport,
                        xdr_polling_transport
                      ),
                    ],
                    timeouts
                  );
                  var http_loop = new sequential_strategy(
                    [
                      new if_strategy(
                        testSupportsStrategy(streaming_loop),
                        new best_connected_ever_strategy([
                          streaming_loop,
                          new delayed_strategy(polling_loop, { delay: 4000 }),
                        ]),
                        polling_loop
                      ),
                    ],
                    timeouts
                  );
                  var http_fallback_loop = new if_strategy(
                    testSupportsStrategy(http_loop),
                    http_loop,
                    sockjs_loop
                  );
                  var wsStrategy;
                  if (baseOptions.useTLS) {
                    wsStrategy = new best_connected_ever_strategy([
                      ws_loop,
                      new delayed_strategy(http_fallback_loop, { delay: 2000 }),
                    ]);
                  } else {
                    wsStrategy = new best_connected_ever_strategy([
                      ws_loop,
                      new delayed_strategy(wss_loop, { delay: 2000 }),
                      new delayed_strategy(http_fallback_loop, { delay: 5000 }),
                    ]);
                  }
                  return new cached_strategy(
                    new first_connected_strategy(
                      new if_strategy(
                        testSupportsStrategy(ws_transport),
                        wsStrategy,
                        http_fallback_loop
                      )
                    ),
                    definedTransports,
                    {
                      ttl: 1800000,
                      timeline: baseOptions.timeline,
                      useTLS: baseOptions.useTLS,
                    }
                  );
                };
                /* harmony default export */ var default_strategy =
                  getDefaultStrategy;

                // CONCATENATED MODULE: ./src/runtimes/web/transports/transport_connection_initializer.ts

                /* harmony default export */ var transport_connection_initializer =
                  function () {
                    var self = this;
                    self.timeline.info(
                      self.buildTimelineMessage({
                        transport: self.name + (self.options.useTLS ? "s" : ""),
                      })
                    );
                    if (self.hooks.isInitialized()) {
                      self.changeState("initialized");
                    } else if (self.hooks.file) {
                      self.changeState("initializing");
                      Dependencies.load(
                        self.hooks.file,
                        { useTLS: self.options.useTLS },
                        function (error, callback) {
                          if (self.hooks.isInitialized()) {
                            self.changeState("initialized");
                            callback(true);
                          } else {
                            if (error) {
                              self.onError(error);
                            }
                            self.onClose();
                            callback(false);
                          }
                        }
                      );
                    } else {
                      self.onClose();
                    }
                  };

                // CONCATENATED MODULE: ./src/runtimes/web/http/http_xdomain_request.ts

                var http_xdomain_request_hooks = {
                  getRequest: function (socket) {
                    var xdr = new window.XDomainRequest();
                    xdr.ontimeout = function () {
                      socket.emit("error", new RequestTimedOut());
                      socket.close();
                    };
                    xdr.onerror = function (e) {
                      socket.emit("error", e);
                      socket.close();
                    };
                    xdr.onprogress = function () {
                      if (xdr.responseText && xdr.responseText.length > 0) {
                        socket.onChunk(200, xdr.responseText);
                      }
                    };
                    xdr.onload = function () {
                      if (xdr.responseText && xdr.responseText.length > 0) {
                        socket.onChunk(200, xdr.responseText);
                      }
                      socket.emit("finished", 200);
                      socket.close();
                    };
                    return xdr;
                  },
                  abortRequest: function (xdr) {
                    xdr.ontimeout =
                      xdr.onerror =
                      xdr.onprogress =
                      xdr.onload =
                      null;
                    xdr.abort();
                  },
                };
                /* harmony default export */ var http_xdomain_request =
                  http_xdomain_request_hooks;

                // CONCATENATED MODULE: ./src/core/http/http_request.ts
                var http_request_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var MAX_BUFFER_LENGTH = 256 * 1024;
                var http_request_HTTPRequest = (function (_super) {
                  http_request_extends(HTTPRequest, _super);
                  function HTTPRequest(hooks, method, url) {
                    var _this = _super.call(this) || this;
                    _this.hooks = hooks;
                    _this.method = method;
                    _this.url = url;
                    return _this;
                  }
                  HTTPRequest.prototype.start = function (payload) {
                    var _this = this;
                    this.position = 0;
                    this.xhr = this.hooks.getRequest(this);
                    this.unloader = function () {
                      _this.close();
                    };
                    runtime.addUnloadListener(this.unloader);
                    this.xhr.open(this.method, this.url, true);
                    if (this.xhr.setRequestHeader) {
                      this.xhr.setRequestHeader(
                        "Content-Type",
                        "application/json"
                      );
                    }
                    this.xhr.send(payload);
                  };
                  HTTPRequest.prototype.close = function () {
                    if (this.unloader) {
                      runtime.removeUnloadListener(this.unloader);
                      this.unloader = null;
                    }
                    if (this.xhr) {
                      this.hooks.abortRequest(this.xhr);
                      this.xhr = null;
                    }
                  };
                  HTTPRequest.prototype.onChunk = function (status, data) {
                    while (true) {
                      var chunk = this.advanceBuffer(data);
                      if (chunk) {
                        this.emit("chunk", { status: status, data: chunk });
                      } else {
                        break;
                      }
                    }
                    if (this.isBufferTooLong(data)) {
                      this.emit("buffer_too_long");
                    }
                  };
                  HTTPRequest.prototype.advanceBuffer = function (buffer) {
                    var unreadData = buffer.slice(this.position);
                    var endOfLinePosition = unreadData.indexOf("\n");
                    if (endOfLinePosition !== -1) {
                      this.position += endOfLinePosition + 1;
                      return unreadData.slice(0, endOfLinePosition);
                    } else {
                      return null;
                    }
                  };
                  HTTPRequest.prototype.isBufferTooLong = function (buffer) {
                    return (
                      this.position === buffer.length &&
                      buffer.length > MAX_BUFFER_LENGTH
                    );
                  };
                  return HTTPRequest;
                })(dispatcher);
                /* harmony default export */ var http_request =
                  http_request_HTTPRequest;

                // CONCATENATED MODULE: ./src/core/http/state.ts
                var State;
                (function (State) {
                  State[(State["CONNECTING"] = 0)] = "CONNECTING";
                  State[(State["OPEN"] = 1)] = "OPEN";
                  State[(State["CLOSED"] = 3)] = "CLOSED";
                })(State || (State = {}));
                /* harmony default export */ var state = State;

                // CONCATENATED MODULE: ./src/core/http/http_socket.ts

                var autoIncrement = 1;
                var http_socket_HTTPSocket = (function () {
                  function HTTPSocket(hooks, url) {
                    this.hooks = hooks;
                    this.session = randomNumber(1000) + "/" + randomString(8);
                    this.location = getLocation(url);
                    this.readyState = state.CONNECTING;
                    this.openStream();
                  }
                  HTTPSocket.prototype.send = function (payload) {
                    return this.sendRaw(JSON.stringify([payload]));
                  };
                  HTTPSocket.prototype.ping = function () {
                    this.hooks.sendHeartbeat(this);
                  };
                  HTTPSocket.prototype.close = function (code, reason) {
                    this.onClose(code, reason, true);
                  };
                  HTTPSocket.prototype.sendRaw = function (payload) {
                    if (this.readyState === state.OPEN) {
                      try {
                        runtime
                          .createSocketRequest(
                            "POST",
                            getUniqueURL(
                              getSendURL(this.location, this.session)
                            )
                          )
                          .start(payload);
                        return true;
                      } catch (e) {
                        return false;
                      }
                    } else {
                      return false;
                    }
                  };
                  HTTPSocket.prototype.reconnect = function () {
                    this.closeStream();
                    this.openStream();
                  };
                  HTTPSocket.prototype.onClose = function (
                    code,
                    reason,
                    wasClean
                  ) {
                    this.closeStream();
                    this.readyState = state.CLOSED;
                    if (this.onclose) {
                      this.onclose({
                        code: code,
                        reason: reason,
                        wasClean: wasClean,
                      });
                    }
                  };
                  HTTPSocket.prototype.onChunk = function (chunk) {
                    if (chunk.status !== 200) {
                      return;
                    }
                    if (this.readyState === state.OPEN) {
                      this.onActivity();
                    }
                    var payload;
                    var type = chunk.data.slice(0, 1);
                    switch (type) {
                      case "o":
                        payload = JSON.parse(chunk.data.slice(1) || "{}");
                        this.onOpen(payload);
                        break;
                      case "a":
                        payload = JSON.parse(chunk.data.slice(1) || "[]");
                        for (var i = 0; i < payload.length; i++) {
                          this.onEvent(payload[i]);
                        }
                        break;
                      case "m":
                        payload = JSON.parse(chunk.data.slice(1) || "null");
                        this.onEvent(payload);
                        break;
                      case "h":
                        this.hooks.onHeartbeat(this);
                        break;
                      case "c":
                        payload = JSON.parse(chunk.data.slice(1) || "[]");
                        this.onClose(payload[0], payload[1], true);
                        break;
                    }
                  };
                  HTTPSocket.prototype.onOpen = function (options) {
                    if (this.readyState === state.CONNECTING) {
                      if (options && options.hostname) {
                        this.location.base = replaceHost(
                          this.location.base,
                          options.hostname
                        );
                      }
                      this.readyState = state.OPEN;
                      if (this.onopen) {
                        this.onopen();
                      }
                    } else {
                      this.onClose(1006, "Server lost session", true);
                    }
                  };
                  HTTPSocket.prototype.onEvent = function (event) {
                    if (this.readyState === state.OPEN && this.onmessage) {
                      this.onmessage({ data: event });
                    }
                  };
                  HTTPSocket.prototype.onActivity = function () {
                    if (this.onactivity) {
                      this.onactivity();
                    }
                  };
                  HTTPSocket.prototype.onError = function (error) {
                    if (this.onerror) {
                      this.onerror(error);
                    }
                  };
                  HTTPSocket.prototype.openStream = function () {
                    var _this = this;
                    this.stream = runtime.createSocketRequest(
                      "POST",
                      getUniqueURL(
                        this.hooks.getReceiveURL(this.location, this.session)
                      )
                    );
                    this.stream.bind("chunk", function (chunk) {
                      _this.onChunk(chunk);
                    });
                    this.stream.bind("finished", function (status) {
                      _this.hooks.onFinished(_this, status);
                    });
                    this.stream.bind("buffer_too_long", function () {
                      _this.reconnect();
                    });
                    try {
                      this.stream.start();
                    } catch (error) {
                      util.defer(function () {
                        _this.onError(error);
                        _this.onClose(1006, "Could not start streaming", false);
                      });
                    }
                  };
                  HTTPSocket.prototype.closeStream = function () {
                    if (this.stream) {
                      this.stream.unbind_all();
                      this.stream.close();
                      this.stream = null;
                    }
                  };
                  return HTTPSocket;
                })();
                function getLocation(url) {
                  var parts = /([^\?]*)\/*(\??.*)/.exec(url);
                  return {
                    base: parts[1],
                    queryString: parts[2],
                  };
                }
                function getSendURL(url, session) {
                  return url.base + "/" + session + "/xhr_send";
                }
                function getUniqueURL(url) {
                  var separator = url.indexOf("?") === -1 ? "?" : "&";
                  return (
                    url +
                    separator +
                    "t=" +
                    +new Date() +
                    "&n=" +
                    autoIncrement++
                  );
                }
                function replaceHost(url, hostname) {
                  var urlParts = /(https?:\/\/)([^\/:]+)((\/|:)?.*)/.exec(url);
                  return urlParts[1] + hostname + urlParts[3];
                }
                function randomNumber(max) {
                  return runtime.randomInt(max);
                }
                function randomString(length) {
                  var result = [];
                  for (var i = 0; i < length; i++) {
                    result.push(randomNumber(32).toString(32));
                  }
                  return result.join("");
                }
                /* harmony default export */ var http_socket =
                  http_socket_HTTPSocket;

                // CONCATENATED MODULE: ./src/core/http/http_streaming_socket.ts
                var http_streaming_socket_hooks = {
                  getReceiveURL: function (url, session) {
                    return (
                      url.base +
                      "/" +
                      session +
                      "/xhr_streaming" +
                      url.queryString
                    );
                  },
                  onHeartbeat: function (socket) {
                    socket.sendRaw("[]");
                  },
                  sendHeartbeat: function (socket) {
                    socket.sendRaw("[]");
                  },
                  onFinished: function (socket, status) {
                    socket.onClose(
                      1006,
                      "Connection interrupted (" + status + ")",
                      false
                    );
                  },
                };
                /* harmony default export */ var http_streaming_socket =
                  http_streaming_socket_hooks;

                // CONCATENATED MODULE: ./src/core/http/http_polling_socket.ts
                var http_polling_socket_hooks = {
                  getReceiveURL: function (url, session) {
                    return url.base + "/" + session + "/xhr" + url.queryString;
                  },
                  onHeartbeat: function () { },
                  sendHeartbeat: function (socket) {
                    socket.sendRaw("[]");
                  },
                  onFinished: function (socket, status) {
                    if (status === 200) {
                      socket.reconnect();
                    } else {
                      socket.onClose(
                        1006,
                        "Connection interrupted (" + status + ")",
                        false
                      );
                    }
                  },
                };
                /* harmony default export */ var http_polling_socket =
                  http_polling_socket_hooks;

                // CONCATENATED MODULE: ./src/runtimes/isomorphic/http/http_xhr_request.ts

                var http_xhr_request_hooks = {
                  getRequest: function (socket) {
                    var Constructor = runtime.getXHRAPI();
                    var xhr = new Constructor();
                    xhr.onreadystatechange = xhr.onprogress = function () {
                      switch (xhr.readyState) {
                        case 3:
                          if (xhr.responseText && xhr.responseText.length > 0) {
                            socket.onChunk(xhr.status, xhr.responseText);
                          }
                          break;
                        case 4:
                          if (xhr.responseText && xhr.responseText.length > 0) {
                            socket.onChunk(xhr.status, xhr.responseText);
                          }
                          socket.emit("finished", xhr.status);
                          socket.close();
                          break;
                      }
                    };
                    return xhr;
                  },
                  abortRequest: function (xhr) {
                    xhr.onreadystatechange = null;
                    xhr.abort();
                  },
                };
                /* harmony default export */ var http_xhr_request =
                  http_xhr_request_hooks;

                // CONCATENATED MODULE: ./src/runtimes/isomorphic/http/http.ts

                var HTTP = {
                  createStreamingSocket: function (url) {
                    return this.createSocket(http_streaming_socket, url);
                  },
                  createPollingSocket: function (url) {
                    return this.createSocket(http_polling_socket, url);
                  },
                  createSocket: function (hooks, url) {
                    return new http_socket(hooks, url);
                  },
                  createXHR: function (method, url) {
                    return this.createRequest(http_xhr_request, method, url);
                  },
                  createRequest: function (hooks, method, url) {
                    return new http_request(hooks, method, url);
                  },
                };
                /* harmony default export */ var http_http = HTTP;

                // CONCATENATED MODULE: ./src/runtimes/web/http/http.ts

                http_http.createXDR = function (method, url) {
                  return this.createRequest(http_xdomain_request, method, url);
                };
                /* harmony default export */ var web_http_http = http_http;

                // CONCATENATED MODULE: ./src/runtimes/web/runtime.ts

                var Runtime = {
                  nextAuthCallbackID: 1,
                  auth_callbacks: {},
                  ScriptReceivers: ScriptReceivers,
                  DependenciesReceivers: DependenciesReceivers,
                  getDefaultStrategy: default_strategy,
                  Transports: transports_transports,
                  transportConnectionInitializer:
                    transport_connection_initializer,
                  HTTPFactory: web_http_http,
                  TimelineTransport: jsonp_timeline,
                  getXHRAPI: function () {
                    return window.XMLHttpRequest;
                  },
                  getWebSocketAPI: function () {
                    return window.WebSocket || window.MozWebSocket;
                  },
                  setup: function (PusherClass) {
                    var _this = this;
                    window.Pusher = PusherClass;
                    var initializeOnDocumentBody = function () {
                      _this.onDocumentBody(PusherClass.ready);
                    };
                    if (!window.JSON) {
                      Dependencies.load("json2", {}, initializeOnDocumentBody);
                    } else {
                      initializeOnDocumentBody();
                    }
                  },
                  getDocument: function () {
                    return document;
                  },
                  getProtocol: function () {
                    return this.getDocument().location.protocol;
                  },
                  getAuthorizers: function () {
                    return { ajax: xhr_auth, jsonp: jsonp_auth };
                  },
                  onDocumentBody: function (callback) {
                    var _this = this;
                    if (document.body) {
                      callback();
                    } else {
                      setTimeout(function () {
                        _this.onDocumentBody(callback);
                      }, 0);
                    }
                  },
                  createJSONPRequest: function (url, data) {
                    return new jsonp_request(url, data);
                  },
                  createScriptRequest: function (src) {
                    return new script_request(src);
                  },
                  getLocalStorage: function () {
                    try {
                      return window.localStorage;
                    } catch (e) {
                      return undefined;
                    }
                  },
                  createXHR: function () {
                    if (this.getXHRAPI()) {
                      return this.createXMLHttpRequest();
                    } else {
                      return this.createMicrosoftXHR();
                    }
                  },
                  createXMLHttpRequest: function () {
                    var Constructor = this.getXHRAPI();
                    return new Constructor();
                  },
                  createMicrosoftXHR: function () {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                  },
                  getNetwork: function () {
                    return net_info_Network;
                  },
                  createWebSocket: function (url) {
                    var Constructor = this.getWebSocketAPI();
                    return new Constructor(url);
                  },
                  createSocketRequest: function (method, url) {
                    if (this.isXHRSupported()) {
                      return this.HTTPFactory.createXHR(method, url);
                    } else if (
                      this.isXDRSupported(url.indexOf("https:") === 0)
                    ) {
                      return this.HTTPFactory.createXDR(method, url);
                    } else {
                      throw "Cross-origin HTTP requests are not supported";
                    }
                  },
                  isXHRSupported: function () {
                    var Constructor = this.getXHRAPI();
                    return (
                      Boolean(Constructor) &&
                      new Constructor().withCredentials !== undefined
                    );
                  },
                  isXDRSupported: function (useTLS) {
                    var protocol = useTLS ? "https:" : "http:";
                    var documentProtocol = this.getProtocol();
                    return (
                      Boolean(window["XDomainRequest"]) &&
                      documentProtocol === protocol
                    );
                  },
                  addUnloadListener: function (listener) {
                    if (window.addEventListener !== undefined) {
                      window.addEventListener("unload", listener, false);
                    } else if (window.attachEvent !== undefined) {
                      window.attachEvent("onunload", listener);
                    }
                  },
                  removeUnloadListener: function (listener) {
                    if (window.addEventListener !== undefined) {
                      window.removeEventListener("unload", listener, false);
                    } else if (window.detachEvent !== undefined) {
                      window.detachEvent("onunload", listener);
                    }
                  },
                  randomInt: function (max) {
                    var random = function () {
                      var crypto = window.crypto || window["msCrypto"];
                      var random = crypto.getRandomValues(
                        new Uint32Array(1)
                      )[0];
                      return random / Math.pow(2, 32);
                    };
                    return Math.floor(random() * max);
                  },
                };
                /* harmony default export */ var runtime = Runtime;

                // CONCATENATED MODULE: ./src/core/timeline/level.ts
                var TimelineLevel;
                (function (TimelineLevel) {
                  TimelineLevel[(TimelineLevel["ERROR"] = 3)] = "ERROR";
                  TimelineLevel[(TimelineLevel["INFO"] = 6)] = "INFO";
                  TimelineLevel[(TimelineLevel["DEBUG"] = 7)] = "DEBUG";
                })(TimelineLevel || (TimelineLevel = {}));
                /* harmony default export */ var timeline_level = TimelineLevel;

                // CONCATENATED MODULE: ./src/core/timeline/timeline.ts

                var timeline_Timeline = (function () {
                  function Timeline(key, session, options) {
                    this.key = key;
                    this.session = session;
                    this.events = [];
                    this.options = options || {};
                    this.sent = 0;
                    this.uniqueID = 0;
                  }
                  Timeline.prototype.log = function (level, event) {
                    if (level <= this.options.level) {
                      this.events.push(
                        extend({}, event, { timestamp: util.now() })
                      );
                      if (
                        this.options.limit &&
                        this.events.length > this.options.limit
                      ) {
                        this.events.shift();
                      }
                    }
                  };
                  Timeline.prototype.error = function (event) {
                    this.log(timeline_level.ERROR, event);
                  };
                  Timeline.prototype.info = function (event) {
                    this.log(timeline_level.INFO, event);
                  };
                  Timeline.prototype.debug = function (event) {
                    this.log(timeline_level.DEBUG, event);
                  };
                  Timeline.prototype.isEmpty = function () {
                    return this.events.length === 0;
                  };
                  Timeline.prototype.send = function (sendfn, callback) {
                    var _this = this;
                    var data = extend(
                      {
                        session: this.session,
                        bundle: this.sent + 1,
                        key: this.key,
                        lib: "js",
                        version: this.options.version,
                        cluster: this.options.cluster,
                        features: this.options.features,
                        timeline: this.events,
                      },
                      this.options.params
                    );
                    this.events = [];
                    sendfn(data, function (error, result) {
                      if (!error) {
                        _this.sent++;
                      }
                      if (callback) {
                        callback(error, result);
                      }
                    });
                    return true;
                  };
                  Timeline.prototype.generateUniqueID = function () {
                    this.uniqueID++;
                    return this.uniqueID;
                  };
                  return Timeline;
                })();
                /* harmony default export */ var timeline_timeline =
                  timeline_Timeline;

                // CONCATENATED MODULE: ./src/core/strategies/transport_strategy.ts

                var transport_strategy_TransportStrategy = (function () {
                  function TransportStrategy(
                    name,
                    priority,
                    transport,
                    options
                  ) {
                    this.name = name;
                    this.priority = priority;
                    this.transport = transport;
                    this.options = options || {};
                  }
                  TransportStrategy.prototype.isSupported = function () {
                    return this.transport.isSupported({
                      useTLS: this.options.useTLS,
                    });
                  };
                  TransportStrategy.prototype.connect = function (
                    minPriority,
                    callback
                  ) {
                    var _this = this;
                    if (!this.isSupported()) {
                      return failAttempt(new UnsupportedStrategy(), callback);
                    } else if (this.priority < minPriority) {
                      return failAttempt(
                        new TransportPriorityTooLow(),
                        callback
                      );
                    }
                    var connected = false;
                    var transport = this.transport.createConnection(
                      this.name,
                      this.priority,
                      this.options.key,
                      this.options
                    );
                    var handshake = null;
                    var onInitialized = function () {
                      transport.unbind("initialized", onInitialized);
                      transport.connect();
                    };
                    var onOpen = function () {
                      handshake = factory.createHandshake(
                        transport,
                        function (result) {
                          connected = true;
                          unbindListeners();
                          callback(null, result);
                        }
                      );
                    };
                    var onError = function (error) {
                      unbindListeners();
                      callback(error);
                    };
                    var onClosed = function () {
                      unbindListeners();
                      var serializedTransport;
                      serializedTransport = safeJSONStringify(transport);
                      callback(new TransportClosed(serializedTransport));
                    };
                    var unbindListeners = function () {
                      transport.unbind("initialized", onInitialized);
                      transport.unbind("open", onOpen);
                      transport.unbind("error", onError);
                      transport.unbind("closed", onClosed);
                    };
                    transport.bind("initialized", onInitialized);
                    transport.bind("open", onOpen);
                    transport.bind("error", onError);
                    transport.bind("closed", onClosed);
                    transport.initialize();
                    return {
                      abort: function () {
                        if (connected) {
                          return;
                        }
                        unbindListeners();
                        if (handshake) {
                          handshake.close();
                        } else {
                          transport.close();
                        }
                      },
                      forceMinPriority: function (p) {
                        if (connected) {
                          return;
                        }
                        if (_this.priority < p) {
                          if (handshake) {
                            handshake.close();
                          } else {
                            transport.close();
                          }
                        }
                      },
                    };
                  };
                  return TransportStrategy;
                })();
                /* harmony default export */ var transport_strategy =
                  transport_strategy_TransportStrategy;
                function failAttempt(error, callback) {
                  util.defer(function () {
                    callback(error);
                  });
                  return {
                    abort: function () { },
                    forceMinPriority: function () { },
                  };
                }

                // CONCATENATED MODULE: ./src/core/strategies/strategy_builder.ts

                var strategy_builder_Transports = runtime.Transports;
                var strategy_builder_defineTransport = function (
                  config,
                  name,
                  type,
                  priority,
                  options,
                  manager
                ) {
                  var transportClass = strategy_builder_Transports[type];
                  if (!transportClass) {
                    throw new UnsupportedTransport(type);
                  }
                  var enabled =
                    (!config.enabledTransports ||
                      arrayIndexOf(config.enabledTransports, name) !== -1) &&
                    (!config.disabledTransports ||
                      arrayIndexOf(config.disabledTransports, name) === -1);
                  var transport;
                  if (enabled) {
                    options = Object.assign(
                      { ignoreNullOrigin: config.ignoreNullOrigin },
                      options
                    );
                    transport = new transport_strategy(
                      name,
                      priority,
                      manager
                        ? manager.getAssistant(transportClass)
                        : transportClass,
                      options
                    );
                  } else {
                    transport = strategy_builder_UnsupportedStrategy;
                  }
                  return transport;
                };
                var strategy_builder_UnsupportedStrategy = {
                  isSupported: function () {
                    return false;
                  },
                  connect: function (_, callback) {
                    var deferred = util.defer(function () {
                      callback(new UnsupportedStrategy());
                    });
                    return {
                      abort: function () {
                        deferred.ensureAborted();
                      },
                      forceMinPriority: function () { },
                    };
                  },
                };

                // CONCATENATED MODULE: ./src/core/auth/user_authenticator.ts

                var composeChannelQuery = function (params, authOptions) {
                  var query =
                    "socket_id=" + encodeURIComponent(params.socketId);
                  for (var i in authOptions.params) {
                    query +=
                      "&" +
                      encodeURIComponent(i) +
                      "=" +
                      encodeURIComponent(authOptions.params[i]);
                  }
                  return query;
                };
                var UserAuthenticator = function (authOptions) {
                  if (
                    typeof runtime.getAuthorizers()[authOptions.transport] ===
                    "undefined"
                  ) {
                    throw (
                      "'" +
                      authOptions.transport +
                      "' is not a recognized auth transport"
                    );
                  }
                  return function (params, callback) {
                    var query = composeChannelQuery(params, authOptions);
                    runtime
                      .getAuthorizers()
                    [authOptions.transport](
                      runtime,
                      query,
                      authOptions,
                      AuthRequestType.UserAuthentication,
                      callback
                    );
                  };
                };
                /* harmony default export */ var user_authenticator =
                  UserAuthenticator;

                // CONCATENATED MODULE: ./src/core/auth/channel_authorizer.ts

                var channel_authorizer_composeChannelQuery = function (
                  params,
                  authOptions
                ) {
                  var query =
                    "socket_id=" + encodeURIComponent(params.socketId);
                  query +=
                    "&channel_name=" + encodeURIComponent(params.channelName);
                  for (var i in authOptions.params) {
                    query +=
                      "&" +
                      encodeURIComponent(i) +
                      "=" +
                      encodeURIComponent(authOptions.params[i]);
                  }
                  return query;
                };
                var ChannelAuthorizer = function (authOptions) {
                  if (
                    typeof runtime.getAuthorizers()[authOptions.transport] ===
                    "undefined"
                  ) {
                    throw (
                      "'" +
                      authOptions.transport +
                      "' is not a recognized auth transport"
                    );
                  }
                  return function (params, callback) {
                    var query = channel_authorizer_composeChannelQuery(
                      params,
                      authOptions
                    );
                    runtime
                      .getAuthorizers()
                    [authOptions.transport](
                      runtime,
                      query,
                      authOptions,
                      AuthRequestType.ChannelAuthorization,
                      callback
                    );
                  };
                };
                /* harmony default export */ var channel_authorizer =
                  ChannelAuthorizer;

                // CONCATENATED MODULE: ./src/core/auth/deprecated_channel_authorizer.ts
                var ChannelAuthorizerProxy = function (
                  pusher,
                  authOptions,
                  channelAuthorizerGenerator
                ) {
                  var deprecatedAuthorizerOptions = {
                    authTransport: authOptions.transport,
                    authEndpoint: authOptions.endpoint,
                    auth: {
                      params: authOptions.params,
                      headers: authOptions.headers,
                    },
                  };
                  return function (params, callback) {
                    var channel = pusher.channel(params.channelName);
                    var channelAuthorizer = channelAuthorizerGenerator(
                      channel,
                      deprecatedAuthorizerOptions
                    );
                    channelAuthorizer.authorize(params.socketId, callback);
                  };
                };

                // CONCATENATED MODULE: ./src/core/config.ts
                var __assign =
                  false ||
                  function () {
                    __assign =
                      Object.assign ||
                      function (t) {
                        for (var s, i = 1, n = arguments.length; i < n; i++) {
                          s = arguments[i];
                          for (var p in s)
                            if (Object.prototype.hasOwnProperty.call(s, p))
                              t[p] = s[p];
                        }
                        return t;
                      };
                    return __assign.apply(this, arguments);
                  };

                function getConfig(opts, pusher) {
                  var config = {
                    activityTimeout:
                      opts.activityTimeout || defaults.activityTimeout,
                    cluster: opts.cluster || defaults.cluster,
                    httpPath: opts.httpPath || defaults.httpPath,
                    httpPort: opts.httpPort || defaults.httpPort,
                    httpsPort: opts.httpsPort || defaults.httpsPort,
                    pongTimeout: opts.pongTimeout || defaults.pongTimeout,
                    statsHost: opts.statsHost || defaults.stats_host,
                    unavailableTimeout:
                      opts.unavailableTimeout || defaults.unavailableTimeout,
                    wsPath: opts.wsPath || defaults.wsPath,
                    wsPort: opts.wsPort || defaults.wsPort,
                    wssPort: opts.wssPort || defaults.wssPort,
                    enableStats: getEnableStatsConfig(opts),
                    httpHost: getHttpHost(opts),
                    useTLS: shouldUseTLS(opts),
                    wsHost: getWebsocketHost(opts),
                    userAuthenticator: buildUserAuthenticator(opts),
                    channelAuthorizer: buildChannelAuthorizer(opts, pusher),
                  };
                  if ("disabledTransports" in opts)
                    config.disabledTransports = opts.disabledTransports;
                  if ("enabledTransports" in opts)
                    config.enabledTransports = opts.enabledTransports;
                  if ("ignoreNullOrigin" in opts)
                    config.ignoreNullOrigin = opts.ignoreNullOrigin;
                  if ("timelineParams" in opts)
                    config.timelineParams = opts.timelineParams;
                  if ("nacl" in opts) {
                    config.nacl = opts.nacl;
                  }
                  return config;
                }
                function getHttpHost(opts) {
                  if (opts.httpHost) {
                    return opts.httpHost;
                  }
                  if (opts.cluster) {
                    return "sockjs-" + opts.cluster + ".pusher.com";
                  }
                  return defaults.httpHost;
                }
                function getWebsocketHost(opts) {
                  if (opts.wsHost) {
                    return opts.wsHost;
                  }
                  if (opts.cluster) {
                    return getWebsocketHostFromCluster(opts.cluster);
                  }
                  return getWebsocketHostFromCluster(defaults.cluster);
                }
                function getWebsocketHostFromCluster(cluster) {
                  return "ws-" + cluster + ".pusher.com";
                }
                function shouldUseTLS(opts) {
                  if (runtime.getProtocol() === "https:") {
                    return true;
                  } else if (opts.forceTLS === false) {
                    return false;
                  }
                  return true;
                }
                function getEnableStatsConfig(opts) {
                  if ("enableStats" in opts) {
                    return opts.enableStats;
                  }
                  if ("disableStats" in opts) {
                    return !opts.disableStats;
                  }
                  return false;
                }
                function buildUserAuthenticator(opts) {
                  var userAuthentication = __assign(
                    __assign({}, defaults.userAuthentication),
                    opts.userAuthentication
                  );
                  if (
                    "customHandler" in userAuthentication &&
                    userAuthentication["customHandler"] != null
                  ) {
                    return userAuthentication["customHandler"];
                  }
                  return user_authenticator(userAuthentication);
                }
                function buildChannelAuth(opts, pusher) {
                  var channelAuthorization;
                  if ("channelAuthorization" in opts) {
                    channelAuthorization = __assign(
                      __assign({}, defaults.channelAuthorization),
                      opts.channelAuthorization
                    );
                  } else {
                    channelAuthorization = {
                      transport: opts.authTransport || defaults.authTransport,
                      endpoint: opts.authEndpoint || defaults.authEndpoint,
                    };
                    if ("auth" in opts) {
                      if ("params" in opts.auth)
                        channelAuthorization.params = opts.auth.params;
                      if ("headers" in opts.auth)
                        channelAuthorization.headers = opts.auth.headers;
                    }
                    if ("authorizer" in opts)
                      channelAuthorization.customHandler =
                        ChannelAuthorizerProxy(
                          pusher,
                          channelAuthorization,
                          opts.authorizer
                        );
                  }
                  return channelAuthorization;
                }
                function buildChannelAuthorizer(opts, pusher) {
                  var channelAuthorization = buildChannelAuth(opts, pusher);
                  if (
                    "customHandler" in channelAuthorization &&
                    channelAuthorization["customHandler"] != null
                  ) {
                    return channelAuthorization["customHandler"];
                  }
                  return channel_authorizer(channelAuthorization);
                }

                // CONCATENATED MODULE: ./src/core/watchlist.ts
                var watchlist_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var watchlist_WatchlistFacade = (function (_super) {
                  watchlist_extends(WatchlistFacade, _super);
                  function WatchlistFacade(pusher) {
                    var _this =
                      _super.call(this, function (eventName, data) {
                        logger.debug(
                          "No callbacks on watchlist events for " + eventName
                        );
                      }) || this;
                    _this.pusher = pusher;
                    _this.bindWatchlistInternalEvent();
                    return _this;
                  }
                  WatchlistFacade.prototype.handleEvent = function (
                    pusherEvent
                  ) {
                    var _this = this;
                    pusherEvent.data.events.forEach(function (watchlistEvent) {
                      _this.emit(watchlistEvent.name, watchlistEvent);
                    });
                  };
                  WatchlistFacade.prototype.bindWatchlistInternalEvent =
                    function () {
                      var _this = this;
                      this.pusher.connection.bind(
                        "message",
                        function (pusherEvent) {
                          var eventName = pusherEvent.event;
                          if (
                            eventName === "pusher_internal:watchlist_events"
                          ) {
                            _this.handleEvent(pusherEvent);
                          }
                        }
                      );
                    };
                  return WatchlistFacade;
                })(dispatcher);
                /* harmony default export */ var watchlist =
                  watchlist_WatchlistFacade;

                // CONCATENATED MODULE: ./src/core/utils/flat_promise.ts
                function flatPromise() {
                  var resolve, reject;
                  var promise = new Promise(function (res, rej) {
                    resolve = res;
                    reject = rej;
                  });
                  return { promise: promise, resolve: resolve, reject: reject };
                }
                /* harmony default export */ var flat_promise = flatPromise;

                // CONCATENATED MODULE: ./src/core/user.ts
                var user_extends =
                  false ||
                  (function () {
                    var extendStatics = function (d, b) {
                      extendStatics =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                          function (d, b) {
                            d.__proto__ = b;
                          }) ||
                        function (d, b) {
                          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                        };
                      return extendStatics(d, b);
                    };
                    return function (d, b) {
                      extendStatics(d, b);
                      function __() {
                        this.constructor = d;
                      }
                      d.prototype =
                        b === null
                          ? Object.create(b)
                          : ((__.prototype = b.prototype), new __());
                    };
                  })();

                var user_UserFacade = (function (_super) {
                  user_extends(UserFacade, _super);
                  function UserFacade(pusher) {
                    var _this =
                      _super.call(this, function (eventName, data) {
                        logger.debug("No callbacks on user for " + eventName);
                      }) || this;
                    _this.signin_requested = false;
                    _this.user_data = null;
                    _this.serverToUserChannel = null;
                    _this.signinDonePromise = null;
                    _this._signinDoneResolve = null;
                    _this._onAuthorize = function (err, authData) {
                      if (err) {
                        logger.warn("Error during signin: " + err);
                        _this._cleanup();
                        return;
                      }
                      _this.pusher.send_event("pusher:signin", {
                        auth: authData.auth,
                        user_data: authData.user_data,
                      });
                    };
                    _this.pusher = pusher;
                    _this.pusher.connection.bind("state_change", function (_a) {
                      var previous = _a.previous,
                        current = _a.current;
                      if (previous !== "connected" && current === "connected") {
                        _this._signin();
                      }
                      if (previous === "connected" && current !== "connected") {
                        _this._cleanup();
                        _this._newSigninPromiseIfNeeded();
                      }
                    });
                    _this.watchlist = new watchlist(pusher);
                    _this.pusher.connection.bind("message", function (event) {
                      var eventName = event.event;
                      if (eventName === "pusher:signin_success") {
                        _this._onSigninSuccess(event.data);
                      }
                      if (
                        _this.serverToUserChannel &&
                        _this.serverToUserChannel.name === event.channel
                      ) {
                        _this.serverToUserChannel.handleEvent(event);
                      }
                    });
                    return _this;
                  }
                  UserFacade.prototype.signin = function () {
                    if (this.signin_requested) {
                      return;
                    }
                    this.signin_requested = true;
                    this._signin();
                  };
                  UserFacade.prototype._signin = function () {
                    if (!this.signin_requested) {
                      return;
                    }
                    this._newSigninPromiseIfNeeded();
                    if (this.pusher.connection.state !== "connected") {
                      return;
                    }
                    this.pusher.config.userAuthenticator(
                      {
                        socketId: this.pusher.connection.socket_id,
                      },
                      this._onAuthorize
                    );
                  };
                  UserFacade.prototype._onSigninSuccess = function (data) {
                    try {
                      this.user_data = JSON.parse(data.user_data);
                    } catch (e) {
                      logger.error(
                        "Failed parsing user data after signin: " +
                        data.user_data
                      );
                      this._cleanup();
                      return;
                    }
                    if (
                      typeof this.user_data.id !== "string" ||
                      this.user_data.id === ""
                    ) {
                      logger.error(
                        "user_data doesn't contain an id. user_data: " +
                        this.user_data
                      );
                      this._cleanup();
                      return;
                    }
                    this._signinDoneResolve();
                    this._subscribeChannels();
                  };
                  UserFacade.prototype._subscribeChannels = function () {
                    var _this = this;
                    var ensure_subscribed = function (channel) {
                      if (
                        channel.subscriptionPending &&
                        channel.subscriptionCancelled
                      ) {
                        channel.reinstateSubscription();
                      } else if (
                        !channel.subscriptionPending &&
                        _this.pusher.connection.state === "connected"
                      ) {
                        channel.subscribe();
                      }
                    };
                    this.serverToUserChannel = new channels_channel(
                      "#server-to-user-" + this.user_data.id,
                      this.pusher
                    );
                    this.serverToUserChannel.bind_global(function (
                      eventName,
                      data
                    ) {
                      if (
                        eventName.indexOf("pusher_internal:") === 0 ||
                        eventName.indexOf("pusher:") === 0
                      ) {
                        return;
                      }
                      _this.emit(eventName, data);
                    });
                    ensure_subscribed(this.serverToUserChannel);
                  };
                  UserFacade.prototype._cleanup = function () {
                    this.user_data = null;
                    if (this.serverToUserChannel) {
                      this.serverToUserChannel.unbind_all();
                      this.serverToUserChannel.disconnect();
                      this.serverToUserChannel = null;
                    }
                    if (this.signin_requested) {
                      this._signinDoneResolve();
                    }
                  };
                  UserFacade.prototype._newSigninPromiseIfNeeded = function () {
                    if (!this.signin_requested) {
                      return;
                    }
                    if (
                      this.signinDonePromise &&
                      !this.signinDonePromise.done
                    ) {
                      return;
                    }
                    var _a = flat_promise(),
                      promise = _a.promise,
                      resolve = _a.resolve,
                      _ = _a.reject;
                    promise.done = false;
                    var setDone = function () {
                      promise.done = true;
                    };
                    promise.then(setDone)["catch"](setDone);
                    this.signinDonePromise = promise;
                    this._signinDoneResolve = resolve;
                  };
                  return UserFacade;
                })(dispatcher);
                /* harmony default export */ var user = user_UserFacade;

                // CONCATENATED MODULE: ./src/core/pusher.ts

                var pusher_Pusher = (function () {
                  function Pusher(app_key, options) {
                    var _this = this;
                    checkAppKey(app_key);
                    options = options || {};
                    if (
                      !options.cluster &&
                      !(options.wsHost || options.httpHost)
                    ) {
                      var suffix = url_store.buildLogSuffix(
                        "javascriptQuickStart"
                      );
                      logger.warn(
                        "You should always specify a cluster when connecting. " +
                        suffix
                      );
                    }
                    if ("disableStats" in options) {
                      logger.warn(
                        "The disableStats option is deprecated in favor of enableStats"
                      );
                    }
                    this.key = app_key;
                    this.config = getConfig(options, this);
                    this.channels = factory.createChannels();
                    this.global_emitter = new dispatcher();
                    this.sessionID = runtime.randomInt(1000000000);
                    this.timeline = new timeline_timeline(
                      this.key,
                      this.sessionID,
                      {
                        cluster: this.config.cluster,
                        features: Pusher.getClientFeatures(),
                        params: this.config.timelineParams || {},
                        limit: 50,
                        level: timeline_level.INFO,
                        version: defaults.VERSION,
                      }
                    );
                    if (this.config.enableStats) {
                      this.timelineSender = factory.createTimelineSender(
                        this.timeline,
                        {
                          host: this.config.statsHost,
                          path:
                            "/timeline/v2/" + runtime.TimelineTransport.name,
                        }
                      );
                    }
                    var getStrategy = function (options) {
                      return runtime.getDefaultStrategy(
                        _this.config,
                        options,
                        strategy_builder_defineTransport
                      );
                    };
                    this.connection = factory.createConnectionManager(
                      this.key,
                      {
                        getStrategy: getStrategy,
                        timeline: this.timeline,
                        activityTimeout: this.config.activityTimeout,
                        pongTimeout: this.config.pongTimeout,
                        unavailableTimeout: this.config.unavailableTimeout,
                        useTLS: Boolean(this.config.useTLS),
                      }
                    );
                    this.connection.bind("connected", function () {
                      _this.subscribeAll();
                      if (_this.timelineSender) {
                        _this.timelineSender.send(
                          _this.connection.isUsingTLS()
                        );
                      }
                    });
                    this.connection.bind("message", function (event) {
                      var eventName = event.event;
                      var internal =
                        eventName.indexOf("pusher_internal:") === 0;
                      if (event.channel) {
                        var channel = _this.channel(event.channel);
                        if (channel) {
                          channel.handleEvent(event);
                        }
                      }
                      if (!internal) {
                        _this.global_emitter.emit(event.event, event.data);
                      }
                    });
                    this.connection.bind("connecting", function () {
                      _this.channels.disconnect();
                    });
                    this.connection.bind("disconnected", function () {
                      _this.channels.disconnect();
                    });
                    this.connection.bind("error", function (err) {
                      logger.warn(err);
                    });
                    Pusher.instances.push(this);
                    this.timeline.info({ instances: Pusher.instances.length });
                    this.user = new user(this);
                    if (Pusher.isReady) {
                      this.connect();
                    }
                  }
                  Pusher.ready = function () {
                    Pusher.isReady = true;
                    for (var i = 0, l = Pusher.instances.length; i < l; i++) {
                      Pusher.instances[i].connect();
                    }
                  };
                  Pusher.getClientFeatures = function () {
                    return keys(
                      filterObject({ ws: runtime.Transports.ws }, function (t) {
                        return t.isSupported({});
                      })
                    );
                  };
                  Pusher.prototype.channel = function (name) {
                    return this.channels.find(name);
                  };
                  Pusher.prototype.allChannels = function () {
                    return this.channels.all();
                  };
                  Pusher.prototype.connect = function () {
                    this.connection.connect();
                    if (this.timelineSender) {
                      if (!this.timelineSenderTimer) {
                        var usingTLS = this.connection.isUsingTLS();
                        var timelineSender = this.timelineSender;
                        this.timelineSenderTimer = new PeriodicTimer(
                          60000,
                          function () {
                            timelineSender.send(usingTLS);
                          }
                        );
                      }
                    }
                  };
                  Pusher.prototype.disconnect = function () {
                    this.connection.disconnect();
                    if (this.timelineSenderTimer) {
                      this.timelineSenderTimer.ensureAborted();
                      this.timelineSenderTimer = null;
                    }
                  };
                  Pusher.prototype.bind = function (
                    event_name,
                    callback,
                    context
                  ) {
                    this.global_emitter.bind(event_name, callback, context);
                    return this;
                  };
                  Pusher.prototype.unbind = function (
                    event_name,
                    callback,
                    context
                  ) {
                    this.global_emitter.unbind(event_name, callback, context);
                    return this;
                  };
                  Pusher.prototype.bind_global = function (callback) {
                    this.global_emitter.bind_global(callback);
                    return this;
                  };
                  Pusher.prototype.unbind_global = function (callback) {
                    this.global_emitter.unbind_global(callback);
                    return this;
                  };
                  Pusher.prototype.unbind_all = function (callback) {
                    this.global_emitter.unbind_all();
                    return this;
                  };
                  Pusher.prototype.subscribeAll = function () {
                    var channelName;
                    for (channelName in this.channels.channels) {
                      if (this.channels.channels.hasOwnProperty(channelName)) {
                        this.subscribe(channelName);
                      }
                    }
                  };
                  Pusher.prototype.subscribe = function (channel_name) {
                    var channel = this.channels.add(channel_name, this);
                    if (
                      channel.subscriptionPending &&
                      channel.subscriptionCancelled
                    ) {
                      channel.reinstateSubscription();
                    } else if (
                      !channel.subscriptionPending &&
                      this.connection.state === "connected"
                    ) {
                      channel.subscribe();
                    }
                    return channel;
                  };
                  Pusher.prototype.unsubscribe = function (channel_name) {
                    var channel = this.channels.find(channel_name);
                    if (channel && channel.subscriptionPending) {
                      channel.cancelSubscription();
                    } else {
                      channel = this.channels.remove(channel_name);
                      if (channel && channel.subscribed) {
                        channel.unsubscribe();
                      }
                    }
                  };
                  Pusher.prototype.send_event = function (
                    event_name,
                    data,
                    channel
                  ) {
                    return this.connection.send_event(
                      event_name,
                      data,
                      channel
                    );
                  };
                  Pusher.prototype.shouldUseTLS = function () {
                    return this.config.useTLS;
                  };
                  Pusher.prototype.signin = function () {
                    this.user.signin();
                  };
                  Pusher.instances = [];
                  Pusher.isReady = false;
                  Pusher.logToConsole = false;
                  Pusher.Runtime = runtime;
                  Pusher.ScriptReceivers = runtime.ScriptReceivers;
                  Pusher.DependenciesReceivers = runtime.DependenciesReceivers;
                  Pusher.auth_callbacks = runtime.auth_callbacks;
                  return Pusher;
                })();
                /* harmony default export */ var core_pusher =
                  (__webpack_exports__["default"] = pusher_Pusher);
                function checkAppKey(key) {
                  if (key === null || key === undefined) {
                    throw "You must pass your app key when you instantiate Pusher.";
                  }
                }
                runtime.setup(pusher_Pusher);

                /***/
              },
              /******/
            ]
          );
        });
        //# sourceMappingURL=pusher.js.map

        /***/
      },

    /***/ "./node_modules/axios/dist/browser/axios.cjs":
      /*!***************************************************!*\
  !*** ./node_modules/axios/dist/browser/axios.cjs ***!
  \***************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        "use strict";
        /* provided dependency */ var Buffer = __webpack_require__(
          /*! buffer */ "./node_modules/buffer/index.js"
        )["Buffer"];
        // Axios v1.3.5 Copyright (c) 2023 Matt Zabriskie and contributors

        function bind(fn, thisArg) {
          return function wrap() {
            return fn.apply(thisArg, arguments);
          };
        }

        // utils is a library of generic helper functions non-specific to axios

        const { toString } = Object.prototype;
        const { getPrototypeOf } = Object;

        const kindOf = ((cache) => (thing) => {
          const str = toString.call(thing);
          return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
        })(Object.create(null));

        const kindOfTest = (type) => {
          type = type.toLowerCase();
          return (thing) => kindOf(thing) === type;
        };

        const typeOfTest = (type) => (thing) => typeof thing === type;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         *
         * @returns {boolean} True if value is an Array, otherwise false
         */
        const { isArray } = Array;

        /**
         * Determine if a value is undefined
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        const isUndefined = typeOfTest("undefined");

        /**
         * Determine if a value is a Buffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
          return (
            val !== null &&
            !isUndefined(val) &&
            val.constructor !== null &&
            !isUndefined(val.constructor) &&
            isFunction(val.constructor.isBuffer) &&
            val.constructor.isBuffer(val)
          );
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        const isArrayBuffer = kindOfTest("ArrayBuffer");

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
          let result;
          if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
            result = ArrayBuffer.isView(val);
          } else {
            result = val && val.buffer && isArrayBuffer(val.buffer);
          }
          return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a String, otherwise false
         */
        const isString = typeOfTest("string");

        /**
         * Determine if a value is a Function
         *
         * @param {*} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        const isFunction = typeOfTest("function");

        /**
         * Determine if a value is a Number
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Number, otherwise false
         */
        const isNumber = typeOfTest("number");

        /**
         * Determine if a value is an Object
         *
         * @param {*} thing The value to test
         *
         * @returns {boolean} True if value is an Object, otherwise false
         */
        const isObject = (thing) => thing !== null && typeof thing === "object";

        /**
         * Determine if a value is a Boolean
         *
         * @param {*} thing The value to test
         * @returns {boolean} True if value is a Boolean, otherwise false
         */
        const isBoolean = (thing) => thing === true || thing === false;

        /**
         * Determine if a value is a plain Object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a plain Object, otherwise false
         */
        const isPlainObject = (val) => {
          if (kindOf(val) !== "object") {
            return false;
          }

          const prototype = getPrototypeOf(val);
          return (
            (prototype === null ||
              prototype === Object.prototype ||
              Object.getPrototypeOf(prototype) === null) &&
            !(Symbol.toStringTag in val) &&
            !(Symbol.iterator in val)
          );
        };

        /**
         * Determine if a value is a Date
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Date, otherwise false
         */
        const isDate = kindOfTest("Date");

        /**
         * Determine if a value is a File
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a File, otherwise false
         */
        const isFile = kindOfTest("File");

        /**
         * Determine if a value is a Blob
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        const isBlob = kindOfTest("Blob");

        /**
         * Determine if a value is a FileList
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a File, otherwise false
         */
        const isFileList = kindOfTest("FileList");

        /**
         * Determine if a value is a Stream
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        const isStream = (val) => isObject(val) && isFunction(val.pipe);

        /**
         * Determine if a value is a FormData
         *
         * @param {*} thing The value to test
         *
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        const isFormData = (thing) => {
          const pattern = "[object FormData]";
          return (
            thing &&
            ((typeof FormData === "function" && thing instanceof FormData) ||
              toString.call(thing) === pattern ||
              (isFunction(thing.toString) && thing.toString() === pattern))
          );
        };

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        const isURLSearchParams = kindOfTest("URLSearchParams");

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         *
         * @returns {String} The String freed of excess whitespace
         */
        const trim = (str) =>
          str.trim
            ? str.trim()
            : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         *
         * @param {Boolean} [allOwnKeys = false]
         * @returns {any}
         */
        function forEach(obj, fn, { allOwnKeys = false } = {}) {
          // Don't bother if no value provided
          if (obj === null || typeof obj === "undefined") {
            return;
          }

          let i;
          let l;

          // Force an array if not already something iterable
          if (typeof obj !== "object") {
            /*eslint no-param-reassign:0*/
            obj = [obj];
          }

          if (isArray(obj)) {
            // Iterate over array values
            for (i = 0, l = obj.length; i < l; i++) {
              fn.call(null, obj[i], i, obj);
            }
          } else {
            // Iterate over object keys
            const keys = allOwnKeys
              ? Object.getOwnPropertyNames(obj)
              : Object.keys(obj);
            const len = keys.length;
            let key;

            for (i = 0; i < len; i++) {
              key = keys[i];
              fn.call(null, obj[key], key, obj);
            }
          }
        }

        function findKey(obj, key) {
          key = key.toLowerCase();
          const keys = Object.keys(obj);
          let i = keys.length;
          let _key;
          while (i-- > 0) {
            _key = keys[i];
            if (key === _key.toLowerCase()) {
              return _key;
            }
          }
          return null;
        }

        const _global = (() => {
          /*eslint no-undef:0*/
          if (typeof globalThis !== "undefined") return globalThis;
          return typeof self !== "undefined"
            ? self
            : typeof window !== "undefined"
              ? window
              : __webpack_require__.g;
        })();

        const isContextDefined = (context) =>
          !isUndefined(context) && context !== _global;

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         *
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
          const { caseless } = (isContextDefined(this) && this) || {};
          const result = {};
          const assignValue = (val, key) => {
            const targetKey = (caseless && findKey(result, key)) || key;
            if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
              result[targetKey] = merge(result[targetKey], val);
            } else if (isPlainObject(val)) {
              result[targetKey] = merge({}, val);
            } else if (isArray(val)) {
              result[targetKey] = val.slice();
            } else {
              result[targetKey] = val;
            }
          };

          for (let i = 0, l = arguments.length; i < l; i++) {
            arguments[i] && forEach(arguments[i], assignValue);
          }
          return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         *
         * @param {Boolean} [allOwnKeys]
         * @returns {Object} The resulting value of object a
         */
        const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
          forEach(
            b,
            (val, key) => {
              if (thisArg && isFunction(val)) {
                a[key] = bind(val, thisArg);
              } else {
                a[key] = val;
              }
            },
            { allOwnKeys }
          );
          return a;
        };

        /**
         * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
         *
         * @param {string} content with BOM
         *
         * @returns {string} content value without BOM
         */
        const stripBOM = (content) => {
          if (content.charCodeAt(0) === 0xfeff) {
            content = content.slice(1);
          }
          return content;
        };

        /**
         * Inherit the prototype methods from one constructor into another
         * @param {function} constructor
         * @param {function} superConstructor
         * @param {object} [props]
         * @param {object} [descriptors]
         *
         * @returns {void}
         */
        const inherits = (
          constructor,
          superConstructor,
          props,
          descriptors
        ) => {
          constructor.prototype = Object.create(
            superConstructor.prototype,
            descriptors
          );
          constructor.prototype.constructor = constructor;
          Object.defineProperty(constructor, "super", {
            value: superConstructor.prototype,
          });
          props && Object.assign(constructor.prototype, props);
        };

        /**
         * Resolve object with deep prototype chain to a flat object
         * @param {Object} sourceObj source object
         * @param {Object} [destObj]
         * @param {Function|Boolean} [filter]
         * @param {Function} [propFilter]
         *
         * @returns {Object}
         */
        const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
          let props;
          let i;
          let prop;
          const merged = {};

          destObj = destObj || {};
          // eslint-disable-next-line no-eq-null,eqeqeq
          if (sourceObj == null) return destObj;

          do {
            props = Object.getOwnPropertyNames(sourceObj);
            i = props.length;
            while (i-- > 0) {
              prop = props[i];
              if (
                (!propFilter || propFilter(prop, sourceObj, destObj)) &&
                !merged[prop]
              ) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
              }
            }
            sourceObj = filter !== false && getPrototypeOf(sourceObj);
          } while (
            sourceObj &&
            (!filter || filter(sourceObj, destObj)) &&
            sourceObj !== Object.prototype
          );

          return destObj;
        };

        /**
         * Determines whether a string ends with the characters of a specified string
         *
         * @param {String} str
         * @param {String} searchString
         * @param {Number} [position= 0]
         *
         * @returns {boolean}
         */
        const endsWith = (str, searchString, position) => {
          str = String(str);
          if (position === undefined || position > str.length) {
            position = str.length;
          }
          position -= searchString.length;
          const lastIndex = str.indexOf(searchString, position);
          return lastIndex !== -1 && lastIndex === position;
        };

        /**
         * Returns new array from array like object or null if failed
         *
         * @param {*} [thing]
         *
         * @returns {?Array}
         */
        const toArray = (thing) => {
          if (!thing) return null;
          if (isArray(thing)) return thing;
          let i = thing.length;
          if (!isNumber(i)) return null;
          const arr = new Array(i);
          while (i-- > 0) {
            arr[i] = thing[i];
          }
          return arr;
        };

        /**
         * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
         * thing passed in is an instance of Uint8Array
         *
         * @param {TypedArray}
         *
         * @returns {Array}
         */
        // eslint-disable-next-line func-names
        const isTypedArray = ((TypedArray) => {
          // eslint-disable-next-line func-names
          return (thing) => {
            return TypedArray && thing instanceof TypedArray;
          };
        })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));

        /**
         * For each entry in the object, call the function with the key and value.
         *
         * @param {Object<any, any>} obj - The object to iterate over.
         * @param {Function} fn - The function to call for each entry.
         *
         * @returns {void}
         */
        const forEachEntry = (obj, fn) => {
          const generator = obj && obj[Symbol.iterator];

          const iterator = generator.call(obj);

          let result;

          while ((result = iterator.next()) && !result.done) {
            const pair = result.value;
            fn.call(obj, pair[0], pair[1]);
          }
        };

        /**
         * It takes a regular expression and a string, and returns an array of all the matches
         *
         * @param {string} regExp - The regular expression to match against.
         * @param {string} str - The string to search.
         *
         * @returns {Array<boolean>}
         */
        const matchAll = (regExp, str) => {
          let matches;
          const arr = [];

          while ((matches = regExp.exec(str)) !== null) {
            arr.push(matches);
          }

          return arr;
        };

        /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
        const isHTMLForm = kindOfTest("HTMLFormElement");

        const toCamelCase = (str) => {
          return str
            .toLowerCase()
            .replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
              return p1.toUpperCase() + p2;
            });
        };

        /* Creating a function that will check if an object has a property. */
        const hasOwnProperty = (
          ({ hasOwnProperty }) =>
            (obj, prop) =>
              hasOwnProperty.call(obj, prop)
        )(Object.prototype);

        /**
         * Determine if a value is a RegExp object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a RegExp object, otherwise false
         */
        const isRegExp = kindOfTest("RegExp");

        const reduceDescriptors = (obj, reducer) => {
          const descriptors = Object.getOwnPropertyDescriptors(obj);
          const reducedDescriptors = {};

          forEach(descriptors, (descriptor, name) => {
            if (reducer(descriptor, name, obj) !== false) {
              reducedDescriptors[name] = descriptor;
            }
          });

          Object.defineProperties(obj, reducedDescriptors);
        };

        /**
         * Makes all methods read-only
         * @param {Object} obj
         */

        const freezeMethods = (obj) => {
          reduceDescriptors(obj, (descriptor, name) => {
            // skip restricted props in strict mode
            if (
              isFunction(obj) &&
              ["arguments", "caller", "callee"].indexOf(name) !== -1
            ) {
              return false;
            }

            const value = obj[name];

            if (!isFunction(value)) return;

            descriptor.enumerable = false;

            if ("writable" in descriptor) {
              descriptor.writable = false;
              return;
            }

            if (!descriptor.set) {
              descriptor.set = () => {
                throw Error("Can not rewrite read-only method '" + name + "'");
              };
            }
          });
        };

        const toObjectSet = (arrayOrString, delimiter) => {
          const obj = {};

          const define = (arr) => {
            arr.forEach((value) => {
              obj[value] = true;
            });
          };

          isArray(arrayOrString)
            ? define(arrayOrString)
            : define(String(arrayOrString).split(delimiter));

          return obj;
        };

        const noop = () => { };

        const toFiniteNumber = (value, defaultValue) => {
          value = +value;
          return Number.isFinite(value) ? value : defaultValue;
        };

        const ALPHA = "abcdefghijklmnopqrstuvwxyz";

        const DIGIT = "0123456789";

        const ALPHABET = {
          DIGIT,
          ALPHA,
          ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT,
        };

        const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
          let str = "";
          const { length } = alphabet;
          while (size--) {
            str += alphabet[(Math.random() * length) | 0];
          }

          return str;
        };

        /**
         * If the thing is a FormData object, return true, otherwise return false.
         *
         * @param {unknown} thing - The thing to check.
         *
         * @returns {boolean}
         */
        function isSpecCompliantForm(thing) {
          return !!(
            thing &&
            isFunction(thing.append) &&
            thing[Symbol.toStringTag] === "FormData" &&
            thing[Symbol.iterator]
          );
        }

        const toJSONObject = (obj) => {
          const stack = new Array(10);

          const visit = (source, i) => {
            if (isObject(source)) {
              if (stack.indexOf(source) >= 0) {
                return;
              }

              if (!("toJSON" in source)) {
                stack[i] = source;
                const target = isArray(source) ? [] : {};

                forEach(source, (value, key) => {
                  const reducedValue = visit(value, i + 1);
                  !isUndefined(reducedValue) && (target[key] = reducedValue);
                });

                stack[i] = undefined;

                return target;
              }
            }

            return source;
          };

          return visit(obj, 0);
        };

        var utils = {
          isArray,
          isArrayBuffer,
          isBuffer,
          isFormData,
          isArrayBufferView,
          isString,
          isNumber,
          isBoolean,
          isObject,
          isPlainObject,
          isUndefined,
          isDate,
          isFile,
          isBlob,
          isRegExp,
          isFunction,
          isStream,
          isURLSearchParams,
          isTypedArray,
          isFileList,
          forEach,
          merge,
          extend,
          trim,
          stripBOM,
          inherits,
          toFlatObject,
          kindOf,
          kindOfTest,
          endsWith,
          toArray,
          forEachEntry,
          matchAll,
          isHTMLForm,
          hasOwnProperty,
          hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
          reduceDescriptors,
          freezeMethods,
          toObjectSet,
          toCamelCase,
          noop,
          toFiniteNumber,
          findKey,
          global: _global,
          isContextDefined,
          ALPHABET,
          generateString,
          isSpecCompliantForm,
          toJSONObject,
        };

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [config] The config.
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         *
         * @returns {Error} The created error.
         */
        function AxiosError(message, code, config, request, response) {
          Error.call(this);

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          } else {
            this.stack = new Error().stack;
          }

          this.message = message;
          this.name = "AxiosError";
          code && (this.code = code);
          config && (this.config = config);
          request && (this.request = request);
          response && (this.response = response);
        }

        utils.inherits(AxiosError, Error, {
          toJSON: function toJSON() {
            return {
              // Standard
              message: this.message,
              name: this.name,
              // Microsoft
              description: this.description,
              number: this.number,
              // Mozilla
              fileName: this.fileName,
              lineNumber: this.lineNumber,
              columnNumber: this.columnNumber,
              stack: this.stack,
              // Axios
              config: utils.toJSONObject(this.config),
              code: this.code,
              status:
                this.response && this.response.status
                  ? this.response.status
                  : null,
            };
          },
        });

        const prototype$1 = AxiosError.prototype;
        const descriptors = {};

        [
          "ERR_BAD_OPTION_VALUE",
          "ERR_BAD_OPTION",
          "ECONNABORTED",
          "ETIMEDOUT",
          "ERR_NETWORK",
          "ERR_FR_TOO_MANY_REDIRECTS",
          "ERR_DEPRECATED",
          "ERR_BAD_RESPONSE",
          "ERR_BAD_REQUEST",
          "ERR_CANCELED",
          "ERR_NOT_SUPPORT",
          "ERR_INVALID_URL",
          // eslint-disable-next-line func-names
        ].forEach((code) => {
          descriptors[code] = { value: code };
        });

        Object.defineProperties(AxiosError, descriptors);
        Object.defineProperty(prototype$1, "isAxiosError", { value: true });

        // eslint-disable-next-line func-names
        AxiosError.from = (
          error,
          code,
          config,
          request,
          response,
          customProps
        ) => {
          const axiosError = Object.create(prototype$1);

          utils.toFlatObject(
            error,
            axiosError,
            function filter(obj) {
              return obj !== Error.prototype;
            },
            (prop) => {
              return prop !== "isAxiosError";
            }
          );

          AxiosError.call(
            axiosError,
            error.message,
            code,
            config,
            request,
            response
          );

          axiosError.cause = error;

          axiosError.name = error.name;

          customProps && Object.assign(axiosError, customProps);

          return axiosError;
        };

        // eslint-disable-next-line strict
        var httpAdapter = null;

        /**
         * Determines if the given thing is a array or js object.
         *
         * @param {string} thing - The object or array to be visited.
         *
         * @returns {boolean}
         */
        function isVisitable(thing) {
          return utils.isPlainObject(thing) || utils.isArray(thing);
        }

        /**
         * It removes the brackets from the end of a string
         *
         * @param {string} key - The key of the parameter.
         *
         * @returns {string} the key without the brackets.
         */
        function removeBrackets(key) {
          return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
        }

        /**
         * It takes a path, a key, and a boolean, and returns a string
         *
         * @param {string} path - The path to the current key.
         * @param {string} key - The key of the current object being iterated over.
         * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
         *
         * @returns {string} The path to the current key.
         */
        function renderKey(path, key, dots) {
          if (!path) return key;
          return path
            .concat(key)
            .map(function each(token, i) {
              // eslint-disable-next-line no-param-reassign
              token = removeBrackets(token);
              return !dots && i ? "[" + token + "]" : token;
            })
            .join(dots ? "." : "");
        }

        /**
         * If the array is an array and none of its elements are visitable, then it's a flat array.
         *
         * @param {Array<any>} arr - The array to check
         *
         * @returns {boolean}
         */
        function isFlatArray(arr) {
          return utils.isArray(arr) && !arr.some(isVisitable);
        }

        const predicates = utils.toFlatObject(
          utils,
          {},
          null,
          function filter(prop) {
            return /^is[A-Z]/.test(prop);
          }
        );

        /**
         * Convert a data object to FormData
         *
         * @param {Object} obj
         * @param {?Object} [formData]
         * @param {?Object} [options]
         * @param {Function} [options.visitor]
         * @param {Boolean} [options.metaTokens = true]
         * @param {Boolean} [options.dots = false]
         * @param {?Boolean} [options.indexes = false]
         *
         * @returns {Object}
         **/

        /**
         * It converts an object into a FormData object
         *
         * @param {Object<any, any>} obj - The object to convert to form data.
         * @param {string} formData - The FormData object to append to.
         * @param {Object<string, any>} options
         *
         * @returns
         */
        function toFormData(obj, formData, options) {
          if (!utils.isObject(obj)) {
            throw new TypeError("target must be an object");
          }

          // eslint-disable-next-line no-param-reassign
          formData = formData || new FormData();

          // eslint-disable-next-line no-param-reassign
          options = utils.toFlatObject(
            options,
            {
              metaTokens: true,
              dots: false,
              indexes: false,
            },
            false,
            function defined(option, source) {
              // eslint-disable-next-line no-eq-null,eqeqeq
              return !utils.isUndefined(source[option]);
            }
          );

          const metaTokens = options.metaTokens;
          // eslint-disable-next-line no-use-before-define
          const visitor = options.visitor || defaultVisitor;
          const dots = options.dots;
          const indexes = options.indexes;
          const _Blob = options.Blob || (typeof Blob !== "undefined" && Blob);
          const useBlob = _Blob && utils.isSpecCompliantForm(formData);

          if (!utils.isFunction(visitor)) {
            throw new TypeError("visitor must be a function");
          }

          function convertValue(value) {
            if (value === null) return "";

            if (utils.isDate(value)) {
              return value.toISOString();
            }

            if (!useBlob && utils.isBlob(value)) {
              throw new AxiosError(
                "Blob is not supported. Use a Buffer instead."
              );
            }

            if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
              return useBlob && typeof Blob === "function"
                ? new Blob([value])
                : Buffer.from(value);
            }

            return value;
          }

          /**
           * Default visitor.
           *
           * @param {*} value
           * @param {String|Number} key
           * @param {Array<String|Number>} path
           * @this {FormData}
           *
           * @returns {boolean} return true to visit the each prop of the value recursively
           */
          function defaultVisitor(value, key, path) {
            let arr = value;

            if (value && !path && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                // eslint-disable-next-line no-param-reassign
                key = metaTokens ? key : key.slice(0, -2);
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (
                (utils.isArray(value) && isFlatArray(value)) ||
                ((utils.isFileList(value) || utils.endsWith(key, "[]")) &&
                  (arr = utils.toArray(value)))
              ) {
                // eslint-disable-next-line no-param-reassign
                key = removeBrackets(key);

                arr.forEach(function each(el, index) {
                  !(utils.isUndefined(el) || el === null) &&
                    formData.append(
                      // eslint-disable-next-line no-nested-ternary
                      indexes === true
                        ? renderKey([key], index, dots)
                        : indexes === null
                          ? key
                          : key + "[]",
                      convertValue(el)
                    );
                });
                return false;
              }
            }

            if (isVisitable(value)) {
              return true;
            }

            formData.append(renderKey(path, key, dots), convertValue(value));

            return false;
          }

          const stack = [];

          const exposedHelpers = Object.assign(predicates, {
            defaultVisitor,
            convertValue,
            isVisitable,
          });

          function build(value, path) {
            if (utils.isUndefined(value)) return;

            if (stack.indexOf(value) !== -1) {
              throw Error("Circular reference detected in " + path.join("."));
            }

            stack.push(value);

            utils.forEach(value, function each(el, key) {
              const result =
                !(utils.isUndefined(el) || el === null) &&
                visitor.call(
                  formData,
                  el,
                  utils.isString(key) ? key.trim() : key,
                  path,
                  exposedHelpers
                );

              if (result === true) {
                build(el, path ? path.concat(key) : [key]);
              }
            });

            stack.pop();
          }

          if (!utils.isObject(obj)) {
            throw new TypeError("data must be an object");
          }

          build(obj);

          return formData;
        }

        /**
         * It encodes a string by replacing all characters that are not in the unreserved set with
         * their percent-encoded equivalents
         *
         * @param {string} str - The string to encode.
         *
         * @returns {string} The encoded string.
         */
        function encode$1(str) {
          const charMap = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
            "%00": "\x00",
          };
          return encodeURIComponent(str).replace(
            /[!'()~]|%20|%00/g,
            function replacer(match) {
              return charMap[match];
            }
          );
        }

        /**
         * It takes a params object and converts it to a FormData object
         *
         * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
         * @param {Object<string, any>} options - The options object passed to the Axios constructor.
         *
         * @returns {void}
         */
        function AxiosURLSearchParams(params, options) {
          this._pairs = [];

          params && toFormData(params, this, options);
        }

        const prototype = AxiosURLSearchParams.prototype;

        prototype.append = function append(name, value) {
          this._pairs.push([name, value]);
        };

        prototype.toString = function toString(encoder) {
          const _encode = encoder
            ? function (value) {
              return encoder.call(this, value, encode$1);
            }
            : encode$1;

          return this._pairs
            .map(function each(pair) {
              return _encode(pair[0]) + "=" + _encode(pair[1]);
            }, "")
            .join("&");
        };

        /**
         * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
         * URI encoded counterparts
         *
         * @param {string} val The value to be encoded.
         *
         * @returns {string} The encoded value.
         */
        function encode(val) {
          return encodeURIComponent(val)
            .replace(/%3A/gi, ":")
            .replace(/%24/g, "$")
            .replace(/%2C/gi, ",")
            .replace(/%20/g, "+")
            .replace(/%5B/gi, "[")
            .replace(/%5D/gi, "]");
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @param {?object} options
         *
         * @returns {string} The formatted url
         */
        function buildURL(url, params, options) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }

          const _encode = (options && options.encode) || encode;

          const serializeFn = options && options.serialize;

          let serializedParams;

          if (serializeFn) {
            serializedParams = serializeFn(params, options);
          } else {
            serializedParams = utils.isURLSearchParams(params)
              ? params.toString()
              : new AxiosURLSearchParams(params, options).toString(_encode);
          }

          if (serializedParams) {
            const hashmarkIndex = url.indexOf("#");

            if (hashmarkIndex !== -1) {
              url = url.slice(0, hashmarkIndex);
            }
            url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
          }

          return url;
        }

        class InterceptorManager {
          constructor() {
            this.handlers = [];
          }

          /**
           * Add a new interceptor to the stack
           *
           * @param {Function} fulfilled The function to handle `then` for a `Promise`
           * @param {Function} rejected The function to handle `reject` for a `Promise`
           *
           * @return {Number} An ID used to remove interceptor later
           */
          use(fulfilled, rejected, options) {
            this.handlers.push({
              fulfilled,
              rejected,
              synchronous: options ? options.synchronous : false,
              runWhen: options ? options.runWhen : null,
            });
            return this.handlers.length - 1;
          }

          /**
           * Remove an interceptor from the stack
           *
           * @param {Number} id The ID that was returned by `use`
           *
           * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
           */
          eject(id) {
            if (this.handlers[id]) {
              this.handlers[id] = null;
            }
          }

          /**
           * Clear all interceptors from the stack
           *
           * @returns {void}
           */
          clear() {
            if (this.handlers) {
              this.handlers = [];
            }
          }

          /**
           * Iterate over all the registered interceptors
           *
           * This method is particularly useful for skipping over any
           * interceptors that may have become `null` calling `eject`.
           *
           * @param {Function} fn The function to call for each interceptor
           *
           * @returns {void}
           */
          forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
              if (h !== null) {
                fn(h);
              }
            });
          }
        }

        var InterceptorManager$1 = InterceptorManager;

        var transitionalDefaults = {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false,
        };

        var URLSearchParams$1 =
          typeof URLSearchParams !== "undefined"
            ? URLSearchParams
            : AxiosURLSearchParams;

        var FormData$1 = typeof FormData !== "undefined" ? FormData : null;

        var Blob$1 = typeof Blob !== "undefined" ? Blob : null;

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         *
         * @returns {boolean}
         */
        const isStandardBrowserEnv = (() => {
          let product;
          if (
            typeof navigator !== "undefined" &&
            ((product = navigator.product) === "ReactNative" ||
              product === "NativeScript" ||
              product === "NS")
          ) {
            return false;
          }

          return (
            typeof window !== "undefined" && typeof document !== "undefined"
          );
        })();

        /**
         * Determine if we're running in a standard browser webWorker environment
         *
         * Although the `isStandardBrowserEnv` method indicates that
         * `allows axios to run in a web worker`, the WebWorker will still be
         * filtered out due to its judgment standard
         * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
         * This leads to a problem when axios post `FormData` in webWorker
         */
        const isStandardBrowserWebWorkerEnv = (() => {
          return (
            typeof WorkerGlobalScope !== "undefined" &&
            // eslint-disable-next-line no-undef
            self instanceof WorkerGlobalScope &&
            typeof self.importScripts === "function"
          );
        })();

        var platform = {
          isBrowser: true,
          classes: {
            URLSearchParams: URLSearchParams$1,
            FormData: FormData$1,
            Blob: Blob$1,
          },
          isStandardBrowserEnv,
          isStandardBrowserWebWorkerEnv,
          protocols: ["http", "https", "file", "blob", "url", "data"],
        };

        function toURLEncodedForm(data, options) {
          return toFormData(
            data,
            new platform.classes.URLSearchParams(),
            Object.assign(
              {
                visitor: function (value, key, path, helpers) {
                  if (platform.isNode && utils.isBuffer(value)) {
                    this.append(key, value.toString("base64"));
                    return false;
                  }

                  return helpers.defaultVisitor.apply(this, arguments);
                },
              },
              options
            )
          );
        }

        /**
         * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
         *
         * @param {string} name - The name of the property to get.
         *
         * @returns An array of strings.
         */
        function parsePropPath(name) {
          // foo[x][y][z]
          // foo.x.y.z
          // foo-x-y-z
          // foo x y z
          return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
            return match[0] === "[]" ? "" : match[1] || match[0];
          });
        }

        /**
         * Convert an array to an object.
         *
         * @param {Array<any>} arr - The array to convert to an object.
         *
         * @returns An object with the same keys and values as the array.
         */
        function arrayToObject(arr) {
          const obj = {};
          const keys = Object.keys(arr);
          let i;
          const len = keys.length;
          let key;
          for (i = 0; i < len; i++) {
            key = keys[i];
            obj[key] = arr[key];
          }
          return obj;
        }

        /**
         * It takes a FormData object and returns a JavaScript object
         *
         * @param {string} formData The FormData object to convert to JSON.
         *
         * @returns {Object<string, any> | null} The converted object.
         */
        function formDataToJSON(formData) {
          function buildPath(path, value, target, index) {
            let name = path[index++];
            const isNumericKey = Number.isFinite(+name);
            const isLast = index >= path.length;
            name = !name && utils.isArray(target) ? target.length : name;

            if (isLast) {
              if (utils.hasOwnProp(target, name)) {
                target[name] = [target[name], value];
              } else {
                target[name] = value;
              }

              return !isNumericKey;
            }

            if (!target[name] || !utils.isObject(target[name])) {
              target[name] = [];
            }

            const result = buildPath(path, value, target[name], index);

            if (result && utils.isArray(target[name])) {
              target[name] = arrayToObject(target[name]);
            }

            return !isNumericKey;
          }

          if (
            utils.isFormData(formData) &&
            utils.isFunction(formData.entries)
          ) {
            const obj = {};

            utils.forEachEntry(formData, (name, value) => {
              buildPath(parsePropPath(name), value, obj, 0);
            });

            return obj;
          }

          return null;
        }

        const DEFAULT_CONTENT_TYPE = {
          "Content-Type": undefined,
        };

        /**
         * It takes a string, tries to parse it, and if it fails, it returns the stringified version
         * of the input
         *
         * @param {any} rawValue - The value to be stringified.
         * @param {Function} parser - A function that parses a string into a JavaScript object.
         * @param {Function} encoder - A function that takes a value and returns a string.
         *
         * @returns {string} A stringified version of the rawValue.
         */
        function stringifySafely(rawValue, parser, encoder) {
          if (utils.isString(rawValue)) {
            try {
              (parser || JSON.parse)(rawValue);
              return utils.trim(rawValue);
            } catch (e) {
              if (e.name !== "SyntaxError") {
                throw e;
              }
            }
          }

          return (encoder || JSON.stringify)(rawValue);
        }

        const defaults = {
          transitional: transitionalDefaults,

          adapter: ["xhr", "http"],

          transformRequest: [
            function transformRequest(data, headers) {
              const contentType = headers.getContentType() || "";
              const hasJSONContentType =
                contentType.indexOf("application/json") > -1;
              const isObjectPayload = utils.isObject(data);

              if (isObjectPayload && utils.isHTMLForm(data)) {
                data = new FormData(data);
              }

              const isFormData = utils.isFormData(data);

              if (isFormData) {
                if (!hasJSONContentType) {
                  return data;
                }
                return hasJSONContentType
                  ? JSON.stringify(formDataToJSON(data))
                  : data;
              }

              if (
                utils.isArrayBuffer(data) ||
                utils.isBuffer(data) ||
                utils.isStream(data) ||
                utils.isFile(data) ||
                utils.isBlob(data)
              ) {
                return data;
              }
              if (utils.isArrayBufferView(data)) {
                return data.buffer;
              }
              if (utils.isURLSearchParams(data)) {
                headers.setContentType(
                  "application/x-www-form-urlencoded;charset=utf-8",
                  false
                );
                return data.toString();
              }

              let isFileList;

              if (isObjectPayload) {
                if (
                  contentType.indexOf("application/x-www-form-urlencoded") > -1
                ) {
                  return toURLEncodedForm(data, this.formSerializer).toString();
                }

                if (
                  (isFileList = utils.isFileList(data)) ||
                  contentType.indexOf("multipart/form-data") > -1
                ) {
                  const _FormData = this.env && this.env.FormData;

                  return toFormData(
                    isFileList ? { "files[]": data } : data,
                    _FormData && new _FormData(),
                    this.formSerializer
                  );
                }
              }

              if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return stringifySafely(data);
              }

              return data;
            },
          ],

          transformResponse: [
            function transformResponse(data) {
              const transitional = this.transitional || defaults.transitional;
              const forcedJSONParsing =
                transitional && transitional.forcedJSONParsing;
              const JSONRequested = this.responseType === "json";

              if (
                data &&
                utils.isString(data) &&
                ((forcedJSONParsing && !this.responseType) || JSONRequested)
              ) {
                const silentJSONParsing =
                  transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;

                try {
                  return JSON.parse(data);
                } catch (e) {
                  if (strictJSONParsing) {
                    if (e.name === "SyntaxError") {
                      throw AxiosError.from(
                        e,
                        AxiosError.ERR_BAD_RESPONSE,
                        this,
                        null,
                        this.response
                      );
                    }
                    throw e;
                  }
                }
              }

              return data;
            },
          ],

          /**
           * A timeout in milliseconds to abort a request. If set to 0 (default) a
           * timeout is not created.
           */
          timeout: 0,

          xsrfCookieName: "XSRF-TOKEN",
          xsrfHeaderName: "X-XSRF-TOKEN",

          maxContentLength: -1,
          maxBodyLength: -1,

          env: {
            FormData: platform.classes.FormData,
            Blob: platform.classes.Blob,
          },

          validateStatus: function validateStatus(status) {
            return status >= 200 && status < 300;
          },

          headers: {
            common: {
              Accept: "application/json, text/plain, */*",
            },
          },
        };

        utils.forEach(
          ["delete", "get", "head"],
          function forEachMethodNoData(method) {
            defaults.headers[method] = {};
          }
        );

        utils.forEach(
          ["post", "put", "patch"],
          function forEachMethodWithData(method) {
            defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
          }
        );

        var defaults$1 = defaults;

        // RawAxiosHeaders whose duplicates are ignored by node
        // c.f. https://nodejs.org/api/http.html#http_message_headers
        const ignoreDuplicateOf = utils.toObjectSet([
          "age",
          "authorization",
          "content-length",
          "content-type",
          "etag",
          "expires",
          "from",
          "host",
          "if-modified-since",
          "if-unmodified-since",
          "last-modified",
          "location",
          "max-forwards",
          "proxy-authorization",
          "referer",
          "retry-after",
          "user-agent",
        ]);

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} rawHeaders Headers needing to be parsed
         *
         * @returns {Object} Headers parsed into an object
         */
        var parseHeaders = (rawHeaders) => {
          const parsed = {};
          let key;
          let val;
          let i;

          rawHeaders &&
            rawHeaders.split("\n").forEach(function parser(line) {
              i = line.indexOf(":");
              key = line.substring(0, i).trim().toLowerCase();
              val = line.substring(i + 1).trim();

              if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
                return;
              }

              if (key === "set-cookie") {
                if (parsed[key]) {
                  parsed[key].push(val);
                } else {
                  parsed[key] = [val];
                }
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
              }
            });

          return parsed;
        };

        const $internals = Symbol("internals");

        function normalizeHeader(header) {
          return header && String(header).trim().toLowerCase();
        }

        function normalizeValue(value) {
          if (value === false || value == null) {
            return value;
          }

          return utils.isArray(value)
            ? value.map(normalizeValue)
            : String(value);
        }

        function parseTokens(str) {
          const tokens = Object.create(null);
          const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
          let match;

          while ((match = tokensRE.exec(str))) {
            tokens[match[1]] = match[2];
          }

          return tokens;
        }

        const isValidHeaderName = (str) =>
          /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

        function matchHeaderValue(
          context,
          value,
          header,
          filter,
          isHeaderNameFilter
        ) {
          if (utils.isFunction(filter)) {
            return filter.call(this, value, header);
          }

          if (isHeaderNameFilter) {
            value = header;
          }

          if (!utils.isString(value)) return;

          if (utils.isString(filter)) {
            return value.indexOf(filter) !== -1;
          }

          if (utils.isRegExp(filter)) {
            return filter.test(value);
          }
        }

        function formatHeader(header) {
          return header
            .trim()
            .toLowerCase()
            .replace(/([a-z\d])(\w*)/g, (w, char, str) => {
              return char.toUpperCase() + str;
            });
        }

        function buildAccessors(obj, header) {
          const accessorName = utils.toCamelCase(" " + header);

          ["get", "set", "has"].forEach((methodName) => {
            Object.defineProperty(obj, methodName + accessorName, {
              value: function (arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
              },
              configurable: true,
            });
          });
        }

        class AxiosHeaders {
          constructor(headers) {
            headers && this.set(headers);
          }

          set(header, valueOrRewrite, rewrite) {
            const self = this;

            function setHeader(_value, _header, _rewrite) {
              const lHeader = normalizeHeader(_header);

              if (!lHeader) {
                throw new Error("header name must be a non-empty string");
              }

              const key = utils.findKey(self, lHeader);

              if (
                !key ||
                self[key] === undefined ||
                _rewrite === true ||
                (_rewrite === undefined && self[key] !== false)
              ) {
                self[key || _header] = normalizeValue(_value);
              }
            }

            const setHeaders = (headers, _rewrite) =>
              utils.forEach(headers, (_value, _header) =>
                setHeader(_value, _header, _rewrite)
              );

            if (
              utils.isPlainObject(header) ||
              header instanceof this.constructor
            ) {
              setHeaders(header, valueOrRewrite);
            } else if (
              utils.isString(header) &&
              (header = header.trim()) &&
              !isValidHeaderName(header)
            ) {
              setHeaders(parseHeaders(header), valueOrRewrite);
            } else {
              header != null && setHeader(valueOrRewrite, header, rewrite);
            }

            return this;
          }

          get(header, parser) {
            header = normalizeHeader(header);

            if (header) {
              const key = utils.findKey(this, header);

              if (key) {
                const value = this[key];

                if (!parser) {
                  return value;
                }

                if (parser === true) {
                  return parseTokens(value);
                }

                if (utils.isFunction(parser)) {
                  return parser.call(this, value, key);
                }

                if (utils.isRegExp(parser)) {
                  return parser.exec(value);
                }

                throw new TypeError("parser must be boolean|regexp|function");
              }
            }
          }

          has(header, matcher) {
            header = normalizeHeader(header);

            if (header) {
              const key = utils.findKey(this, header);

              return !!(
                key &&
                this[key] !== undefined &&
                (!matcher || matchHeaderValue(this, this[key], key, matcher))
              );
            }

            return false;
          }

          delete(header, matcher) {
            const self = this;
            let deleted = false;

            function deleteHeader(_header) {
              _header = normalizeHeader(_header);

              if (_header) {
                const key = utils.findKey(self, _header);

                if (
                  key &&
                  (!matcher || matchHeaderValue(self, self[key], key, matcher))
                ) {
                  delete self[key];

                  deleted = true;
                }
              }
            }

            if (utils.isArray(header)) {
              header.forEach(deleteHeader);
            } else {
              deleteHeader(header);
            }

            return deleted;
          }

          clear(matcher) {
            const keys = Object.keys(this);
            let i = keys.length;
            let deleted = false;

            while (i--) {
              const key = keys[i];
              if (
                !matcher ||
                matchHeaderValue(this, this[key], key, matcher, true)
              ) {
                delete this[key];
                deleted = true;
              }
            }

            return deleted;
          }

          normalize(format) {
            const self = this;
            const headers = {};

            utils.forEach(this, (value, header) => {
              const key = utils.findKey(headers, header);

              if (key) {
                self[key] = normalizeValue(value);
                delete self[header];
                return;
              }

              const normalized = format
                ? formatHeader(header)
                : String(header).trim();

              if (normalized !== header) {
                delete self[header];
              }

              self[normalized] = normalizeValue(value);

              headers[normalized] = true;
            });

            return this;
          }

          concat(...targets) {
            return this.constructor.concat(this, ...targets);
          }

          toJSON(asStrings) {
            const obj = Object.create(null);

            utils.forEach(this, (value, header) => {
              value != null &&
                value !== false &&
                (obj[header] =
                  asStrings && utils.isArray(value) ? value.join(", ") : value);
            });

            return obj;
          }

          [Symbol.iterator]() {
            return Object.entries(this.toJSON())[Symbol.iterator]();
          }

          toString() {
            return Object.entries(this.toJSON())
              .map(([header, value]) => header + ": " + value)
              .join("\n");
          }

          get [Symbol.toStringTag]() {
            return "AxiosHeaders";
          }

          static from(thing) {
            return thing instanceof this ? thing : new this(thing);
          }

          static concat(first, ...targets) {
            const computed = new this(first);

            targets.forEach((target) => computed.set(target));

            return computed;
          }

          static accessor(header) {
            const internals =
              (this[$internals] =
                this[$internals] =
                {
                  accessors: {},
                });

            const accessors = internals.accessors;
            const prototype = this.prototype;

            function defineAccessor(_header) {
              const lHeader = normalizeHeader(_header);

              if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
              }
            }

            utils.isArray(header)
              ? header.forEach(defineAccessor)
              : defineAccessor(header);

            return this;
          }
        }

        AxiosHeaders.accessor([
          "Content-Type",
          "Content-Length",
          "Accept",
          "Accept-Encoding",
          "User-Agent",
          "Authorization",
        ]);

        utils.freezeMethods(AxiosHeaders.prototype);
        utils.freezeMethods(AxiosHeaders);

        var AxiosHeaders$1 = AxiosHeaders;

        /**
         * Transform the data for a request or a response
         *
         * @param {Array|Function} fns A single function or Array of functions
         * @param {?Object} response The response object
         *
         * @returns {*} The resulting transformed data
         */
        function transformData(fns, response) {
          const config = this || defaults$1;
          const context = response || config;
          const headers = AxiosHeaders$1.from(context.headers);
          let data = context.data;

          utils.forEach(fns, function transform(fn) {
            data = fn.call(
              config,
              data,
              headers.normalize(),
              response ? response.status : undefined
            );
          });

          headers.normalize();

          return data;
        }

        function isCancel(value) {
          return !!(value && value.__CANCEL__);
        }

        /**
         * A `CanceledError` is an object that is thrown when an operation is canceled.
         *
         * @param {string=} message The message.
         * @param {Object=} config The config.
         * @param {Object=} request The request.
         *
         * @returns {CanceledError} The created error.
         */
        function CanceledError(message, config, request) {
          // eslint-disable-next-line no-eq-null,eqeqeq
          AxiosError.call(
            this,
            message == null ? "canceled" : message,
            AxiosError.ERR_CANCELED,
            config,
            request
          );
          this.name = "CanceledError";
        }

        utils.inherits(CanceledError, AxiosError, {
          __CANCEL__: true,
        });

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         *
         * @returns {object} The response.
         */
        function settle(resolve, reject, response) {
          const validateStatus = response.config.validateStatus;
          if (
            !response.status ||
            !validateStatus ||
            validateStatus(response.status)
          ) {
            resolve(response);
          } else {
            reject(
              new AxiosError(
                "Request failed with status code " + response.status,
                [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][
                Math.floor(response.status / 100) - 4
                ],
                response.config,
                response.request,
                response
              )
            );
          }
        }

        var cookies = platform.isStandardBrowserEnv
          ? // Standard browser envs support document.cookie
          (function standardBrowserEnv() {
            return {
              write: function write(
                name,
                value,
                expires,
                path,
                domain,
                secure
              ) {
                const cookie = [];
                cookie.push(name + "=" + encodeURIComponent(value));

                if (utils.isNumber(expires)) {
                  cookie.push("expires=" + new Date(expires).toGMTString());
                }

                if (utils.isString(path)) {
                  cookie.push("path=" + path);
                }

                if (utils.isString(domain)) {
                  cookie.push("domain=" + domain);
                }

                if (secure === true) {
                  cookie.push("secure");
                }

                document.cookie = cookie.join("; ");
              },

              read: function read(name) {
                const match = document.cookie.match(
                  new RegExp("(^|;\\s*)(" + name + ")=([^;]*)")
                );
                return match ? decodeURIComponent(match[3]) : null;
              },

              remove: function remove(name) {
                this.write(name, "", Date.now() - 86400000);
              },
            };
          })()
          : // Non standard browser env (web workers, react-native) lack needed support.
          (function nonStandardBrowserEnv() {
            return {
              write: function write() { },
              read: function read() {
                return null;
              },
              remove: function remove() { },
            };
          })();

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         *
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
        }

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         *
         * @returns {string} The combined URL
         */
        function combineURLs(baseURL, relativeURL) {
          return relativeURL
            ? baseURL.replace(/\/+$/, "") +
            "/" +
            relativeURL.replace(/^\/+/, "")
            : baseURL;
        }

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         *
         * @returns {string} The combined full path
         */
        function buildFullPath(baseURL, requestedURL) {
          if (baseURL && !isAbsoluteURL(requestedURL)) {
            return combineURLs(baseURL, requestedURL);
          }
          return requestedURL;
        }

        var isURLSameOrigin = platform.isStandardBrowserEnv
          ? // Standard browser envs have full support of the APIs needed to test
          // whether the request URL is of the same origin as current location.
          (function standardBrowserEnv() {
            const msie = /(msie|trident)/i.test(navigator.userAgent);
            const urlParsingNode = document.createElement("a");
            let originURL;

            /**
             * Parse a URL to discover it's components
             *
             * @param {String} url The URL to be parsed
             * @returns {Object}
             */
            function resolveURL(url) {
              let href = url;

              if (msie) {
                // IE needs attribute set twice to normalize properties
                urlParsingNode.setAttribute("href", href);
                href = urlParsingNode.href;
              }

              urlParsingNode.setAttribute("href", href);

              // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
              return {
                href: urlParsingNode.href,
                protocol: urlParsingNode.protocol
                  ? urlParsingNode.protocol.replace(/:$/, "")
                  : "",
                host: urlParsingNode.host,
                search: urlParsingNode.search
                  ? urlParsingNode.search.replace(/^\?/, "")
                  : "",
                hash: urlParsingNode.hash
                  ? urlParsingNode.hash.replace(/^#/, "")
                  : "",
                hostname: urlParsingNode.hostname,
                port: urlParsingNode.port,
                pathname:
                  urlParsingNode.pathname.charAt(0) === "/"
                    ? urlParsingNode.pathname
                    : "/" + urlParsingNode.pathname,
              };
            }

            originURL = resolveURL(window.location.href);

            /**
             * Determine if a URL shares the same origin as the current location
             *
             * @param {String} requestURL The URL to test
             * @returns {boolean} True if URL shares the same origin, otherwise false
             */
            return function isURLSameOrigin(requestURL) {
              const parsed = utils.isString(requestURL)
                ? resolveURL(requestURL)
                : requestURL;
              return (
                parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host
              );
            };
          })()
          : // Non standard browser envs (web workers, react-native) lack needed support.
          (function nonStandardBrowserEnv() {
            return function isURLSameOrigin() {
              return true;
            };
          })();

        function parseProtocol(url) {
          const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
          return (match && match[1]) || "";
        }

        /**
         * Calculate data maxRate
         * @param {Number} [samplesCount= 10]
         * @param {Number} [min= 1000]
         * @returns {Function}
         */
        function speedometer(samplesCount, min) {
          samplesCount = samplesCount || 10;
          const bytes = new Array(samplesCount);
          const timestamps = new Array(samplesCount);
          let head = 0;
          let tail = 0;
          let firstSampleTS;

          min = min !== undefined ? min : 1000;

          return function push(chunkLength) {
            const now = Date.now();

            const startedAt = timestamps[tail];

            if (!firstSampleTS) {
              firstSampleTS = now;
            }

            bytes[head] = chunkLength;
            timestamps[head] = now;

            let i = tail;
            let bytesCount = 0;

            while (i !== head) {
              bytesCount += bytes[i++];
              i = i % samplesCount;
            }

            head = (head + 1) % samplesCount;

            if (head === tail) {
              tail = (tail + 1) % samplesCount;
            }

            if (now - firstSampleTS < min) {
              return;
            }

            const passed = startedAt && now - startedAt;

            return passed
              ? Math.round((bytesCount * 1000) / passed)
              : undefined;
          };
        }

        function progressEventReducer(listener, isDownloadStream) {
          let bytesNotified = 0;
          const _speedometer = speedometer(50, 250);

          return (e) => {
            const loaded = e.loaded;
            const total = e.lengthComputable ? e.total : undefined;
            const progressBytes = loaded - bytesNotified;
            const rate = _speedometer(progressBytes);
            const inRange = loaded <= total;

            bytesNotified = loaded;

            const data = {
              loaded,
              total,
              progress: total ? loaded / total : undefined,
              bytes: progressBytes,
              rate: rate ? rate : undefined,
              estimated:
                rate && total && inRange ? (total - loaded) / rate : undefined,
              event: e,
            };

            data[isDownloadStream ? "download" : "upload"] = true;

            listener(data);
          };
        }

        const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";

        var xhrAdapter =
          isXHRAdapterSupported &&
          function (config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
              let requestData = config.data;
              const requestHeaders = AxiosHeaders$1.from(
                config.headers
              ).normalize();
              const responseType = config.responseType;
              let onCanceled;
              function done() {
                if (config.cancelToken) {
                  config.cancelToken.unsubscribe(onCanceled);
                }

                if (config.signal) {
                  config.signal.removeEventListener("abort", onCanceled);
                }
              }

              if (
                utils.isFormData(requestData) &&
                (platform.isStandardBrowserEnv ||
                  platform.isStandardBrowserWebWorkerEnv)
              ) {
                requestHeaders.setContentType(false); // Let the browser set it
              }

              let request = new XMLHttpRequest();

              // HTTP basic authentication
              if (config.auth) {
                const username = config.auth.username || "";
                const password = config.auth.password
                  ? unescape(encodeURIComponent(config.auth.password))
                  : "";
                requestHeaders.set(
                  "Authorization",
                  "Basic " + btoa(username + ":" + password)
                );
              }

              const fullPath = buildFullPath(config.baseURL, config.url);

              request.open(
                config.method.toUpperCase(),
                buildURL(fullPath, config.params, config.paramsSerializer),
                true
              );

              // Set the request timeout in MS
              request.timeout = config.timeout;

              function onloadend() {
                if (!request) {
                  return;
                }
                // Prepare the response
                const responseHeaders = AxiosHeaders$1.from(
                  "getAllResponseHeaders" in request &&
                  request.getAllResponseHeaders()
                );
                const responseData =
                  !responseType ||
                    responseType === "text" ||
                    responseType === "json"
                    ? request.responseText
                    : request.response;
                const response = {
                  data: responseData,
                  status: request.status,
                  statusText: request.statusText,
                  headers: responseHeaders,
                  config,
                  request,
                };

                settle(
                  function _resolve(value) {
                    resolve(value);
                    done();
                  },
                  function _reject(err) {
                    reject(err);
                    done();
                  },
                  response
                );

                // Clean up request
                request = null;
              }

              if ("onloadend" in request) {
                // Use onloadend if available
                request.onloadend = onloadend;
              } else {
                // Listen for ready state to emulate onloadend
                request.onreadystatechange = function handleLoad() {
                  if (!request || request.readyState !== 4) {
                    return;
                  }

                  // The request errored out and we didn't get a response, this will be
                  // handled by onerror instead
                  // With one exception: request that using file: protocol, most browsers
                  // will return status as 0 even though it's a successful request
                  if (
                    request.status === 0 &&
                    !(
                      request.responseURL &&
                      request.responseURL.indexOf("file:") === 0
                    )
                  ) {
                    return;
                  }
                  // readystate handler is calling before onerror or ontimeout handlers,
                  // so we should call onloadend on the next 'tick'
                  setTimeout(onloadend);
                };
              }

              // Handle browser request cancellation (as opposed to a manual cancellation)
              request.onabort = function handleAbort() {
                if (!request) {
                  return;
                }

                reject(
                  new AxiosError(
                    "Request aborted",
                    AxiosError.ECONNABORTED,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Handle low level network errors
              request.onerror = function handleError() {
                // Real errors are hidden from us by the browser
                // onerror should only fire if it's a network error
                reject(
                  new AxiosError(
                    "Network Error",
                    AxiosError.ERR_NETWORK,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Handle timeout
              request.ontimeout = function handleTimeout() {
                let timeoutErrorMessage = config.timeout
                  ? "timeout of " + config.timeout + "ms exceeded"
                  : "timeout exceeded";
                const transitional =
                  config.transitional || transitionalDefaults;
                if (config.timeoutErrorMessage) {
                  timeoutErrorMessage = config.timeoutErrorMessage;
                }
                reject(
                  new AxiosError(
                    timeoutErrorMessage,
                    transitional.clarifyTimeoutError
                      ? AxiosError.ETIMEDOUT
                      : AxiosError.ECONNABORTED,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Add xsrf header
              // This is only done if running in a standard browser environment.
              // Specifically not if we're in a web worker, or react-native.
              if (platform.isStandardBrowserEnv) {
                // Add xsrf header
                const xsrfValue =
                  (config.withCredentials || isURLSameOrigin(fullPath)) &&
                  config.xsrfCookieName &&
                  cookies.read(config.xsrfCookieName);

                if (xsrfValue) {
                  requestHeaders.set(config.xsrfHeaderName, xsrfValue);
                }
              }

              // Remove Content-Type if data is undefined
              requestData === undefined && requestHeaders.setContentType(null);

              // Add headers to the request
              if ("setRequestHeader" in request) {
                utils.forEach(
                  requestHeaders.toJSON(),
                  function setRequestHeader(val, key) {
                    request.setRequestHeader(key, val);
                  }
                );
              }

              // Add withCredentials to request if needed
              if (!utils.isUndefined(config.withCredentials)) {
                request.withCredentials = !!config.withCredentials;
              }

              // Add responseType to request if needed
              if (responseType && responseType !== "json") {
                request.responseType = config.responseType;
              }

              // Handle progress if needed
              if (typeof config.onDownloadProgress === "function") {
                request.addEventListener(
                  "progress",
                  progressEventReducer(config.onDownloadProgress, true)
                );
              }

              // Not all browsers support upload events
              if (
                typeof config.onUploadProgress === "function" &&
                request.upload
              ) {
                request.upload.addEventListener(
                  "progress",
                  progressEventReducer(config.onUploadProgress)
                );
              }

              if (config.cancelToken || config.signal) {
                // Handle cancellation
                // eslint-disable-next-line func-names
                onCanceled = (cancel) => {
                  if (!request) {
                    return;
                  }
                  reject(
                    !cancel || cancel.type
                      ? new CanceledError(null, config, request)
                      : cancel
                  );
                  request.abort();
                  request = null;
                };

                config.cancelToken && config.cancelToken.subscribe(onCanceled);
                if (config.signal) {
                  config.signal.aborted
                    ? onCanceled()
                    : config.signal.addEventListener("abort", onCanceled);
                }
              }

              const protocol = parseProtocol(fullPath);

              if (protocol && platform.protocols.indexOf(protocol) === -1) {
                reject(
                  new AxiosError(
                    "Unsupported protocol " + protocol + ":",
                    AxiosError.ERR_BAD_REQUEST,
                    config
                  )
                );
                return;
              }

              // Send the request
              request.send(requestData || null);
            });
          };

        const knownAdapters = {
          http: httpAdapter,
          xhr: xhrAdapter,
        };

        utils.forEach(knownAdapters, (fn, value) => {
          if (fn) {
            try {
              Object.defineProperty(fn, "name", { value });
            } catch (e) {
              // eslint-disable-next-line no-empty
            }
            Object.defineProperty(fn, "adapterName", { value });
          }
        });

        var adapters = {
          getAdapter: (adapters) => {
            adapters = utils.isArray(adapters) ? adapters : [adapters];

            const { length } = adapters;
            let nameOrAdapter;
            let adapter;

            for (let i = 0; i < length; i++) {
              nameOrAdapter = adapters[i];
              if (
                (adapter = utils.isString(nameOrAdapter)
                  ? knownAdapters[nameOrAdapter.toLowerCase()]
                  : nameOrAdapter)
              ) {
                break;
              }
            }

            if (!adapter) {
              if (adapter === false) {
                throw new AxiosError(
                  `Adapter ${nameOrAdapter} is not supported by the environment`,
                  "ERR_NOT_SUPPORT"
                );
              }

              throw new Error(
                utils.hasOwnProp(knownAdapters, nameOrAdapter)
                  ? `Adapter '${nameOrAdapter}' is not available in the build`
                  : `Unknown adapter '${nameOrAdapter}'`
              );
            }

            if (!utils.isFunction(adapter)) {
              throw new TypeError("adapter is not a function");
            }

            return adapter;
          },
          adapters: knownAdapters,
        };

        /**
         * Throws a `CanceledError` if cancellation has been requested.
         *
         * @param {Object} config The config that is to be used for the request
         *
         * @returns {void}
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }

          if (config.signal && config.signal.aborted) {
            throw new CanceledError(null, config);
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         *
         * @returns {Promise} The Promise to be fulfilled
         */
        function dispatchRequest(config) {
          throwIfCancellationRequested(config);

          config.headers = AxiosHeaders$1.from(config.headers);

          // Transform request data
          config.data = transformData.call(config, config.transformRequest);

          if (["post", "put", "patch"].indexOf(config.method) !== -1) {
            config.headers.setContentType(
              "application/x-www-form-urlencoded",
              false
            );
          }

          const adapter = adapters.getAdapter(
            config.adapter || defaults$1.adapter
          );

          return adapter(config).then(
            function onAdapterResolution(response) {
              throwIfCancellationRequested(config);

              // Transform response data
              response.data = transformData.call(
                config,
                config.transformResponse,
                response
              );

              response.headers = AxiosHeaders$1.from(response.headers);

              return response;
            },
            function onAdapterRejection(reason) {
              if (!isCancel(reason)) {
                throwIfCancellationRequested(config);

                // Transform response data
                if (reason && reason.response) {
                  reason.response.data = transformData.call(
                    config,
                    config.transformResponse,
                    reason.response
                  );
                  reason.response.headers = AxiosHeaders$1.from(
                    reason.response.headers
                  );
                }
              }

              return Promise.reject(reason);
            }
          );
        }

        const headersToObject = (thing) =>
          thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         *
         * @returns {Object} New object resulting from merging config2 to config1
         */
        function mergeConfig(config1, config2) {
          // eslint-disable-next-line no-param-reassign
          config2 = config2 || {};
          const config = {};

          function getMergedValue(target, source, caseless) {
            if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
              return utils.merge.call({ caseless }, target, source);
            } else if (utils.isPlainObject(source)) {
              return utils.merge({}, source);
            } else if (utils.isArray(source)) {
              return source.slice();
            }
            return source;
          }

          // eslint-disable-next-line consistent-return
          function mergeDeepProperties(a, b, caseless) {
            if (!utils.isUndefined(b)) {
              return getMergedValue(a, b, caseless);
            } else if (!utils.isUndefined(a)) {
              return getMergedValue(undefined, a, caseless);
            }
          }

          // eslint-disable-next-line consistent-return
          function valueFromConfig2(a, b) {
            if (!utils.isUndefined(b)) {
              return getMergedValue(undefined, b);
            }
          }

          // eslint-disable-next-line consistent-return
          function defaultToConfig2(a, b) {
            if (!utils.isUndefined(b)) {
              return getMergedValue(undefined, b);
            } else if (!utils.isUndefined(a)) {
              return getMergedValue(undefined, a);
            }
          }

          // eslint-disable-next-line consistent-return
          function mergeDirectKeys(a, b, prop) {
            if (prop in config2) {
              return getMergedValue(a, b);
            } else if (prop in config1) {
              return getMergedValue(undefined, a);
            }
          }

          const mergeMap = {
            url: valueFromConfig2,
            method: valueFromConfig2,
            data: valueFromConfig2,
            baseURL: defaultToConfig2,
            transformRequest: defaultToConfig2,
            transformResponse: defaultToConfig2,
            paramsSerializer: defaultToConfig2,
            timeout: defaultToConfig2,
            timeoutMessage: defaultToConfig2,
            withCredentials: defaultToConfig2,
            adapter: defaultToConfig2,
            responseType: defaultToConfig2,
            xsrfCookieName: defaultToConfig2,
            xsrfHeaderName: defaultToConfig2,
            onUploadProgress: defaultToConfig2,
            onDownloadProgress: defaultToConfig2,
            decompress: defaultToConfig2,
            maxContentLength: defaultToConfig2,
            maxBodyLength: defaultToConfig2,
            beforeRedirect: defaultToConfig2,
            transport: defaultToConfig2,
            httpAgent: defaultToConfig2,
            httpsAgent: defaultToConfig2,
            cancelToken: defaultToConfig2,
            socketPath: defaultToConfig2,
            responseEncoding: defaultToConfig2,
            validateStatus: mergeDirectKeys,
            headers: (a, b) =>
              mergeDeepProperties(headersToObject(a), headersToObject(b), true),
          };

          utils.forEach(
            Object.keys(config1).concat(Object.keys(config2)),
            function computeConfigValue(prop) {
              const merge = mergeMap[prop] || mergeDeepProperties;
              const configValue = merge(config1[prop], config2[prop], prop);
              (utils.isUndefined(configValue) && merge !== mergeDirectKeys) ||
                (config[prop] = configValue);
            }
          );

          return config;
        }

        const VERSION = "1.3.5";

        const validators$1 = {};

        // eslint-disable-next-line func-names
        ["object", "boolean", "number", "function", "string", "symbol"].forEach(
          (type, i) => {
            validators$1[type] = function validator(thing) {
              return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
            };
          }
        );

        const deprecatedWarnings = {};

        /**
         * Transitional option validator
         *
         * @param {function|boolean?} validator - set to false if the transitional option has been removed
         * @param {string?} version - deprecated version / removed since version
         * @param {string?} message - some message with additional info
         *
         * @returns {function}
         */
        validators$1.transitional = function transitional(
          validator,
          version,
          message
        ) {
          function formatMessage(opt, desc) {
            return (
              "[Axios v" +
              VERSION +
              "] Transitional option '" +
              opt +
              "'" +
              desc +
              (message ? ". " + message : "")
            );
          }

          // eslint-disable-next-line func-names
          return (value, opt, opts) => {
            if (validator === false) {
              throw new AxiosError(
                formatMessage(
                  opt,
                  " has been removed" + (version ? " in " + version : "")
                ),
                AxiosError.ERR_DEPRECATED
              );
            }

            if (version && !deprecatedWarnings[opt]) {
              deprecatedWarnings[opt] = true;
              // eslint-disable-next-line no-console
              console.warn(
                formatMessage(
                  opt,
                  " has been deprecated since v" +
                  version +
                  " and will be removed in the near future"
                )
              );
            }

            return validator ? validator(value, opt, opts) : true;
          };
        };

        /**
         * Assert object's properties type
         *
         * @param {object} options
         * @param {object} schema
         * @param {boolean?} allowUnknown
         *
         * @returns {object}
         */

        function assertOptions(options, schema, allowUnknown) {
          if (typeof options !== "object") {
            throw new AxiosError(
              "options must be an object",
              AxiosError.ERR_BAD_OPTION_VALUE
            );
          }
          const keys = Object.keys(options);
          let i = keys.length;
          while (i-- > 0) {
            const opt = keys[i];
            const validator = schema[opt];
            if (validator) {
              const value = options[opt];
              const result =
                value === undefined || validator(value, opt, options);
              if (result !== true) {
                throw new AxiosError(
                  "option " + opt + " must be " + result,
                  AxiosError.ERR_BAD_OPTION_VALUE
                );
              }
              continue;
            }
            if (allowUnknown !== true) {
              throw new AxiosError(
                "Unknown option " + opt,
                AxiosError.ERR_BAD_OPTION
              );
            }
          }
        }

        var validator = {
          assertOptions,
          validators: validators$1,
        };

        const validators = validator.validators;

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         *
         * @return {Axios} A new instance of Axios
         */
        class Axios {
          constructor(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
              request: new InterceptorManager$1(),
              response: new InterceptorManager$1(),
            };
          }

          /**
           * Dispatch a request
           *
           * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
           * @param {?Object} config
           *
           * @returns {Promise} The Promise to be fulfilled
           */
          request(configOrUrl, config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof configOrUrl === "string") {
              config = config || {};
              config.url = configOrUrl;
            } else {
              config = configOrUrl || {};
            }

            config = mergeConfig(this.defaults, config);

            const { transitional, paramsSerializer, headers } = config;

            if (transitional !== undefined) {
              validator.assertOptions(
                transitional,
                {
                  silentJSONParsing: validators.transitional(
                    validators.boolean
                  ),
                  forcedJSONParsing: validators.transitional(
                    validators.boolean
                  ),
                  clarifyTimeoutError: validators.transitional(
                    validators.boolean
                  ),
                },
                false
              );
            }

            if (paramsSerializer != null) {
              if (utils.isFunction(paramsSerializer)) {
                config.paramsSerializer = {
                  serialize: paramsSerializer,
                };
              } else {
                validator.assertOptions(
                  paramsSerializer,
                  {
                    encode: validators.function,
                    serialize: validators.function,
                  },
                  true
                );
              }
            }

            // Set config.method
            config.method = (
              config.method ||
              this.defaults.method ||
              "get"
            ).toLowerCase();

            let contextHeaders;

            // Flatten headers
            contextHeaders =
              headers && utils.merge(headers.common, headers[config.method]);

            contextHeaders &&
              utils.forEach(
                ["delete", "get", "head", "post", "put", "patch", "common"],
                (method) => {
                  delete headers[method];
                }
              );

            config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

            // filter out skipped interceptors
            const requestInterceptorChain = [];
            let synchronousRequestInterceptors = true;
            this.interceptors.request.forEach(
              function unshiftRequestInterceptors(interceptor) {
                if (
                  typeof interceptor.runWhen === "function" &&
                  interceptor.runWhen(config) === false
                ) {
                  return;
                }

                synchronousRequestInterceptors =
                  synchronousRequestInterceptors && interceptor.synchronous;

                requestInterceptorChain.unshift(
                  interceptor.fulfilled,
                  interceptor.rejected
                );
              }
            );

            const responseInterceptorChain = [];
            this.interceptors.response.forEach(
              function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(
                  interceptor.fulfilled,
                  interceptor.rejected
                );
              }
            );

            let promise;
            let i = 0;
            let len;

            if (!synchronousRequestInterceptors) {
              const chain = [dispatchRequest.bind(this), undefined];
              chain.unshift.apply(chain, requestInterceptorChain);
              chain.push.apply(chain, responseInterceptorChain);
              len = chain.length;

              promise = Promise.resolve(config);

              while (i < len) {
                promise = promise.then(chain[i++], chain[i++]);
              }

              return promise;
            }

            len = requestInterceptorChain.length;

            let newConfig = config;

            i = 0;

            while (i < len) {
              const onFulfilled = requestInterceptorChain[i++];
              const onRejected = requestInterceptorChain[i++];
              try {
                newConfig = onFulfilled(newConfig);
              } catch (error) {
                onRejected.call(this, error);
                break;
              }
            }

            try {
              promise = dispatchRequest.call(this, newConfig);
            } catch (error) {
              return Promise.reject(error);
            }

            i = 0;
            len = responseInterceptorChain.length;

            while (i < len) {
              promise = promise.then(
                responseInterceptorChain[i++],
                responseInterceptorChain[i++]
              );
            }

            return promise;
          }

          getUri(config) {
            config = mergeConfig(this.defaults, config);
            const fullPath = buildFullPath(config.baseURL, config.url);
            return buildURL(fullPath, config.params, config.paramsSerializer);
          }
        }

        // Provide aliases for supported request methods
        utils.forEach(
          ["delete", "get", "head", "options"],
          function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
              return this.request(
                mergeConfig(config || {}, {
                  method,
                  url,
                  data: (config || {}).data,
                })
              );
            };
          }
        );

        utils.forEach(
          ["post", "put", "patch"],
          function forEachMethodWithData(method) {
            /*eslint func-names:0*/

            function generateHTTPMethod(isForm) {
              return function httpMethod(url, data, config) {
                return this.request(
                  mergeConfig(config || {}, {
                    method,
                    headers: isForm
                      ? {
                        "Content-Type": "multipart/form-data",
                      }
                      : {},
                    url,
                    data,
                  })
                );
              };
            }

            Axios.prototype[method] = generateHTTPMethod();

            Axios.prototype[method + "Form"] = generateHTTPMethod(true);
          }
        );

        var Axios$1 = Axios;

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @param {Function} executor The executor function.
         *
         * @returns {CancelToken}
         */
        class CancelToken {
          constructor(executor) {
            if (typeof executor !== "function") {
              throw new TypeError("executor must be a function.");
            }

            let resolvePromise;

            this.promise = new Promise(function promiseExecutor(resolve) {
              resolvePromise = resolve;
            });

            const token = this;

            // eslint-disable-next-line func-names
            this.promise.then((cancel) => {
              if (!token._listeners) return;

              let i = token._listeners.length;

              while (i-- > 0) {
                token._listeners[i](cancel);
              }
              token._listeners = null;
            });

            // eslint-disable-next-line func-names
            this.promise.then = (onfulfilled) => {
              let _resolve;
              // eslint-disable-next-line func-names
              const promise = new Promise((resolve) => {
                token.subscribe(resolve);
                _resolve = resolve;
              }).then(onfulfilled);

              promise.cancel = function reject() {
                token.unsubscribe(_resolve);
              };

              return promise;
            };

            executor(function cancel(message, config, request) {
              if (token.reason) {
                // Cancellation has already been requested
                return;
              }

              token.reason = new CanceledError(message, config, request);
              resolvePromise(token.reason);
            });
          }

          /**
           * Throws a `CanceledError` if cancellation has been requested.
           */
          throwIfRequested() {
            if (this.reason) {
              throw this.reason;
            }
          }

          /**
           * Subscribe to the cancel signal
           */

          subscribe(listener) {
            if (this.reason) {
              listener(this.reason);
              return;
            }

            if (this._listeners) {
              this._listeners.push(listener);
            } else {
              this._listeners = [listener];
            }
          }

          /**
           * Unsubscribe from the cancel signal
           */

          unsubscribe(listener) {
            if (!this._listeners) {
              return;
            }
            const index = this._listeners.indexOf(listener);
            if (index !== -1) {
              this._listeners.splice(index, 1);
            }
          }

          /**
           * Returns an object that contains a new `CancelToken` and a function that, when called,
           * cancels the `CancelToken`.
           */
          static source() {
            let cancel;
            const token = new CancelToken(function executor(c) {
              cancel = c;
            });
            return {
              token,
              cancel,
            };
          }
        }

        var CancelToken$1 = CancelToken;

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         *
         * @returns {Function}
         */
        function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        }

        /**
         * Determines whether the payload is an error thrown by Axios
         *
         * @param {*} payload The value to test
         *
         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
         */
        function isAxiosError(payload) {
          return utils.isObject(payload) && payload.isAxiosError === true;
        }

        const HttpStatusCode = {
          Continue: 100,
          SwitchingProtocols: 101,
          Processing: 102,
          EarlyHints: 103,
          Ok: 200,
          Created: 201,
          Accepted: 202,
          NonAuthoritativeInformation: 203,
          NoContent: 204,
          ResetContent: 205,
          PartialContent: 206,
          MultiStatus: 207,
          AlreadyReported: 208,
          ImUsed: 226,
          MultipleChoices: 300,
          MovedPermanently: 301,
          Found: 302,
          SeeOther: 303,
          NotModified: 304,
          UseProxy: 305,
          Unused: 306,
          TemporaryRedirect: 307,
          PermanentRedirect: 308,
          BadRequest: 400,
          Unauthorized: 401,
          PaymentRequired: 402,
          Forbidden: 403,
          NotFound: 404,
          MethodNotAllowed: 405,
          NotAcceptable: 406,
          ProxyAuthenticationRequired: 407,
          RequestTimeout: 408,
          Conflict: 409,
          Gone: 410,
          LengthRequired: 411,
          PreconditionFailed: 412,
          PayloadTooLarge: 413,
          UriTooLong: 414,
          UnsupportedMediaType: 415,
          RangeNotSatisfiable: 416,
          ExpectationFailed: 417,
          ImATeapot: 418,
          MisdirectedRequest: 421,
          UnprocessableEntity: 422,
          Locked: 423,
          FailedDependency: 424,
          TooEarly: 425,
          UpgradeRequired: 426,
          PreconditionRequired: 428,
          TooManyRequests: 429,
          RequestHeaderFieldsTooLarge: 431,
          UnavailableForLegalReasons: 451,
          InternalServerError: 500,
          NotImplemented: 501,
          BadGateway: 502,
          ServiceUnavailable: 503,
          GatewayTimeout: 504,
          HttpVersionNotSupported: 505,
          VariantAlsoNegotiates: 506,
          InsufficientStorage: 507,
          LoopDetected: 508,
          NotExtended: 510,
          NetworkAuthenticationRequired: 511,
        };

        Object.entries(HttpStatusCode).forEach(([key, value]) => {
          HttpStatusCode[value] = key;
        });

        var HttpStatusCode$1 = HttpStatusCode;

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         *
         * @returns {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          const context = new Axios$1(defaultConfig);
          const instance = bind(Axios$1.prototype.request, context);

          // Copy axios.prototype to instance
          utils.extend(instance, Axios$1.prototype, context, {
            allOwnKeys: true,
          });

          // Copy context to instance
          utils.extend(instance, context, null, { allOwnKeys: true });

          // Factory for creating new instances
          instance.create = function create(instanceConfig) {
            return createInstance(mergeConfig(defaultConfig, instanceConfig));
          };

          return instance;
        }

        // Create the default instance to be exported
        const axios = createInstance(defaults$1);

        // Expose Axios class to allow class inheritance
        axios.Axios = Axios$1;

        // Expose Cancel & CancelToken
        axios.CanceledError = CanceledError;
        axios.CancelToken = CancelToken$1;
        axios.isCancel = isCancel;
        axios.VERSION = VERSION;
        axios.toFormData = toFormData;

        // Expose AxiosError class
        axios.AxiosError = AxiosError;

        // alias for CanceledError for backward compatibility
        axios.Cancel = axios.CanceledError;

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };

        axios.spread = spread;

        // Expose isAxiosError
        axios.isAxiosError = isAxiosError;

        // Expose mergeConfig
        axios.mergeConfig = mergeConfig;

        axios.AxiosHeaders = AxiosHeaders$1;

        axios.formToJSON = (thing) =>
          formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

        axios.HttpStatusCode = HttpStatusCode$1;

        axios.default = axios;

        module.exports = axios;
        //# sourceMappingURL=axios.cjs.map

        /***/
      },

    /***/ "./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":
      /*!********************************************************************!*\
  !*** ./node_modules/@firebase/analytics/dist/esm/index.esm2017.js ***!
  \********************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ getAnalytics: () => /* binding */ getAnalytics,
          /* harmony export */ initializeAnalytics: () =>
            /* binding */ initializeAnalytics,
          /* harmony export */ isSupported: () => /* binding */ isSupported,
          /* harmony export */ logEvent: () => /* binding */ logEvent,
          /* harmony export */ setAnalyticsCollectionEnabled: () =>
            /* binding */ setAnalyticsCollectionEnabled,
          /* harmony export */ setConsent: () => /* binding */ setConsent,
          /* harmony export */ setCurrentScreen: () =>
            /* binding */ setCurrentScreen,
          /* harmony export */ setDefaultEventParameters: () =>
            /* binding */ setDefaultEventParameters,
          /* harmony export */ setUserId: () => /* binding */ setUserId,
          /* harmony export */ setUserProperties: () =>
            /* binding */ setUserProperties,
          /* harmony export */ settings: () => /* binding */ settings,
          /* harmony export */
        });
        /* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @firebase/logger */ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );
        /* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_installations__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! @firebase/installations */ "./node_modules/@firebase/installations/dist/esm/index.esm2017.js"
          );

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Type constant for Firebase Analytics.
         */
        const ANALYTICS_TYPE = "analytics";
        // Key to attach FID to in gtag params.
        const GA_FID_KEY = "firebase_id";
        const ORIGIN_KEY = "origin";
        const FETCH_TIMEOUT_MILLIS = 60 * 1000;
        const DYNAMIC_CONFIG_URL =
          "https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig";
        const GTAG_URL = "https://www.googletagmanager.com/gtag/js";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const logger = new _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(
          "@firebase/analytics"
        );

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Makeshift polyfill for Promise.allSettled(). Resolves when all promises
         * have either resolved or rejected.
         *
         * @param promises Array of promises to wait for.
         */
        function promiseAllSettled(promises) {
          return Promise.all(
            promises.map((promise) => promise.catch((e) => e))
          );
        }
        /**
         * Inserts gtag script tag into the page to asynchronously download gtag.
         * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
         */
        function insertScriptTag(dataLayerName, measurementId) {
          const script = document.createElement("script");
          // We are not providing an analyticsId in the URL because it would trigger a `page_view`
          // without fid. We will initialize ga-id using gtag (config) command together with fid.
          script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;
          script.async = true;
          document.head.appendChild(script);
        }
        /**
         * Get reference to, or create, global datalayer.
         * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
         */
        function getOrCreateDataLayer(dataLayerName) {
          // Check for existing dataLayer and create if needed.
          let dataLayer = [];
          if (Array.isArray(window[dataLayerName])) {
            dataLayer = window[dataLayerName];
          } else {
            window[dataLayerName] = dataLayer;
          }
          return dataLayer;
        }
        /**
         * Wrapped gtag logic when gtag is called with 'config' command.
         *
         * @param gtagCore Basic gtag function that just appends to dataLayer.
         * @param initializationPromisesMap Map of appIds to their initialization promises.
         * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
         * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
         * @param measurementId GA Measurement ID to set config for.
         * @param gtagParams Gtag config params to set.
         */
        async function gtagOnConfig(
          gtagCore,
          initializationPromisesMap,
          dynamicConfigPromisesList,
          measurementIdToAppId,
          measurementId,
          gtagParams
        ) {
          // If config is already fetched, we know the appId and can use it to look up what FID promise we
          /// are waiting for, and wait only on that one.
          const correspondingAppId = measurementIdToAppId[measurementId];
          try {
            if (correspondingAppId) {
              await initializationPromisesMap[correspondingAppId];
            } else {
              // If config is not fetched yet, wait for all configs (we don't know which one we need) and
              // find the appId (if any) corresponding to this measurementId. If there is one, wait on
              // that appId's initialization promise. If there is none, promise resolves and gtag
              // call goes through.
              const dynamicConfigResults = await promiseAllSettled(
                dynamicConfigPromisesList
              );
              const foundConfig = dynamicConfigResults.find(
                (config) => config.measurementId === measurementId
              );
              if (foundConfig) {
                await initializationPromisesMap[foundConfig.appId];
              }
            }
          } catch (e) {
            logger.error(e);
          }
          gtagCore("config" /* CONFIG */, measurementId, gtagParams);
        }
        /**
         * Wrapped gtag logic when gtag is called with 'event' command.
         *
         * @param gtagCore Basic gtag function that just appends to dataLayer.
         * @param initializationPromisesMap Map of appIds to their initialization promises.
         * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
         * @param measurementId GA Measurement ID to log event to.
         * @param gtagParams Params to log with this event.
         */
        async function gtagOnEvent(
          gtagCore,
          initializationPromisesMap,
          dynamicConfigPromisesList,
          measurementId,
          gtagParams
        ) {
          try {
            let initializationPromisesToWaitFor = [];
            // If there's a 'send_to' param, check if any ID specified matches
            // an initializeIds() promise we are waiting for.
            if (gtagParams && gtagParams["send_to"]) {
              let gaSendToList = gtagParams["send_to"];
              // Make it an array if is isn't, so it can be dealt with the same way.
              if (!Array.isArray(gaSendToList)) {
                gaSendToList = [gaSendToList];
              }
              // Checking 'send_to' fields requires having all measurement ID results back from
              // the dynamic config fetch.
              const dynamicConfigResults = await promiseAllSettled(
                dynamicConfigPromisesList
              );
              for (const sendToId of gaSendToList) {
                // Any fetched dynamic measurement ID that matches this 'send_to' ID
                const foundConfig = dynamicConfigResults.find(
                  (config) => config.measurementId === sendToId
                );
                const initializationPromise =
                  foundConfig && initializationPromisesMap[foundConfig.appId];
                if (initializationPromise) {
                  initializationPromisesToWaitFor.push(initializationPromise);
                } else {
                  // Found an item in 'send_to' that is not associated
                  // directly with an FID, possibly a group.  Empty this array,
                  // exit the loop early, and let it get populated below.
                  initializationPromisesToWaitFor = [];
                  break;
                }
              }
            }
            // This will be unpopulated if there was no 'send_to' field , or
            // if not all entries in the 'send_to' field could be mapped to
            // a FID. In these cases, wait on all pending initialization promises.
            if (initializationPromisesToWaitFor.length === 0) {
              initializationPromisesToWaitFor = Object.values(
                initializationPromisesMap
              );
            }
            // Run core gtag function with args after all relevant initialization
            // promises have been resolved.
            await Promise.all(initializationPromisesToWaitFor);
            // Workaround for http://b/141370449 - third argument cannot be undefined.
            gtagCore("event" /* EVENT */, measurementId, gtagParams || {});
          } catch (e) {
            logger.error(e);
          }
        }
        /**
         * Wraps a standard gtag function with extra code to wait for completion of
         * relevant initialization promises before sending requests.
         *
         * @param gtagCore Basic gtag function that just appends to dataLayer.
         * @param initializationPromisesMap Map of appIds to their initialization promises.
         * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
         * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
         */
        function wrapGtag(
          gtagCore,
          /**
           * Allows wrapped gtag calls to wait on whichever intialization promises are required,
           * depending on the contents of the gtag params' `send_to` field, if any.
           */
          initializationPromisesMap,
          /**
           * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
           * before determining what initialization promises (which include FIDs) to wait for.
           */
          dynamicConfigPromisesList,
          /**
           * Wrapped gtag config calls can narrow down which initialization promise (with FID)
           * to wait for if the measurementId is already fetched, by getting the corresponding appId,
           * which is the key for the initialization promises map.
           */
          measurementIdToAppId
        ) {
          /**
           * Wrapper around gtag that ensures FID is sent with gtag calls.
           * @param command Gtag command type.
           * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
           * @param gtagParams Params if event is EVENT/CONFIG.
           */
          async function gtagWrapper(command, idOrNameOrParams, gtagParams) {
            try {
              // If event, check that relevant initialization promises have completed.
              if (command === "event" /* EVENT */) {
                // If EVENT, second arg must be measurementId.
                await gtagOnEvent(
                  gtagCore,
                  initializationPromisesMap,
                  dynamicConfigPromisesList,
                  idOrNameOrParams,
                  gtagParams
                );
              } else if (command === "config" /* CONFIG */) {
                // If CONFIG, second arg must be measurementId.
                await gtagOnConfig(
                  gtagCore,
                  initializationPromisesMap,
                  dynamicConfigPromisesList,
                  measurementIdToAppId,
                  idOrNameOrParams,
                  gtagParams
                );
              } else if (command === "consent" /* CONSENT */) {
                // If CONFIG, second arg must be measurementId.
                gtagCore("consent" /* CONSENT */, "update", gtagParams);
              } else {
                // If SET, second arg must be params.
                gtagCore("set" /* SET */, idOrNameOrParams);
              }
            } catch (e) {
              logger.error(e);
            }
          }
          return gtagWrapper;
        }
        /**
         * Creates global gtag function or wraps existing one if found.
         * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
         * 'event' calls that belong to the GAID associated with this Firebase instance.
         *
         * @param initializationPromisesMap Map of appIds to their initialization promises.
         * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
         * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
         * @param dataLayerName Name of global GA datalayer array.
         * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
         */
        function wrapOrCreateGtag(
          initializationPromisesMap,
          dynamicConfigPromisesList,
          measurementIdToAppId,
          dataLayerName,
          gtagFunctionName
        ) {
          // Create a basic core gtag function
          let gtagCore = function (..._args) {
            // Must push IArguments object, not an array.
            window[dataLayerName].push(arguments);
          };
          // Replace it with existing one if found
          if (
            window[gtagFunctionName] &&
            typeof window[gtagFunctionName] === "function"
          ) {
            // @ts-ignore
            gtagCore = window[gtagFunctionName];
          }
          window[gtagFunctionName] = wrapGtag(
            gtagCore,
            initializationPromisesMap,
            dynamicConfigPromisesList,
            measurementIdToAppId
          );
          return {
            gtagCore,
            wrappedGtag: window[gtagFunctionName],
          };
        }
        /**
         * Returns the script tag in the DOM matching both the gtag url pattern
         * and the provided data layer name.
         */
        function findGtagScriptOnPage(dataLayerName) {
          const scriptTags = window.document.getElementsByTagName("script");
          for (const tag of Object.values(scriptTags)) {
            if (
              tag.src &&
              tag.src.includes(GTAG_URL) &&
              tag.src.includes(dataLayerName)
            ) {
              return tag;
            }
          }
          return null;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const ERRORS = {
          ["already-exists" /* ALREADY_EXISTS */]:
            "A Firebase Analytics instance with the appId {$id} " +
            " already exists. " +
            "Only one Firebase Analytics instance can be created for each appId.",
          ["already-initialized" /* ALREADY_INITIALIZED */]:
            "initializeAnalytics() cannot be called again with different options than those " +
            "it was initially called with. It can be called again with the same options to " +
            "return the existing instance, or getAnalytics() can be used " +
            "to get a reference to the already-intialized instance.",
          ["already-initialized-settings" /* ALREADY_INITIALIZED_SETTINGS */]:
            "Firebase Analytics has already been initialized." +
            "settings() must be called before initializing any Analytics instance" +
            "or it will have no effect.",
          ["interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */]:
            "Firebase Analytics Interop Component failed to instantiate: {$reason}",
          ["invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */]:
            "Firebase Analytics is not supported in this environment. " +
            "Wrap initialization of analytics in analytics.isSupported() " +
            "to prevent initialization in unsupported environments. Details: {$errorInfo}",
          ["indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */]:
            "IndexedDB unavailable or restricted in this environment. " +
            "Wrap initialization of analytics in analytics.isSupported() " +
            "to prevent initialization in unsupported environments. Details: {$errorInfo}",
          ["fetch-throttle" /* FETCH_THROTTLE */]:
            "The config fetch request timed out while in an exponential backoff state." +
            " Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",
          ["config-fetch-failed" /* CONFIG_FETCH_FAILED */]:
            "Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",
          ["no-api-key" /* NO_API_KEY */]:
            'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            "contain a valid API key.",
          ["no-app-id" /* NO_APP_ID */]:
            'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
            "contain a valid app ID.",
        };
        const ERROR_FACTORY =
          new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory(
            "analytics",
            "Analytics",
            ERRORS
          );

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Backoff factor for 503 errors, which we want to be conservative about
         * to avoid overloading servers. Each retry interval will be
         * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
         * will be ~30 seconds (with fuzzing).
         */
        const LONG_RETRY_FACTOR = 30;
        /**
         * Base wait interval to multiplied by backoffFactor^backoffCount.
         */
        const BASE_INTERVAL_MILLIS = 1000;
        /**
         * Stubbable retry data storage class.
         */
        class RetryData {
          constructor(
            throttleMetadata = {},
            intervalMillis = BASE_INTERVAL_MILLIS
          ) {
            this.throttleMetadata = throttleMetadata;
            this.intervalMillis = intervalMillis;
          }
          getThrottleMetadata(appId) {
            return this.throttleMetadata[appId];
          }
          setThrottleMetadata(appId, metadata) {
            this.throttleMetadata[appId] = metadata;
          }
          deleteThrottleMetadata(appId) {
            delete this.throttleMetadata[appId];
          }
        }
        const defaultRetryData = new RetryData();
        /**
         * Set GET request headers.
         * @param apiKey App API key.
         */
        function getHeaders(apiKey) {
          return new Headers({
            Accept: "application/json",
            "x-goog-api-key": apiKey,
          });
        }
        /**
         * Fetches dynamic config from backend.
         * @param app Firebase app to fetch config for.
         */
        async function fetchDynamicConfig(appFields) {
          var _a;
          const { appId, apiKey } = appFields;
          const request = {
            method: "GET",
            headers: getHeaders(apiKey),
          };
          const appUrl = DYNAMIC_CONFIG_URL.replace("{app-id}", appId);
          const response = await fetch(appUrl, request);
          if (response.status !== 200 && response.status !== 304) {
            let errorMessage = "";
            try {
              // Try to get any error message text from server response.
              const jsonResponse = await response.json();
              if (
                (_a = jsonResponse.error) === null || _a === void 0
                  ? void 0
                  : _a.message
              ) {
                errorMessage = jsonResponse.error.message;
              }
            } catch (_ignored) { }
            throw ERROR_FACTORY.create(
              "config-fetch-failed" /* CONFIG_FETCH_FAILED */,
              {
                httpStatus: response.status,
                responseMessage: errorMessage,
              }
            );
          }
          return response.json();
        }
        /**
         * Fetches dynamic config from backend, retrying if failed.
         * @param app Firebase app to fetch config for.
         */
        async function fetchDynamicConfigWithRetry(
          app,
          // retryData and timeoutMillis are parameterized to allow passing a different value for testing.
          retryData = defaultRetryData,
          timeoutMillis
        ) {
          const { appId, apiKey, measurementId } = app.options;
          if (!appId) {
            throw ERROR_FACTORY.create("no-app-id" /* NO_APP_ID */);
          }
          if (!apiKey) {
            if (measurementId) {
              return {
                measurementId,
                appId,
              };
            }
            throw ERROR_FACTORY.create("no-api-key" /* NO_API_KEY */);
          }
          const throttleMetadata = retryData.getThrottleMetadata(appId) || {
            backoffCount: 0,
            throttleEndTimeMillis: Date.now(),
          };
          const signal = new AnalyticsAbortSignal();
          setTimeout(
            async () => {
              // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
              signal.abort();
            },
            timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS
          );
          return attemptFetchDynamicConfigWithRetry(
            { appId, apiKey, measurementId },
            throttleMetadata,
            signal,
            retryData
          );
        }
        /**
         * Runs one retry attempt.
         * @param appFields Necessary app config fields.
         * @param throttleMetadata Ongoing metadata to determine throttling times.
         * @param signal Abort signal.
         */
        async function attemptFetchDynamicConfigWithRetry(
          appFields,
          { throttleEndTimeMillis, backoffCount },
          signal,
          retryData = defaultRetryData // for testing
        ) {
          var _a, _b;
          const { appId, measurementId } = appFields;
          // Starts with a (potentially zero) timeout to support resumption from stored state.
          // Ensures the throttle end time is honored if the last attempt timed out.
          // Note the SDK will never make a request if the fetch timeout expires at this point.
          try {
            await setAbortableTimeout(signal, throttleEndTimeMillis);
          } catch (e) {
            if (measurementId) {
              logger.warn(
                `Timed out fetching this Firebase app's measurement ID from the server.` +
                ` Falling back to the measurement ID ${measurementId}` +
                ` provided in the "measurementId" field in the local Firebase config. [${(_a = e) === null || _a === void 0 ? void 0 : _a.message
                }]`
              );
              return { appId, measurementId };
            }
            throw e;
          }
          try {
            const response = await fetchDynamicConfig(appFields);
            // Note the SDK only clears throttle state if response is success or non-retriable.
            retryData.deleteThrottleMetadata(appId);
            return response;
          } catch (e) {
            const error = e;
            if (!isRetriableError(error)) {
              retryData.deleteThrottleMetadata(appId);
              if (measurementId) {
                logger.warn(
                  `Failed to fetch this Firebase app's measurement ID from the server.` +
                  ` Falling back to the measurement ID ${measurementId}` +
                  ` provided in the "measurementId" field in the local Firebase config. [${error === null || error === void 0
                    ? void 0
                    : error.message
                  }]`
                );
                return { appId, measurementId };
              } else {
                throw e;
              }
            }
            const backoffMillis =
              Number(
                (_b =
                  error === null || error === void 0
                    ? void 0
                    : error.customData) === null || _b === void 0
                  ? void 0
                  : _b.httpStatus
              ) === 503
                ? (0,
                  _firebase_util__WEBPACK_IMPORTED_MODULE_2__.calculateBackoffMillis)(
                    backoffCount,
                    retryData.intervalMillis,
                    LONG_RETRY_FACTOR
                  )
                : (0,
                  _firebase_util__WEBPACK_IMPORTED_MODULE_2__.calculateBackoffMillis)(
                    backoffCount,
                    retryData.intervalMillis
                  );
            // Increments backoff state.
            const throttleMetadata = {
              throttleEndTimeMillis: Date.now() + backoffMillis,
              backoffCount: backoffCount + 1,
            };
            // Persists state.
            retryData.setThrottleMetadata(appId, throttleMetadata);
            logger.debug(
              `Calling attemptFetch again in ${backoffMillis} millis`
            );
            return attemptFetchDynamicConfigWithRetry(
              appFields,
              throttleMetadata,
              signal,
              retryData
            );
          }
        }
        /**
         * Supports waiting on a backoff by:
         *
         * <ul>
         *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
         *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
         *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
         *       request appear the same.</li>
         * </ul>
         *
         * <p>Visible for testing.
         */
        function setAbortableTimeout(signal, throttleEndTimeMillis) {
          return new Promise((resolve, reject) => {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            const backoffMillis = Math.max(
              throttleEndTimeMillis - Date.now(),
              0
            );
            const timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(() => {
              clearTimeout(timeout);
              // If the request completes before this timeout, the rejection has no effect.
              reject(
                ERROR_FACTORY.create("fetch-throttle" /* FETCH_THROTTLE */, {
                  throttleEndTimeMillis,
                })
              );
            });
          });
        }
        /**
         * Returns true if the {@link Error} indicates a fetch request may succeed later.
         */
        function isRetriableError(e) {
          if (
            !(
              e instanceof
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError
            ) ||
            !e.customData
          ) {
            return false;
          }
          // Uses string index defined by ErrorData, which FirebaseError implements.
          const httpStatus = Number(e.customData["httpStatus"]);
          return (
            httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504
          );
        }
        /**
         * Shims a minimal AbortSignal (copied from Remote Config).
         *
         * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
         * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
         * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
         * swapped out if/when we do.
         */
        class AnalyticsAbortSignal {
          constructor() {
            this.listeners = [];
          }
          addEventListener(listener) {
            this.listeners.push(listener);
          }
          abort() {
            this.listeners.forEach((listener) => listener());
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Event parameters to set on 'gtag' during initialization.
         */
        let defaultEventParametersForInit;
        /**
         * Logs an analytics event through the Firebase SDK.
         *
         * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
         * @param eventName Google Analytics event name, choose from standard list or use a custom string.
         * @param eventParams Analytics event parameters.
         */
        async function logEvent$1(
          gtagFunction,
          initializationPromise,
          eventName,
          eventParams,
          options
        ) {
          if (options && options.global) {
            gtagFunction("event" /* EVENT */, eventName, eventParams);
            return;
          } else {
            const measurementId = await initializationPromise;
            const params = Object.assign(Object.assign({}, eventParams), {
              send_to: measurementId,
            });
            gtagFunction("event" /* EVENT */, eventName, params);
          }
        }
        /**
         * Set screen_name parameter for this Google Analytics ID.
         *
         * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.
         * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.
         *
         * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
         * @param screenName Screen name string to set.
         */
        async function setCurrentScreen$1(
          gtagFunction,
          initializationPromise,
          screenName,
          options
        ) {
          if (options && options.global) {
            gtagFunction("set" /* SET */, { screen_name: screenName });
            return Promise.resolve();
          } else {
            const measurementId = await initializationPromise;
            gtagFunction("config" /* CONFIG */, measurementId, {
              update: true,
              screen_name: screenName,
            });
          }
        }
        /**
         * Set user_id parameter for this Google Analytics ID.
         *
         * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
         * @param id User ID string to set
         */
        async function setUserId$1(
          gtagFunction,
          initializationPromise,
          id,
          options
        ) {
          if (options && options.global) {
            gtagFunction("set" /* SET */, { user_id: id });
            return Promise.resolve();
          } else {
            const measurementId = await initializationPromise;
            gtagFunction("config" /* CONFIG */, measurementId, {
              update: true,
              user_id: id,
            });
          }
        }
        /**
         * Set all other user properties other than user_id and screen_name.
         *
         * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
         * @param properties Map of user properties to set
         */
        async function setUserProperties$1(
          gtagFunction,
          initializationPromise,
          properties,
          options
        ) {
          if (options && options.global) {
            const flatProperties = {};
            for (const key of Object.keys(properties)) {
              // use dot notation for merge behavior in gtag.js
              flatProperties[`user_properties.${key}`] = properties[key];
            }
            gtagFunction("set" /* SET */, flatProperties);
            return Promise.resolve();
          } else {
            const measurementId = await initializationPromise;
            gtagFunction("config" /* CONFIG */, measurementId, {
              update: true,
              user_properties: properties,
            });
          }
        }
        /**
         * Set whether collection is enabled for this ID.
         *
         * @param enabled If true, collection is enabled for this ID.
         */
        async function setAnalyticsCollectionEnabled$1(
          initializationPromise,
          enabled
        ) {
          const measurementId = await initializationPromise;
          window[`ga-disable-${measurementId}`] = !enabled;
        }
        /**
         * Consent parameters to default to during 'gtag' initialization.
         */
        let defaultConsentSettingsForInit;
        /**
         * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of
         * analytics.
         *
         * @param consentSettings Maps the applicable end user consent state for gtag.js.
         */
        function _setConsentDefaultForInit(consentSettings) {
          defaultConsentSettingsForInit = consentSettings;
        }
        /**
         * Sets the variable `defaultEventParametersForInit` for use in the initialization of
         * analytics.
         *
         * @param customParams Any custom params the user may pass to gtag.js.
         */
        function _setDefaultEventParametersForInit(customParams) {
          defaultEventParametersForInit = customParams;
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function validateIndexedDB() {
          var _a;
          if (
            !(0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()
          ) {
            logger.warn(
              ERROR_FACTORY.create(
                "indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */,
                {
                  errorInfo: "IndexedDB is not available in this environment.",
                }
              ).message
            );
            return false;
          } else {
            try {
              await (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)();
            } catch (e) {
              logger.warn(
                ERROR_FACTORY.create(
                  "indexeddb-unavailable" /* INDEXEDDB_UNAVAILABLE */,
                  {
                    errorInfo:
                      (_a = e) === null || _a === void 0
                        ? void 0
                        : _a.toString(),
                  }
                ).message
              );
              return false;
            }
          }
          return true;
        }
        /**
         * Initialize the analytics instance in gtag.js by calling config command with fid.
         *
         * NOTE: We combine analytics initialization and setting fid together because we want fid to be
         * part of the `page_view` event that's sent during the initialization
         * @param app Firebase app
         * @param gtagCore The gtag function that's not wrapped.
         * @param dynamicConfigPromisesList Array of all dynamic config promises.
         * @param measurementIdToAppId Maps measurementID to appID.
         * @param installations _FirebaseInstallationsInternal instance.
         *
         * @returns Measurement ID.
         */
        async function _initializeAnalytics(
          app,
          dynamicConfigPromisesList,
          measurementIdToAppId,
          installations,
          gtagCore,
          dataLayerName,
          options
        ) {
          var _a;
          const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
          // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
          dynamicConfigPromise
            .then((config) => {
              measurementIdToAppId[config.measurementId] = config.appId;
              if (
                app.options.measurementId &&
                config.measurementId !== app.options.measurementId
              ) {
                logger.warn(
                  `The measurement ID in the local Firebase config (${app.options.measurementId})` +
                  ` does not match the measurement ID fetched from the server (${config.measurementId}).` +
                  ` To ensure analytics events are always sent to the correct Analytics property,` +
                  ` update the` +
                  ` measurement ID field in the local config or remove it from the local config.`
                );
              }
            })
            .catch((e) => logger.error(e));
          // Add to list to track state of all dynamic config promises.
          dynamicConfigPromisesList.push(dynamicConfigPromise);
          const fidPromise = validateIndexedDB().then((envIsValid) => {
            if (envIsValid) {
              return installations.getId();
            } else {
              return undefined;
            }
          });
          const [dynamicConfig, fid] = await Promise.all([
            dynamicConfigPromise,
            fidPromise,
          ]);
          // Detect if user has already put the gtag <script> tag on this page with the passed in
          // data layer name.
          if (!findGtagScriptOnPage(dataLayerName)) {
            insertScriptTag(dataLayerName, dynamicConfig.measurementId);
          }
          // Detects if there are consent settings that need to be configured.
          if (defaultConsentSettingsForInit) {
            gtagCore(
              "consent" /* CONSENT */,
              "default",
              defaultConsentSettingsForInit
            );
            _setConsentDefaultForInit(undefined);
          }
          // This command initializes gtag.js and only needs to be called once for the entire web app,
          // but since it is idempotent, we can call it multiple times.
          // We keep it together with other initialization logic for better code structure.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          gtagCore("js", new Date());
          // User config added first. We don't want users to accidentally overwrite
          // base Firebase config properties.
          const configProperties =
            (_a =
              options === null || options === void 0
                ? void 0
                : options.config) !== null && _a !== void 0
              ? _a
              : {};
          // guard against developers accidentally setting properties with prefix `firebase_`
          configProperties[ORIGIN_KEY] = "firebase";
          configProperties.update = true;
          if (fid != null) {
            configProperties[GA_FID_KEY] = fid;
          }
          // It should be the first config command called on this GA-ID
          // Initialize this GA-ID and set FID on it using the gtag config API.
          // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
          // `configProperties`.
          gtagCore(
            "config" /* CONFIG */,
            dynamicConfig.measurementId,
            configProperties
          );
          // Detects if there is data that will be set on every event logged from the SDK.
          if (defaultEventParametersForInit) {
            gtagCore("set" /* SET */, defaultEventParametersForInit);
            _setDefaultEventParametersForInit(undefined);
          }
          return dynamicConfig.measurementId;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Analytics Service class.
         */
        class AnalyticsService {
          constructor(app) {
            this.app = app;
          }
          _delete() {
            delete initializationPromisesMap[this.app.options.appId];
            return Promise.resolve();
          }
        }
        /**
         * Maps appId to full initialization promise. Wrapped gtag calls must wait on
         * all or some of these, depending on the call's `send_to` param and the status
         * of the dynamic config fetches (see below).
         */
        let initializationPromisesMap = {};
        /**
         * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
         * wait on all these to be complete in order to determine if it can selectively
         * wait for only certain initialization (FID) promises or if it must wait for all.
         */
        let dynamicConfigPromisesList = [];
        /**
         * Maps fetched measurementIds to appId. Populated when the app's dynamic config
         * fetch completes. If already populated, gtag config calls can use this to
         * selectively wait for only this app's initialization promise (FID) instead of all
         * initialization promises.
         */
        const measurementIdToAppId = {};
        /**
         * Name for window global data layer array used by GA: defaults to 'dataLayer'.
         */
        let dataLayerName = "dataLayer";
        /**
         * Name for window global gtag function used by GA: defaults to 'gtag'.
         */
        let gtagName = "gtag";
        /**
         * Reproduction of standard gtag function or reference to existing
         * gtag function on window object.
         */
        let gtagCoreFunction;
        /**
         * Wrapper around gtag function that ensures FID is sent with all
         * relevant event and config calls.
         */
        let wrappedGtagFunction;
        /**
         * Flag to ensure page initialization steps (creation or wrapping of
         * dataLayer and gtag script) are only run once per page load.
         */
        let globalInitDone = false;
        /**
         * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.
         * Intended to be used if `gtag.js` script has been installed on
         * this page independently of Firebase Analytics, and is using non-default
         * names for either the `gtag` function or for `dataLayer`.
         * Must be called before calling `getAnalytics()` or it won't
         * have any effect.
         *
         * @public
         *
         * @param options - Custom gtag and dataLayer names.
         */
        function settings(options) {
          if (globalInitDone) {
            throw ERROR_FACTORY.create(
              "already-initialized" /* ALREADY_INITIALIZED */
            );
          }
          if (options.dataLayerName) {
            dataLayerName = options.dataLayerName;
          }
          if (options.gtagName) {
            gtagName = options.gtagName;
          }
        }
        /**
         * Returns true if no environment mismatch is found.
         * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
         * error that also lists details for each mismatch found.
         */
        function warnOnBrowserContextMismatch() {
          const mismatchedEnvMessages = [];
          if (
            (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isBrowserExtension)()
          ) {
            mismatchedEnvMessages.push(
              "This is a browser extension environment."
            );
          }
          if (
            !(0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.areCookiesEnabled)()
          ) {
            mismatchedEnvMessages.push("Cookies are not available.");
          }
          if (mismatchedEnvMessages.length > 0) {
            const details = mismatchedEnvMessages
              .map((message, index) => `(${index + 1}) ${message}`)
              .join(" ");
            const err = ERROR_FACTORY.create(
              "invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */,
              {
                errorInfo: details,
              }
            );
            logger.warn(err.message);
          }
        }
        /**
         * Analytics instance factory.
         * @internal
         */
        function factory(app, installations, options) {
          warnOnBrowserContextMismatch();
          const appId = app.options.appId;
          if (!appId) {
            throw ERROR_FACTORY.create("no-app-id" /* NO_APP_ID */);
          }
          if (!app.options.apiKey) {
            if (app.options.measurementId) {
              logger.warn(
                `The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest` +
                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +
                ` provided in the "measurementId" field in the local Firebase config.`
              );
            } else {
              throw ERROR_FACTORY.create("no-api-key" /* NO_API_KEY */);
            }
          }
          if (initializationPromisesMap[appId] != null) {
            throw ERROR_FACTORY.create("already-exists" /* ALREADY_EXISTS */, {
              id: appId,
            });
          }
          if (!globalInitDone) {
            // Steps here should only be done once per page: creation or wrapping
            // of dataLayer and global gtag function.
            getOrCreateDataLayer(dataLayerName);
            const { wrappedGtag, gtagCore } = wrapOrCreateGtag(
              initializationPromisesMap,
              dynamicConfigPromisesList,
              measurementIdToAppId,
              dataLayerName,
              gtagName
            );
            wrappedGtagFunction = wrappedGtag;
            gtagCoreFunction = gtagCore;
            globalInitDone = true;
          }
          // Async but non-blocking.
          // This map reflects the completion state of all promises for each appId.
          initializationPromisesMap[appId] = _initializeAnalytics(
            app,
            dynamicConfigPromisesList,
            measurementIdToAppId,
            installations,
            gtagCoreFunction,
            dataLayerName,
            options
          );
          const analyticsInstance = new AnalyticsService(app);
          return analyticsInstance;
        }

        /* eslint-disable @typescript-eslint/no-explicit-any */
        /**
         * Returns an {@link Analytics} instance for the given app.
         *
         * @public
         *
         * @param app - The {@link @firebase/app#FirebaseApp} to use.
         */
        function getAnalytics(
          app = (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)()
        ) {
          app = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(app);
          // Dependencies
          const analyticsProvider = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              ANALYTICS_TYPE
            );
          if (analyticsProvider.isInitialized()) {
            return analyticsProvider.getImmediate();
          }
          return initializeAnalytics(app);
        }
        /**
         * Returns an {@link Analytics} instance for the given app.
         *
         * @public
         *
         * @param app - The {@link @firebase/app#FirebaseApp} to use.
         */
        function initializeAnalytics(app, options = {}) {
          // Dependencies
          const analyticsProvider = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              ANALYTICS_TYPE
            );
          if (analyticsProvider.isInitialized()) {
            const existingInstance = analyticsProvider.getImmediate();
            if (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(
                options,
                analyticsProvider.getOptions()
              )
            ) {
              return existingInstance;
            } else {
              throw ERROR_FACTORY.create(
                "already-initialized" /* ALREADY_INITIALIZED */
              );
            }
          }
          const analyticsInstance = analyticsProvider.initialize({ options });
          return analyticsInstance;
        }
        /**
         * This is a public static method provided to users that wraps four different checks:
         *
         * 1. Check if it's not a browser extension environment.
         * 2. Check if cookies are enabled in current browser.
         * 3. Check if IndexedDB is supported by the browser environment.
         * 4. Check if the current browser context is valid for using `IndexedDB.open()`.
         *
         * @public
         *
         */
        async function isSupported() {
          if (
            (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isBrowserExtension)()
          ) {
            return false;
          }
          if (
            !(0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.areCookiesEnabled)()
          ) {
            return false;
          }
          if (
            !(0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()
          ) {
            return false;
          }
          try {
            const isDBOpenable = await (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)();
            return isDBOpenable;
          } catch (error) {
            return false;
          }
        }
        /**
         * Use gtag `config` command to set `screen_name`.
         *
         * @public
         *
         * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.
         * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.
         *
         * @param analyticsInstance - The {@link Analytics} instance.
         * @param screenName - Screen name to set.
         */
        function setCurrentScreen(analyticsInstance, screenName, options) {
          analyticsInstance = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              analyticsInstance
            );
          setCurrentScreen$1(
            wrappedGtagFunction,
            initializationPromisesMap[analyticsInstance.app.options.appId],
            screenName,
            options
          ).catch((e) => logger.error(e));
        }
        /**
         * Use gtag `config` command to set `user_id`.
         *
         * @public
         *
         * @param analyticsInstance - The {@link Analytics} instance.
         * @param id - User ID to set.
         */
        function setUserId(analyticsInstance, id, options) {
          analyticsInstance = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              analyticsInstance
            );
          setUserId$1(
            wrappedGtagFunction,
            initializationPromisesMap[analyticsInstance.app.options.appId],
            id,
            options
          ).catch((e) => logger.error(e));
        }
        /**
         * Use gtag `config` command to set all params specified.
         *
         * @public
         */
        function setUserProperties(analyticsInstance, properties, options) {
          analyticsInstance = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              analyticsInstance
            );
          setUserProperties$1(
            wrappedGtagFunction,
            initializationPromisesMap[analyticsInstance.app.options.appId],
            properties,
            options
          ).catch((e) => logger.error(e));
        }
        /**
         * Sets whether Google Analytics collection is enabled for this app on this device.
         * Sets global `window['ga-disable-analyticsId'] = true;`
         *
         * @public
         *
         * @param analyticsInstance - The {@link Analytics} instance.
         * @param enabled - If true, enables collection, if false, disables it.
         */
        function setAnalyticsCollectionEnabled(analyticsInstance, enabled) {
          analyticsInstance = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              analyticsInstance
            );
          setAnalyticsCollectionEnabled$1(
            initializationPromisesMap[analyticsInstance.app.options.appId],
            enabled
          ).catch((e) => logger.error(e));
        }
        /**
         * Adds data that will be set on every event logged from the SDK, including automatic ones.
         * With gtag's "set" command, the values passed persist on the current page and are passed with
         * all subsequent events.
         * @public
         * @param customParams - Any custom params the user may pass to gtag.js.
         */
        function setDefaultEventParameters(customParams) {
          // Check if reference to existing gtag function on window object exists
          if (wrappedGtagFunction) {
            wrappedGtagFunction("set" /* SET */, customParams);
          } else {
            _setDefaultEventParametersForInit(customParams);
          }
        }
        /**
         * Sends a Google Analytics event with given `eventParams`. This method
         * automatically associates this logged event with this Firebase web
         * app instance on this device.
         * List of official event parameters can be found in the gtag.js
         * reference documentation:
         * {@link https://developers.google.com/gtagjs/reference/ga4-events
         * | the GA4 reference documentation}.
         *
         * @public
         */
        function logEvent(analyticsInstance, eventName, eventParams, options) {
          analyticsInstance = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(
              analyticsInstance
            );
          logEvent$1(
            wrappedGtagFunction,
            initializationPromisesMap[analyticsInstance.app.options.appId],
            eventName,
            eventParams,
            options
          ).catch((e) => logger.error(e));
        }
        /**
         * Sets the applicable end user consent state for this web app across all gtag references once
         * Firebase Analytics is initialized.
         *
         * Use the {@link ConsentSettings} to specify individual consent type values. By default consent
         * types are set to "granted".
         * @public
         * @param consentSettings - Maps the applicable end user consent state for gtag.js.
         */
        function setConsent(consentSettings) {
          // Check if reference to existing gtag function on window object exists
          if (wrappedGtagFunction) {
            wrappedGtagFunction(
              "consent" /* CONSENT */,
              "update",
              consentSettings
            );
          } else {
            _setConsentDefaultForInit(consentSettings);
          }
        }

        const name = "@firebase/analytics";
        const version = "0.8.4";

        /**
         * Firebase Analytics
         *
         * @packageDocumentation
         */
        function registerAnalytics() {
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_3__.Component(
              ANALYTICS_TYPE,
              (container, { options: analyticsOptions }) => {
                // getImmediate for FirebaseApp will always succeed
                const app = container.getProvider("app").getImmediate();
                const installations = container
                  .getProvider("installations-internal")
                  .getImmediate();
                return factory(app, installations, analyticsOptions);
              },
              "PUBLIC" /* PUBLIC */
            )
          );
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_3__.Component(
              "analytics-internal",
              internalFactory,
              "PRIVATE" /* PRIVATE */
            )
          );
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
            name,
            version
          );
          // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
            name,
            version,
            "esm2017"
          );
          function internalFactory(container) {
            try {
              const analytics = container
                .getProvider(ANALYTICS_TYPE)
                .getImmediate();
              return {
                logEvent: (eventName, eventParams, options) =>
                  logEvent(analytics, eventName, eventParams, options),
              };
            } catch (e) {
              throw ERROR_FACTORY.create(
                "interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */,
                {
                  reason: e,
                }
              );
            }
          }
        }
        registerAnalytics();

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/app/dist/esm/index.esm2017.js":
      /*!**************************************************************!*\
  !*** ./node_modules/@firebase/app/dist/esm/index.esm2017.js ***!
  \**************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ FirebaseError: () =>
            /* reexport safe */ _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError,
          /* harmony export */ SDK_VERSION: () => /* binding */ SDK_VERSION,
          /* harmony export */ _DEFAULT_ENTRY_NAME: () =>
            /* binding */ DEFAULT_ENTRY_NAME,
          /* harmony export */ _addComponent: () => /* binding */ _addComponent,
          /* harmony export */ _addOrOverwriteComponent: () =>
            /* binding */ _addOrOverwriteComponent,
          /* harmony export */ _apps: () => /* binding */ _apps,
          /* harmony export */ _clearComponents: () =>
            /* binding */ _clearComponents,
          /* harmony export */ _components: () => /* binding */ _components,
          /* harmony export */ _getProvider: () => /* binding */ _getProvider,
          /* harmony export */ _registerComponent: () =>
            /* binding */ _registerComponent,
          /* harmony export */ _removeServiceInstance: () =>
            /* binding */ _removeServiceInstance,
          /* harmony export */ deleteApp: () => /* binding */ deleteApp,
          /* harmony export */ getApp: () => /* binding */ getApp,
          /* harmony export */ getApps: () => /* binding */ getApps,
          /* harmony export */ initializeApp: () => /* binding */ initializeApp,
          /* harmony export */ onLog: () => /* binding */ onLog,
          /* harmony export */ registerVersion: () =>
            /* binding */ registerVersion,
          /* harmony export */ setLogLevel: () => /* binding */ setLogLevel,
          /* harmony export */
        });
        /* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @firebase/logger */ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );
        /* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(/*! idb */ "./node_modules/idb/build/index.js");

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class PlatformLoggerServiceImpl {
          constructor(container) {
            this.container = container;
          }
          // In initial implementation, this will be called by installations on
          // auth token refresh, and installations will send this string.
          getPlatformInfoString() {
            const providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
              .map((provider) => {
                if (isVersionServiceProvider(provider)) {
                  const service = provider.getImmediate();
                  return `${service.library}/${service.version}`;
                } else {
                  return null;
                }
              })
              .filter((logString) => logString)
              .join(" ");
          }
        }
        /**
         *
         * @param provider check if this provider provides a VersionService
         *
         * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
         * provides VersionService. The provider is not necessarily a 'app-version'
         * provider.
         */
        function isVersionServiceProvider(provider) {
          const component = provider.getComponent();
          return (
            (component === null || component === void 0
              ? void 0
              : component.type) === "VERSION" /* VERSION */
          );
        }

        const name$o = "@firebase/app";
        const version$1 = "0.8.4";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const logger = new _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(
          "@firebase/app"
        );

        const name$n = "@firebase/app-compat";

        const name$m = "@firebase/analytics-compat";

        const name$l = "@firebase/analytics";

        const name$k = "@firebase/app-check-compat";

        const name$j = "@firebase/app-check";

        const name$i = "@firebase/auth";

        const name$h = "@firebase/auth-compat";

        const name$g = "@firebase/database";

        const name$f = "@firebase/database-compat";

        const name$e = "@firebase/functions";

        const name$d = "@firebase/functions-compat";

        const name$c = "@firebase/installations";

        const name$b = "@firebase/installations-compat";

        const name$a = "@firebase/messaging";

        const name$9 = "@firebase/messaging-compat";

        const name$8 = "@firebase/performance";

        const name$7 = "@firebase/performance-compat";

        const name$6 = "@firebase/remote-config";

        const name$5 = "@firebase/remote-config-compat";

        const name$4 = "@firebase/storage";

        const name$3 = "@firebase/storage-compat";

        const name$2 = "@firebase/firestore";

        const name$1 = "@firebase/firestore-compat";

        const name = "firebase";
        const version = "9.14.0";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The default app name
         *
         * @internal
         */
        const DEFAULT_ENTRY_NAME = "[DEFAULT]";
        const PLATFORM_LOG_STRING = {
          [name$o]: "fire-core",
          [name$n]: "fire-core-compat",
          [name$l]: "fire-analytics",
          [name$m]: "fire-analytics-compat",
          [name$j]: "fire-app-check",
          [name$k]: "fire-app-check-compat",
          [name$i]: "fire-auth",
          [name$h]: "fire-auth-compat",
          [name$g]: "fire-rtdb",
          [name$f]: "fire-rtdb-compat",
          [name$e]: "fire-fn",
          [name$d]: "fire-fn-compat",
          [name$c]: "fire-iid",
          [name$b]: "fire-iid-compat",
          [name$a]: "fire-fcm",
          [name$9]: "fire-fcm-compat",
          [name$8]: "fire-perf",
          [name$7]: "fire-perf-compat",
          [name$6]: "fire-rc",
          [name$5]: "fire-rc-compat",
          [name$4]: "fire-gcs",
          [name$3]: "fire-gcs-compat",
          [name$2]: "fire-fst",
          [name$1]: "fire-fst-compat",
          "fire-js": "fire-js",
          [name]: "fire-js-all",
        };

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * @internal
         */
        const _apps = new Map();
        /**
         * Registered components.
         *
         * @internal
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const _components = new Map();
        /**
         * @param component - the component being added to this app's container
         *
         * @internal
         */
        function _addComponent(app, component) {
          try {
            app.container.addComponent(component);
          } catch (e) {
            logger.debug(
              `Component ${component.name} failed to register with FirebaseApp ${app.name}`,
              e
            );
          }
        }
        /**
         *
         * @internal
         */
        function _addOrOverwriteComponent(app, component) {
          app.container.addOrOverwriteComponent(component);
        }
        /**
         *
         * @param component - the component to register
         * @returns whether or not the component is registered successfully
         *
         * @internal
         */
        function _registerComponent(component) {
          const componentName = component.name;
          if (_components.has(componentName)) {
            logger.debug(
              `There were multiple attempts to register component ${componentName}.`
            );
            return false;
          }
          _components.set(componentName, component);
          // add the component to existing app instances
          for (const app of _apps.values()) {
            _addComponent(app, component);
          }
          return true;
        }
        /**
         *
         * @param app - FirebaseApp instance
         * @param name - service name
         *
         * @returns the provider for the service with the matching name
         *
         * @internal
         */
        function _getProvider(app, name) {
          const heartbeatController = app.container
            .getProvider("heartbeat")
            .getImmediate({ optional: true });
          if (heartbeatController) {
            void heartbeatController.triggerHeartbeat();
          }
          return app.container.getProvider(name);
        }
        /**
         *
         * @param app - FirebaseApp instance
         * @param name - service name
         * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
         *
         * @internal
         */
        function _removeServiceInstance(
          app,
          name,
          instanceIdentifier = DEFAULT_ENTRY_NAME
        ) {
          _getProvider(app, name).clearInstance(instanceIdentifier);
        }
        /**
         * Test only
         *
         * @internal
         */
        function _clearComponents() {
          _components.clear();
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const ERRORS = {
          ["no-app" /* NO_APP */]:
            "No Firebase App '{$appName}' has been created - " +
            "call Firebase App.initializeApp()",
          ["bad-app-name" /* BAD_APP_NAME */]: "Illegal App name: '{$appName}",
          ["duplicate-app" /* DUPLICATE_APP */]:
            "Firebase App named '{$appName}' already exists with different options or config",
          ["app-deleted" /* APP_DELETED */]:
            "Firebase App named '{$appName}' already deleted",
          ["no-options" /* NO_OPTIONS */]:
            "Need to provide options, when not being deployed to hosting via source.",
          ["invalid-app-argument" /* INVALID_APP_ARGUMENT */]:
            "firebase.{$appName}() takes either no argument or a " +
            "Firebase App instance.",
          ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */]:
            "First argument to `onLog` must be null or a function.",
          ["idb-open" /* IDB_OPEN */]:
            "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
          ["idb-get" /* IDB_GET */]:
            "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
          ["idb-set" /* IDB_WRITE */]:
            "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
          ["idb-delete" /* IDB_DELETE */]:
            "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
        };
        const ERROR_FACTORY =
          new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory(
            "app",
            "Firebase",
            ERRORS
          );

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class FirebaseAppImpl {
          constructor(options, config, container) {
            this._isDeleted = false;
            this._options = Object.assign({}, options);
            this._config = Object.assign({}, config);
            this._name = config.name;
            this._automaticDataCollectionEnabled =
              config.automaticDataCollectionEnabled;
            this._container = container;
            this.container.addComponent(
              new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(
                "app",
                () => this,
                "PUBLIC" /* PUBLIC */
              )
            );
          }
          get automaticDataCollectionEnabled() {
            this.checkDestroyed();
            return this._automaticDataCollectionEnabled;
          }
          set automaticDataCollectionEnabled(val) {
            this.checkDestroyed();
            this._automaticDataCollectionEnabled = val;
          }
          get name() {
            this.checkDestroyed();
            return this._name;
          }
          get options() {
            this.checkDestroyed();
            return this._options;
          }
          get config() {
            this.checkDestroyed();
            return this._config;
          }
          get container() {
            return this._container;
          }
          get isDeleted() {
            return this._isDeleted;
          }
          set isDeleted(val) {
            this._isDeleted = val;
          }
          /**
           * This function will throw an Error if the App has already been deleted -
           * use before performing API actions on the App.
           */
          checkDestroyed() {
            if (this.isDeleted) {
              throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, {
                appName: this._name,
              });
            }
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * The current SDK version.
         *
         * @public
         */
        const SDK_VERSION = version;
        function initializeApp(_options, rawConfig = {}) {
          let options = _options;
          if (typeof rawConfig !== "object") {
            const name = rawConfig;
            rawConfig = { name };
          }
          const config = Object.assign(
            { name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false },
            rawConfig
          );
          const name = config.name;
          if (typeof name !== "string" || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
              appName: String(name),
            });
          }
          options ||
            (options = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultAppConfig)());
          if (!options) {
            throw ERROR_FACTORY.create("no-options" /* NO_OPTIONS */);
          }
          const existingApp = _apps.get(name);
          if (existingApp) {
            // return the existing app if options and config deep equal the ones in the existing app.
            if (
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(
                options,
                existingApp.options
              ) &&
              (0, _firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(
                config,
                existingApp.config
              )
            ) {
              return existingApp;
            } else {
              throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, {
                appName: name,
              });
            }
          }
          const container =
            new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.ComponentContainer(
              name
            );
          for (const component of _components.values()) {
            container.addComponent(component);
          }
          const newApp = new FirebaseAppImpl(options, config, container);
          _apps.set(name, newApp);
          return newApp;
        }
        /**
         * Retrieves a {@link @firebase/app#FirebaseApp} instance.
         *
         * When called with no arguments, the default app is returned. When an app name
         * is provided, the app corresponding to that name is returned.
         *
         * An exception is thrown if the app being retrieved has not yet been
         * initialized.
         *
         * @example
         * ```javascript
         * // Return the default app
         * const app = getApp();
         * ```
         *
         * @example
         * ```javascript
         * // Return a named app
         * const otherApp = getApp("otherApp");
         * ```
         *
         * @param name - Optional name of the app to return. If no name is
         *   provided, the default is `"[DEFAULT]"`.
         *
         * @returns The app corresponding to the provided app name.
         *   If no app name is provided, the default app is returned.
         *
         * @public
         */
        function getApp(name = DEFAULT_ENTRY_NAME) {
          const app = _apps.get(name);
          if (!app && name === DEFAULT_ENTRY_NAME) {
            return initializeApp();
          }
          if (!app) {
            throw ERROR_FACTORY.create("no-app" /* NO_APP */, {
              appName: name,
            });
          }
          return app;
        }
        /**
         * A (read-only) array of all initialized apps.
         * @public
         */
        function getApps() {
          return Array.from(_apps.values());
        }
        /**
         * Renders this app unusable and frees the resources of all associated
         * services.
         *
         * @example
         * ```javascript
         * deleteApp(app)
         *   .then(function() {
         *     console.log("App deleted successfully");
         *   })
         *   .catch(function(error) {
         *     console.log("Error deleting app:", error);
         *   });
         * ```
         *
         * @public
         */
        async function deleteApp(app) {
          const name = app.name;
          if (_apps.has(name)) {
            _apps.delete(name);
            await Promise.all(
              app.container.getProviders().map((provider) => provider.delete())
            );
            app.isDeleted = true;
          }
        }
        /**
         * Registers a library's name and version for platform logging purposes.
         * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
         * @param version - Current version of that library.
         * @param variant - Bundle variant, e.g., node, rn, etc.
         *
         * @public
         */
        function registerVersion(libraryKeyOrName, version, variant) {
          var _a;
          // TODO: We can use this check to whitelist strings when/if we set up
          // a good whitelist system.
          let library =
            (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null &&
              _a !== void 0
              ? _a
              : libraryKeyOrName;
          if (variant) {
            library += `-${variant}`;
          }
          const libraryMismatch = library.match(/\s|\//);
          const versionMismatch = version.match(/\s|\//);
          if (libraryMismatch || versionMismatch) {
            const warning = [
              `Unable to register library "${library}" with version "${version}":`,
            ];
            if (libraryMismatch) {
              warning.push(
                `library name "${library}" contains illegal characters (whitespace or "/")`
              );
            }
            if (libraryMismatch && versionMismatch) {
              warning.push("and");
            }
            if (versionMismatch) {
              warning.push(
                `version name "${version}" contains illegal characters (whitespace or "/")`
              );
            }
            logger.warn(warning.join(" "));
            return;
          }
          _registerComponent(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(
              `${library}-version`,
              () => ({ library, version }),
              "VERSION" /* VERSION */
            )
          );
        }
        /**
         * Sets log handler for all Firebase SDKs.
         * @param logCallback - An optional custom log handler that executes user code whenever
         * the Firebase SDK makes a logging call.
         *
         * @public
         */
        function onLog(logCallback, options) {
          if (logCallback !== null && typeof logCallback !== "function") {
            throw ERROR_FACTORY.create(
              "invalid-log-argument" /* INVALID_LOG_ARGUMENT */
            );
          }
          (0, _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setUserLogHandler)(
            logCallback,
            options
          );
        }
        /**
         * Sets log level for all Firebase SDKs.
         *
         * All of the log types above the current log level are captured (i.e. if
         * you set the log level to `info`, errors are logged, but `debug` and
         * `verbose` logs are not).
         *
         * @public
         */
        function setLogLevel(logLevel) {
          (0, _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setLogLevel)(
            logLevel
          );
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const DB_NAME = "firebase-heartbeat-database";
        const DB_VERSION = 1;
        const STORE_NAME = "firebase-heartbeat-store";
        let dbPromise = null;
        function getDbPromise() {
          if (!dbPromise) {
            dbPromise = (0, idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(
              DB_NAME,
              DB_VERSION,
              {
                upgrade: (db, oldVersion) => {
                  // We don't use 'break' in this switch statement, the fall-through
                  // behavior is what we want, because if there are multiple versions between
                  // the old version and the current version, we want ALL the migrations
                  // that correspond to those versions to run, not only the last one.
                  // eslint-disable-next-line default-case
                  switch (oldVersion) {
                    case 0:
                      db.createObjectStore(STORE_NAME);
                  }
                },
              }
            ).catch((e) => {
              throw ERROR_FACTORY.create("idb-open" /* IDB_OPEN */, {
                originalErrorMessage: e.message,
              });
            });
          }
          return dbPromise;
        }
        async function readHeartbeatsFromIndexedDB(app) {
          var _a;
          try {
            const db = await getDbPromise();
            return db
              .transaction(STORE_NAME)
              .objectStore(STORE_NAME)
              .get(computeKey(app));
          } catch (e) {
            if (
              e instanceof
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError
            ) {
              logger.warn(e.message);
            } else {
              const idbGetError = ERROR_FACTORY.create(
                "idb-get" /* IDB_GET */,
                {
                  originalErrorMessage:
                    (_a = e) === null || _a === void 0 ? void 0 : _a.message,
                }
              );
              logger.warn(idbGetError.message);
            }
          }
        }
        async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
          var _a;
          try {
            const db = await getDbPromise();
            const tx = db.transaction(STORE_NAME, "readwrite");
            const objectStore = tx.objectStore(STORE_NAME);
            await objectStore.put(heartbeatObject, computeKey(app));
            return tx.done;
          } catch (e) {
            if (
              e instanceof
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError
            ) {
              logger.warn(e.message);
            } else {
              const idbGetError = ERROR_FACTORY.create(
                "idb-set" /* IDB_WRITE */,
                {
                  originalErrorMessage:
                    (_a = e) === null || _a === void 0 ? void 0 : _a.message,
                }
              );
              logger.warn(idbGetError.message);
            }
          }
        }
        function computeKey(app) {
          return `${app.name}!${app.options.appId}`;
        }

        /**
         * @license
         * Copyright 2021 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const MAX_HEADER_BYTES = 1024;
        // 30 days
        const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
        class HeartbeatServiceImpl {
          constructor(container) {
            this.container = container;
            /**
             * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
             * the header string.
             * Stores one record per date. This will be consolidated into the standard
             * format of one record per user agent string before being sent as a header.
             * Populated from indexedDB when the controller is instantiated and should
             * be kept in sync with indexedDB.
             * Leave public for easier testing.
             */
            this._heartbeatsCache = null;
            const app = this.container.getProvider("app").getImmediate();
            this._storage = new HeartbeatStorageImpl(app);
            this._heartbeatsCachePromise = this._storage
              .read()
              .then((result) => {
                this._heartbeatsCache = result;
                return result;
              });
          }
          /**
           * Called to report a heartbeat. The function will generate
           * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
           * to IndexedDB.
           * Note that we only store one heartbeat per day. So if a heartbeat for today is
           * already logged, subsequent calls to this function in the same day will be ignored.
           */
          async triggerHeartbeat() {
            const platformLogger = this.container
              .getProvider("platform-logger")
              .getImmediate();
            // This is the "Firebase user agent" string from the platform logger
            // service, not the browser user agent.
            const agent = platformLogger.getPlatformInfoString();
            const date = getUTCDateString();
            if (this._heartbeatsCache === null) {
              this._heartbeatsCache = await this._heartbeatsCachePromise;
            }
            // Do not store a heartbeat if one is already stored for this day
            // or if a header has already been sent today.
            if (
              this._heartbeatsCache.lastSentHeartbeatDate === date ||
              this._heartbeatsCache.heartbeats.some(
                (singleDateHeartbeat) => singleDateHeartbeat.date === date
              )
            ) {
              return;
            } else {
              // There is no entry for this date. Create one.
              this._heartbeatsCache.heartbeats.push({ date, agent });
            }
            // Remove entries older than 30 days.
            this._heartbeatsCache.heartbeats =
              this._heartbeatsCache.heartbeats.filter((singleDateHeartbeat) => {
                const hbTimestamp = new Date(
                  singleDateHeartbeat.date
                ).valueOf();
                const now = Date.now();
                return (
                  now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS
                );
              });
            return this._storage.overwrite(this._heartbeatsCache);
          }
          /**
           * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
           * It also clears all heartbeats from memory as well as in IndexedDB.
           *
           * NOTE: Consuming product SDKs should not send the header if this method
           * returns an empty string.
           */
          async getHeartbeatsHeader() {
            if (this._heartbeatsCache === null) {
              await this._heartbeatsCachePromise;
            }
            // If it's still null or the array is empty, there is no data to send.
            if (
              this._heartbeatsCache === null ||
              this._heartbeatsCache.heartbeats.length === 0
            ) {
              return "";
            }
            const date = getUTCDateString();
            // Extract as many heartbeats from the cache as will fit under the size limit.
            const { heartbeatsToSend, unsentEntries } =
              extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
            const headerString = (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64urlEncodeWithoutPadding)(
                JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })
              );
            // Store last sent date to prevent another being logged/sent for the same day.
            this._heartbeatsCache.lastSentHeartbeatDate = date;
            if (unsentEntries.length > 0) {
              // Store any unsent entries if they exist.
              this._heartbeatsCache.heartbeats = unsentEntries;
              // This seems more likely than emptying the array (below) to lead to some odd state
              // since the cache isn't empty and this will be called again on the next request,
              // and is probably safest if we await it.
              await this._storage.overwrite(this._heartbeatsCache);
            } else {
              this._heartbeatsCache.heartbeats = [];
              // Do not wait for this, to reduce latency.
              void this._storage.overwrite(this._heartbeatsCache);
            }
            return headerString;
          }
        }
        function getUTCDateString() {
          const today = new Date();
          // Returns date format 'YYYY-MM-DD'
          return today.toISOString().substring(0, 10);
        }
        function extractHeartbeatsForHeader(
          heartbeatsCache,
          maxSize = MAX_HEADER_BYTES
        ) {
          // Heartbeats grouped by user agent in the standard format to be sent in
          // the header.
          const heartbeatsToSend = [];
          // Single date format heartbeats that are not sent.
          let unsentEntries = heartbeatsCache.slice();
          for (const singleDateHeartbeat of heartbeatsCache) {
            // Look for an existing entry with the same user agent.
            const heartbeatEntry = heartbeatsToSend.find(
              (hb) => hb.agent === singleDateHeartbeat.agent
            );
            if (!heartbeatEntry) {
              // If no entry for this user agent exists, create one.
              heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [singleDateHeartbeat.date],
              });
              if (countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
              }
            } else {
              heartbeatEntry.dates.push(singleDateHeartbeat.date);
              // If the header would exceed max size, remove the added date
              // and stop adding to the header.
              if (countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
              }
            }
            // Pop unsent entry from queue. (Skipped if adding the entry exceeded
            // quota and the loop breaks early.)
            unsentEntries = unsentEntries.slice(1);
          }
          return {
            heartbeatsToSend,
            unsentEntries,
          };
        }
        class HeartbeatStorageImpl {
          constructor(app) {
            this.app = app;
            this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
          }
          async runIndexedDBEnvironmentCheck() {
            if (
              !(0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()
            ) {
              return false;
            } else {
              return (0,
                _firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)()
                .then(() => true)
                .catch(() => false);
            }
          }
          /**
           * Read all heartbeats.
           */
          async read() {
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
              return { heartbeats: [] };
            } else {
              const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(
                this.app
              );
              return idbHeartbeatObject || { heartbeats: [] };
            }
          }
          // overwrite the storage with the provided heartbeats
          async overwrite(heartbeatsObject) {
            var _a;
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
              return;
            } else {
              const existingHeartbeatsObject = await this.read();
              return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate:
                  (_a = heartbeatsObject.lastSentHeartbeatDate) !== null &&
                    _a !== void 0
                    ? _a
                    : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats,
              });
            }
          }
          // add heartbeats
          async add(heartbeatsObject) {
            var _a;
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
              return;
            } else {
              const existingHeartbeatsObject = await this.read();
              return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate:
                  (_a = heartbeatsObject.lastSentHeartbeatDate) !== null &&
                    _a !== void 0
                    ? _a
                    : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                  ...existingHeartbeatsObject.heartbeats,
                  ...heartbeatsObject.heartbeats,
                ],
              });
            }
          }
        }
        /**
         * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
         * in a platform logging header JSON object, stringified, and converted
         * to base 64.
         */
        function countBytes(heartbeatsCache) {
          // base64 has a restricted set of characters, all of which should be 1 byte.
          return (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64urlEncodeWithoutPadding)(
              // heartbeatsCache wrapper properties
              JSON.stringify({ version: 2, heartbeats: heartbeatsCache })
            ).length;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function registerCoreComponents(variant) {
          _registerComponent(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(
              "platform-logger",
              (container) => new PlatformLoggerServiceImpl(container),
              "PRIVATE" /* PRIVATE */
            )
          );
          _registerComponent(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(
              "heartbeat",
              (container) => new HeartbeatServiceImpl(container),
              "PRIVATE" /* PRIVATE */
            )
          );
          // Register `app` package.
          registerVersion(name$o, version$1, variant);
          // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
          registerVersion(name$o, version$1, "esm2017");
          // Register platform SDK identifier (no version).
          registerVersion("fire-js", "");
        }

        /**
         * Firebase App
         *
         * @remarks This package coordinates the communication between the different Firebase components
         * @packageDocumentation
         */
        registerCoreComponents("");

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/component/dist/esm/index.esm2017.js":
      /*!********************************************************************!*\
  !*** ./node_modules/@firebase/component/dist/esm/index.esm2017.js ***!
  \********************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ Component: () => /* binding */ Component,
          /* harmony export */ ComponentContainer: () =>
            /* binding */ ComponentContainer,
          /* harmony export */ Provider: () => /* binding */ Provider,
          /* harmony export */
        });
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );

        /**
         * Component for service name T, e.g. `auth`, `auth-internal`
         */
        class Component {
          /**
           *
           * @param name The public service name, e.g. app, auth, firestore, database
           * @param instanceFactory Service factory responsible for creating the public interface
           * @param type whether the service provided by the component is public or private
           */
          constructor(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
            this.onInstanceCreated = null;
          }
          setInstantiationMode(mode) {
            this.instantiationMode = mode;
            return this;
          }
          setMultipleInstances(multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
          }
          setServiceProps(props) {
            this.serviceProps = props;
            return this;
          }
          setInstanceCreatedCallback(callback) {
            this.onInstanceCreated = callback;
            return this;
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const DEFAULT_ENTRY_NAME = "[DEFAULT]";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
         * NameServiceMapping[T] is an alias for the type of the instance
         */
        class Provider {
          constructor(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
            this.instancesOptions = new Map();
            this.onInitCallbacks = new Map();
          }
          /**
           * @param identifier A provider can provide mulitple instances of a service
           * if this.component.multipleInstances is true.
           */
          get(identifier) {
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier =
              this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
              const deferred =
                new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.Deferred();
              this.instancesDeferred.set(normalizedIdentifier, deferred);
              if (
                this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()
              ) {
                // initialize the service if it can be auto-initialized
                try {
                  const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier,
                  });
                  if (instance) {
                    deferred.resolve(instance);
                  }
                } catch (e) {
                  // when the instance factory throws an exception during get(), it should not cause
                  // a fatal error. We just return the unresolved promise in this case.
                }
              }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
          }
          getImmediate(options) {
            var _a;
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(
              options === null || options === void 0
                ? void 0
                : options.identifier
            );
            const optional =
              (_a =
                options === null || options === void 0
                  ? void 0
                  : options.optional) !== null && _a !== void 0
                ? _a
                : false;
            if (
              this.isInitialized(normalizedIdentifier) ||
              this.shouldAutoInitialize()
            ) {
              try {
                return this.getOrInitializeService({
                  instanceIdentifier: normalizedIdentifier,
                });
              } catch (e) {
                if (optional) {
                  return null;
                } else {
                  throw e;
                }
              }
            } else {
              // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
              if (optional) {
                return null;
              } else {
                throw Error(`Service ${this.name} is not available`);
              }
            }
          }
          getComponent() {
            return this.component;
          }
          setComponent(component) {
            if (component.name !== this.name) {
              throw Error(
                `Mismatching Component ${component.name} for Provider ${this.name}.`
              );
            }
            if (this.component) {
              throw Error(
                `Component for ${this.name} has already been provided`
              );
            }
            this.component = component;
            // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
            if (!this.shouldAutoInitialize()) {
              return;
            }
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
              try {
                this.getOrInitializeService({
                  instanceIdentifier: DEFAULT_ENTRY_NAME,
                });
              } catch (e) {
                // when the instance factory for an eager Component throws an exception during the eager
                // initialization, it should not cause a fatal error.
                // TODO: Investigate if we need to make it configurable, because some component may want to cause
                // a fatal error in this case?
              }
            }
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (const [
              instanceIdentifier,
              instanceDeferred,
            ] of this.instancesDeferred.entries()) {
              const normalizedIdentifier =
                this.normalizeInstanceIdentifier(instanceIdentifier);
              try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                  instanceIdentifier: normalizedIdentifier,
                });
                instanceDeferred.resolve(instance);
              } catch (e) {
                // when the instance factory throws an exception, it should not cause
                // a fatal error. We just leave the promise unresolved.
              }
            }
          }
          clearInstance(identifier = DEFAULT_ENTRY_NAME) {
            this.instancesDeferred.delete(identifier);
            this.instancesOptions.delete(identifier);
            this.instances.delete(identifier);
          }
          // app.delete() will call this method on every provider to delete the services
          // TODO: should we mark the provider as deleted?
          async delete() {
            const services = Array.from(this.instances.values());
            await Promise.all([
              ...services
                .filter((service) => "INTERNAL" in service) // legacy services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map((service) => service.INTERNAL.delete()),
              ...services
                .filter((service) => "_delete" in service) // modularized services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map((service) => service._delete()),
            ]);
          }
          isComponentSet() {
            return this.component != null;
          }
          isInitialized(identifier = DEFAULT_ENTRY_NAME) {
            return this.instances.has(identifier);
          }
          getOptions(identifier = DEFAULT_ENTRY_NAME) {
            return this.instancesOptions.get(identifier) || {};
          }
          initialize(opts = {}) {
            const { options = {} } = opts;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(
              opts.instanceIdentifier
            );
            if (this.isInitialized(normalizedIdentifier)) {
              throw Error(
                `${this.name}(${normalizedIdentifier}) has already been initialized`
              );
            }
            if (!this.isComponentSet()) {
              throw Error(`Component ${this.name} has not been registered yet`);
            }
            const instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier,
              options,
            });
            // resolve any pending promise waiting for the service instance
            for (const [
              instanceIdentifier,
              instanceDeferred,
            ] of this.instancesDeferred.entries()) {
              const normalizedDeferredIdentifier =
                this.normalizeInstanceIdentifier(instanceIdentifier);
              if (normalizedIdentifier === normalizedDeferredIdentifier) {
                instanceDeferred.resolve(instance);
              }
            }
            return instance;
          }
          /**
           *
           * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
           * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
           *
           * @param identifier An optional instance identifier
           * @returns a function to unregister the callback
           */
          onInit(callback, identifier) {
            var _a;
            const normalizedIdentifier =
              this.normalizeInstanceIdentifier(identifier);
            const existingCallbacks =
              (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null &&
                _a !== void 0
                ? _a
                : new Set();
            existingCallbacks.add(callback);
            this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
            const existingInstance = this.instances.get(normalizedIdentifier);
            if (existingInstance) {
              callback(existingInstance, normalizedIdentifier);
            }
            return () => {
              existingCallbacks.delete(callback);
            };
          }
          /**
           * Invoke onInit callbacks synchronously
           * @param instance the service instance`
           */
          invokeOnInitCallbacks(instance, identifier) {
            const callbacks = this.onInitCallbacks.get(identifier);
            if (!callbacks) {
              return;
            }
            for (const callback of callbacks) {
              try {
                callback(instance, identifier);
              } catch (_a) {
                // ignore errors in the onInit callback
              }
            }
          }
          getOrInitializeService({ instanceIdentifier, options = {} }) {
            let instance = this.instances.get(instanceIdentifier);
            if (!instance && this.component) {
              instance = this.component.instanceFactory(this.container, {
                instanceIdentifier:
                  normalizeIdentifierForFactory(instanceIdentifier),
                options,
              });
              this.instances.set(instanceIdentifier, instance);
              this.instancesOptions.set(instanceIdentifier, options);
              /**
               * Invoke onInit listeners.
               * Note this.component.onInstanceCreated is different, which is used by the component creator,
               * while onInit listeners are registered by consumers of the provider.
               */
              this.invokeOnInitCallbacks(instance, instanceIdentifier);
              /**
               * Order is important
               * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
               * makes `isInitialized()` return true.
               */
              if (this.component.onInstanceCreated) {
                try {
                  this.component.onInstanceCreated(
                    this.container,
                    instanceIdentifier,
                    instance
                  );
                } catch (_a) {
                  // ignore errors in the onInstanceCreatedCallback
                }
              }
            }
            return instance || null;
          }
          normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
            if (this.component) {
              return this.component.multipleInstances
                ? identifier
                : DEFAULT_ENTRY_NAME;
            } else {
              return identifier; // assume multiple instances are supported before the component is provided.
            }
          }
          shouldAutoInitialize() {
            return (
              !!this.component &&
              this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */
            );
          }
        }
        // undefined should be passed to the service factory for the default instance
        function normalizeIdentifierForFactory(identifier) {
          return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
        }
        function isComponentEager(component) {
          return component.instantiationMode === "EAGER" /* EAGER */;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
         */
        class ComponentContainer {
          constructor(name) {
            this.name = name;
            this.providers = new Map();
          }
          /**
           *
           * @param component Component being added
           * @param overwrite When a component with the same name has already been registered,
           * if overwrite is true: overwrite the existing component with the new component and create a new
           * provider with the new component. It can be useful in tests where you want to use different mocks
           * for different tests.
           * if overwrite is false: throw an exception
           */
          addComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
              throw new Error(
                `Component ${component.name} has already been registered with ${this.name}`
              );
            }
            provider.setComponent(component);
          }
          addOrOverwriteComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
              // delete the existing provider from the container, so we can register the new component
              this.providers.delete(component.name);
            }
            this.addComponent(component);
          }
          /**
           * getProvider provides a type safe interface where it can only be called with a field name
           * present in NameServiceMapping interface.
           *
           * Firebase SDKs providing services should extend NameServiceMapping interface to register
           * themselves.
           */
          getProvider(name) {
            if (this.providers.has(name)) {
              return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            const provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
          }
          getProviders() {
            return Array.from(this.providers.values());
          }
        }

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/installations/dist/esm/index.esm2017.js":
      /*!************************************************************************!*\
  !*** ./node_modules/@firebase/installations/dist/esm/index.esm2017.js ***!
  \************************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ deleteInstallations: () =>
            /* binding */ deleteInstallations,
          /* harmony export */ getId: () => /* binding */ getId,
          /* harmony export */ getInstallations: () =>
            /* binding */ getInstallations,
          /* harmony export */ getToken: () => /* binding */ getToken,
          /* harmony export */ onIdChange: () => /* binding */ onIdChange,
          /* harmony export */
        });
        /* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );
        /* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(/*! idb */ "./node_modules/idb/build/index.js");

        const name = "@firebase/installations";
        const version = "0.5.16";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const PENDING_TIMEOUT_MS = 10000;
        const PACKAGE_VERSION = `w:${version}`;
        const INTERNAL_AUTH_VERSION = "FIS_v2";
        const INSTALLATIONS_API_URL =
          "https://firebaseinstallations.googleapis.com/v1";
        const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
        const SERVICE = "installations";
        const SERVICE_NAME = "Installations";

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const ERROR_DESCRIPTION_MAP = {
          ["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */]:
            'Missing App configuration value: "{$valueName}"',
          ["not-registered" /* NOT_REGISTERED */]:
            "Firebase Installation is not registered.",
          ["installation-not-found" /* INSTALLATION_NOT_FOUND */]:
            "Firebase Installation not found.",
          ["request-failed" /* REQUEST_FAILED */]:
            '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
          ["app-offline" /* APP_OFFLINE */]:
            "Could not process request. Application offline.",
          ["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */]:
            "Can't delete installation while there is a pending registration request.",
        };
        const ERROR_FACTORY =
          new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory(
            SERVICE,
            SERVICE_NAME,
            ERROR_DESCRIPTION_MAP
          );
        /** Returns true if error is a FirebaseError that is based on an error from the server. */
        function isServerError(error) {
          return (
            error instanceof
            _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */)
          );
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function getInstallationsEndpoint({ projectId }) {
          return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;
        }
        function extractAuthTokenInfoFromResponse(response) {
          return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now(),
          };
        }
        async function getErrorFromResponse(requestName, response) {
          const responseJson = await response.json();
          const errorData = responseJson.error;
          return ERROR_FACTORY.create("request-failed" /* REQUEST_FAILED */, {
            requestName,
            serverCode: errorData.code,
            serverMessage: errorData.message,
            serverStatus: errorData.status,
          });
        }
        function getHeaders({ apiKey }) {
          return new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-goog-api-key": apiKey,
          });
        }
        function getHeadersWithAuth(appConfig, { refreshToken }) {
          const headers = getHeaders(appConfig);
          headers.append("Authorization", getAuthorizationHeader(refreshToken));
          return headers;
        }
        /**
         * Calls the passed in fetch wrapper and returns the response.
         * If the returned response has a status of 5xx, re-runs the function once and
         * returns the response.
         */
        async function retryIfServerError(fn) {
          const result = await fn();
          if (result.status >= 500 && result.status < 600) {
            // Internal Server Error. Retry request.
            return fn();
          }
          return result;
        }
        function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
          // This works because the server will never respond with fractions of a second.
          return Number(responseExpiresIn.replace("s", "000"));
        }
        function getAuthorizationHeader(refreshToken) {
          return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function createInstallationRequest(
          { appConfig, heartbeatServiceProvider },
          { fid }
        ) {
          const endpoint = getInstallationsEndpoint(appConfig);
          const headers = getHeaders(appConfig);
          // If heartbeat service exists, add the heartbeat string to the header.
          const heartbeatService = heartbeatServiceProvider.getImmediate({
            optional: true,
          });
          if (heartbeatService) {
            const heartbeatsHeader =
              await heartbeatService.getHeartbeatsHeader();
            if (heartbeatsHeader) {
              headers.append("x-firebase-client", heartbeatsHeader);
            }
          }
          const body = {
            fid,
            authVersion: INTERNAL_AUTH_VERSION,
            appId: appConfig.appId,
            sdkVersion: PACKAGE_VERSION,
          };
          const request = {
            method: "POST",
            headers,
            body: JSON.stringify(body),
          };
          const response = await retryIfServerError(() =>
            fetch(endpoint, request)
          );
          if (response.ok) {
            const responseValue = await response.json();
            const registeredInstallationEntry = {
              fid: responseValue.fid || fid,
              registrationStatus: 2 /* COMPLETED */,
              refreshToken: responseValue.refreshToken,
              authToken: extractAuthTokenInfoFromResponse(
                responseValue.authToken
              ),
            };
            return registeredInstallationEntry;
          } else {
            throw await getErrorFromResponse("Create Installation", response);
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /** Returns a promise that resolves after given time passes. */
        function sleep(ms) {
          return new Promise((resolve) => {
            setTimeout(resolve, ms);
          });
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function bufferToBase64UrlSafe(array) {
          const b64 = btoa(String.fromCharCode(...array));
          return b64.replace(/\+/g, "-").replace(/\//g, "_");
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
        const INVALID_FID = "";
        /**
         * Generates a new FID using random values from Web Crypto API.
         * Returns an empty string if FID generation fails for any reason.
         */
        function generateFid() {
          try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            const fidByteArray = new Uint8Array(17);
            const crypto = self.crypto || self.msCrypto;
            crypto.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);
            const fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
          } catch (_a) {
            // FID generation errored
            return INVALID_FID;
          }
        }
        /** Converts a FID Uint8Array to a base64 string representation. */
        function encode(fidByteArray) {
          const b64String = bufferToBase64UrlSafe(fidByteArray);
          // Remove the 23rd character that was added because of the extra 4 bits at the
          // end of our 17 byte array, and the '=' padding.
          return b64String.substr(0, 22);
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /** Returns a string key that can be used to identify the app. */
        function getKey(appConfig) {
          return `${appConfig.appName}!${appConfig.appId}`;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const fidChangeCallbacks = new Map();
        /**
         * Calls the onIdChange callbacks with the new FID value, and broadcasts the
         * change to other tabs.
         */
        function fidChanged(appConfig, fid) {
          const key = getKey(appConfig);
          callFidChangeCallbacks(key, fid);
          broadcastFidChange(key, fid);
        }
        function addCallback(appConfig, callback) {
          // Open the broadcast channel if it's not already open,
          // to be able to listen to change events from other tabs.
          getBroadcastChannel();
          const key = getKey(appConfig);
          let callbackSet = fidChangeCallbacks.get(key);
          if (!callbackSet) {
            callbackSet = new Set();
            fidChangeCallbacks.set(key, callbackSet);
          }
          callbackSet.add(callback);
        }
        function removeCallback(appConfig, callback) {
          const key = getKey(appConfig);
          const callbackSet = fidChangeCallbacks.get(key);
          if (!callbackSet) {
            return;
          }
          callbackSet.delete(callback);
          if (callbackSet.size === 0) {
            fidChangeCallbacks.delete(key);
          }
          // Close broadcast channel if there are no more callbacks.
          closeBroadcastChannel();
        }
        function callFidChangeCallbacks(key, fid) {
          const callbacks = fidChangeCallbacks.get(key);
          if (!callbacks) {
            return;
          }
          for (const callback of callbacks) {
            callback(fid);
          }
        }
        function broadcastFidChange(key, fid) {
          const channel = getBroadcastChannel();
          if (channel) {
            channel.postMessage({ key, fid });
          }
          closeBroadcastChannel();
        }
        let broadcastChannel = null;
        /** Opens and returns a BroadcastChannel if it is supported by the browser. */
        function getBroadcastChannel() {
          if (!broadcastChannel && "BroadcastChannel" in self) {
            broadcastChannel = new BroadcastChannel("[Firebase] FID Change");
            broadcastChannel.onmessage = (e) => {
              callFidChangeCallbacks(e.data.key, e.data.fid);
            };
          }
          return broadcastChannel;
        }
        function closeBroadcastChannel() {
          if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const DATABASE_NAME = "firebase-installations-database";
        const DATABASE_VERSION = 1;
        const OBJECT_STORE_NAME = "firebase-installations-store";
        let dbPromise = null;
        function getDbPromise() {
          if (!dbPromise) {
            dbPromise = (0, idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(
              DATABASE_NAME,
              DATABASE_VERSION,
              {
                upgrade: (db, oldVersion) => {
                  // We don't use 'break' in this switch statement, the fall-through
                  // behavior is what we want, because if there are multiple versions between
                  // the old version and the current version, we want ALL the migrations
                  // that correspond to those versions to run, not only the last one.
                  // eslint-disable-next-line default-case
                  switch (oldVersion) {
                    case 0:
                      db.createObjectStore(OBJECT_STORE_NAME);
                  }
                },
              }
            );
          }
          return dbPromise;
        }
        /** Assigns or overwrites the record for the given key with the given value. */
        async function set(appConfig, value) {
          const key = getKey(appConfig);
          const db = await getDbPromise();
          const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
          const objectStore = tx.objectStore(OBJECT_STORE_NAME);
          const oldValue = await objectStore.get(key);
          await objectStore.put(value, key);
          await tx.done;
          if (!oldValue || oldValue.fid !== value.fid) {
            fidChanged(appConfig, value.fid);
          }
          return value;
        }
        /** Removes record(s) from the objectStore that match the given key. */
        async function remove(appConfig) {
          const key = getKey(appConfig);
          const db = await getDbPromise();
          const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
          await tx.objectStore(OBJECT_STORE_NAME).delete(key);
          await tx.done;
        }
        /**
         * Atomically updates a record with the result of updateFn, which gets
         * called with the current value. If newValue is undefined, the record is
         * deleted instead.
         * @return Updated value
         */
        async function update(appConfig, updateFn) {
          const key = getKey(appConfig);
          const db = await getDbPromise();
          const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
          const store = tx.objectStore(OBJECT_STORE_NAME);
          const oldValue = await store.get(key);
          const newValue = updateFn(oldValue);
          if (newValue === undefined) {
            await store.delete(key);
          } else {
            await store.put(newValue, key);
          }
          await tx.done;
          if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
            fidChanged(appConfig, newValue.fid);
          }
          return newValue;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Updates and returns the InstallationEntry from the database.
         * Also triggers a registration request if it is necessary and possible.
         */
        async function getInstallationEntry(installations) {
          let registrationPromise;
          const installationEntry = await update(
            installations.appConfig,
            (oldEntry) => {
              const installationEntry =
                updateOrCreateInstallationEntry(oldEntry);
              const entryWithPromise = triggerRegistrationIfNecessary(
                installations,
                installationEntry
              );
              registrationPromise = entryWithPromise.registrationPromise;
              return entryWithPromise.installationEntry;
            }
          );
          if (installationEntry.fid === INVALID_FID) {
            // FID generation failed. Waiting for the FID from the server.
            return { installationEntry: await registrationPromise };
          }
          return {
            installationEntry,
            registrationPromise,
          };
        }
        /**
         * Creates a new Installation Entry if one does not exist.
         * Also clears timed out pending requests.
         */
        function updateOrCreateInstallationEntry(oldEntry) {
          const entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */,
          };
          return clearTimedOutRequest(entry);
        }
        /**
         * If the Firebase Installation is not registered yet, this will trigger the
         * registration and return an InProgressInstallationEntry.
         *
         * If registrationPromise does not exist, the installationEntry is guaranteed
         * to be registered.
         */
        function triggerRegistrationIfNecessary(
          installations,
          installationEntry
        ) {
          if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
              // Registration required but app is offline.
              const registrationPromiseWithError = Promise.reject(
                ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */)
              );
              return {
                installationEntry,
                registrationPromise: registrationPromiseWithError,
              };
            }
            // Try registering. Change status to IN_PROGRESS.
            const inProgressEntry = {
              fid: installationEntry.fid,
              registrationStatus: 1 /* IN_PROGRESS */,
              registrationTime: Date.now(),
            };
            const registrationPromise = registerInstallation(
              installations,
              inProgressEntry
            );
            return { installationEntry: inProgressEntry, registrationPromise };
          } else if (
            installationEntry.registrationStatus === 1 /* IN_PROGRESS */
          ) {
            return {
              installationEntry,
              registrationPromise: waitUntilFidRegistration(installations),
            };
          } else {
            return { installationEntry };
          }
        }
        /** This will be executed only once for each new Firebase Installation. */
        async function registerInstallation(installations, installationEntry) {
          try {
            const registeredInstallationEntry = await createInstallationRequest(
              installations,
              installationEntry
            );
            return set(installations.appConfig, registeredInstallationEntry);
          } catch (e) {
            if (isServerError(e) && e.customData.serverCode === 409) {
              // Server returned a "FID can not be used" error.
              // Generate a new ID next time.
              await remove(installations.appConfig);
            } else {
              // Registration failed. Set FID as not registered.
              await set(installations.appConfig, {
                fid: installationEntry.fid,
                registrationStatus: 0 /* NOT_STARTED */,
              });
            }
            throw e;
          }
        }
        /** Call if FID registration is pending in another request. */
        async function waitUntilFidRegistration(installations) {
          // Unfortunately, there is no way of reliably observing when a value in
          // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
          // so we need to poll.
          let entry = await updateInstallationRequest(installations.appConfig);
          while (entry.registrationStatus === 1 /* IN_PROGRESS */) {
            // createInstallation request still in progress.
            await sleep(100);
            entry = await updateInstallationRequest(installations.appConfig);
          }
          if (entry.registrationStatus === 0 /* NOT_STARTED */) {
            // The request timed out or failed in a different call. Try again.
            const { installationEntry, registrationPromise } =
              await getInstallationEntry(installations);
            if (registrationPromise) {
              return registrationPromise;
            } else {
              // if there is no registrationPromise, entry is registered.
              return installationEntry;
            }
          }
          return entry;
        }
        /**
         * Called only if there is a CreateInstallation request in progress.
         *
         * Updates the InstallationEntry in the DB based on the status of the
         * CreateInstallation request.
         *
         * Returns the updated InstallationEntry.
         */
        function updateInstallationRequest(appConfig) {
          return update(appConfig, (oldEntry) => {
            if (!oldEntry) {
              throw ERROR_FACTORY.create(
                "installation-not-found" /* INSTALLATION_NOT_FOUND */
              );
            }
            return clearTimedOutRequest(oldEntry);
          });
        }
        function clearTimedOutRequest(entry) {
          if (hasInstallationRequestTimedOut(entry)) {
            return {
              fid: entry.fid,
              registrationStatus: 0 /* NOT_STARTED */,
            };
          }
          return entry;
        }
        function hasInstallationRequestTimedOut(installationEntry) {
          return (
            installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()
          );
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function generateAuthTokenRequest(
          { appConfig, heartbeatServiceProvider },
          installationEntry
        ) {
          const endpoint = getGenerateAuthTokenEndpoint(
            appConfig,
            installationEntry
          );
          const headers = getHeadersWithAuth(appConfig, installationEntry);
          // If heartbeat service exists, add the heartbeat string to the header.
          const heartbeatService = heartbeatServiceProvider.getImmediate({
            optional: true,
          });
          if (heartbeatService) {
            const heartbeatsHeader =
              await heartbeatService.getHeartbeatsHeader();
            if (heartbeatsHeader) {
              headers.append("x-firebase-client", heartbeatsHeader);
            }
          }
          const body = {
            installation: {
              sdkVersion: PACKAGE_VERSION,
              appId: appConfig.appId,
            },
          };
          const request = {
            method: "POST",
            headers,
            body: JSON.stringify(body),
          };
          const response = await retryIfServerError(() =>
            fetch(endpoint, request)
          );
          if (response.ok) {
            const responseValue = await response.json();
            const completedAuthToken =
              extractAuthTokenInfoFromResponse(responseValue);
            return completedAuthToken;
          } else {
            throw await getErrorFromResponse("Generate Auth Token", response);
          }
        }
        function getGenerateAuthTokenEndpoint(appConfig, { fid }) {
          return `${getInstallationsEndpoint(
            appConfig
          )}/${fid}/authTokens:generate`;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns a valid authentication token for the installation. Generates a new
         * token if one doesn't exist, is expired or about to expire.
         *
         * Should only be called if the Firebase Installation is registered.
         */
        async function refreshAuthToken(installations, forceRefresh = false) {
          let tokenPromise;
          const entry = await update(installations.appConfig, (oldEntry) => {
            if (!isEntryRegistered(oldEntry)) {
              throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
            }
            const oldAuthToken = oldEntry.authToken;
            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
              // There is a valid token in the DB.
              return oldEntry;
            } else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
              // There already is a token request in progress.
              tokenPromise = waitUntilAuthTokenRequest(
                installations,
                forceRefresh
              );
              return oldEntry;
            } else {
              // No token or token expired.
              if (!navigator.onLine) {
                throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
              }
              const inProgressEntry =
                makeAuthTokenRequestInProgressEntry(oldEntry);
              tokenPromise = fetchAuthTokenFromServer(
                installations,
                inProgressEntry
              );
              return inProgressEntry;
            }
          });
          const authToken = tokenPromise ? await tokenPromise : entry.authToken;
          return authToken;
        }
        /**
         * Call only if FID is registered and Auth Token request is in progress.
         *
         * Waits until the current pending request finishes. If the request times out,
         * tries once in this thread as well.
         */
        async function waitUntilAuthTokenRequest(installations, forceRefresh) {
          // Unfortunately, there is no way of reliably observing when a value in
          // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
          // so we need to poll.
          let entry = await updateAuthTokenRequest(installations.appConfig);
          while (entry.authToken.requestStatus === 1 /* IN_PROGRESS */) {
            // generateAuthToken still in progress.
            await sleep(100);
            entry = await updateAuthTokenRequest(installations.appConfig);
          }
          const authToken = entry.authToken;
          if (authToken.requestStatus === 0 /* NOT_STARTED */) {
            // The request timed out or failed in a different call. Try again.
            return refreshAuthToken(installations, forceRefresh);
          } else {
            return authToken;
          }
        }
        /**
         * Called only if there is a GenerateAuthToken request in progress.
         *
         * Updates the InstallationEntry in the DB based on the status of the
         * GenerateAuthToken request.
         *
         * Returns the updated InstallationEntry.
         */
        function updateAuthTokenRequest(appConfig) {
          return update(appConfig, (oldEntry) => {
            if (!isEntryRegistered(oldEntry)) {
              throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
            }
            const oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
              return Object.assign(Object.assign({}, oldEntry), {
                authToken: { requestStatus: 0 /* NOT_STARTED */ },
              });
            }
            return oldEntry;
          });
        }
        async function fetchAuthTokenFromServer(
          installations,
          installationEntry
        ) {
          try {
            const authToken = await generateAuthTokenRequest(
              installations,
              installationEntry
            );
            const updatedInstallationEntry = Object.assign(
              Object.assign({}, installationEntry),
              { authToken }
            );
            await set(installations.appConfig, updatedInstallationEntry);
            return authToken;
          } catch (e) {
            if (
              isServerError(e) &&
              (e.customData.serverCode === 401 ||
                e.customData.serverCode === 404)
            ) {
              // Server returned a "FID not found" or a "Invalid authentication" error.
              // Generate a new ID next time.
              await remove(installations.appConfig);
            } else {
              const updatedInstallationEntry = Object.assign(
                Object.assign({}, installationEntry),
                { authToken: { requestStatus: 0 /* NOT_STARTED */ } }
              );
              await set(installations.appConfig, updatedInstallationEntry);
            }
            throw e;
          }
        }
        function isEntryRegistered(installationEntry) {
          return (
            installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */
          );
        }
        function isAuthTokenValid(authToken) {
          return (
            authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken)
          );
        }
        function isAuthTokenExpired(authToken) {
          const now = Date.now();
          return (
            now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn <
            now + TOKEN_EXPIRATION_BUFFER
          );
        }
        /** Returns an updated InstallationEntry with an InProgressAuthToken. */
        function makeAuthTokenRequestInProgressEntry(oldEntry) {
          const inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now(),
          };
          return Object.assign(Object.assign({}, oldEntry), {
            authToken: inProgressAuthToken,
          });
        }
        function hasAuthTokenRequestTimedOut(authToken) {
          return (
            authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()
          );
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Creates a Firebase Installation if there isn't one for the app and
         * returns the Installation ID.
         * @param installations - The `Installations` instance.
         *
         * @public
         */
        async function getId(installations) {
          const installationsImpl = installations;
          const { installationEntry, registrationPromise } =
            await getInstallationEntry(installationsImpl);
          if (registrationPromise) {
            registrationPromise.catch(console.error);
          } else {
            // If the installation is already registered, update the authentication
            // token if needed.
            refreshAuthToken(installationsImpl).catch(console.error);
          }
          return installationEntry.fid;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns a Firebase Installations auth token, identifying the current
         * Firebase Installation.
         * @param installations - The `Installations` instance.
         * @param forceRefresh - Force refresh regardless of token expiration.
         *
         * @public
         */
        async function getToken(installations, forceRefresh = false) {
          const installationsImpl = installations;
          await completeInstallationRegistration(installationsImpl);
          // At this point we either have a Registered Installation in the DB, or we've
          // already thrown an error.
          const authToken = await refreshAuthToken(
            installationsImpl,
            forceRefresh
          );
          return authToken.token;
        }
        async function completeInstallationRegistration(installations) {
          const { registrationPromise } = await getInstallationEntry(
            installations
          );
          if (registrationPromise) {
            // A createInstallation request is in progress. Wait until it finishes.
            await registrationPromise;
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function deleteInstallationRequest(appConfig, installationEntry) {
          const endpoint = getDeleteEndpoint(appConfig, installationEntry);
          const headers = getHeadersWithAuth(appConfig, installationEntry);
          const request = {
            method: "DELETE",
            headers,
          };
          const response = await retryIfServerError(() =>
            fetch(endpoint, request)
          );
          if (!response.ok) {
            throw await getErrorFromResponse("Delete Installation", response);
          }
        }
        function getDeleteEndpoint(appConfig, { fid }) {
          return `${getInstallationsEndpoint(appConfig)}/${fid}`;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Deletes the Firebase Installation and all associated data.
         * @param installations - The `Installations` instance.
         *
         * @public
         */
        async function deleteInstallations(installations) {
          const { appConfig } = installations;
          const entry = await update(appConfig, (oldEntry) => {
            if (
              oldEntry &&
              oldEntry.registrationStatus === 0 /* NOT_STARTED */
            ) {
              // Delete the unregistered entry without sending a deleteInstallation request.
              return undefined;
            }
            return oldEntry;
          });
          if (entry) {
            if (entry.registrationStatus === 1 /* IN_PROGRESS */) {
              // Can't delete while trying to register.
              throw ERROR_FACTORY.create(
                "delete-pending-registration" /* DELETE_PENDING_REGISTRATION */
              );
            } else if (entry.registrationStatus === 2 /* COMPLETED */) {
              if (!navigator.onLine) {
                throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
              } else {
                await deleteInstallationRequest(appConfig, entry);
                await remove(appConfig);
              }
            }
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Sets a new callback that will get called when Installation ID changes.
         * Returns an unsubscribe function that will remove the callback when called.
         * @param installations - The `Installations` instance.
         * @param callback - The callback function that is invoked when FID changes.
         * @returns A function that can be called to unsubscribe.
         *
         * @public
         */
        function onIdChange(installations, callback) {
          const { appConfig } = installations;
          addCallback(appConfig, callback);
          return () => {
            removeCallback(appConfig, callback);
          };
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Returns an instance of {@link Installations} associated with the given
         * {@link @firebase/app#FirebaseApp} instance.
         * @param app - The {@link @firebase/app#FirebaseApp} instance.
         *
         * @public
         */
        function getInstallations(
          app = (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)()
        ) {
          const installationsImpl = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              "installations"
            ).getImmediate();
          return installationsImpl;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function extractAppConfig(app) {
          if (!app || !app.options) {
            throw getMissingValueError("App Configuration");
          }
          if (!app.name) {
            throw getMissingValueError("App Name");
          }
          // Required app config keys
          const configKeys = ["projectId", "apiKey", "appId"];
          for (const keyName of configKeys) {
            if (!app.options[keyName]) {
              throw getMissingValueError(keyName);
            }
          }
          return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId,
          };
        }
        function getMissingValueError(valueName) {
          return ERROR_FACTORY.create(
            "missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */,
            {
              valueName,
            }
          );
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const INSTALLATIONS_NAME = "installations";
        const INSTALLATIONS_NAME_INTERNAL = "installations-internal";
        const publicFactory = (container) => {
          const app = container.getProvider("app").getImmediate();
          // Throws if app isn't configured properly.
          const appConfig = extractAppConfig(app);
          const heartbeatServiceProvider = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              "heartbeat"
            );
          const installationsImpl = {
            app,
            appConfig,
            heartbeatServiceProvider,
            _delete: () => Promise.resolve(),
          };
          return installationsImpl;
        };
        const internalFactory = (container) => {
          const app = container.getProvider("app").getImmediate();
          // Internal FIS instance relies on public FIS instance.
          const installations = (0,
            _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(
              app,
              INSTALLATIONS_NAME
            ).getImmediate();
          const installationsInternal = {
            getId: () => getId(installations),
            getToken: (forceRefresh) => getToken(installations, forceRefresh),
          };
          return installationsInternal;
        };
        function registerInstallations() {
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(
              INSTALLATIONS_NAME,
              publicFactory,
              "PUBLIC" /* PUBLIC */
            )
          );
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(
              INSTALLATIONS_NAME_INTERNAL,
              internalFactory,
              "PRIVATE" /* PRIVATE */
            )
          );
        }

        /**
         * Firebase Installations
         *
         * @packageDocumentation
         */
        registerInstallations();
        (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
          name,
          version
        );
        // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
        (0, _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(
          name,
          version,
          "esm2017"
        );

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js":
      /*!*****************************************************************!*\
  !*** ./node_modules/@firebase/logger/dist/esm/index.esm2017.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ LogLevel: () => /* binding */ LogLevel,
          /* harmony export */ Logger: () => /* binding */ Logger,
          /* harmony export */ setLogLevel: () => /* binding */ setLogLevel,
          /* harmony export */ setUserLogHandler: () =>
            /* binding */ setUserLogHandler,
          /* harmony export */
        });
        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * A container for all of the Logger instances
         */
        const instances = [];
        /**
         * The JS SDK supports 5 log levels and also allows a user the ability to
         * silence the logs altogether.
         *
         * The order is a follows:
         * DEBUG < VERBOSE < INFO < WARN < ERROR
         *
         * All of the log types above the current log level will be captured (i.e. if
         * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
         * `VERBOSE` logs will not)
         */
        var LogLevel;
        (function (LogLevel) {
          LogLevel[(LogLevel["DEBUG"] = 0)] = "DEBUG";
          LogLevel[(LogLevel["VERBOSE"] = 1)] = "VERBOSE";
          LogLevel[(LogLevel["INFO"] = 2)] = "INFO";
          LogLevel[(LogLevel["WARN"] = 3)] = "WARN";
          LogLevel[(LogLevel["ERROR"] = 4)] = "ERROR";
          LogLevel[(LogLevel["SILENT"] = 5)] = "SILENT";
        })(LogLevel || (LogLevel = {}));
        const levelStringToEnum = {
          debug: LogLevel.DEBUG,
          verbose: LogLevel.VERBOSE,
          info: LogLevel.INFO,
          warn: LogLevel.WARN,
          error: LogLevel.ERROR,
          silent: LogLevel.SILENT,
        };
        /**
         * The default log level
         */
        const defaultLogLevel = LogLevel.INFO;
        /**
         * By default, `console.debug` is not displayed in the developer console (in
         * chrome). To avoid forcing users to have to opt-in to these logs twice
         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
         * logs to the `console.log` function.
         */
        const ConsoleMethod = {
          [LogLevel.DEBUG]: "log",
          [LogLevel.VERBOSE]: "log",
          [LogLevel.INFO]: "info",
          [LogLevel.WARN]: "warn",
          [LogLevel.ERROR]: "error",
        };
        /**
         * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
         * messages on to their corresponding console counterparts (if the log method
         * is supported by the current log level)
         */
        const defaultLogHandler = (instance, logType, ...args) => {
          if (logType < instance.logLevel) {
            return;
          }
          const now = new Date().toISOString();
          const method = ConsoleMethod[logType];
          if (method) {
            console[method](`[${now}]  ${instance.name}:`, ...args);
          } else {
            throw new Error(
              `Attempted to log a message with an invalid logType (value: ${logType})`
            );
          }
        };
        class Logger {
          /**
           * Gives you an instance of a Logger to capture messages according to
           * Firebase's logging scheme.
           *
           * @param name The name that the logs will be associated with
           */
          constructor(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
          }
          get logLevel() {
            return this._logLevel;
          }
          set logLevel(val) {
            if (!(val in LogLevel)) {
              throw new TypeError(
                `Invalid value "${val}" assigned to \`logLevel\``
              );
            }
            this._logLevel = val;
          }
          // Workaround for setter/getter having to be the same type.
          setLogLevel(val) {
            this._logLevel =
              typeof val === "string" ? levelStringToEnum[val] : val;
          }
          get logHandler() {
            return this._logHandler;
          }
          set logHandler(val) {
            if (typeof val !== "function") {
              throw new TypeError(
                "Value assigned to `logHandler` must be a function"
              );
            }
            this._logHandler = val;
          }
          get userLogHandler() {
            return this._userLogHandler;
          }
          set userLogHandler(val) {
            this._userLogHandler = val;
          }
          /**
           * The functions below are all based on the `console` interface
           */
          debug(...args) {
            this._userLogHandler &&
              this._userLogHandler(this, LogLevel.DEBUG, ...args);
            this._logHandler(this, LogLevel.DEBUG, ...args);
          }
          log(...args) {
            this._userLogHandler &&
              this._userLogHandler(this, LogLevel.VERBOSE, ...args);
            this._logHandler(this, LogLevel.VERBOSE, ...args);
          }
          info(...args) {
            this._userLogHandler &&
              this._userLogHandler(this, LogLevel.INFO, ...args);
            this._logHandler(this, LogLevel.INFO, ...args);
          }
          warn(...args) {
            this._userLogHandler &&
              this._userLogHandler(this, LogLevel.WARN, ...args);
            this._logHandler(this, LogLevel.WARN, ...args);
          }
          error(...args) {
            this._userLogHandler &&
              this._userLogHandler(this, LogLevel.ERROR, ...args);
            this._logHandler(this, LogLevel.ERROR, ...args);
          }
        }
        function setLogLevel(level) {
          instances.forEach((inst) => {
            inst.setLogLevel(level);
          });
        }
        function setUserLogHandler(logCallback, options) {
          for (const instance of instances) {
            let customLogLevel = null;
            if (options && options.level) {
              customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
              instance.userLogHandler = null;
            } else {
              instance.userLogHandler = (instance, level, ...args) => {
                const message = args
                  .map((arg) => {
                    if (arg == null) {
                      return null;
                    } else if (typeof arg === "string") {
                      return arg;
                    } else if (
                      typeof arg === "number" ||
                      typeof arg === "boolean"
                    ) {
                      return arg.toString();
                    } else if (arg instanceof Error) {
                      return arg.message;
                    } else {
                      try {
                        return JSON.stringify(arg);
                      } catch (ignored) {
                        return null;
                      }
                    }
                  })
                  .filter((arg) => arg)
                  .join(" ");
                if (
                  level >=
                  (customLogLevel !== null && customLogLevel !== void 0
                    ? customLogLevel
                    : instance.logLevel)
                ) {
                  logCallback({
                    level: LogLevel[level].toLowerCase(),
                    message,
                    args,
                    type: instance.name,
                  });
                }
              };
            }
          }
        }

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/@firebase/messaging/dist/esm/index.esm2017.js":
      /*!********************************************************************!*\
  !*** ./node_modules/@firebase/messaging/dist/esm/index.esm2017.js ***!
  \********************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ deleteToken: () => /* binding */ deleteToken,
          /* harmony export */ getMessaging: () =>
            /* binding */ getMessagingInWindow,
          /* harmony export */ getToken: () => /* binding */ getToken,
          /* harmony export */ isSupported: () =>
            /* binding */ isWindowSupported,
          /* harmony export */ onMessage: () => /* binding */ onMessage,
          /* harmony export */
        });
        /* harmony import */ var _firebase_installations__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @firebase/installations */ "./node_modules/@firebase/installations/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js"
          );
        /* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(/*! idb */ "./node_modules/idb/build/index.js");
        /* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js"
          );
        /* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js"
          );

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const DEFAULT_SW_PATH = "/firebase-messaging-sw.js";
        const DEFAULT_SW_SCOPE = "/firebase-cloud-messaging-push-scope";
        const DEFAULT_VAPID_KEY =
          "BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4";
        const ENDPOINT = "https://fcmregistrations.googleapis.com/v1";
        const CONSOLE_CAMPAIGN_ID = "google.c.a.c_id";
        const CONSOLE_CAMPAIGN_NAME = "google.c.a.c_l";
        const CONSOLE_CAMPAIGN_TIME = "google.c.a.ts";
        /** Set to '1' if Analytics is enabled for the campaign */
        const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = "google.c.a.e";
        var MessageType$1;
        (function (MessageType) {
          MessageType[(MessageType["DATA_MESSAGE"] = 1)] = "DATA_MESSAGE";
          MessageType[(MessageType["DISPLAY_NOTIFICATION"] = 3)] =
            "DISPLAY_NOTIFICATION";
        })(MessageType$1 || (MessageType$1 = {}));

        /**
         * @license
         * Copyright 2018 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
         * in compliance with the License. You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software distributed under the License
         * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
         * or implied. See the License for the specific language governing permissions and limitations under
         * the License.
         */
        var MessageType;
        (function (MessageType) {
          MessageType["PUSH_RECEIVED"] = "push-received";
          MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
        })(MessageType || (MessageType = {}));

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function arrayToBase64(array) {
          const uint8Array = new Uint8Array(array);
          const base64String = btoa(String.fromCharCode(...uint8Array));
          return base64String
            .replace(/=/g, "")
            .replace(/\+/g, "-")
            .replace(/\//g, "_");
        }
        function base64ToArray(base64String) {
          const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
          const base64 = (base64String + padding)
            .replace(/\-/g, "+")
            .replace(/_/g, "/");
          const rawData = atob(base64);
          const outputArray = new Uint8Array(rawData.length);
          for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
          }
          return outputArray;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const OLD_DB_NAME = "fcm_token_details_db";
        /**
         * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
         * callback is called for all versions of the old DB.
         */
        const OLD_DB_VERSION = 5;
        const OLD_OBJECT_STORE_NAME = "fcm_token_object_Store";
        async function migrateOldDatabase(senderId) {
          if ("databases" in indexedDB) {
            // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove
            // typecast when it lands in TS types.
            const databases = await indexedDB.databases();
            const dbNames = databases.map((db) => db.name);
            if (!dbNames.includes(OLD_DB_NAME)) {
              // old DB didn't exist, no need to open.
              return null;
            }
          }
          let tokenDetails = null;
          const db = await (0, idb__WEBPACK_IMPORTED_MODULE_2__.openDB)(
            OLD_DB_NAME,
            OLD_DB_VERSION,
            {
              upgrade: async (
                db,
                oldVersion,
                newVersion,
                upgradeTransaction
              ) => {
                var _a;
                if (oldVersion < 2) {
                  // Database too old, skip migration.
                  return;
                }
                if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
                  // Database did not exist. Nothing to do.
                  return;
                }
                const objectStore = upgradeTransaction.objectStore(
                  OLD_OBJECT_STORE_NAME
                );
                const value = await objectStore
                  .index("fcmSenderId")
                  .get(senderId);
                await objectStore.clear();
                if (!value) {
                  // No entry in the database, nothing to migrate.
                  return;
                }
                if (oldVersion === 2) {
                  const oldDetails = value;
                  if (
                    !oldDetails.auth ||
                    !oldDetails.p256dh ||
                    !oldDetails.endpoint
                  ) {
                    return;
                  }
                  tokenDetails = {
                    token: oldDetails.fcmToken,
                    createTime:
                      (_a = oldDetails.createTime) !== null && _a !== void 0
                        ? _a
                        : Date.now(),
                    subscriptionOptions: {
                      auth: oldDetails.auth,
                      p256dh: oldDetails.p256dh,
                      endpoint: oldDetails.endpoint,
                      swScope: oldDetails.swScope,
                      vapidKey:
                        typeof oldDetails.vapidKey === "string"
                          ? oldDetails.vapidKey
                          : arrayToBase64(oldDetails.vapidKey),
                    },
                  };
                } else if (oldVersion === 3) {
                  const oldDetails = value;
                  tokenDetails = {
                    token: oldDetails.fcmToken,
                    createTime: oldDetails.createTime,
                    subscriptionOptions: {
                      auth: arrayToBase64(oldDetails.auth),
                      p256dh: arrayToBase64(oldDetails.p256dh),
                      endpoint: oldDetails.endpoint,
                      swScope: oldDetails.swScope,
                      vapidKey: arrayToBase64(oldDetails.vapidKey),
                    },
                  };
                } else if (oldVersion === 4) {
                  const oldDetails = value;
                  tokenDetails = {
                    token: oldDetails.fcmToken,
                    createTime: oldDetails.createTime,
                    subscriptionOptions: {
                      auth: arrayToBase64(oldDetails.auth),
                      p256dh: arrayToBase64(oldDetails.p256dh),
                      endpoint: oldDetails.endpoint,
                      swScope: oldDetails.swScope,
                      vapidKey: arrayToBase64(oldDetails.vapidKey),
                    },
                  };
                }
              },
            }
          );
          db.close();
          // Delete all old databases.
          await (0, idb__WEBPACK_IMPORTED_MODULE_2__.deleteDB)(OLD_DB_NAME);
          await (0, idb__WEBPACK_IMPORTED_MODULE_2__.deleteDB)(
            "fcm_vapid_details_db"
          );
          await (0, idb__WEBPACK_IMPORTED_MODULE_2__.deleteDB)("undefined");
          return checkTokenDetails(tokenDetails) ? tokenDetails : null;
        }
        function checkTokenDetails(tokenDetails) {
          if (!tokenDetails || !tokenDetails.subscriptionOptions) {
            return false;
          }
          const { subscriptionOptions } = tokenDetails;
          return (
            typeof tokenDetails.createTime === "number" &&
            tokenDetails.createTime > 0 &&
            typeof tokenDetails.token === "string" &&
            tokenDetails.token.length > 0 &&
            typeof subscriptionOptions.auth === "string" &&
            subscriptionOptions.auth.length > 0 &&
            typeof subscriptionOptions.p256dh === "string" &&
            subscriptionOptions.p256dh.length > 0 &&
            typeof subscriptionOptions.endpoint === "string" &&
            subscriptionOptions.endpoint.length > 0 &&
            typeof subscriptionOptions.swScope === "string" &&
            subscriptionOptions.swScope.length > 0 &&
            typeof subscriptionOptions.vapidKey === "string" &&
            subscriptionOptions.vapidKey.length > 0
          );
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // Exported for tests.
        const DATABASE_NAME = "firebase-messaging-database";
        const DATABASE_VERSION = 1;
        const OBJECT_STORE_NAME = "firebase-messaging-store";
        let dbPromise = null;
        function getDbPromise() {
          if (!dbPromise) {
            dbPromise = (0, idb__WEBPACK_IMPORTED_MODULE_2__.openDB)(
              DATABASE_NAME,
              DATABASE_VERSION,
              {
                upgrade: (upgradeDb, oldVersion) => {
                  // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
                  // because if there are multiple versions between the old version and the current version, we
                  // want ALL the migrations that correspond to those versions to run, not only the last one.
                  // eslint-disable-next-line default-case
                  switch (oldVersion) {
                    case 0:
                      upgradeDb.createObjectStore(OBJECT_STORE_NAME);
                  }
                },
              }
            );
          }
          return dbPromise;
        }
        /** Gets record(s) from the objectStore that match the given key. */
        async function dbGet(firebaseDependencies) {
          const key = getKey(firebaseDependencies);
          const db = await getDbPromise();
          const tokenDetails = await db
            .transaction(OBJECT_STORE_NAME)
            .objectStore(OBJECT_STORE_NAME)
            .get(key);
          if (tokenDetails) {
            return tokenDetails;
          } else {
            // Check if there is a tokenDetails object in the old DB.
            const oldTokenDetails = await migrateOldDatabase(
              firebaseDependencies.appConfig.senderId
            );
            if (oldTokenDetails) {
              await dbSet(firebaseDependencies, oldTokenDetails);
              return oldTokenDetails;
            }
          }
        }
        /** Assigns or overwrites the record for the given key with the given value. */
        async function dbSet(firebaseDependencies, tokenDetails) {
          const key = getKey(firebaseDependencies);
          const db = await getDbPromise();
          const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
          await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);
          await tx.done;
          return tokenDetails;
        }
        /** Removes record(s) from the objectStore that match the given key. */
        async function dbRemove(firebaseDependencies) {
          const key = getKey(firebaseDependencies);
          const db = await getDbPromise();
          const tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
          await tx.objectStore(OBJECT_STORE_NAME).delete(key);
          await tx.done;
        }
        function getKey({ appConfig }) {
          return appConfig.appId;
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const ERROR_MAP = {
          ["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */]:
            'Missing App configuration value: "{$valueName}"',
          ["only-available-in-window" /* AVAILABLE_IN_WINDOW */]:
            "This method is available in a Window context.",
          ["only-available-in-sw" /* AVAILABLE_IN_SW */]:
            "This method is available in a service worker context.",
          ["permission-default" /* PERMISSION_DEFAULT */]:
            "The notification permission was not granted and dismissed instead.",
          ["permission-blocked" /* PERMISSION_BLOCKED */]:
            "The notification permission was not granted and blocked instead.",
          ["unsupported-browser" /* UNSUPPORTED_BROWSER */]:
            "This browser doesn't support the API's required to use the Firebase SDK.",
          ["indexed-db-unsupported" /* INDEXED_DB_UNSUPPORTED */]:
            "This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)",
          ["failed-service-worker-registration" /* FAILED_DEFAULT_REGISTRATION */]:
            "We are unable to register the default service worker. {$browserErrorMessage}",
          ["token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */]:
            "A problem occurred while subscribing the user to FCM: {$errorInfo}",
          ["token-subscribe-no-token" /* TOKEN_SUBSCRIBE_NO_TOKEN */]:
            "FCM returned no token when subscribing the user to push.",
          ["token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */]:
            "A problem occurred while unsubscribing the " +
            "user from FCM: {$errorInfo}",
          ["token-update-failed" /* TOKEN_UPDATE_FAILED */]:
            "A problem occurred while updating the user from FCM: {$errorInfo}",
          ["token-update-no-token" /* TOKEN_UPDATE_NO_TOKEN */]:
            "FCM returned no token when updating the user to push.",
          ["use-sw-after-get-token" /* USE_SW_AFTER_GET_TOKEN */]:
            "The useServiceWorker() method may only be called once and must be " +
            "called before calling getToken() to ensure your service worker is used.",
          ["invalid-sw-registration" /* INVALID_SW_REGISTRATION */]:
            "The input to useServiceWorker() must be a ServiceWorkerRegistration.",
          ["invalid-bg-handler" /* INVALID_BG_HANDLER */]:
            "The input to setBackgroundMessageHandler() must be a function.",
          ["invalid-vapid-key" /* INVALID_VAPID_KEY */]:
            "The public VAPID key must be a string.",
          ["use-vapid-key-after-get-token" /* USE_VAPID_KEY_AFTER_GET_TOKEN */]:
            "The usePublicVapidKey() method may only be called once and must be " +
            "called before calling getToken() to ensure your VAPID key is used.",
        };
        const ERROR_FACTORY =
          new _firebase_util__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory(
            "messaging",
            "Messaging",
            ERROR_MAP
          );

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function requestGetToken(
          firebaseDependencies,
          subscriptionOptions
        ) {
          var _a;
          const headers = await getHeaders(firebaseDependencies);
          const body = getBody(subscriptionOptions);
          const subscribeOptions = {
            method: "POST",
            headers,
            body: JSON.stringify(body),
          };
          let responseData;
          try {
            const response = await fetch(
              getEndpoint(firebaseDependencies.appConfig),
              subscribeOptions
            );
            responseData = await response.json();
          } catch (err) {
            throw ERROR_FACTORY.create(
              "token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */,
              {
                errorInfo:
                  (_a = err) === null || _a === void 0 ? void 0 : _a.toString(),
              }
            );
          }
          if (responseData.error) {
            const message = responseData.error.message;
            throw ERROR_FACTORY.create(
              "token-subscribe-failed" /* TOKEN_SUBSCRIBE_FAILED */,
              {
                errorInfo: message,
              }
            );
          }
          if (!responseData.token) {
            throw ERROR_FACTORY.create(
              "token-subscribe-no-token" /* TOKEN_SUBSCRIBE_NO_TOKEN */
            );
          }
          return responseData.token;
        }
        async function requestUpdateToken(firebaseDependencies, tokenDetails) {
          var _a;
          const headers = await getHeaders(firebaseDependencies);
          const body = getBody(tokenDetails.subscriptionOptions);
          const updateOptions = {
            method: "PATCH",
            headers,
            body: JSON.stringify(body),
          };
          let responseData;
          try {
            const response = await fetch(
              `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token
              }`,
              updateOptions
            );
            responseData = await response.json();
          } catch (err) {
            throw ERROR_FACTORY.create(
              "token-update-failed" /* TOKEN_UPDATE_FAILED */,
              {
                errorInfo:
                  (_a = err) === null || _a === void 0 ? void 0 : _a.toString(),
              }
            );
          }
          if (responseData.error) {
            const message = responseData.error.message;
            throw ERROR_FACTORY.create(
              "token-update-failed" /* TOKEN_UPDATE_FAILED */,
              {
                errorInfo: message,
              }
            );
          }
          if (!responseData.token) {
            throw ERROR_FACTORY.create(
              "token-update-no-token" /* TOKEN_UPDATE_NO_TOKEN */
            );
          }
          return responseData.token;
        }
        async function requestDeleteToken(firebaseDependencies, token) {
          var _a;
          const headers = await getHeaders(firebaseDependencies);
          const unsubscribeOptions = {
            method: "DELETE",
            headers,
          };
          try {
            const response = await fetch(
              `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,
              unsubscribeOptions
            );
            const responseData = await response.json();
            if (responseData.error) {
              const message = responseData.error.message;
              throw ERROR_FACTORY.create(
                "token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */,
                {
                  errorInfo: message,
                }
              );
            }
          } catch (err) {
            throw ERROR_FACTORY.create(
              "token-unsubscribe-failed" /* TOKEN_UNSUBSCRIBE_FAILED */,
              {
                errorInfo:
                  (_a = err) === null || _a === void 0 ? void 0 : _a.toString(),
              }
            );
          }
        }
        function getEndpoint({ projectId }) {
          return `${ENDPOINT}/projects/${projectId}/registrations`;
        }
        async function getHeaders({ appConfig, installations }) {
          const authToken = await installations.getToken();
          return new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-goog-api-key": appConfig.apiKey,
            "x-goog-firebase-installations-auth": `FIS ${authToken}`,
          });
        }
        function getBody({ p256dh, auth, endpoint, vapidKey }) {
          const body = {
            web: {
              endpoint,
              auth,
              p256dh,
            },
          };
          if (vapidKey !== DEFAULT_VAPID_KEY) {
            body.web.applicationPubKey = vapidKey;
          }
          return body;
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        // UpdateRegistration will be called once every week.
        const TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days
        async function getTokenInternal(messaging) {
          const pushSubscription = await getPushSubscription(
            messaging.swRegistration,
            messaging.vapidKey
          );
          const subscriptionOptions = {
            vapidKey: messaging.vapidKey,
            swScope: messaging.swRegistration.scope,
            endpoint: pushSubscription.endpoint,
            auth: arrayToBase64(pushSubscription.getKey("auth")),
            p256dh: arrayToBase64(pushSubscription.getKey("p256dh")),
          };
          const tokenDetails = await dbGet(messaging.firebaseDependencies);
          if (!tokenDetails) {
            // No token, get a new one.
            return getNewToken(
              messaging.firebaseDependencies,
              subscriptionOptions
            );
          } else if (
            !isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)
          ) {
            // Invalid token, get a new one.
            try {
              await requestDeleteToken(
                messaging.firebaseDependencies,
                tokenDetails.token
              );
            } catch (e) {
              // Suppress errors because of #2364
              console.warn(e);
            }
            return getNewToken(
              messaging.firebaseDependencies,
              subscriptionOptions
            );
          } else if (
            Date.now() >=
            tokenDetails.createTime + TOKEN_EXPIRATION_MS
          ) {
            // Weekly token refresh
            return updateToken(messaging, {
              token: tokenDetails.token,
              createTime: Date.now(),
              subscriptionOptions,
            });
          } else {
            // Valid token, nothing to do.
            return tokenDetails.token;
          }
        }
        /**
         * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
         * the push subscription if it exists.
         */
        async function deleteTokenInternal(messaging) {
          const tokenDetails = await dbGet(messaging.firebaseDependencies);
          if (tokenDetails) {
            await requestDeleteToken(
              messaging.firebaseDependencies,
              tokenDetails.token
            );
            await dbRemove(messaging.firebaseDependencies);
          }
          // Unsubscribe from the push subscription.
          const pushSubscription =
            await messaging.swRegistration.pushManager.getSubscription();
          if (pushSubscription) {
            return pushSubscription.unsubscribe();
          }
          // If there's no SW, consider it a success.
          return true;
        }
        async function updateToken(messaging, tokenDetails) {
          try {
            const updatedToken = await requestUpdateToken(
              messaging.firebaseDependencies,
              tokenDetails
            );
            const updatedTokenDetails = Object.assign(
              Object.assign({}, tokenDetails),
              { token: updatedToken, createTime: Date.now() }
            );
            await dbSet(messaging.firebaseDependencies, updatedTokenDetails);
            return updatedToken;
          } catch (e) {
            await deleteTokenInternal(messaging);
            throw e;
          }
        }
        async function getNewToken(firebaseDependencies, subscriptionOptions) {
          const token = await requestGetToken(
            firebaseDependencies,
            subscriptionOptions
          );
          const tokenDetails = {
            token,
            createTime: Date.now(),
            subscriptionOptions,
          };
          await dbSet(firebaseDependencies, tokenDetails);
          return tokenDetails.token;
        }
        /**
         * Gets a PushSubscription for the current user.
         */
        async function getPushSubscription(swRegistration, vapidKey) {
          const subscription =
            await swRegistration.pushManager.getSubscription();
          if (subscription) {
            return subscription;
          }
          return swRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
            // submitted to pushManager#subscribe must be of type Uint8Array.
            applicationServerKey: base64ToArray(vapidKey),
          });
        }
        /**
         * Checks if the saved tokenDetails object matches the configuration provided.
         */
        function isTokenValid(dbOptions, currentOptions) {
          const isVapidKeyEqual =
            currentOptions.vapidKey === dbOptions.vapidKey;
          const isEndpointEqual =
            currentOptions.endpoint === dbOptions.endpoint;
          const isAuthEqual = currentOptions.auth === dbOptions.auth;
          const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
          return (
            isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual
          );
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function externalizePayload(internalPayload) {
          const payload = {
            from: internalPayload.from,
            // eslint-disable-next-line camelcase
            collapseKey: internalPayload.collapse_key,
            // eslint-disable-next-line camelcase
            messageId: internalPayload.fcmMessageId,
          };
          propagateNotificationPayload(payload, internalPayload);
          propagateDataPayload(payload, internalPayload);
          propagateFcmOptions(payload, internalPayload);
          return payload;
        }
        function propagateNotificationPayload(payload, messagePayloadInternal) {
          if (!messagePayloadInternal.notification) {
            return;
          }
          payload.notification = {};
          const title = messagePayloadInternal.notification.title;
          if (!!title) {
            payload.notification.title = title;
          }
          const body = messagePayloadInternal.notification.body;
          if (!!body) {
            payload.notification.body = body;
          }
          const image = messagePayloadInternal.notification.image;
          if (!!image) {
            payload.notification.image = image;
          }
          const icon = messagePayloadInternal.notification.icon;
          if (!!icon) {
            payload.notification.icon = icon;
          }
        }
        function propagateDataPayload(payload, messagePayloadInternal) {
          if (!messagePayloadInternal.data) {
            return;
          }
          payload.data = messagePayloadInternal.data;
        }
        function propagateFcmOptions(payload, messagePayloadInternal) {
          var _a, _b, _c, _d, _e;
          // fcmOptions.link value is written into notification.click_action. see more in b/232072111
          if (
            !messagePayloadInternal.fcmOptions &&
            !((_a = messagePayloadInternal.notification) === null ||
              _a === void 0
              ? void 0
              : _a.click_action)
          ) {
            return;
          }
          payload.fcmOptions = {};
          const link =
            (_c =
              (_b = messagePayloadInternal.fcmOptions) === null || _b === void 0
                ? void 0
                : _b.link) !== null && _c !== void 0
              ? _c
              : (_d = messagePayloadInternal.notification) === null ||
                _d === void 0
                ? void 0
                : _d.click_action;
          if (!!link) {
            payload.fcmOptions.link = link;
          }
          // eslint-disable-next-line camelcase
          const analyticsLabel =
            (_e = messagePayloadInternal.fcmOptions) === null || _e === void 0
              ? void 0
              : _e.analytics_label;
          if (!!analyticsLabel) {
            payload.fcmOptions.analyticsLabel = analyticsLabel;
          }
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function isConsoleMessage(data) {
          // This message has a campaign ID, meaning it was sent using the Firebase Console.
          return (
            typeof data === "object" && !!data && CONSOLE_CAMPAIGN_ID in data
          );
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        _mergeStrings(
          "hts/frbslgigp.ogepscmv/ieo/eaylg",
          "tp:/ieaeogn-agolai.o/1frlglgc/o"
        );
        _mergeStrings("AzSCbw63g1R0nCw85jG8", "Iaya3yLKwmgvh7cF0q4");
        function _mergeStrings(s1, s2) {
          const resultArray = [];
          for (let i = 0; i < s1.length; i++) {
            resultArray.push(s1.charAt(i));
            if (i < s2.length) {
              resultArray.push(s2.charAt(i));
            }
          }
          return resultArray.join("");
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function extractAppConfig(app) {
          if (!app || !app.options) {
            throw getMissingValueError("App Configuration Object");
          }
          if (!app.name) {
            throw getMissingValueError("App Name");
          }
          // Required app config keys
          const configKeys = [
            "projectId",
            "apiKey",
            "appId",
            "messagingSenderId",
          ];
          const { options } = app;
          for (const keyName of configKeys) {
            if (!options[keyName]) {
              throw getMissingValueError(keyName);
            }
          }
          return {
            appName: app.name,
            projectId: options.projectId,
            apiKey: options.apiKey,
            appId: options.appId,
            senderId: options.messagingSenderId,
          };
        }
        function getMissingValueError(valueName) {
          return ERROR_FACTORY.create(
            "missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */,
            {
              valueName,
            }
          );
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        class MessagingService {
          constructor(app, installations, analyticsProvider) {
            // logging is only done with end user consent. Default to false.
            this.deliveryMetricsExportedToBigQueryEnabled = false;
            this.onBackgroundMessageHandler = null;
            this.onMessageHandler = null;
            this.logEvents = [];
            this.isLogServiceStarted = false;
            const appConfig = extractAppConfig(app);
            this.firebaseDependencies = {
              app,
              appConfig,
              installations,
              analyticsProvider,
            };
          }
          _delete() {
            return Promise.resolve();
          }
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function registerDefaultSw(messaging) {
          var _a;
          try {
            messaging.swRegistration = await navigator.serviceWorker.register(
              DEFAULT_SW_PATH,
              {
                scope: DEFAULT_SW_SCOPE,
              }
            );
            // The timing when browser updates sw when sw has an update is unreliable from experiment. It
            // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw
            // is stuck with the old version. For example,
            // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates
            // sw if there was an update.
            messaging.swRegistration.update().catch(() => {
              /* it is non blocking and we don't care if it failed */
            });
          } catch (e) {
            throw ERROR_FACTORY.create(
              "failed-service-worker-registration" /* FAILED_DEFAULT_REGISTRATION */,
              {
                browserErrorMessage:
                  (_a = e) === null || _a === void 0 ? void 0 : _a.message,
              }
            );
          }
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function updateSwReg(messaging, swRegistration) {
          if (!swRegistration && !messaging.swRegistration) {
            await registerDefaultSw(messaging);
          }
          if (!swRegistration && !!messaging.swRegistration) {
            return;
          }
          if (!(swRegistration instanceof ServiceWorkerRegistration)) {
            throw ERROR_FACTORY.create(
              "invalid-sw-registration" /* INVALID_SW_REGISTRATION */
            );
          }
          messaging.swRegistration = swRegistration;
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function updateVapidKey(messaging, vapidKey) {
          if (!!vapidKey) {
            messaging.vapidKey = vapidKey;
          } else if (!messaging.vapidKey) {
            messaging.vapidKey = DEFAULT_VAPID_KEY;
          }
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function getToken$1(messaging, options) {
          if (!navigator) {
            throw ERROR_FACTORY.create(
              "only-available-in-window" /* AVAILABLE_IN_WINDOW */
            );
          }
          if (Notification.permission === "default") {
            await Notification.requestPermission();
          }
          if (Notification.permission !== "granted") {
            throw ERROR_FACTORY.create(
              "permission-blocked" /* PERMISSION_BLOCKED */
            );
          }
          await updateVapidKey(
            messaging,
            options === null || options === void 0 ? void 0 : options.vapidKey
          );
          await updateSwReg(
            messaging,
            options === null || options === void 0
              ? void 0
              : options.serviceWorkerRegistration
          );
          return getTokenInternal(messaging);
        }

        /**
         * @license
         * Copyright 2019 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function logToScion(messaging, messageType, data) {
          const eventType = getEventType(messageType);
          const analytics =
            await messaging.firebaseDependencies.analyticsProvider.get();
          analytics.logEvent(eventType, {
            /* eslint-disable camelcase */
            message_id: data[CONSOLE_CAMPAIGN_ID],
            message_name: data[CONSOLE_CAMPAIGN_NAME],
            message_time: data[CONSOLE_CAMPAIGN_TIME],
            message_device_time: Math.floor(Date.now() / 1000),
            /* eslint-enable camelcase */
          });
        }
        function getEventType(messageType) {
          switch (messageType) {
            case MessageType.NOTIFICATION_CLICKED:
              return "notification_open";
            case MessageType.PUSH_RECEIVED:
              return "notification_foreground";
            default:
              throw new Error();
          }
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function messageEventListener(messaging, event) {
          const internalPayload = event.data;
          if (!internalPayload.isFirebaseMessaging) {
            return;
          }
          if (
            messaging.onMessageHandler &&
            internalPayload.messageType === MessageType.PUSH_RECEIVED
          ) {
            if (typeof messaging.onMessageHandler === "function") {
              messaging.onMessageHandler(externalizePayload(internalPayload));
            } else {
              messaging.onMessageHandler.next(
                externalizePayload(internalPayload)
              );
            }
          }
          // Log to Scion if applicable
          const dataPayload = internalPayload.data;
          if (
            isConsoleMessage(dataPayload) &&
            dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === "1"
          ) {
            await logToScion(
              messaging,
              internalPayload.messageType,
              dataPayload
            );
          }
        }

        const name = "@firebase/messaging";
        const version = "0.11.0";

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        const WindowMessagingFactory = (container) => {
          const messaging = new MessagingService(
            container.getProvider("app").getImmediate(),
            container.getProvider("installations-internal").getImmediate(),
            container.getProvider("analytics-internal")
          );
          navigator.serviceWorker.addEventListener("message", (e) =>
            messageEventListener(messaging, e)
          );
          return messaging;
        };
        const WindowMessagingInternalFactory = (container) => {
          const messaging = container.getProvider("messaging").getImmediate();
          const messagingInternal = {
            getToken: (options) => getToken$1(messaging, options),
          };
          return messagingInternal;
        };
        function registerMessagingInWindow() {
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(
              "messaging",
              WindowMessagingFactory,
              "PUBLIC" /* PUBLIC */
            )
          );
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__._registerComponent)(
            new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(
              "messaging-internal",
              WindowMessagingInternalFactory,
              "PRIVATE" /* PRIVATE */
            )
          );
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__.registerVersion)(
            name,
            version
          );
          // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
          (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__.registerVersion)(
            name,
            version,
            "esm2017"
          );
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Checks if all required APIs exist in the browser.
         * @returns a Promise that resolves to a boolean.
         *
         * @public
         */
        async function isWindowSupported() {
          try {
            // This throws if open() is unsupported, so adding it to the conditional
            // statement below can cause an uncaught error.
            await (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_3__.validateIndexedDBOpenable)();
          } catch (e) {
            return false;
          }
          // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing
          // might be prohibited to run. In these contexts, an error would be thrown during the messaging
          // instantiating phase, informing the developers to import/call isSupported for special handling.
          return (
            typeof window !== "undefined" &&
            (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_3__.isIndexedDBAvailable)() &&
            (0,
              _firebase_util__WEBPACK_IMPORTED_MODULE_3__.areCookiesEnabled)() &&
            "serviceWorker" in navigator &&
            "PushManager" in window &&
            "Notification" in window &&
            "fetch" in window &&
            ServiceWorkerRegistration.prototype.hasOwnProperty(
              "showNotification"
            ) &&
            PushSubscription.prototype.hasOwnProperty("getKey")
          );
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        async function deleteToken$1(messaging) {
          if (!navigator) {
            throw ERROR_FACTORY.create(
              "only-available-in-window" /* AVAILABLE_IN_WINDOW */
            );
          }
          if (!messaging.swRegistration) {
            await registerDefaultSw(messaging);
          }
          return deleteTokenInternal(messaging);
        }

        /**
         * @license
         * Copyright 2020 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        function onMessage$1(messaging, nextOrObserver) {
          if (!navigator) {
            throw ERROR_FACTORY.create(
              "only-available-in-window" /* AVAILABLE_IN_WINDOW */
            );
          }
          messaging.onMessageHandler = nextOrObserver;
          return () => {
            messaging.onMessageHandler = null;
          };
        }

        /**
         * @license
         * Copyright 2017 Google LLC
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        /**
         * Retrieves a Firebase Cloud Messaging instance.
         *
         * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.
         *
         * @public
         */
        function getMessagingInWindow(
          app = (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__.getApp)()
        ) {
          // Conscious decision to make this async check non-blocking during the messaging instance
          // initialization phase for performance consideration. An error would be thrown latter for
          // developer's information. Developers can then choose to import and call `isSupported` for
          // special handling.
          isWindowSupported().then(
            (isSupported) => {
              // If `isWindowSupported()` resolved, but returned false.
              if (!isSupported) {
                throw ERROR_FACTORY.create(
                  "unsupported-browser" /* UNSUPPORTED_BROWSER */
                );
              }
            },
            (_) => {
              // If `isWindowSupported()` rejected.
              throw ERROR_FACTORY.create(
                "indexed-db-unsupported" /* INDEXED_DB_UNSUPPORTED */
              );
            }
          );
          return (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__._getProvider)(
            (0, _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(
              app
            ),
            "messaging"
          ).getImmediate();
        }
        /**
         * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud
         * Messaging registration token that can be used to send push messages to that {@link Messaging}
         * instance.
         *
         * If a notification permission isn't already granted, this method asks the user for permission. The
         * returned promise rejects if the user does not allow the app to show notifications.
         *
         * @param messaging - The {@link Messaging} instance.
         * @param options - Provides an optional vapid key and an optinoal service worker registration
         *
         * @returns The promise resolves with an FCM registration token.
         *
         * @public
         */
        async function getToken(messaging, options) {
          messaging = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(
              messaging
            );
          return getToken$1(messaging, options);
        }
        /**
         * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes
         * the {@link Messaging} instance from the push subscription.
         *
         * @param messaging - The {@link Messaging} instance.
         *
         * @returns The promise resolves when the token has been successfully deleted.
         *
         * @public
         */
        function deleteToken(messaging) {
          messaging = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(
              messaging
            );
          return deleteToken$1(messaging);
        }
        /**
         * When a push message is received and the user is currently on a page for your origin, the
         * message is passed to the page and an `onMessage()` event is dispatched with the payload of
         * the push message.
         *
         *
         * @param messaging - The {@link Messaging} instance.
         * @param nextOrObserver - This function, or observer object with `next` defined,
         *     is called when a message is received and the user is currently viewing your page.
         * @returns To stop listening for messages execute this returned function.
         *
         * @public
         */
        function onMessage(messaging, nextOrObserver) {
          messaging = (0,
            _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(
              messaging
            );
          return onMessage$1(messaging, nextOrObserver);
        }

        /**
         * Firebase Cloud Messaging
         *
         * @packageDocumentation
         */
        registerMessagingInWindow();

        //# sourceMappingURL=index.esm2017.js.map

        /***/
      },

    /***/ "./node_modules/axios/lib/adapters/adapters.js":
      /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./http.js */ "./node_modules/axios/lib/helpers/null.js"
          );
        /* harmony import */ var _xhr_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );

        const knownAdapters = {
          http: _http_js__WEBPACK_IMPORTED_MODULE_0__["default"],
          xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_1__["default"],
        };

        _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(
          knownAdapters,
          (fn, value) => {
            if (fn) {
              try {
                Object.defineProperty(fn, "name", { value });
              } catch (e) {
                // eslint-disable-next-line no-empty
              }
              Object.defineProperty(fn, "adapterName", { value });
            }
          }
        );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = {
          getAdapter: (adapters) => {
            adapters = _utils_js__WEBPACK_IMPORTED_MODULE_2__[
              "default"
            ].isArray(adapters)
              ? adapters
              : [adapters];

            const { length } = adapters;
            let nameOrAdapter;
            let adapter;

            for (let i = 0; i < length; i++) {
              nameOrAdapter = adapters[i];
              if (
                (adapter = _utils_js__WEBPACK_IMPORTED_MODULE_2__[
                  "default"
                ].isString(nameOrAdapter)
                  ? knownAdapters[nameOrAdapter.toLowerCase()]
                  : nameOrAdapter)
              ) {
                break;
              }
            }

            if (!adapter) {
              if (adapter === false) {
                throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__[
                  "default"
                ](
                  `Adapter ${nameOrAdapter} is not supported by the environment`,
                  "ERR_NOT_SUPPORT"
                );
              }

              throw new Error(
                _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].hasOwnProp(
                  knownAdapters,
                  nameOrAdapter
                )
                  ? `Adapter '${nameOrAdapter}' is not available in the build`
                  : `Unknown adapter '${nameOrAdapter}'`
              );
            }

            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFunction(
                adapter
              )
            ) {
              throw new TypeError("adapter is not a function");
            }

            return adapter;
          },
          adapters: knownAdapters,
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/adapters/xhr.js":
      /*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js"
          );
        /* harmony import */ var _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ./../helpers/cookies.js */ "./node_modules/axios/lib/helpers/cookies.js"
          );
        /* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js"
          );
        /* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js"
          );
        /* harmony import */ var _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ./../helpers/isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js"
          );
        /* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );
        /* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__ =
          __webpack_require__(
            /*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/browser/index.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );
        /* harmony import */ var _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../helpers/speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js"
          );

        function progressEventReducer(listener, isDownloadStream) {
          let bytesNotified = 0;
          const _speedometer = (0,
            _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
              50,
              250
            );

          return (e) => {
            const loaded = e.loaded;
            const total = e.lengthComputable ? e.total : undefined;
            const progressBytes = loaded - bytesNotified;
            const rate = _speedometer(progressBytes);
            const inRange = loaded <= total;

            bytesNotified = loaded;

            const data = {
              loaded,
              total,
              progress: total ? loaded / total : undefined,
              bytes: progressBytes,
              rate: rate ? rate : undefined,
              estimated:
                rate && total && inRange ? (total - loaded) / rate : undefined,
              event: e,
            };

            data[isDownloadStream ? "download" : "upload"] = true;

            listener(data);
          };
        }

        const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          isXHRAdapterSupported &&
          function (config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
              let requestData = config.data;
              const requestHeaders =
                _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"]
                  .from(config.headers)
                  .normalize();
              const responseType = config.responseType;
              let onCanceled;
              function done() {
                if (config.cancelToken) {
                  config.cancelToken.unsubscribe(onCanceled);
                }

                if (config.signal) {
                  config.signal.removeEventListener("abort", onCanceled);
                }
              }

              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFormData(
                  requestData
                ) &&
                (_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"]
                  .isStandardBrowserEnv ||
                  _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"]
                    .isStandardBrowserWebWorkerEnv)
              ) {
                requestHeaders.setContentType(false); // Let the browser set it
              }

              let request = new XMLHttpRequest();

              // HTTP basic authentication
              if (config.auth) {
                const username = config.auth.username || "";
                const password = config.auth.password
                  ? unescape(encodeURIComponent(config.auth.password))
                  : "";
                requestHeaders.set(
                  "Authorization",
                  "Basic " + btoa(username + ":" + password)
                );
              }

              const fullPath = (0,
                _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"])(
                  config.baseURL,
                  config.url
                );

              request.open(
                config.method.toUpperCase(),
                (0,
                  _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__["default"])(
                    fullPath,
                    config.params,
                    config.paramsSerializer
                  ),
                true
              );

              // Set the request timeout in MS
              request.timeout = config.timeout;

              function onloadend() {
                if (!request) {
                  return;
                }
                // Prepare the response
                const responseHeaders =
                  _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
                    "default"
                  ].from(
                    "getAllResponseHeaders" in request &&
                    request.getAllResponseHeaders()
                  );
                const responseData =
                  !responseType ||
                    responseType === "text" ||
                    responseType === "json"
                    ? request.responseText
                    : request.response;
                const response = {
                  data: responseData,
                  status: request.status,
                  statusText: request.statusText,
                  headers: responseHeaders,
                  config,
                  request,
                };

                (0, _core_settle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(
                  function _resolve(value) {
                    resolve(value);
                    done();
                  },
                  function _reject(err) {
                    reject(err);
                    done();
                  },
                  response
                );

                // Clean up request
                request = null;
              }

              if ("onloadend" in request) {
                // Use onloadend if available
                request.onloadend = onloadend;
              } else {
                // Listen for ready state to emulate onloadend
                request.onreadystatechange = function handleLoad() {
                  if (!request || request.readyState !== 4) {
                    return;
                  }

                  // The request errored out and we didn't get a response, this will be
                  // handled by onerror instead
                  // With one exception: request that using file: protocol, most browsers
                  // will return status as 0 even though it's a successful request
                  if (
                    request.status === 0 &&
                    !(
                      request.responseURL &&
                      request.responseURL.indexOf("file:") === 0
                    )
                  ) {
                    return;
                  }
                  // readystate handler is calling before onerror or ontimeout handlers,
                  // so we should call onloadend on the next 'tick'
                  setTimeout(onloadend);
                };
              }

              // Handle browser request cancellation (as opposed to a manual cancellation)
              request.onabort = function handleAbort() {
                if (!request) {
                  return;
                }

                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    "Request aborted",
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].ECONNABORTED,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Handle low level network errors
              request.onerror = function handleError() {
                // Real errors are hidden from us by the browser
                // onerror should only fire if it's a network error
                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    "Network Error",
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].ERR_NETWORK,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Handle timeout
              request.ontimeout = function handleTimeout() {
                let timeoutErrorMessage = config.timeout
                  ? "timeout of " + config.timeout + "ms exceeded"
                  : "timeout exceeded";
                const transitional =
                  config.transitional ||
                  _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__[
                  "default"
                  ];
                if (config.timeoutErrorMessage) {
                  timeoutErrorMessage = config.timeoutErrorMessage;
                }
                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    timeoutErrorMessage,
                    transitional.clarifyTimeoutError
                      ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                        "default"
                      ].ETIMEDOUT
                      : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                        "default"
                      ].ECONNABORTED,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Add xsrf header
              // This is only done if running in a standard browser environment.
              // Specifically not if we're in a web worker, or react-native.
              if (
                _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"]
                  .isStandardBrowserEnv
              ) {
                // Add xsrf header
                const xsrfValue =
                  (config.withCredentials ||
                    (0,
                      _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__[
                      "default"
                      ])(fullPath)) &&
                  config.xsrfCookieName &&
                  _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__[
                    "default"
                  ].read(config.xsrfCookieName);

                if (xsrfValue) {
                  requestHeaders.set(config.xsrfHeaderName, xsrfValue);
                }
              }

              // Remove Content-Type if data is undefined
              requestData === undefined && requestHeaders.setContentType(null);

              // Add headers to the request
              if ("setRequestHeader" in request) {
                _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(
                  requestHeaders.toJSON(),
                  function setRequestHeader(val, key) {
                    request.setRequestHeader(key, val);
                  }
                );
              }

              // Add withCredentials to request if needed
              if (
                !_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isUndefined(
                  config.withCredentials
                )
              ) {
                request.withCredentials = !!config.withCredentials;
              }

              // Add responseType to request if needed
              if (responseType && responseType !== "json") {
                request.responseType = config.responseType;
              }

              // Handle progress if needed
              if (typeof config.onDownloadProgress === "function") {
                request.addEventListener(
                  "progress",
                  progressEventReducer(config.onDownloadProgress, true)
                );
              }

              // Not all browsers support upload events
              if (
                typeof config.onUploadProgress === "function" &&
                request.upload
              ) {
                request.upload.addEventListener(
                  "progress",
                  progressEventReducer(config.onUploadProgress)
                );
              }

              if (config.cancelToken || config.signal) {
                // Handle cancellation
                // eslint-disable-next-line func-names
                onCanceled = (cancel) => {
                  if (!request) {
                    return;
                  }
                  reject(
                    !cancel || cancel.type
                      ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__[
                        "default"
                      ](null, config, request)
                      : cancel
                  );
                  request.abort();
                  request = null;
                };

                config.cancelToken && config.cancelToken.subscribe(onCanceled);
                if (config.signal) {
                  config.signal.aborted
                    ? onCanceled()
                    : config.signal.addEventListener("abort", onCanceled);
                }
              }

              const protocol = (0,
                _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__[
                "default"
                ])(fullPath);

              if (
                protocol &&
                _platform_index_js__WEBPACK_IMPORTED_MODULE_3__[
                  "default"
                ].protocols.indexOf(protocol) === -1
              ) {
                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    "Unsupported protocol " + protocol + ":",
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].ERR_BAD_REQUEST,
                    config
                  )
                );
                return;
              }

              // Send the request
              request.send(requestData || null);
            });
          };

        /***/
      },

    /***/ "./node_modules/axios/lib/axios.js":
      /*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js"
          );
        /* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js"
          );
        /* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js"
          );
        /* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js"
          );
        /* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__ =
          __webpack_require__(
            /*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js"
          );
        /* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );
        /* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js"
          );
        /* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js"
          );
        /* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ./env/data.js */ "./node_modules/axios/lib/env/data.js"
          );
        /* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js"
          );
        /* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__ =
          __webpack_require__(
            /*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__ =
          __webpack_require__(
            /*! ./core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );
        /* harmony import */ var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_15__ =
          __webpack_require__(
            /*! ./helpers/HttpStatusCode.js */ "./node_modules/axios/lib/helpers/HttpStatusCode.js"
          );

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         *
         * @returns {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
          ](defaultConfig);
          const instance = (0,
            _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
              _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype
                .request,
              context
            );

          // Copy axios.prototype to instance
          _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(
            instance,
            _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype,
            context,
            { allOwnKeys: true }
          );

          // Copy context to instance
          _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(
            instance,
            context,
            null,
            { allOwnKeys: true }
          );

          // Factory for creating new instances
          instance.create = function create(instanceConfig) {
            return createInstance(
              (0, _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
                defaultConfig,
                instanceConfig
              )
            );
          };

          return instance;
        }

        // Create the default instance to be exported
        const axios = createInstance(
          _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]
        );

        // Expose Axios class to allow class inheritance
        axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];

        // Expose Cancel & CancelToken
        axios.CanceledError =
          _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__["default"];
        axios.CancelToken =
          _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__["default"];
        axios.isCancel =
          _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__["default"];
        axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_8__.VERSION;
        axios.toFormData =
          _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__["default"];

        // Expose AxiosError class
        axios.AxiosError =
          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__["default"];

        // alias for CanceledError for backward compatibility
        axios.Cancel = axios.CanceledError;

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };

        axios.spread =
          _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__["default"];

        // Expose isAxiosError
        axios.isAxiosError =
          _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__["default"];

        // Expose mergeConfig
        axios.mergeConfig =
          _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];

        axios.AxiosHeaders =
          _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__["default"];

        axios.formToJSON = (thing) =>
          (0,
            _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__["default"])(
              _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isHTMLForm(thing)
                ? new FormData(thing)
                : thing
            );

        axios.HttpStatusCode =
          _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_15__["default"];

        axios.default = axios;

        // this module should only have a default export
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = axios;

        /***/
      },

    /***/ "./node_modules/axios/lib/cancel/CancelToken.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @param {Function} executor The executor function.
         *
         * @returns {CancelToken}
         */
        class CancelToken {
          constructor(executor) {
            if (typeof executor !== "function") {
              throw new TypeError("executor must be a function.");
            }

            let resolvePromise;

            this.promise = new Promise(function promiseExecutor(resolve) {
              resolvePromise = resolve;
            });

            const token = this;

            // eslint-disable-next-line func-names
            this.promise.then((cancel) => {
              if (!token._listeners) return;

              let i = token._listeners.length;

              while (i-- > 0) {
                token._listeners[i](cancel);
              }
              token._listeners = null;
            });

            // eslint-disable-next-line func-names
            this.promise.then = (onfulfilled) => {
              let _resolve;
              // eslint-disable-next-line func-names
              const promise = new Promise((resolve) => {
                token.subscribe(resolve);
                _resolve = resolve;
              }).then(onfulfilled);

              promise.cancel = function reject() {
                token.unsubscribe(_resolve);
              };

              return promise;
            };

            executor(function cancel(message, config, request) {
              if (token.reason) {
                // Cancellation has already been requested
                return;
              }

              token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ](message, config, request);
              resolvePromise(token.reason);
            });
          }

          /**
           * Throws a `CanceledError` if cancellation has been requested.
           */
          throwIfRequested() {
            if (this.reason) {
              throw this.reason;
            }
          }

          /**
           * Subscribe to the cancel signal
           */

          subscribe(listener) {
            if (this.reason) {
              listener(this.reason);
              return;
            }

            if (this._listeners) {
              this._listeners.push(listener);
            } else {
              this._listeners = [listener];
            }
          }

          /**
           * Unsubscribe from the cancel signal
           */

          unsubscribe(listener) {
            if (!this._listeners) {
              return;
            }
            const index = this._listeners.indexOf(listener);
            if (index !== -1) {
              this._listeners.splice(index, 1);
            }
          }

          /**
           * Returns an object that contains a new `CancelToken` and a function that, when called,
           * cancels the `CancelToken`.
           */
          static source() {
            let cancel;
            const token = new CancelToken(function executor(c) {
              cancel = c;
            });
            return {
              token,
              cancel,
            };
          }
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          CancelToken;

        /***/
      },

    /***/ "./node_modules/axios/lib/cancel/CanceledError.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * A `CanceledError` is an object that is thrown when an operation is canceled.
         *
         * @param {string=} message The message.
         * @param {Object=} config The config.
         * @param {Object=} request The request.
         *
         * @returns {CanceledError} The created error.
         */
        function CanceledError(message, config, request) {
          // eslint-disable-next-line no-eq-null,eqeqeq
          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(
            this,
            message == null ? "canceled" : message,
            _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]
              .ERR_CANCELED,
            config,
            request
          );
          this.name = "CanceledError";
        }

        _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(
          CanceledError,
          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"],
          {
            __CANCEL__: true,
          }
        );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          CanceledError;

        /***/
      },

    /***/ "./node_modules/axios/lib/cancel/isCancel.js":
      /*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ isCancel,
          /* harmony export */
        });

        function isCancel(value) {
          return !!(value && value.__CANCEL__);
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/Axios.js":
      /*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js"
          );
        /* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js"
          );
        /* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js"
          );
        /* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js"
          );
        /* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js"
          );
        /* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js"
          );
        /* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );

        const validators =
          _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            .validators;

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         *
         * @return {Axios} A new instance of Axios
         */
        class Axios {
          constructor(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
              request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](),
              response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](),
            };
          }

          /**
           * Dispatch a request
           *
           * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
           * @param {?Object} config
           *
           * @returns {Promise} The Promise to be fulfilled
           */
          request(configOrUrl, config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof configOrUrl === "string") {
              config = config || {};
              config.url = configOrUrl;
            } else {
              config = configOrUrl || {};
            }

            config = (0,
              _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
                this.defaults,
                config
              );

            const { transitional, paramsSerializer, headers } = config;

            if (transitional !== undefined) {
              _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].assertOptions(
                transitional,
                {
                  silentJSONParsing: validators.transitional(
                    validators.boolean
                  ),
                  forcedJSONParsing: validators.transitional(
                    validators.boolean
                  ),
                  clarifyTimeoutError: validators.transitional(
                    validators.boolean
                  ),
                },
                false
              );
            }

            if (paramsSerializer != null) {
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isFunction(
                  paramsSerializer
                )
              ) {
                config.paramsSerializer = {
                  serialize: paramsSerializer,
                };
              } else {
                _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].assertOptions(
                  paramsSerializer,
                  {
                    encode: validators.function,
                    serialize: validators.function,
                  },
                  true
                );
              }
            }

            // Set config.method
            config.method = (
              config.method ||
              this.defaults.method ||
              "get"
            ).toLowerCase();

            let contextHeaders;

            // Flatten headers
            contextHeaders =
              headers &&
              _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].merge(
                headers.common,
                headers[config.method]
              );

            contextHeaders &&
              _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
                ["delete", "get", "head", "post", "put", "patch", "common"],
                (method) => {
                  delete headers[method];
                }
              );

            config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__[
              "default"
            ].concat(contextHeaders, headers);

            // filter out skipped interceptors
            const requestInterceptorChain = [];
            let synchronousRequestInterceptors = true;
            this.interceptors.request.forEach(
              function unshiftRequestInterceptors(interceptor) {
                if (
                  typeof interceptor.runWhen === "function" &&
                  interceptor.runWhen(config) === false
                ) {
                  return;
                }

                synchronousRequestInterceptors =
                  synchronousRequestInterceptors && interceptor.synchronous;

                requestInterceptorChain.unshift(
                  interceptor.fulfilled,
                  interceptor.rejected
                );
              }
            );

            const responseInterceptorChain = [];
            this.interceptors.response.forEach(
              function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(
                  interceptor.fulfilled,
                  interceptor.rejected
                );
              }
            );

            let promise;
            let i = 0;
            let len;

            if (!synchronousRequestInterceptors) {
              const chain = [
                _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__[
                  "default"
                ].bind(this),
                undefined,
              ];
              chain.unshift.apply(chain, requestInterceptorChain);
              chain.push.apply(chain, responseInterceptorChain);
              len = chain.length;

              promise = Promise.resolve(config);

              while (i < len) {
                promise = promise.then(chain[i++], chain[i++]);
              }

              return promise;
            }

            len = requestInterceptorChain.length;

            let newConfig = config;

            i = 0;

            while (i < len) {
              const onFulfilled = requestInterceptorChain[i++];
              const onRejected = requestInterceptorChain[i++];
              try {
                newConfig = onFulfilled(newConfig);
              } catch (error) {
                onRejected.call(this, error);
                break;
              }
            }

            try {
              promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__[
                "default"
              ].call(this, newConfig);
            } catch (error) {
              return Promise.reject(error);
            }

            i = 0;
            len = responseInterceptorChain.length;

            while (i < len) {
              promise = promise.then(
                responseInterceptorChain[i++],
                responseInterceptorChain[i++]
              );
            }

            return promise;
          }

          getUri(config) {
            config = (0,
              _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
                this.defaults,
                config
              );
            const fullPath = (0,
              _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__["default"])(
                config.baseURL,
                config.url
              );
            return (0,
              _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__["default"])(
                fullPath,
                config.params,
                config.paramsSerializer
              );
          }
        }

        // Provide aliases for supported request methods
        _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
          ["delete", "get", "head", "options"],
          function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
              return this.request(
                (0, _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
                  config || {},
                  {
                    method,
                    url,
                    data: (config || {}).data,
                  }
                )
              );
            };
          }
        );

        _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
          ["post", "put", "patch"],
          function forEachMethodWithData(method) {
            /*eslint func-names:0*/

            function generateHTTPMethod(isForm) {
              return function httpMethod(url, data, config) {
                return this.request(
                  (0, _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
                    config || {},
                    {
                      method,
                      headers: isForm
                        ? {
                          "Content-Type": "multipart/form-data",
                        }
                        : {},
                      url,
                      data,
                    }
                  )
                );
              };
            }

            Axios.prototype[method] = generateHTTPMethod();

            Axios.prototype[method + "Form"] = generateHTTPMethod(true);
          }
        );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = Axios;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/AxiosError.js":
      /*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [config] The config.
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         *
         * @returns {Error} The created error.
         */
        function AxiosError(message, code, config, request, response) {
          Error.call(this);

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          } else {
            this.stack = new Error().stack;
          }

          this.message = message;
          this.name = "AxiosError";
          code && (this.code = code);
          config && (this.config = config);
          request && (this.request = request);
          response && (this.response = response);
        }

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(
          AxiosError,
          Error,
          {
            toJSON: function toJSON() {
              return {
                // Standard
                message: this.message,
                name: this.name,
                // Microsoft
                description: this.description,
                number: this.number,
                // Mozilla
                fileName: this.fileName,
                lineNumber: this.lineNumber,
                columnNumber: this.columnNumber,
                stack: this.stack,
                // Axios
                config: _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].toJSONObject(this.config),
                code: this.code,
                status:
                  this.response && this.response.status
                    ? this.response.status
                    : null,
              };
            },
          }
        );

        const prototype = AxiosError.prototype;
        const descriptors = {};

        [
          "ERR_BAD_OPTION_VALUE",
          "ERR_BAD_OPTION",
          "ECONNABORTED",
          "ETIMEDOUT",
          "ERR_NETWORK",
          "ERR_FR_TOO_MANY_REDIRECTS",
          "ERR_DEPRECATED",
          "ERR_BAD_RESPONSE",
          "ERR_BAD_REQUEST",
          "ERR_CANCELED",
          "ERR_NOT_SUPPORT",
          "ERR_INVALID_URL",
          // eslint-disable-next-line func-names
        ].forEach((code) => {
          descriptors[code] = { value: code };
        });

        Object.defineProperties(AxiosError, descriptors);
        Object.defineProperty(prototype, "isAxiosError", { value: true });

        // eslint-disable-next-line func-names
        AxiosError.from = (
          error,
          code,
          config,
          request,
          response,
          customProps
        ) => {
          const axiosError = Object.create(prototype);

          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(
            error,
            axiosError,
            function filter(obj) {
              return obj !== Error.prototype;
            },
            (prop) => {
              return prop !== "isAxiosError";
            }
          );

          AxiosError.call(
            axiosError,
            error.message,
            code,
            config,
            request,
            response
          );

          axiosError.cause = error;

          axiosError.name = error.name;

          customProps && Object.assign(axiosError, customProps);

          return axiosError;
        };

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          AxiosError;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
      /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js"
          );

        const $internals = Symbol("internals");

        function normalizeHeader(header) {
          return header && String(header).trim().toLowerCase();
        }

        function normalizeValue(value) {
          if (value === false || value == null) {
            return value;
          }

          return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
            value
          )
            ? value.map(normalizeValue)
            : String(value);
        }

        function parseTokens(str) {
          const tokens = Object.create(null);
          const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
          let match;

          while ((match = tokensRE.exec(str))) {
            tokens[match[1]] = match[2];
          }

          return tokens;
        }

        const isValidHeaderName = (str) =>
          /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

        function matchHeaderValue(
          context,
          value,
          header,
          filter,
          isHeaderNameFilter
        ) {
          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)
          ) {
            return filter.call(this, value, header);
          }

          if (isHeaderNameFilter) {
            value = header;
          }

          if (
            !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)
          )
            return;

          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)
          ) {
            return value.indexOf(filter) !== -1;
          }

          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)
          ) {
            return filter.test(value);
          }
        }

        function formatHeader(header) {
          return header
            .trim()
            .toLowerCase()
            .replace(/([a-z\d])(\w*)/g, (w, char, str) => {
              return char.toUpperCase() + str;
            });
        }

        function buildAccessors(obj, header) {
          const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
          ].toCamelCase(" " + header);

          ["get", "set", "has"].forEach((methodName) => {
            Object.defineProperty(obj, methodName + accessorName, {
              value: function (arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
              },
              configurable: true,
            });
          });
        }

        class AxiosHeaders {
          constructor(headers) {
            headers && this.set(headers);
          }

          set(header, valueOrRewrite, rewrite) {
            const self = this;

            function setHeader(_value, _header, _rewrite) {
              const lHeader = normalizeHeader(_header);

              if (!lHeader) {
                throw new Error("header name must be a non-empty string");
              }

              const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].findKey(self, lHeader);

              if (
                !key ||
                self[key] === undefined ||
                _rewrite === true ||
                (_rewrite === undefined && self[key] !== false)
              ) {
                self[key || _header] = normalizeValue(_value);
              }
            }

            const setHeaders = (headers, _rewrite) =>
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
                headers,
                (_value, _header) => setHeader(_value, _header, _rewrite)
              );

            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
                header
              ) ||
              header instanceof this.constructor
            ) {
              setHeaders(header, valueOrRewrite);
            } else if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                header
              ) &&
              (header = header.trim()) &&
              !isValidHeaderName(header)
            ) {
              setHeaders(
                (0,
                  _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                  ])(header),
                valueOrRewrite
              );
            } else {
              header != null && setHeader(valueOrRewrite, header, rewrite);
            }

            return this;
          }

          get(header, parser) {
            header = normalizeHeader(header);

            if (header) {
              const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].findKey(this, header);

              if (key) {
                const value = this[key];

                if (!parser) {
                  return value;
                }

                if (parser === true) {
                  return parseTokens(value);
                }

                if (
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
                    parser
                  )
                ) {
                  return parser.call(this, value, key);
                }

                if (
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(
                    parser
                  )
                ) {
                  return parser.exec(value);
                }

                throw new TypeError("parser must be boolean|regexp|function");
              }
            }
          }

          has(header, matcher) {
            header = normalizeHeader(header);

            if (header) {
              const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].findKey(this, header);

              return !!(
                key &&
                this[key] !== undefined &&
                (!matcher || matchHeaderValue(this, this[key], key, matcher))
              );
            }

            return false;
          }

          delete(header, matcher) {
            const self = this;
            let deleted = false;

            function deleteHeader(_header) {
              _header = normalizeHeader(_header);

              if (_header) {
                const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].findKey(self, _header);

                if (
                  key &&
                  (!matcher || matchHeaderValue(self, self[key], key, matcher))
                ) {
                  delete self[key];

                  deleted = true;
                }
              }
            }

            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)
            ) {
              header.forEach(deleteHeader);
            } else {
              deleteHeader(header);
            }

            return deleted;
          }

          clear(matcher) {
            const keys = Object.keys(this);
            let i = keys.length;
            let deleted = false;

            while (i--) {
              const key = keys[i];
              if (
                !matcher ||
                matchHeaderValue(this, this[key], key, matcher, true)
              ) {
                delete this[key];
                deleted = true;
              }
            }

            return deleted;
          }

          normalize(format) {
            const self = this;
            const headers = {};

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              this,
              (value, header) => {
                const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].findKey(headers, header);

                if (key) {
                  self[key] = normalizeValue(value);
                  delete self[header];
                  return;
                }

                const normalized = format
                  ? formatHeader(header)
                  : String(header).trim();

                if (normalized !== header) {
                  delete self[header];
                }

                self[normalized] = normalizeValue(value);

                headers[normalized] = true;
              }
            );

            return this;
          }

          concat(...targets) {
            return this.constructor.concat(this, ...targets);
          }

          toJSON(asStrings) {
            const obj = Object.create(null);

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              this,
              (value, header) => {
                value != null &&
                  value !== false &&
                  (obj[header] =
                    asStrings &&
                      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
                        value
                      )
                      ? value.join(", ")
                      : value);
              }
            );

            return obj;
          }

          [Symbol.iterator]() {
            return Object.entries(this.toJSON())[Symbol.iterator]();
          }

          toString() {
            return Object.entries(this.toJSON())
              .map(([header, value]) => header + ": " + value)
              .join("\n");
          }

          get [Symbol.toStringTag]() {
            return "AxiosHeaders";
          }

          static from(thing) {
            return thing instanceof this ? thing : new this(thing);
          }

          static concat(first, ...targets) {
            const computed = new this(first);

            targets.forEach((target) => computed.set(target));

            return computed;
          }

          static accessor(header) {
            const internals =
              (this[$internals] =
                this[$internals] =
                {
                  accessors: {},
                });

            const accessors = internals.accessors;
            const prototype = this.prototype;

            function defineAccessor(_header) {
              const lHeader = normalizeHeader(_header);

              if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
              }
            }

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)
              ? header.forEach(defineAccessor)
              : defineAccessor(header);

            return this;
          }
        }

        AxiosHeaders.accessor([
          "Content-Type",
          "Content-Length",
          "Accept",
          "Accept-Encoding",
          "User-Agent",
          "Authorization",
        ]);

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(
          AxiosHeaders.prototype
        );
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(
          AxiosHeaders
        );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          AxiosHeaders;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/InterceptorManager.js":
      /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        class InterceptorManager {
          constructor() {
            this.handlers = [];
          }

          /**
           * Add a new interceptor to the stack
           *
           * @param {Function} fulfilled The function to handle `then` for a `Promise`
           * @param {Function} rejected The function to handle `reject` for a `Promise`
           *
           * @return {Number} An ID used to remove interceptor later
           */
          use(fulfilled, rejected, options) {
            this.handlers.push({
              fulfilled,
              rejected,
              synchronous: options ? options.synchronous : false,
              runWhen: options ? options.runWhen : null,
            });
            return this.handlers.length - 1;
          }

          /**
           * Remove an interceptor from the stack
           *
           * @param {Number} id The ID that was returned by `use`
           *
           * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
           */
          eject(id) {
            if (this.handlers[id]) {
              this.handlers[id] = null;
            }
          }

          /**
           * Clear all interceptors from the stack
           *
           * @returns {void}
           */
          clear() {
            if (this.handlers) {
              this.handlers = [];
            }
          }

          /**
           * Iterate over all the registered interceptors
           *
           * This method is particularly useful for skipping over any
           * interceptors that may have become `null` calling `eject`.
           *
           * @param {Function} fn The function to call for each interceptor
           *
           * @returns {void}
           */
          forEach(fn) {
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              this.handlers,
              function forEachHandler(h) {
                if (h !== null) {
                  fn(h);
                }
              }
            );
          }
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          InterceptorManager;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/buildFullPath.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ buildFullPath,
          /* harmony export */
        });
        /* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js"
          );
        /* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js"
          );

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         *
         * @returns {string} The combined full path
         */
        function buildFullPath(baseURL, requestedURL) {
          if (
            baseURL &&
            !(0,
              _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
                requestedURL
              )
          ) {
            return (0,
              _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
                baseURL,
                requestedURL
              );
          }
          return requestedURL;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/dispatchRequest.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ dispatchRequest,
          /* harmony export */
        });
        /* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js"
          );
        /* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js"
          );
        /* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js"
          );
        /* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );
        /* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js"
          );

        /**
         * Throws a `CanceledError` if cancellation has been requested.
         *
         * @param {Object} config The config that is to be used for the request
         *
         * @returns {void}
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }

          if (config.signal && config.signal.aborted) {
            throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
            ](null, config);
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         *
         * @returns {Promise} The Promise to be fulfilled
         */
        function dispatchRequest(config) {
          throwIfCancellationRequested(config);

          config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
            "default"
          ].from(config.headers);

          // Transform request data
          config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__[
            "default"
          ].call(config, config.transformRequest);

          if (["post", "put", "patch"].indexOf(config.method) !== -1) {
            config.headers.setContentType(
              "application/x-www-form-urlencoded",
              false
            );
          }

          const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__[
            "default"
          ].getAdapter(
            config.adapter ||
            _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].adapter
          );

          return adapter(config).then(
            function onAdapterResolution(response) {
              throwIfCancellationRequested(config);

              // Transform response data
              response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__[
                "default"
              ].call(config, config.transformResponse, response);

              response.headers =
                _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ].from(response.headers);

              return response;
            },
            function onAdapterRejection(reason) {
              if (
                !(0,
                  _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__["default"])(
                    reason
                  )
              ) {
                throwIfCancellationRequested(config);

                // Transform response data
                if (reason && reason.response) {
                  reason.response.data =
                    _transformData_js__WEBPACK_IMPORTED_MODULE_2__[
                      "default"
                    ].call(config, config.transformResponse, reason.response);
                  reason.response.headers =
                    _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
                      "default"
                    ].from(reason.response.headers);
                }
              }

              return Promise.reject(reason);
            }
          );
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/mergeConfig.js":
      /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ mergeConfig,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );

        const headersToObject = (thing) =>
          thing instanceof
            _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            ? thing.toJSON()
            : thing;

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         *
         * @returns {Object} New object resulting from merging config2 to config1
         */
        function mergeConfig(config1, config2) {
          // eslint-disable-next-line no-param-reassign
          config2 = config2 || {};
          const config = {};

          function getMergedValue(target, source, caseless) {
            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(
                target
              ) &&
              _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(
                source
              )
            ) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ].merge.call({ caseless }, target, source);
            } else if (
              _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(
                source
              )
            ) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge(
                {},
                source
              );
            } else if (
              _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(source)
            ) {
              return source.slice();
            }
            return source;
          }

          // eslint-disable-next-line consistent-return
          function mergeDeepProperties(a, b, caseless) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)
            ) {
              return getMergedValue(a, b, caseless);
            } else if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)
            ) {
              return getMergedValue(undefined, a, caseless);
            }
          }

          // eslint-disable-next-line consistent-return
          function valueFromConfig2(a, b) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)
            ) {
              return getMergedValue(undefined, b);
            }
          }

          // eslint-disable-next-line consistent-return
          function defaultToConfig2(a, b) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)
            ) {
              return getMergedValue(undefined, b);
            } else if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)
            ) {
              return getMergedValue(undefined, a);
            }
          }

          // eslint-disable-next-line consistent-return
          function mergeDirectKeys(a, b, prop) {
            if (prop in config2) {
              return getMergedValue(a, b);
            } else if (prop in config1) {
              return getMergedValue(undefined, a);
            }
          }

          const mergeMap = {
            url: valueFromConfig2,
            method: valueFromConfig2,
            data: valueFromConfig2,
            baseURL: defaultToConfig2,
            transformRequest: defaultToConfig2,
            transformResponse: defaultToConfig2,
            paramsSerializer: defaultToConfig2,
            timeout: defaultToConfig2,
            timeoutMessage: defaultToConfig2,
            withCredentials: defaultToConfig2,
            adapter: defaultToConfig2,
            responseType: defaultToConfig2,
            xsrfCookieName: defaultToConfig2,
            xsrfHeaderName: defaultToConfig2,
            onUploadProgress: defaultToConfig2,
            onDownloadProgress: defaultToConfig2,
            decompress: defaultToConfig2,
            maxContentLength: defaultToConfig2,
            maxBodyLength: defaultToConfig2,
            beforeRedirect: defaultToConfig2,
            transport: defaultToConfig2,
            httpAgent: defaultToConfig2,
            httpsAgent: defaultToConfig2,
            cancelToken: defaultToConfig2,
            socketPath: defaultToConfig2,
            responseEncoding: defaultToConfig2,
            validateStatus: mergeDirectKeys,
            headers: (a, b) =>
              mergeDeepProperties(headersToObject(a), headersToObject(b), true),
          };

          _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].forEach(
            Object.keys(config1).concat(Object.keys(config2)),
            function computeConfigValue(prop) {
              const merge = mergeMap[prop] || mergeDeepProperties;
              const configValue = merge(config1[prop], config2[prop], prop);
              (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(
                configValue
              ) &&
                merge !== mergeDirectKeys) ||
                (config[prop] = configValue);
            }
          );

          return config;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/settle.js":
      /*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ settle,
          /* harmony export */
        });
        /* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         *
         * @returns {object} The response.
         */
        function settle(resolve, reject, response) {
          const validateStatus = response.config.validateStatus;
          if (
            !response.status ||
            !validateStatus ||
            validateStatus(response.status)
          ) {
            resolve(response);
          } else {
            reject(
              new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
                "Request failed with status code " + response.status,
                [
                  _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]
                    .ERR_BAD_REQUEST,
                  _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]
                    .ERR_BAD_RESPONSE,
                ][Math.floor(response.status / 100) - 4],
                response.config,
                response.request,
                response
              )
            );
          }
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/transformData.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ transformData,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );

        /**
         * Transform the data for a request or a response
         *
         * @param {Array|Function} fns A single function or Array of functions
         * @param {?Object} response The response object
         *
         * @returns {*} The resulting transformed data
         */
        function transformData(fns, response) {
          const config =
            this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__["default"];
          const context = response || config;
          const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
            "default"
          ].from(context.headers);
          let data = context.data;

          _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(
            fns,
            function transform(fn) {
              data = fn.call(
                config,
                data,
                headers.normalize(),
                response ? response.status : undefined
              );
            }
          );

          headers.normalize();

          return data;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/defaults/index.js":
      /*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js"
          );
        /* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );
        /* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/browser/index.js"
          );
        /* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js"
          );

        const DEFAULT_CONTENT_TYPE = {
          "Content-Type": undefined,
        };

        /**
         * It takes a string, tries to parse it, and if it fails, it returns the stringified version
         * of the input
         *
         * @param {any} rawValue - The value to be stringified.
         * @param {Function} parser - A function that parses a string into a JavaScript object.
         * @param {Function} encoder - A function that takes a value and returns a string.
         *
         * @returns {string} A stringified version of the rawValue.
         */
        function stringifySafely(rawValue, parser, encoder) {
          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)
          ) {
            try {
              (parser || JSON.parse)(rawValue);
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(
                rawValue
              );
            } catch (e) {
              if (e.name !== "SyntaxError") {
                throw e;
              }
            }
          }

          return (encoder || JSON.stringify)(rawValue);
        }

        const defaults = {
          transitional:
            _transitional_js__WEBPACK_IMPORTED_MODULE_1__["default"],

          adapter: ["xhr", "http"],

          transformRequest: [
            function transformRequest(data, headers) {
              const contentType = headers.getContentType() || "";
              const hasJSONContentType =
                contentType.indexOf("application/json") > -1;
              const isObjectPayload =
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(
                  data
                );

              if (
                isObjectPayload &&
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(
                  data
                )
              ) {
                data = new FormData(data);
              }

              const isFormData =
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(
                  data
                );

              if (isFormData) {
                if (!hasJSONContentType) {
                  return data;
                }
                return hasJSONContentType
                  ? JSON.stringify(
                    (0,
                      _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__[
                      "default"
                      ])(data)
                  )
                  : data;
              }

              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data)
              ) {
                return data;
              }
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].isArrayBufferView(data)
              ) {
                return data.buffer;
              }
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].isURLSearchParams(data)
              ) {
                headers.setContentType(
                  "application/x-www-form-urlencoded;charset=utf-8",
                  false
                );
                return data.toString();
              }

              let isFileList;

              if (isObjectPayload) {
                if (
                  contentType.indexOf("application/x-www-form-urlencoded") > -1
                ) {
                  return (0,
                    _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__[
                    "default"
                    ])(data, this.formSerializer).toString();
                }

                if (
                  (isFileList =
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                      "default"
                    ].isFileList(data)) ||
                  contentType.indexOf("multipart/form-data") > -1
                ) {
                  const _FormData = this.env && this.env.FormData;

                  return (0,
                    _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__[
                    "default"
                    ])(
                      isFileList ? { "files[]": data } : data,
                      _FormData && new _FormData(),
                      this.formSerializer
                    );
                }
              }

              if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return stringifySafely(data);
              }

              return data;
            },
          ],

          transformResponse: [
            function transformResponse(data) {
              const transitional = this.transitional || defaults.transitional;
              const forcedJSONParsing =
                transitional && transitional.forcedJSONParsing;
              const JSONRequested = this.responseType === "json";

              if (
                data &&
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                  data
                ) &&
                ((forcedJSONParsing && !this.responseType) || JSONRequested)
              ) {
                const silentJSONParsing =
                  transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;

                try {
                  return JSON.parse(data);
                } catch (e) {
                  if (strictJSONParsing) {
                    if (e.name === "SyntaxError") {
                      throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__[
                        "default"
                      ].from(
                        e,
                        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__[
                          "default"
                        ].ERR_BAD_RESPONSE,
                        this,
                        null,
                        this.response
                      );
                    }
                    throw e;
                  }
                }
              }

              return data;
            },
          ],

          /**
           * A timeout in milliseconds to abort a request. If set to 0 (default) a
           * timeout is not created.
           */
          timeout: 0,

          xsrfCookieName: "XSRF-TOKEN",
          xsrfHeaderName: "X-XSRF-TOKEN",

          maxContentLength: -1,
          maxBodyLength: -1,

          env: {
            FormData:
              _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes
                .FormData,
            Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"]
              .classes.Blob,
          },

          validateStatus: function validateStatus(status) {
            return status >= 200 && status < 300;
          },

          headers: {
            common: {
              Accept: "application/json, text/plain, */*",
            },
          },
        };

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
          ["delete", "get", "head"],
          function forEachMethodNoData(method) {
            defaults.headers[method] = {};
          }
        );

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
          ["post", "put", "patch"],
          function forEachMethodWithData(method) {
            defaults.headers[method] =
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(
                DEFAULT_CONTENT_TYPE
              );
          }
        );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          defaults;

        /***/
      },

    /***/ "./node_modules/axios/lib/defaults/transitional.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false,
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/env/data.js":
      /*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ VERSION: () => /* binding */ VERSION,
          /* harmony export */
        });
        const VERSION = "1.3.5";

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
      /*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );

        /**
         * It encodes a string by replacing all characters that are not in the unreserved set with
         * their percent-encoded equivalents
         *
         * @param {string} str - The string to encode.
         *
         * @returns {string} The encoded string.
         */
        function encode(str) {
          const charMap = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
            "%00": "\x00",
          };
          return encodeURIComponent(str).replace(
            /[!'()~]|%20|%00/g,
            function replacer(match) {
              return charMap[match];
            }
          );
        }

        /**
         * It takes a params object and converts it to a FormData object
         *
         * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
         * @param {Object<string, any>} options - The options object passed to the Axios constructor.
         *
         * @returns {void}
         */
        function AxiosURLSearchParams(params, options) {
          this._pairs = [];

          params &&
            (0, _toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
              params,
              this,
              options
            );
        }

        const prototype = AxiosURLSearchParams.prototype;

        prototype.append = function append(name, value) {
          this._pairs.push([name, value]);
        };

        prototype.toString = function toString(encoder) {
          const _encode = encoder
            ? function (value) {
              return encoder.call(this, value, encode);
            }
            : encode;

          return this._pairs
            .map(function each(pair) {
              return _encode(pair[0]) + "=" + _encode(pair[1]);
            }, "")
            .join("&");
        };

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          AxiosURLSearchParams;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/HttpStatusCode.js":
      /*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        const HttpStatusCode = {
          Continue: 100,
          SwitchingProtocols: 101,
          Processing: 102,
          EarlyHints: 103,
          Ok: 200,
          Created: 201,
          Accepted: 202,
          NonAuthoritativeInformation: 203,
          NoContent: 204,
          ResetContent: 205,
          PartialContent: 206,
          MultiStatus: 207,
          AlreadyReported: 208,
          ImUsed: 226,
          MultipleChoices: 300,
          MovedPermanently: 301,
          Found: 302,
          SeeOther: 303,
          NotModified: 304,
          UseProxy: 305,
          Unused: 306,
          TemporaryRedirect: 307,
          PermanentRedirect: 308,
          BadRequest: 400,
          Unauthorized: 401,
          PaymentRequired: 402,
          Forbidden: 403,
          NotFound: 404,
          MethodNotAllowed: 405,
          NotAcceptable: 406,
          ProxyAuthenticationRequired: 407,
          RequestTimeout: 408,
          Conflict: 409,
          Gone: 410,
          LengthRequired: 411,
          PreconditionFailed: 412,
          PayloadTooLarge: 413,
          UriTooLong: 414,
          UnsupportedMediaType: 415,
          RangeNotSatisfiable: 416,
          ExpectationFailed: 417,
          ImATeapot: 418,
          MisdirectedRequest: 421,
          UnprocessableEntity: 422,
          Locked: 423,
          FailedDependency: 424,
          TooEarly: 425,
          UpgradeRequired: 426,
          PreconditionRequired: 428,
          TooManyRequests: 429,
          RequestHeaderFieldsTooLarge: 431,
          UnavailableForLegalReasons: 451,
          InternalServerError: 500,
          NotImplemented: 501,
          BadGateway: 502,
          ServiceUnavailable: 503,
          GatewayTimeout: 504,
          HttpVersionNotSupported: 505,
          VariantAlsoNegotiates: 506,
          InsufficientStorage: 507,
          LoopDetected: 508,
          NotExtended: 510,
          NetworkAuthenticationRequired: 511,
        };

        Object.entries(HttpStatusCode).forEach(([key, value]) => {
          HttpStatusCode[value] = key;
        });

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          HttpStatusCode;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/bind.js":
      /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ bind,
          /* harmony export */
        });

        function bind(fn, thisArg) {
          return function wrap() {
            return fn.apply(thisArg, arguments);
          };
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/buildURL.js":
      /*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ buildURL,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js"
          );

        /**
         * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
         * URI encoded counterparts
         *
         * @param {string} val The value to be encoded.
         *
         * @returns {string} The encoded value.
         */
        function encode(val) {
          return encodeURIComponent(val)
            .replace(/%3A/gi, ":")
            .replace(/%24/g, "$")
            .replace(/%2C/gi, ",")
            .replace(/%20/g, "+")
            .replace(/%5B/gi, "[")
            .replace(/%5D/gi, "]");
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @param {?object} options
         *
         * @returns {string} The formatted url
         */
        function buildURL(url, params, options) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }

          const _encode = (options && options.encode) || encode;

          const serializeFn = options && options.serialize;

          let serializedParams;

          if (serializeFn) {
            serializedParams = serializeFn(params, options);
          } else {
            serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
            ].isURLSearchParams(params)
              ? params.toString()
              : new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](params, options).toString(_encode);
          }

          if (serializedParams) {
            const hashmarkIndex = url.indexOf("#");

            if (hashmarkIndex !== -1) {
              url = url.slice(0, hashmarkIndex);
            }
            url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
          }

          return url;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/combineURLs.js":
      /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ combineURLs,
          /* harmony export */
        });

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         *
         * @returns {string} The combined URL
         */
        function combineURLs(baseURL, relativeURL) {
          return relativeURL
            ? baseURL.replace(/\/+$/, "") +
            "/" +
            relativeURL.replace(/^\/+/, "")
            : baseURL;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/cookies.js":
      /*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/browser/index.js"
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            .isStandardBrowserEnv
            ? // Standard browser envs support document.cookie
            (function standardBrowserEnv() {
              return {
                write: function write(
                  name,
                  value,
                  expires,
                  path,
                  domain,
                  secure
                ) {
                  const cookie = [];
                  cookie.push(name + "=" + encodeURIComponent(value));

                  if (
                    _utils_js__WEBPACK_IMPORTED_MODULE_1__[
                      "default"
                    ].isNumber(expires)
                  ) {
                    cookie.push("expires=" + new Date(expires).toGMTString());
                  }

                  if (
                    _utils_js__WEBPACK_IMPORTED_MODULE_1__[
                      "default"
                    ].isString(path)
                  ) {
                    cookie.push("path=" + path);
                  }

                  if (
                    _utils_js__WEBPACK_IMPORTED_MODULE_1__[
                      "default"
                    ].isString(domain)
                  ) {
                    cookie.push("domain=" + domain);
                  }

                  if (secure === true) {
                    cookie.push("secure");
                  }

                  document.cookie = cookie.join("; ");
                },

                read: function read(name) {
                  const match = document.cookie.match(
                    new RegExp("(^|;\\s*)(" + name + ")=([^;]*)")
                  );
                  return match ? decodeURIComponent(match[3]) : null;
                },

                remove: function remove(name) {
                  this.write(name, "", Date.now() - 86400000);
                },
              };
            })()
            : // Non standard browser env (web workers, react-native) lack needed support.
            (function nonStandardBrowserEnv() {
              return {
                write: function write() { },
                read: function read() {
                  return null;
                },
                remove: function remove() { },
              };
            })();

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
      /*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
         *
         * @param {string} name - The name of the property to get.
         *
         * @returns An array of strings.
         */
        function parsePropPath(name) {
          // foo[x][y][z]
          // foo.x.y.z
          // foo-x-y-z
          // foo x y z
          return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            .matchAll(/\w+|\[(\w*)]/g, name)
            .map((match) => {
              return match[0] === "[]" ? "" : match[1] || match[0];
            });
        }

        /**
         * Convert an array to an object.
         *
         * @param {Array<any>} arr - The array to convert to an object.
         *
         * @returns An object with the same keys and values as the array.
         */
        function arrayToObject(arr) {
          const obj = {};
          const keys = Object.keys(arr);
          let i;
          const len = keys.length;
          let key;
          for (i = 0; i < len; i++) {
            key = keys[i];
            obj[key] = arr[key];
          }
          return obj;
        }

        /**
         * It takes a FormData object and returns a JavaScript object
         *
         * @param {string} formData The FormData object to convert to JSON.
         *
         * @returns {Object<string, any> | null} The converted object.
         */
        function formDataToJSON(formData) {
          function buildPath(path, value, target, index) {
            let name = path[index++];
            const isNumericKey = Number.isFinite(+name);
            const isLast = index >= path.length;
            name =
              !name &&
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target)
                ? target.length
                : name;

            if (isLast) {
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(
                  target,
                  name
                )
              ) {
                target[name] = [target[name], value];
              } else {
                target[name] = value;
              }

              return !isNumericKey;
            }

            if (
              !target[name] ||
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(
                target[name]
              )
            ) {
              target[name] = [];
            }

            const result = buildPath(path, value, target[name], index);

            if (
              result &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
                target[name]
              )
            ) {
              target[name] = arrayToObject(target[name]);
            }

            return !isNumericKey;
          }

          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(
              formData
            ) &&
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
              formData.entries
            )
          ) {
            const obj = {};

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(
              formData,
              (name, value) => {
                buildPath(parsePropPath(name), value, obj, 0);
              }
            );

            return obj;
          }

          return null;
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          formDataToJSON;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ isAbsoluteURL,
          /* harmony export */
        });

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         *
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ isAxiosError,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * Determines whether the payload is an error thrown by Axios
         *
         * @param {*} payload The value to test
         *
         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
         */
        function isAxiosError(payload) {
          return (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(
              payload
            ) && payload.isAxiosError === true
          );
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
      /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/browser/index.js"
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          _platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            .isStandardBrowserEnv
            ? // Standard browser envs have full support of the APIs needed to test
            // whether the request URL is of the same origin as current location.
            (function standardBrowserEnv() {
              const msie = /(msie|trident)/i.test(navigator.userAgent);
              const urlParsingNode = document.createElement("a");
              let originURL;

              /**
               * Parse a URL to discover it's components
               *
               * @param {String} url The URL to be parsed
               * @returns {Object}
               */
              function resolveURL(url) {
                let href = url;

                if (msie) {
                  // IE needs attribute set twice to normalize properties
                  urlParsingNode.setAttribute("href", href);
                  href = urlParsingNode.href;
                }

                urlParsingNode.setAttribute("href", href);

                // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                return {
                  href: urlParsingNode.href,
                  protocol: urlParsingNode.protocol
                    ? urlParsingNode.protocol.replace(/:$/, "")
                    : "",
                  host: urlParsingNode.host,
                  search: urlParsingNode.search
                    ? urlParsingNode.search.replace(/^\?/, "")
                    : "",
                  hash: urlParsingNode.hash
                    ? urlParsingNode.hash.replace(/^#/, "")
                    : "",
                  hostname: urlParsingNode.hostname,
                  port: urlParsingNode.port,
                  pathname:
                    urlParsingNode.pathname.charAt(0) === "/"
                      ? urlParsingNode.pathname
                      : "/" + urlParsingNode.pathname,
                };
              }

              originURL = resolveURL(window.location.href);

              /**
               * Determine if a URL shares the same origin as the current location
               *
               * @param {String} requestURL The URL to test
               * @returns {boolean} True if URL shares the same origin, otherwise false
               */
              return function isURLSameOrigin(requestURL) {
                const parsed = _utils_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ].isString(requestURL)
                  ? resolveURL(requestURL)
                  : requestURL;
                return (
                  parsed.protocol === originURL.protocol &&
                  parsed.host === originURL.host
                );
              };
            })()
            : // Non standard browser envs (web workers, react-native) lack needed support.
            (function nonStandardBrowserEnv() {
              return function isURLSameOrigin() {
                return true;
              };
            })();

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/null.js":
      /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        // eslint-disable-next-line strict
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = null;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        // RawAxiosHeaders whose duplicates are ignored by node
        // c.f. https://nodejs.org/api/http.html#http_message_headers
        const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
          "default"
        ].toObjectSet([
          "age",
          "authorization",
          "content-length",
          "content-type",
          "etag",
          "expires",
          "from",
          "host",
          "if-modified-since",
          "if-unmodified-since",
          "last-modified",
          "location",
          "max-forwards",
          "proxy-authorization",
          "referer",
          "retry-after",
          "user-agent",
        ]);

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} rawHeaders Headers needing to be parsed
         *
         * @returns {Object} Headers parsed into an object
         */
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (
          rawHeaders
        ) => {
          const parsed = {};
          let key;
          let val;
          let i;

          rawHeaders &&
            rawHeaders.split("\n").forEach(function parser(line) {
              i = line.indexOf(":");
              key = line.substring(0, i).trim().toLowerCase();
              val = line.substring(i + 1).trim();

              if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
                return;
              }

              if (key === "set-cookie") {
                if (parsed[key]) {
                  parsed[key].push(val);
                } else {
                  parsed[key] = [val];
                }
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
              }
            });

          return parsed;
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ parseProtocol,
          /* harmony export */
        });

        function parseProtocol(url) {
          const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
          return (match && match[1]) || "";
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/speedometer.js":
      /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });

        /**
         * Calculate data maxRate
         * @param {Number} [samplesCount= 10]
         * @param {Number} [min= 1000]
         * @returns {Function}
         */
        function speedometer(samplesCount, min) {
          samplesCount = samplesCount || 10;
          const bytes = new Array(samplesCount);
          const timestamps = new Array(samplesCount);
          let head = 0;
          let tail = 0;
          let firstSampleTS;

          min = min !== undefined ? min : 1000;

          return function push(chunkLength) {
            const now = Date.now();

            const startedAt = timestamps[tail];

            if (!firstSampleTS) {
              firstSampleTS = now;
            }

            bytes[head] = chunkLength;
            timestamps[head] = now;

            let i = tail;
            let bytesCount = 0;

            while (i !== head) {
              bytesCount += bytes[i++];
              i = i % samplesCount;
            }

            head = (head + 1) % samplesCount;

            if (head === tail) {
              tail = (tail + 1) % samplesCount;
            }

            if (now - firstSampleTS < min) {
              return;
            }

            const passed = startedAt && now - startedAt;

            return passed
              ? Math.round((bytesCount * 1000) / passed)
              : undefined;
          };
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          speedometer;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/spread.js":
      /*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ spread,
          /* harmony export */
        });

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         *
         * @returns {Function}
         */
        function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/toFormData.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../platform/node/classes/FormData.js */ "./node_modules/axios/lib/helpers/null.js"
          );
        /* provided dependency */ var Buffer = __webpack_require__(
          /*! buffer */ "./node_modules/buffer/index.js"
          )["Buffer"];

        // temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored

        /**
         * Determines if the given thing is a array or js object.
         *
         * @param {string} thing - The object or array to be visited.
         *
         * @returns {boolean}
         */
        function isVisitable(thing) {
          return (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
              thing
            ) ||
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing)
          );
        }

        /**
         * It removes the brackets from the end of a string
         *
         * @param {string} key - The key of the parameter.
         *
         * @returns {string} the key without the brackets.
         */
        function removeBrackets(key) {
          return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(
            key,
            "[]"
          )
            ? key.slice(0, -2)
            : key;
        }

        /**
         * It takes a path, a key, and a boolean, and returns a string
         *
         * @param {string} path - The path to the current key.
         * @param {string} key - The key of the current object being iterated over.
         * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
         *
         * @returns {string} The path to the current key.
         */
        function renderKey(path, key, dots) {
          if (!path) return key;
          return path
            .concat(key)
            .map(function each(token, i) {
              // eslint-disable-next-line no-param-reassign
              token = removeBrackets(token);
              return !dots && i ? "[" + token + "]" : token;
            })
            .join(dots ? "." : "");
        }

        /**
         * If the array is an array and none of its elements are visitable, then it's a flat array.
         *
         * @param {Array<any>} arr - The array to check
         *
         * @returns {boolean}
         */
        function isFlatArray(arr) {
          return (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) &&
            !arr.some(isVisitable)
          );
        }

        const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
          "default"
        ].toFlatObject(
          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"],
          {},
          null,
          function filter(prop) {
            return /^is[A-Z]/.test(prop);
          }
        );

        /**
         * Convert a data object to FormData
         *
         * @param {Object} obj
         * @param {?Object} [formData]
         * @param {?Object} [options]
         * @param {Function} [options.visitor]
         * @param {Boolean} [options.metaTokens = true]
         * @param {Boolean} [options.dots = false]
         * @param {?Boolean} [options.indexes = false]
         *
         * @returns {Object}
         **/

        /**
         * It converts an object into a FormData object
         *
         * @param {Object<any, any>} obj - The object to convert to form data.
         * @param {string} formData - The FormData object to append to.
         * @param {Object<string, any>} options
         *
         * @returns
         */
        function toFormData(obj, formData, options) {
          if (
            !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)
          ) {
            throw new TypeError("target must be an object");
          }

          // eslint-disable-next-line no-param-reassign
          formData =
            formData ||
            new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__[
              "default"
            ] || FormData)();

          // eslint-disable-next-line no-param-reassign
          options = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
          ].toFlatObject(
            options,
            {
              metaTokens: true,
              dots: false,
              indexes: false,
            },
            false,
            function defined(option, source) {
              // eslint-disable-next-line no-eq-null,eqeqeq
              return !_utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].isUndefined(source[option]);
            }
          );

          const metaTokens = options.metaTokens;
          // eslint-disable-next-line no-use-before-define
          const visitor = options.visitor || defaultVisitor;
          const dots = options.dots;
          const indexes = options.indexes;
          const _Blob = options.Blob || (typeof Blob !== "undefined" && Blob);
          const useBlob =
            _Blob &&
            _utils_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
            ].isSpecCompliantForm(formData);

          if (
            !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
              visitor
            )
          ) {
            throw new TypeError("visitor must be a function");
          }

          function convertValue(value) {
            if (value === null) return "";

            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)
            ) {
              return value.toISOString();
            }

            if (
              !useBlob &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)
            ) {
              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__[
                "default"
              ]("Blob is not supported. Use a Buffer instead.");
            }

            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(
                value
              ) ||
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(
                value
              )
            ) {
              return useBlob && typeof Blob === "function"
                ? new Blob([value])
                : Buffer.from(value);
            }

            return value;
          }

          /**
           * Default visitor.
           *
           * @param {*} value
           * @param {String|Number} key
           * @param {Array<String|Number>} path
           * @this {FormData}
           *
           * @returns {boolean} return true to visit the each prop of the value recursively
           */
          function defaultVisitor(value, key, path) {
            let arr = value;

            if (value && !path && typeof value === "object") {
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(
                  key,
                  "{}"
                )
              ) {
                // eslint-disable-next-line no-param-reassign
                key = metaTokens ? key : key.slice(0, -2);
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (
                (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
                  value
                ) &&
                  isFlatArray(value)) ||
                ((_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(
                  value
                ) ||
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(
                    key,
                    "[]"
                  )) &&
                  (arr =
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(
                      value
                    )))
              ) {
                // eslint-disable-next-line no-param-reassign
                key = removeBrackets(key);

                arr.forEach(function each(el, index) {
                  !(
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                      "default"
                    ].isUndefined(el) || el === null
                  ) &&
                    formData.append(
                      // eslint-disable-next-line no-nested-ternary
                      indexes === true
                        ? renderKey([key], index, dots)
                        : indexes === null
                          ? key
                          : key + "[]",
                      convertValue(el)
                    );
                });
                return false;
              }
            }

            if (isVisitable(value)) {
              return true;
            }

            formData.append(renderKey(path, key, dots), convertValue(value));

            return false;
          }

          const stack = [];

          const exposedHelpers = Object.assign(predicates, {
            defaultVisitor,
            convertValue,
            isVisitable,
          });

          function build(value, path) {
            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(
                value
              )
            )
              return;

            if (stack.indexOf(value) !== -1) {
              throw Error("Circular reference detected in " + path.join("."));
            }

            stack.push(value);

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              value,
              function each(el, key) {
                const result =
                  !(
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                      "default"
                    ].isUndefined(el) || el === null
                  ) &&
                  visitor.call(
                    formData,
                    el,
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                      key
                    )
                      ? key.trim()
                      : key,
                    path,
                    exposedHelpers
                  );

                if (result === true) {
                  build(el, path ? path.concat(key) : [key]);
                }
              }
            );

            stack.pop();
          }

          if (
            !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)
          ) {
            throw new TypeError("data must be an object");
          }

          build(obj);

          return formData;
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          toFormData;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
      /*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => /* binding */ toURLEncodedForm,
          /* harmony export */
        });
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/browser/index.js"
          );

        function toURLEncodedForm(data, options) {
          return (0, _toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
            data,
            new _platform_index_js__WEBPACK_IMPORTED_MODULE_1__[
              "default"
            ].classes.URLSearchParams(),
            Object.assign(
              {
                visitor: function (value, key, path, helpers) {
                  if (
                    _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]
                      .isNode &&
                    _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(
                      value
                    )
                  ) {
                    this.append(key, value.toString("base64"));
                    return false;
                  }

                  return helpers.defaultVisitor.apply(this, arguments);
                },
              },
              options
            )
          );
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/validator.js":
      /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../env/data.js */ "./node_modules/axios/lib/env/data.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );

        const validators = {};

        // eslint-disable-next-line func-names
        ["object", "boolean", "number", "function", "string", "symbol"].forEach(
          (type, i) => {
            validators[type] = function validator(thing) {
              return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
            };
          }
        );

        const deprecatedWarnings = {};

        /**
         * Transitional option validator
         *
         * @param {function|boolean?} validator - set to false if the transitional option has been removed
         * @param {string?} version - deprecated version / removed since version
         * @param {string?} message - some message with additional info
         *
         * @returns {function}
         */
        validators.transitional = function transitional(
          validator,
          version,
          message
        ) {
          function formatMessage(opt, desc) {
            return (
              "[Axios v" +
              _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION +
              "] Transitional option '" +
              opt +
              "'" +
              desc +
              (message ? ". " + message : "")
            );
          }

          // eslint-disable-next-line func-names
          return (value, opt, opts) => {
            if (validator === false) {
              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](
                formatMessage(
                  opt,
                  " has been removed" + (version ? " in " + version : "")
                ),
                _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ].ERR_DEPRECATED
              );
            }

            if (version && !deprecatedWarnings[opt]) {
              deprecatedWarnings[opt] = true;
              // eslint-disable-next-line no-console
              console.warn(
                formatMessage(
                  opt,
                  " has been deprecated since v" +
                  version +
                  " and will be removed in the near future"
                )
              );
            }

            return validator ? validator(value, opt, opts) : true;
          };
        };

        /**
         * Assert object's properties type
         *
         * @param {object} options
         * @param {object} schema
         * @param {boolean?} allowUnknown
         *
         * @returns {object}
         */

        function assertOptions(options, schema, allowUnknown) {
          if (typeof options !== "object") {
            throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
              "default"
            ](
              "options must be an object",
              _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ].ERR_BAD_OPTION_VALUE
            );
          }
          const keys = Object.keys(options);
          let i = keys.length;
          while (i-- > 0) {
            const opt = keys[i];
            const validator = schema[opt];
            if (validator) {
              const value = options[opt];
              const result =
                value === undefined || validator(value, opt, options);
              if (result !== true) {
                throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](
                  "option " + opt + " must be " + result,
                  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                    "default"
                  ].ERR_BAD_OPTION_VALUE
                );
              }
              continue;
            }
            if (allowUnknown !== true) {
              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](
                "Unknown option " + opt,
                _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ].ERR_BAD_OPTION
              );
            }
          }
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = {
          assertOptions,
          validators,
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/classes/Blob.js":
      /*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          typeof Blob !== "undefined" ? Blob : null;

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
      /*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          typeof FormData !== "undefined" ? FormData : null;

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
      /*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js"
          );

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ =
          typeof URLSearchParams !== "undefined"
            ? URLSearchParams
            : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
            ];

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/index.js":
      /*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"
          );
        /* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js"
          );
        /* harmony import */ var _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./classes/Blob.js */ "./node_modules/axios/lib/platform/browser/classes/Blob.js"
          );

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         *
         * @returns {boolean}
         */
        const isStandardBrowserEnv = (() => {
          let product;
          if (
            typeof navigator !== "undefined" &&
            ((product = navigator.product) === "ReactNative" ||
              product === "NativeScript" ||
              product === "NS")
          ) {
            return false;
          }

          return (
            typeof window !== "undefined" && typeof document !== "undefined"
          );
        })();

        /**
         * Determine if we're running in a standard browser webWorker environment
         *
         * Although the `isStandardBrowserEnv` method indicates that
         * `allows axios to run in a web worker`, the WebWorker will still be
         * filtered out due to its judgment standard
         * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
         * This leads to a problem when axios post `FormData` in webWorker
         */
        const isStandardBrowserWebWorkerEnv = (() => {
          return (
            typeof WorkerGlobalScope !== "undefined" &&
            // eslint-disable-next-line no-undef
            self instanceof WorkerGlobalScope &&
            typeof self.importScripts === "function"
          );
        })();

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = {
          isBrowser: true,
          classes: {
            URLSearchParams:
              _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
              ],
            FormData:
              _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            Blob: _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__["default"],
          },
          isStandardBrowserEnv,
          isStandardBrowserWebWorkerEnv,
          protocols: ["http", "https", "file", "blob", "url", "data"],
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/utils.js":
      /*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ default: () => __WEBPACK_DEFAULT_EXPORT__,
          /* harmony export */
        });
        /* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js"
          );

        // utils is a library of generic helper functions non-specific to axios

        const { toString } = Object.prototype;
        const { getPrototypeOf } = Object;

        const kindOf = ((cache) => (thing) => {
          const str = toString.call(thing);
          return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
        })(Object.create(null));

        const kindOfTest = (type) => {
          type = type.toLowerCase();
          return (thing) => kindOf(thing) === type;
        };

        const typeOfTest = (type) => (thing) => typeof thing === type;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         *
         * @returns {boolean} True if value is an Array, otherwise false
         */
        const { isArray } = Array;

        /**
         * Determine if a value is undefined
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        const isUndefined = typeOfTest("undefined");

        /**
         * Determine if a value is a Buffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
          return (
            val !== null &&
            !isUndefined(val) &&
            val.constructor !== null &&
            !isUndefined(val.constructor) &&
            isFunction(val.constructor.isBuffer) &&
            val.constructor.isBuffer(val)
          );
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        const isArrayBuffer = kindOfTest("ArrayBuffer");

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
          let result;
          if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
            result = ArrayBuffer.isView(val);
          } else {
            result = val && val.buffer && isArrayBuffer(val.buffer);
          }
          return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a String, otherwise false
         */
        const isString = typeOfTest("string");

        /**
         * Determine if a value is a Function
         *
         * @param {*} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        const isFunction = typeOfTest("function");

        /**
         * Determine if a value is a Number
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Number, otherwise false
         */
        const isNumber = typeOfTest("number");

        /**
         * Determine if a value is an Object
         *
         * @param {*} thing The value to test
         *
         * @returns {boolean} True if value is an Object, otherwise false
         */
        const isObject = (thing) => thing !== null && typeof thing === "object";

        /**
         * Determine if a value is a Boolean
         *
         * @param {*} thing The value to test
         * @returns {boolean} True if value is a Boolean, otherwise false
         */
        const isBoolean = (thing) => thing === true || thing === false;

        /**
         * Determine if a value is a plain Object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a plain Object, otherwise false
         */
        const isPlainObject = (val) => {
          if (kindOf(val) !== "object") {
            return false;
          }

          const prototype = getPrototypeOf(val);
          return (
            (prototype === null ||
              prototype === Object.prototype ||
              Object.getPrototypeOf(prototype) === null) &&
            !(Symbol.toStringTag in val) &&
            !(Symbol.iterator in val)
          );
        };

        /**
         * Determine if a value is a Date
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Date, otherwise false
         */
        const isDate = kindOfTest("Date");

        /**
         * Determine if a value is a File
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a File, otherwise false
         */
        const isFile = kindOfTest("File");

        /**
         * Determine if a value is a Blob
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        const isBlob = kindOfTest("Blob");

        /**
         * Determine if a value is a FileList
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a File, otherwise false
         */
        const isFileList = kindOfTest("FileList");

        /**
         * Determine if a value is a Stream
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        const isStream = (val) => isObject(val) && isFunction(val.pipe);

        /**
         * Determine if a value is a FormData
         *
         * @param {*} thing The value to test
         *
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        const isFormData = (thing) => {
          const pattern = "[object FormData]";
          return (
            thing &&
            ((typeof FormData === "function" && thing instanceof FormData) ||
              toString.call(thing) === pattern ||
              (isFunction(thing.toString) && thing.toString() === pattern))
          );
        };

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        const isURLSearchParams = kindOfTest("URLSearchParams");

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         *
         * @returns {String} The String freed of excess whitespace
         */
        const trim = (str) =>
          str.trim
            ? str.trim()
            : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         *
         * @param {Boolean} [allOwnKeys = false]
         * @returns {any}
         */
        function forEach(obj, fn, { allOwnKeys = false } = {}) {
          // Don't bother if no value provided
          if (obj === null || typeof obj === "undefined") {
            return;
          }

          let i;
          let l;

          // Force an array if not already something iterable
          if (typeof obj !== "object") {
            /*eslint no-param-reassign:0*/
            obj = [obj];
          }

          if (isArray(obj)) {
            // Iterate over array values
            for (i = 0, l = obj.length; i < l; i++) {
              fn.call(null, obj[i], i, obj);
            }
          } else {
            // Iterate over object keys
            const keys = allOwnKeys
              ? Object.getOwnPropertyNames(obj)
              : Object.keys(obj);
            const len = keys.length;
            let key;

            for (i = 0; i < len; i++) {
              key = keys[i];
              fn.call(null, obj[key], key, obj);
            }
          }
        }

        function findKey(obj, key) {
          key = key.toLowerCase();
          const keys = Object.keys(obj);
          let i = keys.length;
          let _key;
          while (i-- > 0) {
            _key = keys[i];
            if (key === _key.toLowerCase()) {
              return _key;
            }
          }
          return null;
        }

        const _global = (() => {
          /*eslint no-undef:0*/
          if (typeof globalThis !== "undefined") return globalThis;
          return typeof self !== "undefined"
            ? self
            : typeof window !== "undefined"
              ? window
              : global;
        })();

        const isContextDefined = (context) =>
          !isUndefined(context) && context !== _global;

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         *
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
          const { caseless } = (isContextDefined(this) && this) || {};
          const result = {};
          const assignValue = (val, key) => {
            const targetKey = (caseless && findKey(result, key)) || key;
            if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
              result[targetKey] = merge(result[targetKey], val);
            } else if (isPlainObject(val)) {
              result[targetKey] = merge({}, val);
            } else if (isArray(val)) {
              result[targetKey] = val.slice();
            } else {
              result[targetKey] = val;
            }
          };

          for (let i = 0, l = arguments.length; i < l; i++) {
            arguments[i] && forEach(arguments[i], assignValue);
          }
          return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         *
         * @param {Boolean} [allOwnKeys]
         * @returns {Object} The resulting value of object a
         */
        const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
          forEach(
            b,
            (val, key) => {
              if (thisArg && isFunction(val)) {
                a[key] = (0,
                  _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
                    val,
                    thisArg
                  );
              } else {
                a[key] = val;
              }
            },
            { allOwnKeys }
          );
          return a;
        };

        /**
         * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
         *
         * @param {string} content with BOM
         *
         * @returns {string} content value without BOM
         */
        const stripBOM = (content) => {
          if (content.charCodeAt(0) === 0xfeff) {
            content = content.slice(1);
          }
          return content;
        };

        /**
         * Inherit the prototype methods from one constructor into another
         * @param {function} constructor
         * @param {function} superConstructor
         * @param {object} [props]
         * @param {object} [descriptors]
         *
         * @returns {void}
         */
        const inherits = (
          constructor,
          superConstructor,
          props,
          descriptors
        ) => {
          constructor.prototype = Object.create(
            superConstructor.prototype,
            descriptors
          );
          constructor.prototype.constructor = constructor;
          Object.defineProperty(constructor, "super", {
            value: superConstructor.prototype,
          });
          props && Object.assign(constructor.prototype, props);
        };

        /**
         * Resolve object with deep prototype chain to a flat object
         * @param {Object} sourceObj source object
         * @param {Object} [destObj]
         * @param {Function|Boolean} [filter]
         * @param {Function} [propFilter]
         *
         * @returns {Object}
         */
        const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
          let props;
          let i;
          let prop;
          const merged = {};

          destObj = destObj || {};
          // eslint-disable-next-line no-eq-null,eqeqeq
          if (sourceObj == null) return destObj;

          do {
            props = Object.getOwnPropertyNames(sourceObj);
            i = props.length;
            while (i-- > 0) {
              prop = props[i];
              if (
                (!propFilter || propFilter(prop, sourceObj, destObj)) &&
                !merged[prop]
              ) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
              }
            }
            sourceObj = filter !== false && getPrototypeOf(sourceObj);
          } while (
            sourceObj &&
            (!filter || filter(sourceObj, destObj)) &&
            sourceObj !== Object.prototype
          );

          return destObj;
        };

        /**
         * Determines whether a string ends with the characters of a specified string
         *
         * @param {String} str
         * @param {String} searchString
         * @param {Number} [position= 0]
         *
         * @returns {boolean}
         */
        const endsWith = (str, searchString, position) => {
          str = String(str);
          if (position === undefined || position > str.length) {
            position = str.length;
          }
          position -= searchString.length;
          const lastIndex = str.indexOf(searchString, position);
          return lastIndex !== -1 && lastIndex === position;
        };

        /**
         * Returns new array from array like object or null if failed
         *
         * @param {*} [thing]
         *
         * @returns {?Array}
         */
        const toArray = (thing) => {
          if (!thing) return null;
          if (isArray(thing)) return thing;
          let i = thing.length;
          if (!isNumber(i)) return null;
          const arr = new Array(i);
          while (i-- > 0) {
            arr[i] = thing[i];
          }
          return arr;
        };

        /**
         * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
         * thing passed in is an instance of Uint8Array
         *
         * @param {TypedArray}
         *
         * @returns {Array}
         */
        // eslint-disable-next-line func-names
        const isTypedArray = ((TypedArray) => {
          // eslint-disable-next-line func-names
          return (thing) => {
            return TypedArray && thing instanceof TypedArray;
          };
        })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));

        /**
         * For each entry in the object, call the function with the key and value.
         *
         * @param {Object<any, any>} obj - The object to iterate over.
         * @param {Function} fn - The function to call for each entry.
         *
         * @returns {void}
         */
        const forEachEntry = (obj, fn) => {
          const generator = obj && obj[Symbol.iterator];

          const iterator = generator.call(obj);

          let result;

          while ((result = iterator.next()) && !result.done) {
            const pair = result.value;
            fn.call(obj, pair[0], pair[1]);
          }
        };

        /**
         * It takes a regular expression and a string, and returns an array of all the matches
         *
         * @param {string} regExp - The regular expression to match against.
         * @param {string} str - The string to search.
         *
         * @returns {Array<boolean>}
         */
        const matchAll = (regExp, str) => {
          let matches;
          const arr = [];

          while ((matches = regExp.exec(str)) !== null) {
            arr.push(matches);
          }

          return arr;
        };

        /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
        const isHTMLForm = kindOfTest("HTMLFormElement");

        const toCamelCase = (str) => {
          return str
            .toLowerCase()
            .replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
              return p1.toUpperCase() + p2;
            });
        };

        /* Creating a function that will check if an object has a property. */
        const hasOwnProperty = (
          ({ hasOwnProperty }) =>
            (obj, prop) =>
              hasOwnProperty.call(obj, prop)
        )(Object.prototype);

        /**
         * Determine if a value is a RegExp object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a RegExp object, otherwise false
         */
        const isRegExp = kindOfTest("RegExp");

        const reduceDescriptors = (obj, reducer) => {
          const descriptors = Object.getOwnPropertyDescriptors(obj);
          const reducedDescriptors = {};

          forEach(descriptors, (descriptor, name) => {
            if (reducer(descriptor, name, obj) !== false) {
              reducedDescriptors[name] = descriptor;
            }
          });

          Object.defineProperties(obj, reducedDescriptors);
        };

        /**
         * Makes all methods read-only
         * @param {Object} obj
         */

        const freezeMethods = (obj) => {
          reduceDescriptors(obj, (descriptor, name) => {
            // skip restricted props in strict mode
            if (
              isFunction(obj) &&
              ["arguments", "caller", "callee"].indexOf(name) !== -1
            ) {
              return false;
            }

            const value = obj[name];

            if (!isFunction(value)) return;

            descriptor.enumerable = false;

            if ("writable" in descriptor) {
              descriptor.writable = false;
              return;
            }

            if (!descriptor.set) {
              descriptor.set = () => {
                throw Error("Can not rewrite read-only method '" + name + "'");
              };
            }
          });
        };

        const toObjectSet = (arrayOrString, delimiter) => {
          const obj = {};

          const define = (arr) => {
            arr.forEach((value) => {
              obj[value] = true;
            });
          };

          isArray(arrayOrString)
            ? define(arrayOrString)
            : define(String(arrayOrString).split(delimiter));

          return obj;
        };

        const noop = () => { };

        const toFiniteNumber = (value, defaultValue) => {
          value = +value;
          return Number.isFinite(value) ? value : defaultValue;
        };

        const ALPHA = "abcdefghijklmnopqrstuvwxyz";

        const DIGIT = "0123456789";

        const ALPHABET = {
          DIGIT,
          ALPHA,
          ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT,
        };

        const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
          let str = "";
          const { length } = alphabet;
          while (size--) {
            str += alphabet[(Math.random() * length) | 0];
          }

          return str;
        };

        /**
         * If the thing is a FormData object, return true, otherwise return false.
         *
         * @param {unknown} thing - The thing to check.
         *
         * @returns {boolean}
         */
        function isSpecCompliantForm(thing) {
          return !!(
            thing &&
            isFunction(thing.append) &&
            thing[Symbol.toStringTag] === "FormData" &&
            thing[Symbol.iterator]
          );
        }

        const toJSONObject = (obj) => {
          const stack = new Array(10);

          const visit = (source, i) => {
            if (isObject(source)) {
              if (stack.indexOf(source) >= 0) {
                return;
              }

              if (!("toJSON" in source)) {
                stack[i] = source;
                const target = isArray(source) ? [] : {};

                forEach(source, (value, key) => {
                  const reducedValue = visit(value, i + 1);
                  !isUndefined(reducedValue) && (target[key] = reducedValue);
                });

                stack[i] = undefined;

                return target;
              }
            }

            return source;
          };

          return visit(obj, 0);
        };

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = {
          isArray,
          isArrayBuffer,
          isBuffer,
          isFormData,
          isArrayBufferView,
          isString,
          isNumber,
          isBoolean,
          isObject,
          isPlainObject,
          isUndefined,
          isDate,
          isFile,
          isBlob,
          isRegExp,
          isFunction,
          isStream,
          isURLSearchParams,
          isTypedArray,
          isFileList,
          forEach,
          merge,
          extend,
          trim,
          stripBOM,
          inherits,
          toFlatObject,
          kindOf,
          kindOfTest,
          endsWith,
          toArray,
          forEachEntry,
          matchAll,
          isHTMLForm,
          hasOwnProperty,
          hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
          reduceDescriptors,
          freezeMethods,
          toObjectSet,
          toCamelCase,
          noop,
          toFiniteNumber,
          findKey,
          global: _global,
          isContextDefined,
          ALPHABET,
          generateString,
          isSpecCompliantForm,
          toJSONObject,
        };

        /***/
      },

    /***/ "./node_modules/idb/build/index.js":
      /*!*****************************************!*\
  !*** ./node_modules/idb/build/index.js ***!
  \*****************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ deleteDB: () => /* binding */ deleteDB,
          /* harmony export */ openDB: () => /* binding */ openDB,
          /* harmony export */ unwrap: () =>
            /* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.u,
          /* harmony export */ wrap: () =>
            /* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w,
          /* harmony export */
        });
        /* harmony import */ var _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./wrap-idb-value.js */ "./node_modules/idb/build/wrap-idb-value.js"
          );

        /**
         * Open a database.
         *
         * @param name Name of the database.
         * @param version Schema version.
         * @param callbacks Additional callbacks.
         */
        function openDB(
          name,
          version,
          { blocked, upgrade, blocking, terminated } = {}
        ) {
          const request = indexedDB.open(name, version);
          const openPromise = (0,
            _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request);
          if (upgrade) {
            request.addEventListener("upgradeneeded", (event) => {
              upgrade(
                (0, _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(
                  request.result
                ),
                event.oldVersion,
                event.newVersion,
                (0, _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(
                  request.transaction
                )
              );
            });
          }
          if (blocked) request.addEventListener("blocked", () => blocked());
          openPromise
            .then((db) => {
              if (terminated) db.addEventListener("close", () => terminated());
              if (blocking)
                db.addEventListener("versionchange", () => blocking());
            })
            .catch(() => { });
          return openPromise;
        }
        /**
         * Delete a database.
         *
         * @param name Name of the database.
         */
        function deleteDB(name, { blocked } = {}) {
          const request = indexedDB.deleteDatabase(name);
          if (blocked) request.addEventListener("blocked", () => blocked());
          return (0, _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(
            request
          ).then(() => undefined);
        }

        const readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
        const writeMethods = ["put", "add", "delete", "clear"];
        const cachedMethods = new Map();
        function getMethod(target, prop) {
          if (
            !(
              target instanceof IDBDatabase &&
              !(prop in target) &&
              typeof prop === "string"
            )
          ) {
            return;
          }
          if (cachedMethods.get(prop)) return cachedMethods.get(prop);
          const targetFuncName = prop.replace(/FromIndex$/, "");
          const useIndex = prop !== targetFuncName;
          const isWrite = writeMethods.includes(targetFuncName);
          if (
            // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
            !(
              targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype
            ) ||
            !(isWrite || readMethods.includes(targetFuncName))
          ) {
            return;
          }
          const method = async function (storeName, ...args) {
            // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
            const tx = this.transaction(
              storeName,
              isWrite ? "readwrite" : "readonly"
            );
            let target = tx.store;
            if (useIndex) target = target.index(args.shift());
            // Must reject if op rejects.
            // If it's a write operation, must reject if tx.done rejects.
            // Must reject with op rejection first.
            // Must resolve with op value.
            // Must handle both promises (no unhandled rejections)
            return (
              await Promise.all([
                target[targetFuncName](...args),
                isWrite && tx.done,
              ])
            )[0];
          };
          cachedMethods.set(prop, method);
          return method;
        }
        (0, _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.r)((oldTraps) => ({
          ...oldTraps,
          get: (target, prop, receiver) =>
            getMethod(target, prop) || oldTraps.get(target, prop, receiver),
          has: (target, prop) =>
            !!getMethod(target, prop) || oldTraps.has(target, prop),
        }));

        /***/
      },

    /***/ "./node_modules/idb/build/wrap-idb-value.js":
      /*!**************************************************!*\
  !*** ./node_modules/idb/build/wrap-idb-value.js ***!
  \**************************************************/
      /***/ (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
          /* harmony export */ a: () => /* binding */ reverseTransformCache,
          /* harmony export */ i: () => /* binding */ instanceOfAny,
          /* harmony export */ r: () => /* binding */ replaceTraps,
          /* harmony export */ u: () => /* binding */ unwrap,
          /* harmony export */ w: () => /* binding */ wrap,
          /* harmony export */
        });
        const instanceOfAny = (object, constructors) =>
          constructors.some((c) => object instanceof c);

        let idbProxyableTypes;
        let cursorAdvanceMethods;
        // This is a function to prevent it throwing up in node environments.
        function getIdbProxyableTypes() {
          return (
            idbProxyableTypes ||
            (idbProxyableTypes = [
              IDBDatabase,
              IDBObjectStore,
              IDBIndex,
              IDBCursor,
              IDBTransaction,
            ])
          );
        }
        // This is a function to prevent it throwing up in node environments.
        function getCursorAdvanceMethods() {
          return (
            cursorAdvanceMethods ||
            (cursorAdvanceMethods = [
              IDBCursor.prototype.advance,
              IDBCursor.prototype.continue,
              IDBCursor.prototype.continuePrimaryKey,
            ])
          );
        }
        const cursorRequestMap = new WeakMap();
        const transactionDoneMap = new WeakMap();
        const transactionStoreNamesMap = new WeakMap();
        const transformCache = new WeakMap();
        const reverseTransformCache = new WeakMap();
        function promisifyRequest(request) {
          const promise = new Promise((resolve, reject) => {
            const unlisten = () => {
              request.removeEventListener("success", success);
              request.removeEventListener("error", error);
            };
            const success = () => {
              resolve(wrap(request.result));
              unlisten();
            };
            const error = () => {
              reject(request.error);
              unlisten();
            };
            request.addEventListener("success", success);
            request.addEventListener("error", error);
          });
          promise
            .then((value) => {
              // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
              // (see wrapFunction).
              if (value instanceof IDBCursor) {
                cursorRequestMap.set(value, request);
              }
              // Catching to avoid "Uncaught Promise exceptions"
            })
            .catch(() => { });
          // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
          // is because we create many promises from a single IDBRequest.
          reverseTransformCache.set(promise, request);
          return promise;
        }
        function cacheDonePromiseForTransaction(tx) {
          // Early bail if we've already created a done promise for this transaction.
          if (transactionDoneMap.has(tx)) return;
          const done = new Promise((resolve, reject) => {
            const unlisten = () => {
              tx.removeEventListener("complete", complete);
              tx.removeEventListener("error", error);
              tx.removeEventListener("abort", error);
            };
            const complete = () => {
              resolve();
              unlisten();
            };
            const error = () => {
              reject(tx.error || new DOMException("AbortError", "AbortError"));
              unlisten();
            };
            tx.addEventListener("complete", complete);
            tx.addEventListener("error", error);
            tx.addEventListener("abort", error);
          });
          // Cache it for later retrieval.
          transactionDoneMap.set(tx, done);
        }
        let idbProxyTraps = {
          get(target, prop, receiver) {
            if (target instanceof IDBTransaction) {
              // Special handling for transaction.done.
              if (prop === "done") return transactionDoneMap.get(target);
              // Polyfill for objectStoreNames because of Edge.
              if (prop === "objectStoreNames") {
                return (
                  target.objectStoreNames ||
                  transactionStoreNamesMap.get(target)
                );
              }
              // Make tx.store return the only store in the transaction, or undefined if there are many.
              if (prop === "store") {
                return receiver.objectStoreNames[1]
                  ? undefined
                  : receiver.objectStore(receiver.objectStoreNames[0]);
              }
            }
            // Else transform whatever we get back.
            return wrap(target[prop]);
          },
          set(target, prop, value) {
            target[prop] = value;
            return true;
          },
          has(target, prop) {
            if (
              target instanceof IDBTransaction &&
              (prop === "done" || prop === "store")
            ) {
              return true;
            }
            return prop in target;
          },
        };
        function replaceTraps(callback) {
          idbProxyTraps = callback(idbProxyTraps);
        }
        function wrapFunction(func) {
          // Due to expected object equality (which is enforced by the caching in `wrap`), we
          // only create one new func per func.
          // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
          if (
            func === IDBDatabase.prototype.transaction &&
            !("objectStoreNames" in IDBTransaction.prototype)
          ) {
            return function (storeNames, ...args) {
              const tx = func.call(unwrap(this), storeNames, ...args);
              transactionStoreNamesMap.set(
                tx,
                storeNames.sort ? storeNames.sort() : [storeNames]
              );
              return wrap(tx);
            };
          }
          // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
          // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
          // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
          // with real promises, so each advance methods returns a new promise for the cursor object, or
          // undefined if the end of the cursor has been reached.
          if (getCursorAdvanceMethods().includes(func)) {
            return function (...args) {
              // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
              // the original object.
              func.apply(unwrap(this), args);
              return wrap(cursorRequestMap.get(this));
            };
          }
          return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            return wrap(func.apply(unwrap(this), args));
          };
        }
        function transformCachableValue(value) {
          if (typeof value === "function") return wrapFunction(value);
          // This doesn't return, it just creates a 'done' promise for the transaction,
          // which is later returned for transaction.done (see idbObjectHandler).
          if (value instanceof IDBTransaction)
            cacheDonePromiseForTransaction(value);
          if (instanceOfAny(value, getIdbProxyableTypes()))
            return new Proxy(value, idbProxyTraps);
          // Return the same value back if we're not going to transform it.
          return value;
        }
        function wrap(value) {
          // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
          // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
          if (value instanceof IDBRequest) return promisifyRequest(value);
          // If we've already transformed this value before, reuse the transformed value.
          // This is faster, but it also provides object equality.
          if (transformCache.has(value)) return transformCache.get(value);
          const newValue = transformCachableValue(value);
          // Not all types are transformed.
          // These may be primitive types, so they can't be WeakMap keys.
          if (newValue !== value) {
            transformCache.set(value, newValue);
            reverseTransformCache.set(newValue, value);
          }
          return newValue;
        }
        const unwrap = (value) => reverseTransformCache.get(value);

        /***/
      },

    /***/ "./assets/json/firebase.json":
      /*!***********************************!*\
  !*** ./assets/json/firebase.json ***!
  \***********************************/
      /***/ (module) => {
        "use strict";
        module.exports = JSON.parse(
          '{"api_key":"AIzaSyDOffsh_MDUPWGsN-hg0YEHH9P-jcbJMQc","auth_domain":"ds-dev-bd607.firebaseapp.com","project_id":"ds-dev-bd607","database_url":"https://ds-dev-bd607-default-rtdb.firebaseio.com","storage_bucket":"ds-dev-bd607.appspot.com","messaging_sender_id":"622442462674","app_id":"1:622442462674:web:c5f12d4afec8b7b4e7dc0b","measurement_id":"G-FJKKWRVXBF","server_key":"AAAAkOx2PdI:APA91bERNtkD_oRwu8WchWMPJpGkaGA3faXsagF4xXuOA1MFXy1JAIrPO_ZqAgZVqTDg0x1LhwmR0f2PnKOZfhDW2eDK0qH3ieSu7PH1bAFkoveyEsLrSPYMEH0bCWopII24CfnLq7jc","key_pair":"BMDJMA0p5YKuLoNOg6WRZRS1F2HTrY775OOA-mchW8bSD5Xc_lxB-LLh2vMtUiEi2Er7bro3U7bjZkuR9_0gmMk"}'
        );

        /***/
      },

    /***/ "./assets/json/pusher.json":
      /*!*********************************!*\
  !*** ./assets/json/pusher.json ***!
  \*********************************/
      /***/ (module) => {
        "use strict";
        module.exports = JSON.parse(
          '{"channel_name":"ds-dev","app_id":"1521665","app_key":"b1fa15f6102f5d5a128f","app_secret":"3b17bdfbbc537dd93044","app_cluster":"ap2"}'
        );

        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ id: moduleId,
      /******/ loaded: false,
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ __webpack_modules__[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    );
    /******/
    /******/ // Flag the module as loaded
    /******/ module.loaded = true;
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/ __webpack_require__.m = __webpack_modules__;
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/chunk loaded */
  /******/ (() => {
    /******/ var deferred = [];
    /******/ __webpack_require__.O = (result, chunkIds, fn, priority) => {
      /******/ if (chunkIds) {
        /******/ priority = priority || 0;
        /******/ for (
          var i = deferred.length;
          i > 0 && deferred[i - 1][2] > priority;
          i--
        )
          deferred[i] = deferred[i - 1];
        /******/ deferred[i] = [chunkIds, fn, priority];
        /******/ return;
        /******/
      }
      /******/ var notFulfilled = Infinity;
      /******/ for (var i = 0; i < deferred.length; i++) {
        /******/ var [chunkIds, fn, priority] = deferred[i];
        /******/ var fulfilled = true;
        /******/ for (var j = 0; j < chunkIds.length; j++) {
          /******/ if (
            (priority & (1 === 0) || notFulfilled >= priority) &&
            Object.keys(__webpack_require__.O).every((key) =>
              __webpack_require__.O[key](chunkIds[j])
            )
          ) {
            /******/ chunkIds.splice(j--, 1);
            /******/
          } else {
            /******/ fulfilled = false;
            /******/ if (priority < notFulfilled) notFulfilled = priority;
            /******/
          }
          /******/
        }
        /******/ if (fulfilled) {
          /******/ deferred.splice(i--, 1);
          /******/ var r = fn();
          /******/ if (r !== undefined) result = r;
          /******/
        }
        /******/
      }
      /******/ return result;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/compat get default export */
  /******/ (() => {
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __webpack_require__.n = (module) => {
      /******/ var getter =
        module && module.__esModule
          ? /******/ () => module["default"]
          : /******/ () => module;
      /******/ __webpack_require__.d(getter, { a: getter });
      /******/ return getter;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/define property getters */
  /******/ (() => {
    /******/ // define getter functions for harmony exports
    /******/ __webpack_require__.d = (exports, definition) => {
      /******/ for (var key in definition) {
        /******/ if (
          __webpack_require__.o(definition, key) &&
          !__webpack_require__.o(exports, key)
        ) {
          /******/ Object.defineProperty(exports, key, {
          enumerable: true,
          get: definition[key],
        });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/global */
  /******/ (() => {
    /******/ __webpack_require__.g = (function () {
      /******/ if (typeof globalThis === "object") return globalThis;
      /******/ try {
        /******/ return this || new Function("return this")();
        /******/
      } catch (e) {
        /******/ if (typeof window === "object") return window;
        /******/
      }
      /******/
    })();
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ (() => {
    /******/ __webpack_require__.o = (obj, prop) =>
      Object.prototype.hasOwnProperty.call(obj, prop);
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/make namespace object */
  /******/ (() => {
    /******/ // define __esModule on exports
    /******/ __webpack_require__.r = (exports) => {
      /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, {
    value: "Module",
  });
        /******/
      }
      /******/ Object.defineProperty(exports, "__esModule", { value: true });
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/node module decorator */
  /******/ (() => {
    /******/ __webpack_require__.nmd = (module) => {
      /******/ module.paths = [];
      /******/ if (!module.children) module.children = [];
      /******/ return module;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/jsonp chunk loading */
  /******/ (() => {
    /******/ // no baseURI
    /******/
    /******/ // object to store loaded and loading chunks
    /******/ // undefined = chunk not loaded, null = chunk preloaded/prefetched
    /******/ // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
    /******/ var installedChunks = {
      /******/ "/js/app": 0,
      /******/ "css/app": 0,
      /******/
    };
    /******/
    /******/ // no chunk on demand loading
    /******/
    /******/ // no prefetching
    /******/
    /******/ // no preloaded
    /******/
    /******/ // no HMR
    /******/
    /******/ // no HMR manifest
    /******/
    /******/ __webpack_require__.O.j = (chunkId) =>
      installedChunks[chunkId] === 0;
    /******/
    /******/ // install a JSONP callback for chunk loading
    /******/ var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
      /******/ var [chunkIds, moreModules, runtime] = data;
      /******/ // add "moreModules" to the modules object,
      /******/ // then flag all "chunkIds" as loaded and fire callback
      /******/ var moduleId,
        chunkId,
        i = 0;
      /******/ if (chunkIds.some((id) => installedChunks[id] !== 0)) {
        /******/ for (moduleId in moreModules) {
          /******/ if (__webpack_require__.o(moreModules, moduleId)) {
            /******/ __webpack_require__.m[moduleId] = moreModules[moduleId];
            /******/
          }
          /******/
        }
        /******/ if (runtime) var result = runtime(__webpack_require__);
        /******/
      }
      /******/ if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);
      /******/ for (; i < chunkIds.length; i++) {
        /******/ chunkId = chunkIds[i];
        /******/ if (
          __webpack_require__.o(installedChunks, chunkId) &&
          installedChunks[chunkId]
        ) {
          /******/ installedChunks[chunkId][0]();
          /******/
        }
        /******/ installedChunks[chunkId] = 0;
        /******/
      }
      /******/ return __webpack_require__.O(result);
      /******/
    };
    /******/
    /******/ var chunkLoadingGlobal = (self["webpackChunk"] =
      self["webpackChunk"] || []);
    /******/ chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
    /******/ chunkLoadingGlobal.push = webpackJsonpCallback.bind(
        null,
        chunkLoadingGlobal.push.bind(chunkLoadingGlobal)
      );
    /******/
  })();
  /******/
  /************************************************************************/
  /******/
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ // This entry module depends on other loaded chunks and execution need to be delayed
  /******/ __webpack_require__.O(undefined, ["css/app"], () =>
    __webpack_require__("./resources/js/app.js")
  );
  /******/ var __webpack_exports__ = __webpack_require__.O(
    undefined,
    ["css/app"],
    () => __webpack_require__("./resources/sass/app.scss")
  );
  /******/ __webpack_exports__ = __webpack_require__.O(__webpack_exports__);
  /******/
  /******/
})();
